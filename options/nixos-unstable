{"boot.binfmtMiscRegistrations":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"default":{},"description":"Extra binary formats to register with the kernel.\nSee https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html for more details.\n","loc":["boot","binfmtMiscRegistrations"],"readOnly":false,"type":"attribute set of submodules"},"boot.binfmtMiscRegistrations.<name>.fixBinary":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"default":false,"description":"Whether to open the interpreter file as soon as the\nregistration is loaded, rather than waiting for a\nrelevant file to be invoked.\n\nSee the description of the 'F' flag in the kernel docs\nfor more details.\n","loc":["boot","binfmtMiscRegistrations","<name>","fixBinary"],"readOnly":false,"type":"boolean"},"boot.binfmtMiscRegistrations.<name>.interpreter":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"description":"The interpreter to invoke to run the program.\n\nNote that the actual registration will point to\n/run/binfmt/${name}, so the kernel interpreter length\nlimit doesn't apply.\n","loc":["boot","binfmtMiscRegistrations","<name>","interpreter"],"readOnly":false,"type":"path"},"boot.binfmtMiscRegistrations.<name>.magicOrExtension":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"description":"The magic number or extension to match on.","loc":["boot","binfmtMiscRegistrations","<name>","magicOrExtension"],"readOnly":false,"type":"string"},"boot.binfmtMiscRegistrations.<name>.mask":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"default":null,"description":"A mask to be ANDed with the byte sequence of the file before matching","loc":["boot","binfmtMiscRegistrations","<name>","mask"],"readOnly":false,"type":"null or string"},"boot.binfmtMiscRegistrations.<name>.matchCredentials":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"default":false,"description":"Whether to launch with the credentials and security\ntoken of the binary, not the interpreter (e.g. setuid\nbit).\n\nSee the description of the 'C' flag in the kernel docs\nfor more details.\n\nImplies/requires openBinary = true.\n","loc":["boot","binfmtMiscRegistrations","<name>","matchCredentials"],"readOnly":false,"type":"boolean"},"boot.binfmtMiscRegistrations.<name>.offset":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"default":null,"description":"The byte offset of the magic number used for recognition.","loc":["boot","binfmtMiscRegistrations","<name>","offset"],"readOnly":false,"type":"null or signed integer"},"boot.binfmtMiscRegistrations.<name>.openBinary":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"default":false,"description":"Whether to pass the binary to the interpreter as an open\nfile descriptor, instead of a path.\n","loc":["boot","binfmtMiscRegistrations","<name>","openBinary"],"readOnly":false,"type":"boolean"},"boot.binfmtMiscRegistrations.<name>.preserveArgvZero":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"default":false,"description":"Whether to pass the original argv[0] to the interpreter.\n\nSee the description of the 'P' flag in the kernel docs\nfor more details;\n","loc":["boot","binfmtMiscRegistrations","<name>","preserveArgvZero"],"readOnly":false,"type":"boolean"},"boot.binfmtMiscRegistrations.<name>.recognitionType":{"declarations":["nixos/modules/system/boot/binfmt.nix"],"default":"magic","description":"Whether to recognize executables by magic number or extension.","loc":["boot","binfmtMiscRegistrations","<name>","recognitionType"],"readOnly":false,"type":"one of \"magic\", \"extension\""},"boot.blacklistedKernelModules":{"declarations":["nixos/modules/system/boot/modprobe.nix"],"default":[],"description":"List of names of kernel modules that should not be loaded\nautomatically by the hardware probing code.\n","example":["cirrusfb","i2c_piix4"],"loc":["boot","blacklistedKernelModules"],"readOnly":false,"type":"list of strings"},"boot.cleanTmpDir":{"declarations":["nixos/modules/system/boot/tmp.nix"],"default":false,"description":"Whether to delete all files in <filename>/tmp</filename> during boot.\n","loc":["boot","cleanTmpDir"],"readOnly":false,"type":"boolean"},"boot.consoleLogLevel":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":4,"description":"The kernel console <literal>loglevel</literal>. All Kernel Messages with a log level smaller\nthan this setting will be printed to the console.\n","loc":["boot","consoleLogLevel"],"readOnly":false,"type":"signed integer"},"boot.crashDump.enable":{"declarations":["nixos/modules/misc/crashdump.nix"],"default":false,"description":"If enabled, NixOS will set up a kernel that will\nboot on crash, and leave the user in systemd rescue\nto be able to save the crashed kernel dump at\n/proc/vmcore.\nIt also activates the NMI watchdog.\n","loc":["boot","crashDump","enable"],"readOnly":false,"type":"boolean"},"boot.crashDump.kernelParams":{"declarations":["nixos/modules/misc/crashdump.nix"],"default":["1","boot.shell_on_fail"],"description":"Parameters that will be passed to the kernel kexec-ed on crash.\n","loc":["boot","crashDump","kernelParams"],"readOnly":false,"type":"list of strings"},"boot.crashDump.reservedMemory":{"declarations":["nixos/modules/misc/crashdump.nix"],"default":"128M","description":"The amount of memory reserved for the crashdump kernel.\nIf you choose a too high value, dmesg will mention\n\"crashkernel reservation failed\".\n","loc":["boot","crashDump","reservedMemory"],"readOnly":false,"type":"unspecified"},"boot.devShmSize":{"declarations":["nixos/modules/system/boot/stage-2.nix"],"default":"50%","description":"Size limit for the /dev/shm tmpfs. Look at mount(8), tmpfs size option,\nfor the accepted syntax.\n","example":"256m","loc":["boot","devShmSize"],"readOnly":false,"type":"string"},"boot.devSize":{"declarations":["nixos/modules/system/boot/stage-2.nix"],"default":"5%","description":"Size limit for the /dev tmpfs. Look at mount(8), tmpfs size option,\nfor the accepted syntax.\n","example":"32m","loc":["boot","devSize"],"readOnly":false,"type":"string"},"boot.earlyVconsoleSetup":{"declarations":["nixos/modules/tasks/kbd.nix"],"default":false,"description":"Enable setting font as early as possible (in initrd).\n","loc":["boot","earlyVconsoleSetup"],"readOnly":false,"type":"boolean"},"boot.enableContainers":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":true,"description":"Whether to enable support for nixos containers.\n","loc":["boot","enableContainers"],"readOnly":false,"type":"boolean"},"boot.extraModprobeConfig":{"declarations":["nixos/modules/system/boot/modprobe.nix"],"default":"","description":"Any additional configuration to be appended to the generated\n<filename>modprobe.conf</filename>.  This is typically used to\nspecify module options.  See\n<citerefentry><refentrytitle>modprobe.conf</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":"options parport_pc io=0x378 irq=7 dma=1\n","loc":["boot","extraModprobeConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.extraModulePackages":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":[],"description":"A list of additional packages supplying kernel modules.","example":{"_type":"literalExample","text":"[ pkgs.linuxPackages.nvidia_x11 ]"},"loc":["boot","extraModulePackages"],"readOnly":false,"type":"list of packages"},"boot.extraTTYs":{"declarations":["nixos/modules/tasks/kbd.nix"],"default":[],"description":"Tty (virtual console) devices, in addition to the consoles on\nwhich mingetty and syslogd run, that must be initialised.\nOnly useful if you have some program that you want to run on\nsome fixed console.  For example, the NixOS installation CD\nopens the manual in a web browser on console 7, so it sets\n<option>boot.extraTTYs</option> to <literal>[\"tty7\"]</literal>.\n","example":["tty8","tty9"],"loc":["boot","extraTTYs"],"readOnly":false,"type":"list of strings"},"boot.growPartition":{"declarations":["nixos/modules/system/boot/grow-partition.nix"],"default":false,"description":"Whether to enable grow the root partition on boot.","example":true,"loc":["boot","growPartition"],"readOnly":false,"type":"boolean"},"boot.hardwareScan":{"declarations":["nixos/modules/services/hardware/udev.nix"],"default":true,"description":"Whether to try to load kernel modules for all detected hardware.\nUsually this does a good job of providing you with the modules\nyou need, but sometimes it can crash the system or cause other\nnasty effects.\n","loc":["boot","hardwareScan"],"readOnly":false,"type":"boolean"},"boot.initrd.availableKernelModules":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":[],"description":"The set of kernel modules in the initial ramdisk used during the\nboot process.  This set must include all modules necessary for\nmounting the root device.  That is, it should include modules\nfor the physical device (e.g., SCSI drivers) and for the file\nsystem (e.g., ext3).  The set specified here is automatically\nclosed under the module dependency relation, i.e., all\ndependencies of the modules list here are included\nautomatically.  The modules listed here are available in the\ninitrd, but are only loaded on demand (e.g., the ext3 module is\nloaded automatically when an ext3 filesystem is mounted, and\nmodules for PCI devices are loaded when they match the PCI ID\nof a device in your system).  To force a module to be loaded,\ninclude it in <option>boot.initrd.kernelModules</option>.\n","example":["sata_nv","ext3"],"loc":["boot","initrd","availableKernelModules"],"readOnly":false,"type":"list of strings"},"boot.initrd.checkJournalingFS":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":true,"description":"Whether to run <command>fsck</command> on journaling filesystems such as ext3.\n","loc":["boot","initrd","checkJournalingFS"],"readOnly":false,"type":"boolean"},"boot.initrd.kernelModules":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":[],"description":"List of modules that are always loaded by the initrd.","loc":["boot","initrd","kernelModules"],"readOnly":false,"type":"list of strings"},"boot.initrd.luks.cryptoModules":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":["aes","aes_generic","blowfish","twofish","serpent","cbc","xts","lrw","sha1","sha256","sha512","aes_x86_64"],"description":"A list of cryptographic kernel modules needed to decrypt the root device(s).\nThe default includes all common modules.\n","loc":["boot","initrd","luks","cryptoModules"],"readOnly":false,"type":"list of strings"},"boot.initrd.luks.devices":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":{},"description":"The encrypted disk that should be opened before the root\nfilesystem is mounted. Both LVM-over-LUKS and LUKS-over-LVM\nsetups are supported. The unencrypted devices can be accessed as\n<filename>/dev/mapper/<replaceable>name</replaceable></filename>.\n","example":{"luksroot":{"device":"/dev/disk/by-uuid/430e9eff-d852-4f68-aa3b-2fa3599ebe08"}},"loc":["boot","initrd","luks","devices"],"readOnly":false,"type":"list or attribute set of submodules"},"boot.initrd.luks.devices.<name?>.allowDiscards":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":false,"description":"Whether to allow TRIM requests to the underlying device. This option\nhas security implications; please read the LUKS documentation before\nactivating it.\n","loc":["boot","initrd","luks","devices","<name?>","allowDiscards"],"readOnly":false,"type":"boolean"},"boot.initrd.luks.devices.<name?>.device":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"description":"Path of the underlying encrypted block device.","example":"/dev/disk/by-uuid/430e9eff-d852-4f68-aa3b-2fa3599ebe08","loc":["boot","initrd","luks","devices","<name?>","device"],"readOnly":false,"type":"string"},"boot.initrd.luks.devices.<name?>.fallbackToPassword":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":false,"description":"Whether to fallback to interactive passphrase prompt if the keyfile\ncannot be found. This will prevent unattended boot should the keyfile\ngo missing.\n","loc":["boot","initrd","luks","devices","<name?>","fallbackToPassword"],"readOnly":false,"type":"boolean"},"boot.initrd.luks.devices.<name?>.header":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":null,"description":"The name of the file or block device that\nshould be used as header for the encrypted device.\n","example":"/root/header.img","loc":["boot","initrd","luks","devices","<name?>","header"],"readOnly":false,"type":"null or string"},"boot.initrd.luks.devices.<name?>.keyFile":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":null,"description":"The name of the file (can be a raw device or a partition) that\nshould be used as the decryption key for the encrypted device. If\nnot specified, you will be prompted for a passphrase instead.\n","example":"/dev/sdb1","loc":["boot","initrd","luks","devices","<name?>","keyFile"],"readOnly":false,"type":"null or string"},"boot.initrd.luks.devices.<name?>.keyFileOffset":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":null,"description":"The offset of the key file. Use this in combination with\n<literal>keyFileSize</literal> to use part of a file as key file\n(often the case if a raw device or partition is used as a key file).\nIf not specified, the key begins at the first byte of\n<literal>keyFile</literal>.\n","example":4096,"loc":["boot","initrd","luks","devices","<name?>","keyFileOffset"],"readOnly":false,"type":"null or signed integer"},"boot.initrd.luks.devices.<name?>.keyFileSize":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":null,"description":"The size of the key file. Use this if only the beginning of the\nkey file should be used as a key (often the case if a raw device\nor partition is used as key file). If not specified, the whole\n<literal>keyFile</literal> will be used decryption, instead of just\nthe first <literal>keyFileSize</literal> bytes.\n","example":4096,"loc":["boot","initrd","luks","devices","<name?>","keyFileSize"],"readOnly":false,"type":"null or signed integer"},"boot.initrd.luks.devices.<name?>.preLVM":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":true,"description":"Whether the luksOpen will be attempted before LVM scan or after it.","loc":["boot","initrd","luks","devices","<name?>","preLVM"],"readOnly":false,"type":"boolean"},"boot.initrd.luks.devices.<name?>.yubikey":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":null,"description":"The options to use for this LUKS device in Yubikey-PBA.\nIf null (the default), Yubikey-PBA will be disabled for this device.\n","loc":["boot","initrd","luks","devices","<name?>","yubikey"],"readOnly":false,"type":"null or submodule"},"boot.initrd.luks.devices.<name?>.yubikey.gracePeriod":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":10,"description":"Time in seconds to wait for the Yubikey.","loc":["boot","initrd","luks","devices","<name?>","yubikey","gracePeriod"],"readOnly":false,"type":"signed integer"},"boot.initrd.luks.devices.<name?>.yubikey.iterationStep":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":0,"description":"How much the iteration count for PBKDF2 is increased at each successful authentication.","loc":["boot","initrd","luks","devices","<name?>","yubikey","iterationStep"],"readOnly":false,"type":"signed integer"},"boot.initrd.luks.devices.<name?>.yubikey.keyLength":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":64,"description":"Length of the LUKS slot key derived with PBKDF2 in byte.","loc":["boot","initrd","luks","devices","<name?>","yubikey","keyLength"],"readOnly":false,"type":"signed integer"},"boot.initrd.luks.devices.<name?>.yubikey.saltLength":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":16,"description":"Length of the new salt in byte (64 is the effective maximum).","loc":["boot","initrd","luks","devices","<name?>","yubikey","saltLength"],"readOnly":false,"type":"signed integer"},"boot.initrd.luks.devices.<name?>.yubikey.slot":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":2,"description":"Which slot on the Yubikey to challenge.","loc":["boot","initrd","luks","devices","<name?>","yubikey","slot"],"readOnly":false,"type":"signed integer"},"boot.initrd.luks.devices.<name?>.yubikey.storage.device":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":"/dev/sda1","description":"An unencrypted device that will temporarily be mounted in stage-1.\nMust contain the current salt to create the challenge for this LUKS device.\n","loc":["boot","initrd","luks","devices","<name?>","yubikey","storage","device"],"readOnly":false,"type":"path"},"boot.initrd.luks.devices.<name?>.yubikey.storage.fsType":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":"vfat","description":"The filesystem of the unencrypted device.","loc":["boot","initrd","luks","devices","<name?>","yubikey","storage","fsType"],"readOnly":false,"type":"string"},"boot.initrd.luks.devices.<name?>.yubikey.storage.path":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":"/crypt-storage/default","description":"Absolute path of the salt on the unencrypted device with\nthat device's root directory as \"/\".\n","loc":["boot","initrd","luks","devices","<name?>","yubikey","storage","path"],"readOnly":false,"type":"string"},"boot.initrd.luks.devices.<name?>.yubikey.twoFactor":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":true,"description":"Whether to use a passphrase and a Yubikey (true), or only a Yubikey (false).","loc":["boot","initrd","luks","devices","<name?>","yubikey","twoFactor"],"readOnly":false,"type":"boolean"},"boot.initrd.luks.mitigateDMAAttacks":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":true,"description":"Unless enabled, encryption keys can be easily recovered by an attacker with physical\naccess to any machine with PCMCIA, ExpressCard, ThunderBolt or FireWire port.\nMore information is available at <link xlink:href=\"http://en.wikipedia.org/wiki/DMA_attack\"/>.\n\nThis option blacklists FireWire drivers, but doesn't remove them. You can manually\nload the drivers if you need to use a FireWire device, but don't forget to unload them!\n","loc":["boot","initrd","luks","mitigateDMAAttacks"],"readOnly":false,"type":"boolean"},"boot.initrd.luks.reusePassphrases":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":true,"description":"When opening a new LUKS device try reusing last successful\npassphrase.\n\nUseful for mounting a number of devices that use the same\npassphrase without retyping it several times.\n\nSuch setup can be useful if you use <command>cryptsetup\nluksSuspend</command>. Different LUKS devices will still have\ndifferent master keys even when using the same passphrase.\n","loc":["boot","initrd","luks","reusePassphrases"],"readOnly":false,"type":"boolean"},"boot.initrd.luks.yubikeySupport":{"declarations":["nixos/modules/system/boot/luksroot.nix"],"default":false,"description":"Enables support for authenticating with a Yubikey on LUKS devices.\nSee the NixOS wiki for information on how to properly setup a LUKS device\nand a Yubikey to work with this feature.\n","loc":["boot","initrd","luks","yubikeySupport"],"readOnly":false,"type":"boolean"},"boot.initrd.mdadmConf":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":"","description":"Contents of <filename>/etc/mdadm.conf</filename> in stage 1.\n","loc":["boot","initrd","mdadmConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.initrd.network.enable":{"declarations":["nixos/modules/system/boot/initrd-network.nix"],"default":false,"description":"Add network connectivity support to initrd. The network may be\nconfigured using the <literal>ip</literal> kernel parameter,\nas described in <link\nxlink:href=\"https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt\">the\nkernel documentation</link>.  Otherwise, if\n<option>networking.useDHCP</option> is enabled, an IP address\nis acquired using DHCP.\n\nYou should add the module(s) required for your network card to\nboot.initrd.availableKernelModules. lspci -v -s &lt;ethernet controller&gt;\nwill tell you which.\n","loc":["boot","initrd","network","enable"],"readOnly":false,"type":"boolean"},"boot.initrd.network.postCommands":{"declarations":["nixos/modules/system/boot/initrd-network.nix"],"default":"","description":"Shell commands to be executed after stage 1 of the\nboot has initialised the network.\n","loc":["boot","initrd","network","postCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.initrd.network.ssh.authorizedKeys":{"declarations":["nixos/modules/system/boot/initrd-ssh.nix"],"default":[],"description":"Authorized keys for the root user on initrd.\n","loc":["boot","initrd","network","ssh","authorizedKeys"],"readOnly":false,"type":"list of strings"},"boot.initrd.network.ssh.enable":{"declarations":["nixos/modules/system/boot/initrd-ssh.nix"],"default":false,"description":"Start SSH service during initrd boot. It can be used to debug failing\nboot on a remote server, enter pasphrase for an encrypted partition etc.\nService is killed when stage-1 boot is finished.\n","loc":["boot","initrd","network","ssh","enable"],"readOnly":false,"type":"boolean"},"boot.initrd.network.ssh.hostDSSKey":{"declarations":["nixos/modules/system/boot/initrd-ssh.nix"],"default":null,"description":"DSS SSH private key file in the Dropbear format.\n\nWARNING: Unless your bootloader supports initrd secrets, this key is\ncontained insecurely in the global Nix store. Do NOT use your regular\nSSH host private keys for this purpose or you'll expose them to\nregular users!\n","loc":["boot","initrd","network","ssh","hostDSSKey"],"readOnly":false,"type":"null or path"},"boot.initrd.network.ssh.hostECDSAKey":{"declarations":["nixos/modules/system/boot/initrd-ssh.nix"],"default":null,"description":"ECDSA SSH private key file in the Dropbear format.\n\nWARNING: Unless your bootloader supports initrd secrets, this key is\ncontained insecurely in the global Nix store. Do NOT use your regular\nSSH host private keys for this purpose or you'll expose them to\nregular users!\n","loc":["boot","initrd","network","ssh","hostECDSAKey"],"readOnly":false,"type":"null or path"},"boot.initrd.network.ssh.hostRSAKey":{"declarations":["nixos/modules/system/boot/initrd-ssh.nix"],"default":null,"description":"RSA SSH private key file in the Dropbear format.\n\nWARNING: Unless your bootloader supports initrd secrets, this key is\ncontained insecurely in the global Nix store. Do NOT use your regular\nSSH host private keys for this purpose or you'll expose them to\nregular users!\n","loc":["boot","initrd","network","ssh","hostRSAKey"],"readOnly":false,"type":"null or path"},"boot.initrd.network.ssh.port":{"declarations":["nixos/modules/system/boot/initrd-ssh.nix"],"default":22,"description":"Port on which SSH initrd service should listen.\n","loc":["boot","initrd","network","ssh","port"],"readOnly":false,"type":"signed integer"},"boot.initrd.network.ssh.shell":{"declarations":["nixos/modules/system/boot/initrd-ssh.nix"],"default":"/bin/ash","description":"Login shell of the remote user. Can be used to limit actions user can do.\n","loc":["boot","initrd","network","ssh","shell"],"readOnly":false,"type":"string"},"boot.initrd.network.udhcpc.extraArgs":{"declarations":["nixos/modules/system/boot/initrd-network.nix"],"default":[],"description":"Additional command-line arguments passed verbatim to udhcpc if\n<option>boot.initrd.network.enable</option> and <option>networking.useDHCP</option>\nare enabled.\n","loc":["boot","initrd","network","udhcpc","extraArgs"],"readOnly":false,"type":"list of strings"},"boot.initrd.postDeviceCommands":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":"","description":"Shell commands to be executed immediately after stage 1 of the\nboot has loaded kernel modules and created device nodes in\n<filename>/dev</filename>.\n","loc":["boot","initrd","postDeviceCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.initrd.postMountCommands":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":"","description":"Shell commands to be executed immediately after the stage 1\nfilesystems have been mounted.\n","loc":["boot","initrd","postMountCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.initrd.preDeviceCommands":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":"","description":"Shell commands to be executed before udev is started to create\ndevice nodes.\n","loc":["boot","initrd","preDeviceCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.initrd.preFailCommands":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":"","description":"Shell commands to be executed before the failure prompt is shown.\n","loc":["boot","initrd","preFailCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.initrd.preLVMCommands":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":"","description":"Shell commands to be executed immediately before LVM discovery.\n","loc":["boot","initrd","preLVMCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.initrd.prepend":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":[],"description":"Other initrd files to prepend to the final initrd we are building.\n","loc":["boot","initrd","prepend"],"readOnly":false,"type":"list of strings"},"boot.initrd.supportedFilesystems":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":[],"description":"Names of supported filesystem types in the initial ramdisk.","example":["btrfs"],"loc":["boot","initrd","supportedFilesystems"],"readOnly":false,"type":"list of strings"},"boot.isContainer":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":false,"description":"Whether this NixOS machine is a lightweight container running\nin another NixOS system.\n","loc":["boot","isContainer"],"readOnly":false,"type":"boolean"},"boot.kernel.sysctl":{"declarations":["nixos/modules/config/sysctl.nix"],"default":{},"description":"Runtime parameters of the Linux kernel, as set by\n<citerefentry><refentrytitle>sysctl</refentrytitle>\n<manvolnum>8</manvolnum></citerefentry>.  Note that sysctl\nparameters names must be enclosed in quotes\n(e.g. <literal>\"vm.swappiness\"</literal> instead of\n<literal>vm.swappiness</literal>).  The value of each\nparameter may be a string, integer, boolean, or null\n(signifying the option will not appear at all).\n","example":{"_type":"literalExample","text":"{ \"net.ipv4.tcp_syncookies\" = false; \"vm.swappiness\" = 60; }\n"},"loc":["boot","kernel","sysctl"],"readOnly":false,"type":"attribute set of sysctl option values"},"boot.kernelModules":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":[],"description":"The set of kernel modules to be loaded in the second stage of\nthe boot process.  Note that modules that are needed to\nmount the root file system should be added to\n<option>boot.initrd.availableKernelModules</option> or\n<option>boot.initrd.kernelModules</option>.\n","loc":["boot","kernelModules"],"readOnly":false,"type":"list of strings"},"boot.kernelPackages":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":"pkgs.linuxPackages","description":"This option allows you to override the Linux kernel used by\nNixOS.  Since things like external kernel module packages are\ntied to the kernel you're using, it also overrides those.\nThis option is a function that takes Nixpkgs as an argument\n(as a convenience), and returns an attribute set containing at\nthe very least an attribute <varname>kernel</varname>.\nAdditional attributes may be needed depending on your\nconfiguration.  For instance, if you use the NVIDIA X driver,\nthen it also needs to contain an attribute\n<varname>nvidia_x11</varname>.\n","example":{"_type":"literalExample","text":"pkgs.linuxPackages_2_6_25"},"loc":["boot","kernelPackages"],"readOnly":false,"type":"unspecified"},"boot.kernelParams":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":[],"description":"Parameters added to the kernel command line.","loc":["boot","kernelParams"],"readOnly":false,"type":"list of strings"},"boot.kernelPatches":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":[],"description":"A list of additional patches to apply to the kernel.","example":{"_type":"literalExample","text":"[ pkgs.kernelPatches.ubuntu_fan_4_4 ]"},"loc":["boot","kernelPatches"],"readOnly":false,"type":"list of attribute sets"},"boot.loader.efi.canTouchEfiVariables":{"declarations":["nixos/modules/system/boot/loader/efi.nix"],"default":false,"description":"Whether the installation process is allowed to modify EFI boot variables.","loc":["boot","loader","efi","canTouchEfiVariables"],"readOnly":false,"type":"boolean"},"boot.loader.efi.efiSysMountPoint":{"declarations":["nixos/modules/system/boot/loader/efi.nix"],"default":"/boot","description":"Where the EFI System Partition is mounted.","loc":["boot","loader","efi","efiSysMountPoint"],"readOnly":false,"type":"string"},"boot.loader.generationsDir.copyKernels":{"declarations":["nixos/modules/system/boot/loader/generations-dir/generations-dir.nix"],"default":false,"description":"Whether copy the necessary boot files into /boot, so\n/nix/store is not needed by the boot loader.\n","loc":["boot","loader","generationsDir","copyKernels"],"readOnly":false,"type":"boolean"},"boot.loader.generationsDir.enable":{"declarations":["nixos/modules/system/boot/loader/generations-dir/generations-dir.nix"],"default":false,"description":"Whether to create symlinks to the system generations under\n<literal>/boot</literal>.  When enabled,\n<literal>/boot/default/kernel</literal>,\n<literal>/boot/default/initrd</literal>, etc., are updated to\npoint to the current generation's kernel image, initial RAM\ndisk, and other bootstrap files.\n\nThis optional is not necessary with boot loaders such as GNU GRUB\nfor which the menu is updated to point to the latest bootstrap\nfiles.  However, it is needed for U-Boot on platforms where the\nboot command line is stored in flash memory rather than in a\nmenu file.\n","loc":["boot","loader","generationsDir","enable"],"readOnly":false,"type":"boolean"},"boot.loader.generic-extlinux-compatible.configurationLimit":{"declarations":["nixos/modules/system/boot/loader/generic-extlinux-compatible"],"default":20,"description":"Maximum number of configurations in the boot menu.\n","example":10,"loc":["boot","loader","generic-extlinux-compatible","configurationLimit"],"readOnly":false,"type":"signed integer"},"boot.loader.generic-extlinux-compatible.enable":{"declarations":["nixos/modules/system/boot/loader/generic-extlinux-compatible"],"default":false,"description":"Whether to generate an extlinux-compatible configuration file\nunder <literal>/boot/extlinux.conf</literal>.  For instance,\nU-Boot's generic distro boot support uses this file format.\n\nSee <link xlink:href=\"http://git.denx.de/?p=u-boot.git;a=blob;f=doc/README.distro;hb=refs/heads/master\">U-boot's documentation</link>\nfor more information.\n","loc":["boot","loader","generic-extlinux-compatible","enable"],"readOnly":false,"type":"boolean"},"boot.loader.grub.backgroundColor":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":null,"description":"Background color to be used for GRUB to fill the areas the image isn't filling.\n\n<note><para>\nThis options has no effect for GRUB 1.\n</para></note>\n","example":"#7EBAE4","loc":["boot","loader","grub","backgroundColor"],"readOnly":false,"type":"null or Concatenated string"},"boot.loader.grub.configurationLimit":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":100,"description":"Maximum of configurations in boot menu. GRUB has problems when\nthere are too many entries.\n","example":120,"loc":["boot","loader","grub","configurationLimit"],"readOnly":false,"type":"signed integer"},"boot.loader.grub.configurationName":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"","description":"GRUB entry name instead of default.\n","example":"Stable 2.6.21","loc":["boot","loader","grub","configurationName"],"readOnly":false,"type":"string"},"boot.loader.grub.copyKernels":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Whether the GRUB menu builder should copy kernels and initial\nramdisks to /boot.  This is done automatically if /boot is\non a different partition than /.\n","loc":["boot","loader","grub","copyKernels"],"readOnly":false,"type":"boolean"},"boot.loader.grub.default":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"0","description":"Index of the default menu item to be booted.\n","loc":["boot","loader","grub","default"],"readOnly":false,"type":"signed integer or string"},"boot.loader.grub.device":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"","description":"The device on which the GRUB boot loader will be installed.\nThe special value <literal>nodev</literal> means that a GRUB\nboot menu will be generated, but GRUB itself will not\nactually be installed.  To install GRUB on multiple devices,\nuse <literal>boot.loader.grub.devices</literal>.\n","example":"/dev/disk/by-id/wwn-0x500001234567890a","loc":["boot","loader","grub","device"],"readOnly":false,"type":"string"},"boot.loader.grub.devices":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":[],"description":"The devices on which the boot loader, GRUB, will be\ninstalled. Can be used instead of <literal>device</literal> to\ninstall GRUB onto multiple devices.\n","example":["/dev/disk/by-id/wwn-0x500001234567890a"],"loc":["boot","loader","grub","devices"],"readOnly":false,"type":"list of strings"},"boot.loader.grub.efiInstallAsRemovable":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Whether to invoke <literal>grub-install</literal> with\n<literal>--removable</literal>.</para>\n\n<para>Unless you turn this on, GRUB will install itself somewhere in\n<literal>boot.loader.efi.efiSysMountPoint</literal> (exactly where\ndepends on other config variables). If you've set\n<literal>boot.loader.efi.canTouchEfiVariables</literal> *AND* you\nare currently booted in UEFI mode, then GRUB will use\n<literal>efibootmgr</literal> to modify the boot order in the\nEFI variables of your firmware to include this location. If you are\n*not* booted in UEFI mode at the time GRUB is being installed, the\nNVRAM will not be modified, and your system will not find GRUB at\nboot time. However, GRUB will still return success so you may miss\nthe warning that gets printed (\"<literal>efibootmgr: EFI variables\nare not supported on this system.</literal>\").</para>\n\n<para>If you turn this feature on, GRUB will install itself in a\nspecial location within <literal>efiSysMountPoint</literal> (namely\n<literal>EFI/boot/boot$arch.efi</literal>) which the firmwares\nare hardcoded to try first, regardless of NVRAM EFI variables.</para>\n\n<para>To summarize, turn this on if:\n<itemizedlist>\n  <listitem><para>You are installing NixOS and want it to boot in UEFI mode,\n  but you are currently booted in legacy mode</para></listitem>\n  <listitem><para>You want to make a drive that will boot regardless of\n  the NVRAM state of the computer (like a USB \"removable\" drive)</para></listitem>\n  <listitem><para>You simply dislike the idea of depending on NVRAM\n  state to make your drive bootable</para></listitem>\n</itemizedlist>\n","loc":["boot","loader","grub","efiInstallAsRemovable"],"readOnly":false,"type":"boolean"},"boot.loader.grub.efiSupport":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Whether GRUB should be built with EFI support.\nEFI support is only available for GRUB v2.\nThis option is ignored for GRUB v1.\n","loc":["boot","loader","grub","efiSupport"],"readOnly":false,"type":"boolean"},"boot.loader.grub.enable":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":true,"description":"Whether to enable the GNU GRUB boot loader.\n","loc":["boot","loader","grub","enable"],"readOnly":false,"type":"boolean"},"boot.loader.grub.enableCryptodisk":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Enable support for encrypted partitions. GRUB should automatically\nunlock the correct encrypted partition and look for filesystems.\n","loc":["boot","loader","grub","enableCryptodisk"],"readOnly":false,"type":"boolean"},"boot.loader.grub.extraConfig":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"","description":"Additional GRUB commands inserted in the configuration file\njust before the menu entries.\n","example":"serial; terminal_output.serial","loc":["boot","loader","grub","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.loader.grub.extraEntries":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"","description":"Any additional entries you want added to the GRUB boot menu.\n","example":"# GRUB 1 example (not GRUB 2 compatible)\ntitle Windows\n  chainloader (hd0,1)+1\n\n# GRUB 2 example\nmenuentry \"Windows 7\" {\n  chainloader (hd0,4)+1\n}\n\n# GRUB 2 with UEFI example, chainloading another distro\nmenuentry \"Fedora\" {\n  set root=(hd1,1)\n  chainloader /efi/fedora/grubx64.efi\n}\n","loc":["boot","loader","grub","extraEntries"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.loader.grub.extraEntriesBeforeNixOS":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Whether extraEntries are included before the default option.\n","loc":["boot","loader","grub","extraEntriesBeforeNixOS"],"readOnly":false,"type":"boolean"},"boot.loader.grub.extraFiles":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":{},"description":"A set of files to be copied to <filename>/boot</filename>.\nEach attribute name denotes the destination file name in\n<filename>/boot</filename>, while the corresponding\nattribute value specifies the source file.\n","example":{"_type":"literalExample","text":"{ \"memtest.bin\" = \"${pkgs.memtest86plus}/memtest.bin\"; }\n"},"loc":["boot","loader","grub","extraFiles"],"readOnly":false,"type":"attribute set of paths"},"boot.loader.grub.extraInitrd":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":null,"description":"The path to a second initramfs to be supplied to the kernel.\nThis ramfs will not be copied to the store, so that it can\ncontain secrets such as LUKS keyfiles or ssh keys.\nThis implies that rolling back to a previous configuration\nwon't rollback the state of this file.\n","example":"/boot/extra_initramfs.gz","loc":["boot","loader","grub","extraInitrd"],"readOnly":false,"type":"null or path"},"boot.loader.grub.extraPerEntryConfig":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"","description":"Additional GRUB commands inserted in the configuration file\nat the start of each NixOS menu entry.\n","example":"root (hd0)","loc":["boot","loader","grub","extraPerEntryConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.loader.grub.extraPrepareConfig":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"","description":"Additional bash commands to be run at the script that\nprepares the GRUB menu entries.\n","loc":["boot","loader","grub","extraPrepareConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.loader.grub.font":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"${pkgs.grub2}/share/grub/unicode.pf2","description":"Path to a TrueType, OpenType, or pf2 font to be used by Grub.\n","loc":["boot","loader","grub","font"],"readOnly":false,"type":"null or path"},"boot.loader.grub.fontSize":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":null,"description":"Font size for the grub menu. Ignored unless <literal>font</literal>\nis set to a ttf or otf font.\n","example":{"_type":"literalExample","text":16},"loc":["boot","loader","grub","fontSize"],"readOnly":false,"type":"null or signed integer"},"boot.loader.grub.forceInstall":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Whether to try and forcibly install GRUB even if problems are\ndetected. It is not recommended to enable this unless you know what\nyou are doing.\n","loc":["boot","loader","grub","forceInstall"],"readOnly":false,"type":"boolean"},"boot.loader.grub.fsIdentifier":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"uuid","description":"Determines how GRUB will identify devices when generating the\nconfiguration file. A value of uuid / label signifies that grub\nwill always resolve the uuid or label of the device before using\nit in the configuration. A value of provided means that GRUB will\nuse the device name as show in <command>df</command> or\n<command>mount</command>. Note, zfs zpools / datasets are ignored\nand will always be mounted using their labels.\n","loc":["boot","loader","grub","fsIdentifier"],"readOnly":false,"type":"one of \"uuid\", \"label\", \"provided\""},"boot.loader.grub.gfxmodeBios":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"1024x768","description":"The gfxmode to pass to GRUB when loading a graphical boot interface under BIOS.\n","example":"auto","loc":["boot","loader","grub","gfxmodeBios"],"readOnly":false,"type":"string"},"boot.loader.grub.gfxmodeEfi":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"auto","description":"The gfxmode to pass to GRUB when loading a graphical boot interface under EFI.\n","example":"1024x768","loc":["boot","loader","grub","gfxmodeEfi"],"readOnly":false,"type":"string"},"boot.loader.grub.ipxe":{"declarations":["nixos/modules/system/boot/loader/grub/ipxe.nix"],"default":{},"description":"Set of iPXE scripts available for\nbooting from the GRUB boot menu.\n","example":{"_type":"literalExample","text":"{ demo = ''\n    #!ipxe\n    dhcp\n    chain http://boot.ipxe.org/demo/boot.php\n  '';\n}\n"},"loc":["boot","loader","grub","ipxe"],"readOnly":false,"type":"attribute set of path or strings"},"boot.loader.grub.memtest86.enable":{"declarations":["nixos/modules/system/boot/loader/grub/memtest.nix"],"default":false,"description":"Make Memtest86+, a memory testing program, available from the\nGRUB boot menu.\n","loc":["boot","loader","grub","memtest86","enable"],"readOnly":false,"type":"boolean"},"boot.loader.grub.memtest86.params":{"declarations":["nixos/modules/system/boot/loader/grub/memtest.nix"],"default":[],"description":"Parameters added to the Memtest86+ command line. As of memtest86+ 5.01\nthe following list of (apparently undocumented) parameters are\naccepted:\n\n<itemizedlist>\n\n<listitem>\n  <para><literal>console=...</literal>, set up a serial console.\n  Examples:\n  <literal>console=ttyS0</literal>,\n  <literal>console=ttyS0,9600</literal> or\n  <literal>console=ttyS0,115200n8</literal>.</para>\n</listitem>\n\n<listitem>\n  <para><literal>btrace</literal>, enable boot trace.</para>\n</listitem>\n\n<listitem>\n  <para><literal>maxcpus=N</literal>, limit number of CPUs.</para>\n</listitem>\n\n<listitem>\n  <para><literal>onepass</literal>, run one pass and exit if there\n  are no errors.</para>\n</listitem>\n\n<listitem>\n  <para><literal>tstlist=...</literal>, list of tests to run.\n  Example: <literal>0,1,2</literal>.</para>\n</listitem>\n\n<listitem>\n  <para><literal>cpumask=...</literal>, set a CPU mask, to select CPUs\n  to use for testing.</para>\n</listitem>\n\n</itemizedlist>\n\nThis list of command line options was obtained by reading the\nMemtest86+ source code.\n","example":["console=ttyS0,115200"],"loc":["boot","loader","grub","memtest86","params"],"readOnly":false,"type":"list of strings"},"boot.loader.grub.mirroredBoots":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":[],"description":"Mirror the boot configuration to multiple partitions and install grub\nto the respective devices corresponding to those partitions.\n","example":[{"devices":["/dev/disk/by-id/wwn-0x500001234567890a"],"path":"/boot1"},{"devices":["/dev/disk/by-id/wwn-0x500009876543210a"],"path":"/boot2"}],"loc":["boot","loader","grub","mirroredBoots"],"readOnly":false,"type":"list of submodules"},"boot.loader.grub.mirroredBoots.*.devices":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":[],"description":"The path to the devices which will have the GRUB MBR written.\nNote these are typically device paths and not paths to partitions.\n","example":["/dev/disk/by-id/wwn-0x500001234567890a","/dev/disk/by-id/wwn-0x500009876543210a"],"loc":["boot","loader","grub","mirroredBoots","*","devices"],"readOnly":false,"type":"list of strings"},"boot.loader.grub.mirroredBoots.*.efiBootloaderId":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":null,"description":"The id of the bootloader to store in efi nvram.\nThe default is to name it NixOS and append the path or efiSysMountPoint.\nThis is only used if <literal>boot.loader.efi.canTouchEfiVariables</literal> is true.\n","example":"NixOS-fsid","loc":["boot","loader","grub","mirroredBoots","*","efiBootloaderId"],"readOnly":false,"type":"null or string"},"boot.loader.grub.mirroredBoots.*.efiSysMountPoint":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":null,"description":"The path to the efi system mount point. Usually this is the same\npartition as the above path and can be left as null.\n","example":"/boot1/efi","loc":["boot","loader","grub","mirroredBoots","*","efiSysMountPoint"],"readOnly":false,"type":"null or string"},"boot.loader.grub.mirroredBoots.*.path":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"description":"The path to the boot directory where GRUB will be written. Generally\nthis boot path should double as an EFI path.\n","example":"/boot1","loc":["boot","loader","grub","mirroredBoots","*","path"],"readOnly":false,"type":"string"},"boot.loader.grub.splashImage":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"description":"Background image used for GRUB.\nSet to <literal>null</literal> to run GRUB in text mode.\n\n<note><para>\nFor grub 1:\nIt must be a 640x480,\n14-colour image in XPM format, optionally compressed with\n<command>gzip</command> or <command>bzip2</command>.\n</para></note>\n\n<note><para>\nFor grub 2:\nFile must be one of .png, .tga, .jpg, or .jpeg. JPEG images must\nnot be progressive.\nThe image will be scaled if necessary to fit the screen.\n</para></note>\n","example":{"_type":"literalExample","text":"./my-background.png"},"loc":["boot","loader","grub","splashImage"],"readOnly":false,"type":"null or path"},"boot.loader.grub.splashMode":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"stretch","description":"Whether to stretch the image or show the image in the top-left corner unstretched.\n\n<note><para>\nThis options has no effect for GRUB 1.\n</para></note>\n","loc":["boot","loader","grub","splashMode"],"readOnly":false,"type":"one of \"normal\", \"stretch\""},"boot.loader.grub.storePath":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"/nix/store","description":"Path to the Nix store when looking for kernels at boot.\nOnly makes sense when copyKernels is false.\n","loc":["boot","loader","grub","storePath"],"readOnly":false,"type":"string"},"boot.loader.grub.trustedBoot.enable":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Enable trusted boot. GRUB will measure all critical components during\nthe boot process to offer TCG (TPM) support.\n","loc":["boot","loader","grub","trustedBoot","enable"],"readOnly":false,"type":"boolean"},"boot.loader.grub.trustedBoot.isHPLaptop":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Use a special version of TrustedGRUB that is needed by some HP laptops\nand works only for the HP laptops.\n","loc":["boot","loader","grub","trustedBoot","isHPLaptop"],"readOnly":false,"type":"boolean"},"boot.loader.grub.trustedBoot.systemHasTPM":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":"","description":"Assertion that the target system has an activated TPM. It is a safety\ncheck before allowing the activation of 'trustedBoot.enable'. TrustedBoot\nWILL FAIL TO BOOT YOUR SYSTEM if no TPM is available.\n","example":"YES_TPM_is_activated","loc":["boot","loader","grub","trustedBoot","systemHasTPM"],"readOnly":false,"type":"Concatenated string"},"boot.loader.grub.useOSProber":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"If set to true, append entries for other OSs detected by os-prober.\n","loc":["boot","loader","grub","useOSProber"],"readOnly":false,"type":"boolean"},"boot.loader.grub.version":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":2,"description":"The version of GRUB to use: <literal>1</literal> for GRUB\nLegacy (versions 0.9x), or <literal>2</literal> (the\ndefault) for GRUB 2.\n","example":1,"loc":["boot","loader","grub","version"],"readOnly":false,"type":"signed integer"},"boot.loader.grub.zfsSupport":{"declarations":["nixos/modules/system/boot/loader/grub/grub.nix"],"default":false,"description":"Whether GRUB should be built against libzfs.\nZFS support is only available for GRUB v2.\nThis option is ignored for GRUB v1.\n","loc":["boot","loader","grub","zfsSupport"],"readOnly":false,"type":"boolean"},"boot.loader.initScript.enable":{"declarations":["nixos/modules/system/boot/loader/init-script/init-script.nix"],"default":false,"description":"Some systems require a /sbin/init script which is started.\nOr having it makes starting NixOS easier.\nThis applies to some kind of hosting services and user mode linux.\n\nAdditionally this script will create\n/boot/init-other-configurations-contents.txt containing\ncontents of remaining configurations. You can copy paste them into\n/sbin/init manually running a rescue system or such.\n","loc":["boot","loader","initScript","enable"],"readOnly":false,"type":"boolean"},"boot.loader.raspberryPi.enable":{"declarations":["nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix"],"default":false,"description":"Whether to create files with the system generations in\n<literal>/boot</literal>.\n<literal>/boot/old</literal> will hold files from old generations.\n","loc":["boot","loader","raspberryPi","enable"],"readOnly":false,"type":"boolean"},"boot.loader.raspberryPi.firmwareConfig":{"declarations":["nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix"],"default":null,"description":"Extra options that will be appended to <literal>/boot/config.txt</literal> file.\nFor possible values, see: https://www.raspberrypi.org/documentation/configuration/config-txt/\n","loc":["boot","loader","raspberryPi","firmwareConfig"],"readOnly":false,"type":"null or Concatenated string"},"boot.loader.raspberryPi.uboot.configurationLimit":{"declarations":["nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix"],"default":20,"description":"Maximum number of configurations in the boot menu.\n","example":10,"loc":["boot","loader","raspberryPi","uboot","configurationLimit"],"readOnly":false,"type":"signed integer"},"boot.loader.raspberryPi.uboot.enable":{"declarations":["nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix"],"default":false,"description":"Enable using uboot as bootmanager for the raspberry pi.\n","loc":["boot","loader","raspberryPi","uboot","enable"],"readOnly":false,"type":"boolean"},"boot.loader.raspberryPi.version":{"declarations":["nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix"],"default":2,"description":"","loc":["boot","loader","raspberryPi","version"],"readOnly":false,"type":"one of 1, 2, 3"},"boot.loader.systemd-boot.consoleMode":{"declarations":["nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix"],"default":"keep","description":"The resolution of the console. The following values are valid:\n</para>\n<para>\n<itemizedlist>\n  <listitem><para>\n    <literal>\"0\"</literal>: Standard UEFI 80x25 mode\n  </para></listitem>\n  <listitem><para>\n    <literal>\"1\"</literal>: 80x50 mode, not supported by all devices\n  </para></listitem>\n  <listitem><para>\n    <literal>\"2\"</literal>: The first non-standard mode provided by the device firmware, if any\n  </para></listitem>\n  <listitem><para>\n    <literal>\"auto\"</literal>: Pick a suitable mode automatically using heuristics\n  </para></listitem>\n  <listitem><para>\n    <literal>\"max\"</literal>: Pick the highest-numbered available mode\n  </para></listitem>\n  <listitem><para>\n    <literal>\"keep\"</literal>: Keep the mode selected by firmware (the default)\n  </para></listitem>\n</itemizedlist>\n","loc":["boot","loader","systemd-boot","consoleMode"],"readOnly":false,"type":"one of \"0\", \"1\", \"2\", \"auto\", \"max\", \"keep\""},"boot.loader.systemd-boot.editor":{"declarations":["nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix"],"default":true,"description":"Whether to allow editing the kernel command-line before\nboot. It is recommended to set this to false, as it allows\ngaining root access by passing init=/bin/sh as a kernel\nparameter. However, it is enabled by default for backwards\ncompatibility.\n","loc":["boot","loader","systemd-boot","editor"],"readOnly":false,"type":"boolean"},"boot.loader.systemd-boot.enable":{"declarations":["nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix"],"default":false,"description":"Whether to enable the systemd-boot (formerly gummiboot) EFI boot manager","loc":["boot","loader","systemd-boot","enable"],"readOnly":false,"type":"boolean"},"boot.loader.timeout":{"declarations":["nixos/modules/system/boot/loader/loader.nix"],"default":5,"description":"Timeout (in seconds) until loader boots the default menu item. Use null if the loader menu should be displayed indefinitely.\n","loc":["boot","loader","timeout"],"readOnly":false,"type":"null or signed integer"},"boot.plymouth.enable":{"declarations":["nixos/modules/system/boot/plymouth.nix"],"default":false,"description":"Whether to enable Plymouth boot splash screen.","example":true,"loc":["boot","plymouth","enable"],"readOnly":false,"type":"boolean"},"boot.plymouth.logo":{"declarations":["nixos/modules/system/boot/plymouth.nix"],"default":"pkgs.fetchurl {\n          url = \"https://nixos.org/logo/nixos-hires.png\";\n          sha256 = \"1ivzgd7iz0i06y36p8m5w48fd8pjqwxhdaavc0pxs7w1g7mcy5si\";\n        }","description":"Logo which is displayed on the splash screen.\n","loc":["boot","plymouth","logo"],"readOnly":false,"type":"path"},"boot.plymouth.theme":{"declarations":["nixos/modules/system/boot/plymouth.nix"],"default":"breeze","description":"Splash screen theme.\n","loc":["boot","plymouth","theme"],"readOnly":false,"type":"string"},"boot.plymouth.themePackages":{"declarations":["nixos/modules/system/boot/plymouth.nix"],"default":[],"description":"Extra theme packages for plymouth.\n","loc":["boot","plymouth","themePackages"],"readOnly":false,"type":"list of packages"},"boot.postBootCommands":{"declarations":["nixos/modules/system/boot/stage-2.nix"],"default":"","description":"Shell commands to be executed just before systemd is started.\n","example":"rm -f /var/log/messages","loc":["boot","postBootCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"boot.resumeDevice":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":"","description":"Device for manual resume attempt during boot. This should be used primarily\nif you want to resume from file. If left empty, the swap partitions are used.\nSpecify here the device where the file resides.\nYou should also use <varname>boot.kernelParams</varname> to specify\n<literal><replaceable>resume_offset</replaceable></literal>.\n","example":"/dev/sda3","loc":["boot","resumeDevice"],"readOnly":false,"type":"string"},"boot.runSize":{"declarations":["nixos/modules/system/boot/stage-2.nix"],"default":"25%","description":"Size limit for the /run tmpfs. Look at mount(8), tmpfs size option,\nfor the accepted syntax.\n","example":"256m","loc":["boot","runSize"],"readOnly":false,"type":"string"},"boot.specialFileSystems.<name?>.device":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":null,"description":"Location of the device.","example":"/dev/sda","loc":["boot","specialFileSystems","<name?>","device"],"readOnly":false,"type":"null or string (with check: non-empty)"},"boot.specialFileSystems.<name?>.fsType":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":"auto","description":"Type of the file system.","example":"ext3","loc":["boot","specialFileSystems","<name?>","fsType"],"readOnly":false,"type":"string (with check: non-empty)"},"boot.specialFileSystems.<name?>.mountPoint":{"declarations":["nixos/modules/tasks/filesystems.nix"],"description":"Location of the mounted the file system.","example":"/mnt/usb","loc":["boot","specialFileSystems","<name?>","mountPoint"],"readOnly":false,"type":"string (with check: non-empty)"},"boot.specialFileSystems.<name?>.options":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":["defaults"],"description":"Options used to mount the file system.","example":["data=journal"],"loc":["boot","specialFileSystems","<name?>","options"],"readOnly":false,"type":"list of string (with check: non-empty)s"},"boot.supportedFilesystems":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":[],"description":"Names of supported filesystem types.","example":["btrfs"],"loc":["boot","supportedFilesystems"],"readOnly":false,"type":"list of strings"},"boot.tmpOnTmpfs":{"declarations":["nixos/modules/system/boot/tmp.nix"],"default":false,"description":"Whether to mount a tmpfs on <filename>/tmp</filename> during boot.\n","loc":["boot","tmpOnTmpfs"],"readOnly":false,"type":"boolean"},"boot.vesa":{"declarations":["nixos/modules/system/boot/kernel.nix"],"default":false,"description":"Whether to activate VESA video mode on boot.\n","loc":["boot","vesa"],"readOnly":false,"type":"boolean"},"boot.zfs.devNodes":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":"/dev/disk/by-id","description":"Name of directory from which to import ZFS devices.\n\nThis should be a path under /dev containing stable names for all devices needed, as\nimport may fail if device nodes are renamed concurrently with a device failing.\n","example":"/dev/disk/by-id","loc":["boot","zfs","devNodes"],"readOnly":false,"type":"path"},"boot.zfs.enableUnstable":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":false,"description":"Use the unstable zfs package. This might be an option, if the latest\nkernel is not yet supported by a published release of ZFS. Enabling\nthis option will install a development version of ZFS on Linux. The\nversion will have already passed an extensive test suite, but it is\nmore likely to hit an undiscovered bug compared to running a released\nversion of ZFS on Linux.\n","loc":["boot","zfs","enableUnstable"],"readOnly":false,"type":"boolean"},"boot.zfs.extraPools":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":[],"description":"Name or GUID of extra ZFS pools that you wish to import during boot.\n\nUsually this is not necessary. Instead, you should set the mountpoint property\nof ZFS filesystems to <literal>legacy</literal> and add the ZFS filesystems to\nNixOS's <option>fileSystems</option> option, which makes NixOS automatically\nimport the associated pool.\n\nHowever, in some cases (e.g. if you have many filesystems) it may be preferable\nto exclusively use ZFS commands to manage filesystems. If so, since NixOS/systemd\nwill not be managing those filesystems, you will need to specify the ZFS pool here\nso that NixOS automatically imports it on every boot.\n","example":["tank","data"],"loc":["boot","zfs","extraPools"],"readOnly":false,"type":"list of strings"},"boot.zfs.forceImportAll":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":true,"description":"Forcibly import all ZFS pool(s).\n\nThis is enabled by default for backwards compatibility purposes, but it is highly\nrecommended to disable this option, as it bypasses some of the safeguards ZFS uses\nto protect your ZFS pools.\n\nIf you set this option to <literal>false</literal> and NixOS subsequently fails to\nimport your non-root ZFS pool(s), you should manually import each pool with\n\"zpool import -f &lt;pool-name&gt;\", and then reboot. You should only need to do\nthis once.\n","loc":["boot","zfs","forceImportAll"],"readOnly":false,"type":"boolean"},"boot.zfs.forceImportRoot":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":true,"description":"Forcibly import the ZFS root pool(s) during early boot.\n\nThis is enabled by default for backwards compatibility purposes, but it is highly\nrecommended to disable this option, as it bypasses some of the safeguards ZFS uses\nto protect your ZFS pools.\n\nIf you set this option to <literal>false</literal> and NixOS subsequently fails to\nboot because it cannot import the root pool, you should boot with the\n<literal>zfs_force=1</literal> option as a kernel parameter (e.g. by manually\nediting the kernel params in grub during boot). You should only need to do this\nonce.\n","loc":["boot","zfs","forceImportRoot"],"readOnly":false,"type":"boolean"},"boot.zfs.requestEncryptionCredentials":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":false,"description":"Request encryption keys or passwords for all encrypted datasets on import.\nDataset encryption is only supported in zfsUnstable at the moment.\nFor root pools the encryption key can be supplied via both an\ninteractive prompt (keylocation=prompt) and from a file\n(keylocation=file://). Note that for data pools the encryption key can\nbe only loaded from a file and not via interactive prompt since the\nimport is processed in a background systemd service.\n","loc":["boot","zfs","requestEncryptionCredentials"],"readOnly":false,"type":"boolean"},"containers":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":{},"description":"A set of NixOS system configurations to be run as lightweight\ncontainers.  Each container appears as a service\n<literal>container-<replaceable>name</replaceable></literal>\non the host system, allowing it to be started and stopped via\n<command>systemctl</command>.\n","example":{"_type":"literalExample","text":"{ webserver =\n    { path = \"/nix/var/nix/profiles/webserver\";\n    };\n  database =\n    { config =\n        { config, pkgs, ... }:\n        { services.postgresql.enable = true;\n          services.postgresql.package = pkgs.postgresql96;\n\n          system.stateVersion = \"17.03\";\n        };\n    };\n}\n"},"loc":["containers"],"readOnly":false,"type":"attribute set of submodules"},"containers.<name>.additionalCapabilities":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":[],"description":"Grant additional capabilities to the container.  See the\ncapabilities(7) and systemd-nspawn(1) man pages for more\ninformation.\n","example":["CAP_NET_ADMIN","CAP_MKNOD"],"loc":["containers","<name>","additionalCapabilities"],"readOnly":false,"type":"list of strings"},"containers.<name>.allowedDevices":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":[],"description":"A list of device nodes to which the containers has access to.\n","example":[{"modifier":"rw","node":"/dev/net/tun"}],"loc":["containers","<name>","allowedDevices"],"readOnly":false,"type":"list of submodules"},"containers.<name>.allowedDevices.*.modifier":{"declarations":["nixos/modules/virtualisation/containers.nix"],"description":"Device node access modifier. Takes a combination\n<literal>r</literal> (read), <literal>w</literal> (write), and\n<literal>m</literal> (mknod). See the\n<literal>systemd.resource-control(5)</literal> man page for more\ninformation.","example":"rw","loc":["containers","<name>","allowedDevices","*","modifier"],"readOnly":false,"type":"string"},"containers.<name>.allowedDevices.*.node":{"declarations":["nixos/modules/virtualisation/containers.nix"],"description":"Path to device node","example":"/dev/net/tun","loc":["containers","<name>","allowedDevices","*","node"],"readOnly":false,"type":"string"},"containers.<name>.autoStart":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":false,"description":"Whether the container is automatically started at boot-time.\n","loc":["containers","<name>","autoStart"],"readOnly":false,"type":"boolean"},"containers.<name>.bindMounts":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":{},"description":"An extra list of directories that is bound to the container.\n","example":{"/home":{"hostPath":"/home/alice","isReadOnly":false}},"loc":["containers","<name>","bindMounts"],"readOnly":false,"type":"list or attribute set of submodules"},"containers.<name>.bindMounts.<name?>.hostPath":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"Location of the host path to be mounted.","example":"/home/alice","loc":["containers","<name>","bindMounts","<name?>","hostPath"],"readOnly":false,"type":"null or string"},"containers.<name>.bindMounts.<name?>.isReadOnly":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":true,"description":"Determine whether the mounted path will be accessed in read-only mode.","loc":["containers","<name>","bindMounts","<name?>","isReadOnly"],"readOnly":false,"type":"boolean"},"containers.<name>.bindMounts.<name?>.mountPoint":{"declarations":["nixos/modules/virtualisation/containers.nix"],"description":"Mount point on the container file system.","example":"/mnt/usb","loc":["containers","<name>","bindMounts","<name?>","mountPoint"],"readOnly":false,"type":"string"},"containers.<name>.config":{"declarations":["nixos/modules/virtualisation/containers.nix"],"description":"A specification of the desired configuration of this\ncontainer, as a NixOS module.\n","loc":["containers","<name>","config"],"readOnly":false,"type":"Toplevel NixOS config"},"containers.<name>.enableTun":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":false,"description":"Allows the container to create and setup tunnel interfaces\nby granting the <literal>NET_ADMIN</literal> capability and\nenabling access to <literal>/dev/net/tun</literal>.\n","loc":["containers","<name>","enableTun"],"readOnly":false,"type":"boolean"},"containers.<name>.extraFlags":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":[],"description":"Extra flags passed to the systemd-nspawn command.\nSee systemd-nspawn(1) for details.\n","example":["--drop-capability=CAP_SYS_CHROOT"],"loc":["containers","<name>","extraFlags"],"readOnly":false,"type":"list of strings"},"containers.<name>.extraVeths":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":{},"description":"Extra veth-pairs to be created for the container\n","loc":["containers","<name>","extraVeths"],"readOnly":false,"type":"attribute set of submodules"},"containers.<name>.extraVeths.<name>.forwardPorts":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":[],"description":"List of forwarded ports from host to container. Each forwarded port\nis specified by protocol, hostPort and containerPort. By default,\nprotocol is tcp and hostPort and containerPort are assumed to be\nthe same if containerPort is not explicitly given. \n","example":[{"containerPort":80,"hostPort":8080,"protocol":"tcp"}],"loc":["containers","<name>","extraVeths","<name>","forwardPorts"],"readOnly":false,"type":"list of submodules"},"containers.<name>.extraVeths.<name>.forwardPorts.*.containerPort":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"Target port of container","loc":["containers","<name>","extraVeths","<name>","forwardPorts","*","containerPort"],"readOnly":false,"type":"null or signed integer"},"containers.<name>.extraVeths.<name>.forwardPorts.*.hostPort":{"declarations":["nixos/modules/virtualisation/containers.nix"],"description":"Source port of the external interface on host","loc":["containers","<name>","extraVeths","<name>","forwardPorts","*","hostPort"],"readOnly":false,"type":"signed integer"},"containers.<name>.extraVeths.<name>.forwardPorts.*.protocol":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":"tcp","description":"The protocol specifier for port forwarding between host and container","loc":["containers","<name>","extraVeths","<name>","forwardPorts","*","protocol"],"readOnly":false,"type":"string"},"containers.<name>.extraVeths.<name>.hostAddress":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"The IPv4 address assigned to the host interface.\n(Not used when hostBridge is set.)\n","example":"10.231.136.1","loc":["containers","<name>","extraVeths","<name>","hostAddress"],"readOnly":false,"type":"null or string"},"containers.<name>.extraVeths.<name>.hostAddress6":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"The IPv6 address assigned to the host interface.\n(Not used when hostBridge is set.)\n","example":"fc00::1","loc":["containers","<name>","extraVeths","<name>","hostAddress6"],"readOnly":false,"type":"null or Concatenated string"},"containers.<name>.extraVeths.<name>.hostBridge":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"Put the host-side of the veth-pair into the named bridge.\nOnly one of hostAddress* or hostBridge can be given.\n","example":"br0","loc":["containers","<name>","extraVeths","<name>","hostBridge"],"readOnly":false,"type":"null or Concatenated string"},"containers.<name>.extraVeths.<name>.localAddress":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"The IPv4 address assigned to the interface in the container.\nIf a hostBridge is used, this should be given with netmask to access\nthe whole network. Otherwise the default netmask is /32 and routing is\nset up from localAddress to hostAddress and back.\n","example":"10.231.136.2","loc":["containers","<name>","extraVeths","<name>","localAddress"],"readOnly":false,"type":"null or string"},"containers.<name>.extraVeths.<name>.localAddress6":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"The IPv6 address assigned to the interface in the container.\nIf a hostBridge is used, this should be given with netmask to access\nthe whole network. Otherwise the default netmask is /128 and routing is\nset up from localAddress6 to hostAddress6 and back.\n","example":"fc00::2","loc":["containers","<name>","extraVeths","<name>","localAddress6"],"readOnly":false,"type":"null or Concatenated string"},"containers.<name>.forwardPorts":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":[],"description":"List of forwarded ports from host to container. Each forwarded port\nis specified by protocol, hostPort and containerPort. By default,\nprotocol is tcp and hostPort and containerPort are assumed to be\nthe same if containerPort is not explicitly given. \n","example":[{"containerPort":80,"hostPort":8080,"protocol":"tcp"}],"loc":["containers","<name>","forwardPorts"],"readOnly":false,"type":"list of submodules"},"containers.<name>.forwardPorts.*.containerPort":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"Target port of container","loc":["containers","<name>","forwardPorts","*","containerPort"],"readOnly":false,"type":"null or signed integer"},"containers.<name>.forwardPorts.*.hostPort":{"declarations":["nixos/modules/virtualisation/containers.nix"],"description":"Source port of the external interface on host","loc":["containers","<name>","forwardPorts","*","hostPort"],"readOnly":false,"type":"signed integer"},"containers.<name>.forwardPorts.*.protocol":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":"tcp","description":"The protocol specifier for port forwarding between host and container","loc":["containers","<name>","forwardPorts","*","protocol"],"readOnly":false,"type":"string"},"containers.<name>.hostAddress":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"The IPv4 address assigned to the host interface.\n(Not used when hostBridge is set.)\n","example":"10.231.136.1","loc":["containers","<name>","hostAddress"],"readOnly":false,"type":"null or string"},"containers.<name>.hostAddress6":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"The IPv6 address assigned to the host interface.\n(Not used when hostBridge is set.)\n","example":"fc00::1","loc":["containers","<name>","hostAddress6"],"readOnly":false,"type":"null or Concatenated string"},"containers.<name>.hostBridge":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"Put the host-side of the veth-pair into the named bridge.\nOnly one of hostAddress* or hostBridge can be given.\n","example":"br0","loc":["containers","<name>","hostBridge"],"readOnly":false,"type":"null or Concatenated string"},"containers.<name>.interfaces":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":[],"description":"The list of interfaces to be moved into the container.\n","example":["eth1","eth2"],"loc":["containers","<name>","interfaces"],"readOnly":false,"type":"list of Concatenated strings"},"containers.<name>.localAddress":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"The IPv4 address assigned to the interface in the container.\nIf a hostBridge is used, this should be given with netmask to access\nthe whole network. Otherwise the default netmask is /32 and routing is\nset up from localAddress to hostAddress and back.\n","example":"10.231.136.2","loc":["containers","<name>","localAddress"],"readOnly":false,"type":"null or string"},"containers.<name>.localAddress6":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":null,"description":"The IPv6 address assigned to the interface in the container.\nIf a hostBridge is used, this should be given with netmask to access\nthe whole network. Otherwise the default netmask is /128 and routing is\nset up from localAddress6 to hostAddress6 and back.\n","example":"fc00::2","loc":["containers","<name>","localAddress6"],"readOnly":false,"type":"null or Concatenated string"},"containers.<name>.macvlans":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":[],"description":"The list of host interfaces from which macvlans will be\ncreated. For each interface specified, a macvlan interface\nwill be created and moved to the container.\n","example":["eth1","eth2"],"loc":["containers","<name>","macvlans"],"readOnly":false,"type":"list of strings"},"containers.<name>.path":{"declarations":["nixos/modules/virtualisation/containers.nix"],"description":"As an alternative to specifying\n<option>config</option>, you can specify the path to\nthe evaluated NixOS system configuration, typically a\nsymlink to a system profile.\n","example":"/nix/var/nix/profiles/containers/webserver","loc":["containers","<name>","path"],"readOnly":false,"type":"path"},"containers.<name>.privateNetwork":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":false,"description":"Whether to give the container its own private virtual\nEthernet interface.  The interface is called\n<literal>eth0</literal>, and is hooked up to the interface\n<literal>ve-<replaceable>container-name</replaceable></literal>\non the host.  If this option is not set, then the\ncontainer shares the network interfaces of the host,\nand can bind to any port on any interface.\n","loc":["containers","<name>","privateNetwork"],"readOnly":false,"type":"boolean"},"containers.<name>.tmpfs":{"declarations":["nixos/modules/virtualisation/containers.nix"],"default":[],"description":"Mounts a set of tmpfs file systems into the container.\nMultiple paths can be specified.\nValid items must conform to the --tmpfs argument\nof systemd-nspawn. See systemd-nspawn(1) for details.\n","example":["/var"],"loc":["containers","<name>","tmpfs"],"readOnly":false,"type":"list of strings"},"documentation.dev.enable":{"declarations":["nixos/modules/misc/documentation.nix"],"default":false,"description":"Whether to install documentation targeted at developers.\n<itemizedlist>\n<listitem><para>This includes man pages targeted at developers if <option>man.enable</option> is\n          set (this also includes \"devman\" outputs).</para></listitem>\n<listitem><para>This includes info pages targeted at developers if <option>info.enable</option>\n          is set (this also includes \"devinfo\" outputs).</para></listitem>\n<listitem><para>This includes other pages targeted at developers if <option>doc.enable</option>\n          is set (this also includes \"devdoc\" outputs).</para></listitem>\n</itemizedlist>\n","loc":["documentation","dev","enable"],"readOnly":false,"type":"boolean"},"documentation.doc.enable":{"declarations":["nixos/modules/misc/documentation.nix"],"default":true,"description":"Whether to install documentation distributed in packages' <literal>/share/doc</literal>.\nUsually plain text and/or HTML.\nThis also includes \"doc\" outputs.\n","loc":["documentation","doc","enable"],"readOnly":false,"type":"boolean"},"documentation.enable":{"declarations":["nixos/modules/misc/documentation.nix"],"default":true,"description":"Whether to install documentation of packages from\n<option>environment.systemPackages</option> into the generated system path.\n\nSee \"Multiple-output packages\" chapter in the nixpkgs manual for more info.\n","loc":["documentation","enable"],"readOnly":false,"type":"boolean"},"documentation.info.enable":{"declarations":["nixos/modules/misc/documentation.nix"],"default":true,"description":"Whether to install info pages and the <command>info</command> command.\nThis also includes \"info\" outputs.\n","loc":["documentation","info","enable"],"readOnly":false,"type":"boolean"},"documentation.man.enable":{"declarations":["nixos/modules/misc/documentation.nix"],"default":true,"description":"Whether to install manual pages and the <command>man</command> command.\nThis also includes \"man\" outputs.\n","loc":["documentation","man","enable"],"readOnly":false,"type":"boolean"},"documentation.nixos.enable":{"declarations":["nixos/modules/misc/documentation.nix"],"default":true,"description":"Whether to install NixOS's own documentation.\n<itemizedlist>\n<listitem><para>This includes man pages like\n          <citerefentry><refentrytitle>configuration.nix</refentrytitle>\n          <manvolnum>5</manvolnum></citerefentry> if <option>man.enable</option> is\n          set.</para></listitem>\n<listitem><para>This includes the HTML manual and the <command>nixos-help</command> command if\n          <option>doc.enable</option> is set.</para></listitem>\n</itemizedlist>\n","loc":["documentation","nixos","enable"],"readOnly":false,"type":"boolean"},"dysnomia.components":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"default":{},"description":"An atttribute set in which each key represents a container and each value an attribute set in which each key represents a component and each value a derivation constructing its initial state","loc":["dysnomia","components"],"readOnly":false,"type":"unspecified"},"dysnomia.containers":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"default":{},"description":"An attribute set in which each key represents a container and each value an attribute set providing its configuration properties","loc":["dysnomia","containers"],"readOnly":false,"type":"unspecified"},"dysnomia.enable":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"default":false,"description":"Whether to enable Dysnomia","loc":["dysnomia","enable"],"readOnly":false,"type":"boolean"},"dysnomia.enableAuthentication":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"default":false,"description":"Whether to publish privacy-sensitive authentication credentials","loc":["dysnomia","enableAuthentication"],"readOnly":false,"type":"boolean"},"dysnomia.extraContainerPaths":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"default":[],"description":"A list of paths containing additional container configurations that are added to the search folders","loc":["dysnomia","extraContainerPaths"],"readOnly":false,"type":"unspecified"},"dysnomia.extraContainerProperties":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"default":{},"description":"An attribute set providing additional container settings in addition to the default properties","loc":["dysnomia","extraContainerProperties"],"readOnly":false,"type":"unspecified"},"dysnomia.extraModulePaths":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"default":[],"description":"A list of paths containing additional modules that are added to the search folders","loc":["dysnomia","extraModulePaths"],"readOnly":false,"type":"unspecified"},"dysnomia.package":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"description":"The Dysnomia package","loc":["dysnomia","package"],"readOnly":false,"type":"path"},"dysnomia.properties":{"declarations":["nixos/modules/services/misc/dysnomia.nix"],"default":{},"description":"An attribute set in which each attribute represents a machine property. Optionally, these values can be shell substitutions.","loc":["dysnomia","properties"],"readOnly":false,"type":"unspecified"},"environment.blcr.enable":{"declarations":["nixos/modules/programs/blcr.nix"],"default":false,"description":"Whether to enable support for the BLCR checkpointing tool.","loc":["environment","blcr","enable"],"readOnly":false,"type":"unspecified"},"environment.checkConfigurationOptions":{"declarations":["nixos/modules/rename.nix"],"description":"Alias of <option>_module.check</option>.","loc":["environment","checkConfigurationOptions"],"readOnly":false,"type":"unspecified"},"environment.enableDebugInfo":{"declarations":["nixos/modules/config/debug-info.nix"],"default":false,"description":"Some NixOS packages provide debug symbols. However, these are\nnot included in the system closure by default to save disk\nspace. Enabling this option causes the debug symbols to appear\nin <filename>/run/current-system/sw/lib/debug/.build-id</filename>,\nwhere tools such as <command>gdb</command> can find them.\nIf you need debug symbols for a package that doesn't\nprovide them by default, you can enable them as follows:\n<programlisting>\nnixpkgs.config.packageOverrides = pkgs: {\n  hello = pkgs.hello.overrideAttrs (oldAttrs: {\n    separateDebugInfo = true;\n  });\n};\n</programlisting>\n","loc":["environment","enableDebugInfo"],"readOnly":false,"type":"boolean"},"environment.etc":{"declarations":["nixos/modules/system/etc/etc.nix"],"default":{},"description":"Set of files that have to be linked in <filename>/etc</filename>.\n","example":{"_type":"literalExample","text":"{ example-configuration-file =\n    { source = \"/nix/store/.../etc/dir/file.conf.example\";\n      mode = \"0440\";\n    };\n  \"default/useradd\".text = \"GROUP=100 ...\";\n}\n"},"loc":["environment","etc"],"readOnly":false,"type":"list or attribute set of submodules"},"environment.etc.<name?>.enable":{"declarations":["nixos/modules/system/etc/etc.nix"],"default":true,"description":"Whether this /etc file should be generated.  This\noption allows specific /etc files to be disabled.\n","loc":["environment","etc","<name?>","enable"],"readOnly":false,"type":"boolean"},"environment.etc.<name?>.gid":{"declarations":["nixos/modules/system/etc/etc.nix"],"default":0,"description":"GID of created file. Only takes affect when the file is\ncopied (that is, the mode is not 'symlink').\n","loc":["environment","etc","<name?>","gid"],"readOnly":false,"type":"signed integer"},"environment.etc.<name?>.group":{"declarations":["nixos/modules/system/etc/etc.nix"],"default":"+0","description":"Group name of created file.\nOnly takes affect when the file is copied (that is, the mode is not 'symlink').\nChanging this option takes precedence over <literal>gid</literal>.\n","loc":["environment","etc","<name?>","group"],"readOnly":false,"type":"string"},"environment.etc.<name?>.mode":{"declarations":["nixos/modules/system/etc/etc.nix"],"default":"symlink","description":"If set to something else than <literal>symlink</literal>,\nthe file is copied instead of symlinked, with the given\nfile mode.\n","example":"0600","loc":["environment","etc","<name?>","mode"],"readOnly":false,"type":"string"},"environment.etc.<name?>.source":{"declarations":["nixos/modules/system/etc/etc.nix"],"description":"Path of the source file.","loc":["environment","etc","<name?>","source"],"readOnly":false,"type":"path"},"environment.etc.<name?>.target":{"declarations":["nixos/modules/system/etc/etc.nix"],"description":"Name of symlink (relative to\n<filename>/etc</filename>).  Defaults to the attribute\nname.\n","loc":["environment","etc","<name?>","target"],"readOnly":false,"type":"string"},"environment.etc.<name?>.text":{"declarations":["nixos/modules/system/etc/etc.nix"],"default":null,"description":"Text of the file.","loc":["environment","etc","<name?>","text"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"environment.etc.<name?>.uid":{"declarations":["nixos/modules/system/etc/etc.nix"],"default":0,"description":"UID of created file. Only takes affect when the file is\ncopied (that is, the mode is not 'symlink').\n","loc":["environment","etc","<name?>","uid"],"readOnly":false,"type":"signed integer"},"environment.etc.<name?>.user":{"declarations":["nixos/modules/system/etc/etc.nix"],"default":"+0","description":"User name of created file.\nOnly takes affect when the file is copied (that is, the mode is not 'symlink').\nChanging this option takes precedence over <literal>uid</literal>.\n","loc":["environment","etc","<name?>","user"],"readOnly":false,"type":"string"},"environment.extraInit":{"declarations":["nixos/modules/config/shells-environment.nix"],"default":"","description":"Shell script code called during global environment initialisation\nafter all variables and profileVariables have been set.\nThis code is assumed to be shell-independent, which means you should\nstick to pure sh without sh word split.\n","loc":["environment","extraInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"environment.extraOutputsToInstall":{"declarations":["nixos/modules/config/system-path.nix"],"default":[],"description":"List of additional package outputs to be symlinked into <filename>/run/current-system/sw</filename>.","example":["doc","info","devdoc"],"loc":["environment","extraOutputsToInstall"],"readOnly":false,"type":"list of strings"},"environment.extraSetup":{"declarations":["nixos/modules/config/system-path.nix"],"default":"","description":"Shell fragments to be run after the system environment has been created. This should only be used for things that need to modify the internals of the environment, e.g. generating MIME caches. The environment being built can be accessed at $out.","loc":["environment","extraSetup"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"environment.freetds":{"declarations":["nixos/modules/programs/freetds.nix"],"default":{},"description":"Configure freetds database entries. Each attribute denotes\na section within freetds.conf, and the value (a string) is the config\ncontent for that section. When at least one entry is configured\nthe global environment variables FREETDSCONF, FREETDS and SYBASE\nwill be configured to allow the programs that use freetds to find the\nlibrary and config.\n","example":{"_type":"literalExample","text":"{ MYDATABASE = ''\n    host = 10.0.2.100\n    port = 1433\n    tds version = 7.2\n  '';\n}\n"},"loc":["environment","freetds"],"readOnly":false,"type":"attribute set of strings"},"environment.gnome3.excludePackages":{"declarations":["nixos/modules/services/x11/desktop-managers/gnome3.nix"],"default":[],"description":"Which packages gnome should exclude from the default environment","example":{"_type":"literalExample","text":"[ pkgs.gnome3.totem ]"},"loc":["environment","gnome3","excludePackages"],"readOnly":false,"type":"list of packages"},"environment.interactiveShellInit":{"declarations":["nixos/modules/config/shells-environment.nix"],"default":"","description":"Shell script code called during interactive shell initialisation.\nThis code is assumed to be shell-independent, which means you should\nstick to pure sh without sh word split.\n","loc":["environment","interactiveShellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"environment.loginShellInit":{"declarations":["nixos/modules/config/shells-environment.nix"],"default":"","description":"Shell script code called during login shell initialisation.\nThis code is assumed to be shell-independent, which means you should\nstick to pure sh without sh word split.\n","loc":["environment","loginShellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"environment.lxqt.excludePackages":{"declarations":["nixos/modules/services/x11/desktop-managers/lxqt.nix"],"default":[],"description":"Which LXQt packages to exclude from the default environment","example":{"_type":"literalExample","text":"[ pkgs.lxqt.qterminal ]"},"loc":["environment","lxqt","excludePackages"],"readOnly":false,"type":"list of packages"},"environment.mate.excludePackages":{"declarations":["nixos/modules/services/x11/desktop-managers/mate.nix"],"default":[],"description":"Which MATE packages to exclude from the default environment","example":{"_type":"literalExample","text":"[ pkgs.mate.mate-terminal pkgs.mate.pluma ]"},"loc":["environment","mate","excludePackages"],"readOnly":false,"type":"list of packages"},"environment.noXlibs":{"declarations":["nixos/modules/config/no-x-libs.nix"],"default":false,"description":"Switch off the options in the default configuration that\nrequire X11 libraries. This includes client-side font\nconfiguration and SSH forwarding of X11 authentication\nin. Thus, you probably do not want to enable this option if\nyou want to run X11 programs on this machine via SSH.\n","loc":["environment","noXlibs"],"readOnly":false,"type":"boolean"},"environment.pathsToLink":{"declarations":["nixos/modules/config/system-path.nix"],"default":[],"description":"List of directories to be symlinked in <filename>/run/current-system/sw</filename>.","example":["/"],"loc":["environment","pathsToLink"],"readOnly":false,"type":"list of strings"},"environment.profileRelativeEnvVars":{"declarations":["nixos/modules/config/shells-environment.nix"],"description":"Attribute set of environment variable.  Each attribute maps to a list\nof relative paths.  Each relative path is appended to the each profile\nof <option>environment.profiles</option> to form the content of the\ncorresponding environment variable.\n","example":{"MANPATH":["/man","/share/man"],"PATH":["/bin"]},"loc":["environment","profileRelativeEnvVars"],"readOnly":false,"type":"attribute set of list of stringss"},"environment.profiles":{"declarations":["nixos/modules/config/shells-environment.nix"],"default":[],"description":"A list of profiles used to setup the global environment.\n","loc":["environment","profiles"],"readOnly":false,"type":"list of strings"},"environment.sessionVariables":{"declarations":["nixos/modules/config/system-environment.nix"],"default":{},"description":"A set of environment variables used in the global environment.\nThese variables will be set by PAM.\nThe value of each variable can be either a string or a list of\nstrings.  The latter is concatenated, interspersed with colon\ncharacters.\n","loc":["environment","sessionVariables"],"readOnly":false,"type":"attribute set of string or list of stringss"},"environment.shellAliases":{"declarations":["nixos/modules/config/shells-environment.nix"],"description":"An attribute set that maps aliases (the top level attribute names in\nthis option) to command strings or directly to build outputs. The\naliases are added to all users' shells.\nAliases mapped to <code>null</code> are ignored.\n","example":{"l":null,"ll":"ls -l"},"loc":["environment","shellAliases"],"readOnly":false,"type":"attribute set of null or string or paths"},"environment.shellInit":{"declarations":["nixos/modules/config/shells-environment.nix"],"default":"","description":"Shell script code called during shell initialisation.\nThis code is assumed to be shell-independent, which means you should\nstick to pure sh without sh word split.\n","loc":["environment","shellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"environment.shells":{"declarations":["nixos/modules/config/shells-environment.nix"],"default":[],"description":"A list of permissible login shells for user accounts.\nNo need to mention <literal>/bin/sh</literal>\nhere, it is placed into this list implicitly.\n","example":{"_type":"literalExample","text":"[ pkgs.bashInteractive pkgs.zsh ]"},"loc":["environment","shells"],"readOnly":false,"type":"list of package or paths"},"environment.systemPackages":{"declarations":["nixos/modules/config/system-path.nix"],"default":[],"description":"The set of packages that appear in\n/run/current-system/sw.  These packages are\nautomatically available to all users, and are\nautomatically updated every time you rebuild the system\nconfiguration.  (The latter is the main difference with\ninstalling them in the default profile,\n<filename>/nix/var/nix/profiles/default</filename>.\n","example":{"_type":"literalExample","text":"[ pkgs.firefox pkgs.thunderbird ]"},"loc":["environment","systemPackages"],"readOnly":false,"type":"list of packages"},"environment.unixODBCDrivers":{"declarations":["nixos/modules/config/unix-odbc-drivers.nix"],"default":[],"description":"Specifies Unix ODBC drivers to be registered in\n<filename>/etc/odbcinst.ini</filename>.  You may also want to\nadd <literal>pkgs.unixODBC</literal> to the system path to get\na command line client to connnect to ODBC databases.\n","example":{"_type":"literalExample","text":"with pkgs.unixODBCDrivers; [ sqlite psql ]"},"loc":["environment","unixODBCDrivers"],"readOnly":false,"type":"list of packages"},"environment.variables":{"declarations":["nixos/modules/config/shells-environment.nix"],"default":{},"description":"A set of environment variables used in the global environment.\nThese variables will be set on shell initialisation (e.g. in /etc/profile).\nThe value of each variable can be either a string or a list of\nstrings.  The latter is concatenated, interspersed with colon\ncharacters.\n","example":{"EDITOR":"nvim","VISUAL":"nvim"},"loc":["environment","variables"],"readOnly":false,"type":"attribute set of string or list of stringss"},"fileSystems":{"declarations":["nixos/modules/tasks/filesystems.nix","nixos/modules/tasks/encrypted-devices.nix","nixos/modules/system/boot/stage-1.nix"],"default":{},"description":"The file systems to be mounted.  It must include an entry for\nthe root directory (<literal>mountPoint = \"/\"</literal>).  Each\nentry in the list is an attribute set with the following fields:\n<literal>mountPoint</literal>, <literal>device</literal>,\n<literal>fsType</literal> (a file system type recognised by\n<command>mount</command>; defaults to\n<literal>\"auto\"</literal>), and <literal>options</literal>\n(the mount options passed to <command>mount</command> using the\n<option>-o</option> flag; defaults to <literal>[ \"defaults\" ]</literal>).\n\nInstead of specifying <literal>device</literal>, you can also\nspecify a volume label (<literal>label</literal>) for file\nsystems that support it, such as ext2/ext3 (see <command>mke2fs\n-L</command>).\n","example":{"_type":"literalExample","text":"{\n  \"/\".device = \"/dev/hda1\";\n  \"/data\" = {\n    device = \"/dev/hda2\";\n    fsType = \"ext3\";\n    options = [ \"data=journal\" ];\n  };\n  \"/bigdisk\".label = \"bigdisk\";\n}\n"},"loc":["fileSystems"],"readOnly":false,"type":"list or attribute set of submodules"},"fileSystems.<name?>.autoFormat":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":false,"description":"If the device does not currently contain a filesystem (as\ndetermined by <command>blkid</command>, then automatically\nformat it with the filesystem type specified in\n<option>fsType</option>.  Use with caution.\n","loc":["fileSystems","<name?>","autoFormat"],"readOnly":false,"type":"boolean"},"fileSystems.<name?>.autoResize":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":false,"description":"If set, the filesystem is grown to its maximum size before\nbeing mounted. (This is typically the size of the containing\npartition.) This is currently only supported for ext2/3/4\nfilesystems that are mounted during early boot.\n","loc":["fileSystems","<name?>","autoResize"],"readOnly":false,"type":"boolean"},"fileSystems.<name?>.device":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":null,"description":"Location of the device.","example":"/dev/sda","loc":["fileSystems","<name?>","device"],"readOnly":false,"type":"null or string (with check: non-empty)"},"fileSystems.<name?>.encrypted.blkDev":{"declarations":["nixos/modules/tasks/encrypted-devices.nix"],"default":null,"description":"Location of the backing encrypted device.","example":"/dev/sda1","loc":["fileSystems","<name?>","encrypted","blkDev"],"readOnly":false,"type":"null or string"},"fileSystems.<name?>.encrypted.enable":{"declarations":["nixos/modules/tasks/encrypted-devices.nix"],"default":false,"description":"The block device is backed by an encrypted one, adds this device as a initrd luks entry.","loc":["fileSystems","<name?>","encrypted","enable"],"readOnly":false,"type":"boolean"},"fileSystems.<name?>.encrypted.keyFile":{"declarations":["nixos/modules/tasks/encrypted-devices.nix"],"default":null,"description":"File system location of keyfile. This unlocks the drive after the root has been mounted to <literal>/mnt-root</literal>.","example":"/mnt-root/root/.swapkey","loc":["fileSystems","<name?>","encrypted","keyFile"],"readOnly":false,"type":"null or string"},"fileSystems.<name?>.encrypted.label":{"declarations":["nixos/modules/tasks/encrypted-devices.nix"],"default":null,"description":"Label of the unlocked encrypted device. Set <literal>fileSystems.&lt;name?&gt;.device</literal> to <literal>/dev/mapper/&lt;label&gt;</literal> to mount the unlocked device.","example":"rootfs","loc":["fileSystems","<name?>","encrypted","label"],"readOnly":false,"type":"null or string"},"fileSystems.<name?>.formatOptions":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":"","description":"If <option>autoFormat</option> option is set specifies\nextra options passed to mkfs.\n","loc":["fileSystems","<name?>","formatOptions"],"readOnly":false,"type":"string"},"fileSystems.<name?>.fsType":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":"auto","description":"Type of the file system.","example":"ext3","loc":["fileSystems","<name?>","fsType"],"readOnly":false,"type":"string (with check: non-empty)"},"fileSystems.<name?>.label":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":null,"description":"Label of the device (if any).","example":"root-partition","loc":["fileSystems","<name?>","label"],"readOnly":false,"type":"null or string (with check: non-empty)"},"fileSystems.<name?>.mountPoint":{"declarations":["nixos/modules/tasks/filesystems.nix"],"description":"Location of the mounted the file system.","example":"/mnt/usb","loc":["fileSystems","<name?>","mountPoint"],"readOnly":false,"type":"string (with check: non-empty)"},"fileSystems.<name?>.neededForBoot":{"declarations":["nixos/modules/system/boot/stage-1.nix"],"default":false,"description":"If set, this file system will be mounted in the initial\nramdisk.  By default, this applies to the root file system\nand to the file system containing\n<filename>/nix/store</filename>.\n","loc":["fileSystems","<name?>","neededForBoot"],"readOnly":false,"type":"boolean"},"fileSystems.<name?>.noCheck":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":false,"description":"Disable running fsck on this filesystem.","loc":["fileSystems","<name?>","noCheck"],"readOnly":false,"type":"boolean"},"fileSystems.<name?>.options":{"declarations":["nixos/modules/tasks/filesystems.nix"],"default":["defaults"],"description":"Options used to mount the file system.","example":["data=journal"],"loc":["fileSystems","<name?>","options"],"readOnly":false,"type":"list of string (with check: non-empty)s"},"fonts.enableDefaultFonts":{"declarations":["nixos/modules/config/fonts/fonts.nix"],"default":false,"description":"Enable a basic set of fonts providing several font styles\nand families and reasonable coverage of Unicode.\n","loc":["fonts","enableDefaultFonts"],"readOnly":false,"type":"boolean"},"fonts.enableFontDir":{"declarations":["nixos/modules/config/fonts/fontdir.nix"],"default":false,"description":"Whether to create a directory with links to all fonts in\n<filename>/run/current-system/sw/share/X11-fonts</filename>.\n","loc":["fonts","enableFontDir"],"readOnly":false,"type":"unspecified"},"fonts.enableGhostscriptFonts":{"declarations":["nixos/modules/config/fonts/ghostscript.nix"],"default":false,"description":"Whether to add the fonts provided by Ghostscript (such as\nvarious URW fonts and the “Base-14” Postscript fonts) to the\nlist of system fonts, making them available to X11\napplications.\n","loc":["fonts","enableGhostscriptFonts"],"readOnly":false,"type":"unspecified"},"fonts.fontconfig.allowBitmaps":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":true,"description":"Allow bitmap fonts. Set to <literal>false</literal> to ban all\nbitmap fonts.\n","loc":["fonts","fontconfig","allowBitmaps"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.allowType1":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":false,"description":"Allow Type-1 fonts. Default is <literal>false</literal> because of\npoor rendering.\n","loc":["fonts","fontconfig","allowType1"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.antialias":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":true,"description":"Enable font antialiasing. At high resolution (> 200 DPI),\nantialiasing has no visible effect; users of such displays may want\nto disable this option.\n","loc":["fonts","fontconfig","antialias"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.cache32Bit":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":false,"description":"Generate system fonts cache for 32-bit applications.\n","loc":["fonts","fontconfig","cache32Bit"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.defaultFonts.monospace":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":["DejaVu Sans Mono"],"description":"System-wide default monospace font(s). Multiple fonts may be\nlisted in case multiple languages must be supported.\n","loc":["fonts","fontconfig","defaultFonts","monospace"],"readOnly":false,"type":"list of strings"},"fonts.fontconfig.defaultFonts.sansSerif":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":["DejaVu Sans"],"description":"System-wide default sans serif font(s). Multiple fonts may be\nlisted in case multiple languages must be supported.\n","loc":["fonts","fontconfig","defaultFonts","sansSerif"],"readOnly":false,"type":"list of strings"},"fonts.fontconfig.defaultFonts.serif":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":["DejaVu Serif"],"description":"System-wide default serif font(s). Multiple fonts may be listed\nin case multiple languages must be supported.\n","loc":["fonts","fontconfig","defaultFonts","serif"],"readOnly":false,"type":"list of strings"},"fonts.fontconfig.dpi":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":0,"description":"Force DPI setting. Setting to <literal>0</literal> disables DPI\nforcing; the DPI detected for the display will be used.\n","loc":["fonts","fontconfig","dpi"],"readOnly":false,"type":"signed integer"},"fonts.fontconfig.enable":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":true,"description":"If enabled, a Fontconfig configuration file will be built\npointing to a set of default fonts.  If you don't care about\nrunning X11 applications or any other program that uses\nFontconfig, you can turn this option off and prevent a\ndependency on all those fonts.\n","loc":["fonts","fontconfig","enable"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.hinting.autohint":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":false,"description":"Enable the autohinter in place of the default interpreter.\nThe results are usually lower quality than correctly-hinted\nfonts, but better than unhinted fonts.\n","loc":["fonts","fontconfig","hinting","autohint"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.hinting.enable":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":true,"description":"Enable font hinting. Hinting aligns glyphs to pixel boundaries to\nimprove rendering sharpness at low resolution. At high resolution\n(> 200 dpi) hinting will do nothing (at best); users of such\ndisplays may want to disable this option.\n","loc":["fonts","fontconfig","hinting","enable"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.includeUserConf":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":true,"description":"Include the user configuration from\n<filename>~/.config/fontconfig/fonts.conf</filename> or\n<filename>~/.config/fontconfig/conf.d</filename>.\n","loc":["fonts","fontconfig","includeUserConf"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.localConf":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":"","description":"System-wide customization file contents, has higher priority than\n<literal>defaultFonts</literal> settings.\n","loc":["fonts","fontconfig","localConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"fonts.fontconfig.penultimate.enable":{"declarations":["nixos/modules/config/fonts/fontconfig-penultimate.nix"],"default":true,"description":"Enable fontconfig-penultimate settings to supplement the\nNixOS defaults by providing per-font rendering defaults and\nmetric aliases.\n","loc":["fonts","fontconfig","penultimate","enable"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.subpixel.lcdfilter":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":"default","description":"FreeType LCD filter. At high resolution (> 200 DPI), LCD filtering\nhas no visible effect; users of such displays may want to select\n<literal>none</literal>.\n","loc":["fonts","fontconfig","subpixel","lcdfilter"],"readOnly":false,"type":"one of \"none\", \"default\", \"light\", \"legacy\""},"fonts.fontconfig.subpixel.rgba":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":"rgb","description":"Subpixel order. The overwhelming majority of displays are\n<literal>rgb</literal> in their normal orientation. Select\n<literal>vrgb</literal> for mounting such a display 90 degrees\nclockwise from its normal orientation or <literal>vbgr</literal>\nfor mounting 90 degrees counter-clockwise. Select\n<literal>bgr</literal> in the unlikely event of mounting 180\ndegrees from the normal orientation. Reverse these directions in\nthe improbable event that the display's native subpixel order is\n<literal>bgr</literal>.\n","loc":["fonts","fontconfig","subpixel","rgba"],"readOnly":false,"type":"one of \"rgb\", \"bgr\", \"vrgb\", \"vbgr\", \"none\""},"fonts.fontconfig.ultimate.enable":{"declarations":["nixos/modules/config/fonts/fontconfig-ultimate.nix"],"default":false,"description":"Enable fontconfig-ultimate settings (formerly known as\nInfinality). Besides the customizable settings in this NixOS\nmodule, fontconfig-ultimate also provides many font-specific\nrendering tweaks.\n","loc":["fonts","fontconfig","ultimate","enable"],"readOnly":false,"type":"boolean"},"fonts.fontconfig.ultimate.preset":{"declarations":["nixos/modules/config/fonts/fontconfig-ultimate.nix"],"default":"ultimate3","description":"FreeType rendering settings preset. Any of the presets may be\ncustomized by setting environment variables.\n","loc":["fonts","fontconfig","ultimate","preset"],"readOnly":false,"type":"one of \"ultimate1\", \"ultimate2\", \"ultimate3\", \"ultimate4\", \"ultimate5\", \"osx\", \"windowsxp\""},"fonts.fontconfig.ultimate.substitutions":{"declarations":["nixos/modules/config/fonts/fontconfig-ultimate.nix"],"default":"free","description":"Font substitutions to replace common Type 1 fonts with nicer\nTrueType fonts. <literal>free</literal> uses free fonts,\n<literal>ms</literal> uses Microsoft fonts,\n<literal>combi</literal> uses a combination, and\n<literal>none</literal> disables the substitutions.\n","loc":["fonts","fontconfig","ultimate","substitutions"],"readOnly":false,"type":"one of \"free\", \"combi\", \"ms\", \"none\""},"fonts.fontconfig.useEmbeddedBitmaps":{"declarations":["nixos/modules/config/fonts/fontconfig.nix"],"default":false,"description":"Use embedded bitmaps in fonts like Calibri.","loc":["fonts","fontconfig","useEmbeddedBitmaps"],"readOnly":false,"type":"boolean"},"fonts.fonts":{"declarations":["nixos/modules/config/fonts/fonts.nix"],"default":[],"description":"List of primary font paths.","example":{"_type":"literalExample","text":"[ pkgs.dejavu_fonts ]"},"loc":["fonts","fonts"],"readOnly":false,"type":"list of paths"},"gnu":{"declarations":["nixos/modules/config/gnu.nix"],"default":false,"description":"When enabled, GNU software is chosen by default whenever a there is\na choice between GNU and non-GNU software (e.g., GNU lsh\nvs. OpenSSH).\n","loc":["gnu"],"readOnly":false,"type":"boolean"},"hardware.bluetooth.enable":{"declarations":["nixos/modules/services/hardware/bluetooth.nix"],"default":false,"description":"Whether to enable support for Bluetooth..","example":true,"loc":["hardware","bluetooth","enable"],"readOnly":false,"type":"boolean"},"hardware.bluetooth.extraConfig":{"declarations":["nixos/modules/services/hardware/bluetooth.nix"],"default":"","description":"Set additional configuration for system-wide bluetooth (/etc/bluetooth/main.conf).\n\nNOTE: We already include [Policy], so any configuration under the Policy group should come first.\n","example":"[General]\nControllerMode = bredr\n","loc":["hardware","bluetooth","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"hardware.bluetooth.package":{"declarations":["nixos/modules/services/hardware/bluetooth.nix"],"default":"pkgs.bluez","description":"Which BlueZ package to use.\n","example":"pkgs.bluez.override { enableMidi = true; }","loc":["hardware","bluetooth","package"],"readOnly":false,"type":"package"},"hardware.bluetooth.powerOnBoot":{"declarations":["nixos/modules/services/hardware/bluetooth.nix"],"default":true,"description":"Whether to power up the default Bluetooth controller on boot.","loc":["hardware","bluetooth","powerOnBoot"],"readOnly":false,"type":"boolean"},"hardware.brightnessctl.enable":{"declarations":["nixos/modules/hardware/brightnessctl.nix"],"default":false,"description":"Enable brightnessctl in userspace.\nThis will allow brightness control from users in the video group.\n","loc":["hardware","brightnessctl","enable"],"readOnly":false,"type":"boolean"},"hardware.bumblebee.connectDisplay":{"declarations":["nixos/modules/hardware/video/bumblebee.nix"],"default":false,"description":"Set to true if you intend to connect your discrete card to a\nmonitor. This option will set up your Nvidia card for EDID\ndiscovery and to turn on the monitor signal.\n\nOnly nvidia driver is supported so far.\n","loc":["hardware","bumblebee","connectDisplay"],"readOnly":false,"type":"boolean"},"hardware.bumblebee.driver":{"declarations":["nixos/modules/hardware/video/bumblebee.nix"],"default":"nvidia","description":"Set driver used by bumblebeed. Supported are nouveau and nvidia.\n","loc":["hardware","bumblebee","driver"],"readOnly":false,"type":"one of \"nvidia\", \"nouveau\""},"hardware.bumblebee.enable":{"declarations":["nixos/modules/hardware/video/bumblebee.nix"],"default":false,"description":"Enable the bumblebee daemon to manage Optimus hybrid video cards.\nThis should power off secondary GPU until its use is requested\nby running an application with optirun.\n","loc":["hardware","bumblebee","enable"],"readOnly":false,"type":"boolean"},"hardware.bumblebee.group":{"declarations":["nixos/modules/hardware/video/bumblebee.nix"],"default":"wheel","description":"Group for bumblebee socket","example":"video","loc":["hardware","bumblebee","group"],"readOnly":false,"type":"string"},"hardware.bumblebee.pmMethod":{"declarations":["nixos/modules/hardware/video/bumblebee.nix"],"default":"auto","description":"Set preferred power management method for unused card.\n","loc":["hardware","bumblebee","pmMethod"],"readOnly":false,"type":"one of \"auto\", \"bbswitch\", \"switcheroo\", \"none\""},"hardware.ckb.enable":{"declarations":["nixos/modules/hardware/ckb.nix"],"default":false,"description":"Whether to enable the Corsair keyboard/mouse driver.","example":true,"loc":["hardware","ckb","enable"],"readOnly":false,"type":"boolean"},"hardware.ckb.package":{"declarations":["nixos/modules/hardware/ckb.nix"],"default":"pkgs.ckb","description":"The package implementing the Corsair keyboard/mouse driver.\n","loc":["hardware","ckb","package"],"readOnly":false,"type":"package"},"hardware.cpu.amd.updateMicrocode":{"declarations":["nixos/modules/hardware/cpu/amd-microcode.nix"],"default":false,"description":"Update the CPU microcode for AMD processors.\n","loc":["hardware","cpu","amd","updateMicrocode"],"readOnly":false,"type":"boolean"},"hardware.cpu.intel.updateMicrocode":{"declarations":["nixos/modules/hardware/cpu/intel-microcode.nix"],"default":false,"description":"Update the CPU microcode for Intel processors.\n","loc":["hardware","cpu","intel","updateMicrocode"],"readOnly":false,"type":"boolean"},"hardware.digitalbitbox.enable":{"declarations":["nixos/modules/hardware/digitalbitbox.nix"],"default":false,"description":"Enables udev rules for Digital Bitbox devices.\n","loc":["hardware","digitalbitbox","enable"],"readOnly":false,"type":"boolean"},"hardware.digitalbitbox.package":{"declarations":["nixos/modules/hardware/digitalbitbox.nix"],"default":"pkgs.digitalbitbox","description":"The Digital Bitbox package to use. This can be used to install a package with udev rules that differ from the defaults.","loc":["hardware","digitalbitbox","package"],"readOnly":false,"type":"package"},"hardware.enableAllFirmware":{"declarations":["nixos/modules/hardware/all-firmware.nix"],"default":false,"description":"Turn on this option if you want to enable all the firmware.\n","loc":["hardware","enableAllFirmware"],"readOnly":false,"type":"boolean"},"hardware.enableKSM":{"declarations":["nixos/modules/hardware/ksm.nix"],"default":false,"description":"Whether to enable Kernel Same-Page Merging.","example":true,"loc":["hardware","enableKSM"],"readOnly":false,"type":"boolean"},"hardware.enableRedistributableFirmware":{"declarations":["nixos/modules/hardware/all-firmware.nix"],"default":false,"description":"Turn on this option if you want to enable all the firmware with a license allowing redistribution.\n(i.e. free firmware and <literal>firmware-linux-nonfree</literal>)\n","loc":["hardware","enableRedistributableFirmware"],"readOnly":false,"type":"boolean"},"hardware.facetimehd.enable":{"declarations":["nixos/modules/hardware/video/webcam/facetimehd.nix"],"default":false,"description":"Whether to enable facetimehd kernel module.","example":true,"loc":["hardware","facetimehd","enable"],"readOnly":false,"type":"boolean"},"hardware.firmware":{"declarations":["nixos/modules/services/hardware/udev.nix"],"default":[],"description":"List of packages containing firmware files.  Such files\nwill be loaded automatically if the kernel asks for them\n(i.e., when it has detected specific hardware that requires\nfirmware to function).  If multiple packages contain firmware\nfiles with the same name, the first package in the list takes\nprecedence.  Note that you must rebuild your system if you add\nfiles to any of these directories.\n","loc":["hardware","firmware"],"readOnly":false,"type":"list of packages"},"hardware.mcelog.enable":{"declarations":["nixos/modules/hardware/mcelog.nix"],"default":false,"description":"Enable the Machine Check Exception logger.\n","loc":["hardware","mcelog","enable"],"readOnly":false,"type":"boolean"},"hardware.mwProCapture.enable":{"declarations":["nixos/modules/hardware/video/capture/mwprocapture.nix"],"default":false,"description":"Whether to enable Magewell Pro Capture family kernel module.","example":true,"loc":["hardware","mwProCapture","enable"],"readOnly":false,"type":"boolean"},"hardware.nitrokey.enable":{"declarations":["nixos/modules/hardware/nitrokey.nix"],"default":false,"description":"Enables udev rules for Nitrokey devices. By default grants access\nto users in the \"nitrokey\" group. You may want to install the\nnitrokey-app package, depending on your device and needs.\n","loc":["hardware","nitrokey","enable"],"readOnly":false,"type":"boolean"},"hardware.nitrokey.group":{"declarations":["nixos/modules/hardware/nitrokey.nix"],"default":"nitrokey","description":"Grant access to Nitrokey devices to users in this group.\n","example":"wheel","loc":["hardware","nitrokey","group"],"readOnly":false,"type":"string"},"hardware.nvidia.modesetting.enable":{"declarations":["nixos/modules/hardware/video/nvidia.nix"],"default":false,"description":"Enable kernel modesetting when using the NVIDIA proprietary driver.\n\nEnabling this fixes screen tearing when using Optimus via PRIME (see\n<option>hardware.nvidia.optimus_prime.enable</option>. This is not enabled\nby default because it is not officially supported by NVIDIA and would not\nwork with SLI.\n","loc":["hardware","nvidia","modesetting","enable"],"readOnly":false,"type":"boolean"},"hardware.nvidia.optimus_prime.enable":{"declarations":["nixos/modules/hardware/video/nvidia.nix"],"default":false,"description":"Enable NVIDIA Optimus support using the NVIDIA proprietary driver via PRIME.\nIf enabled, the NVIDIA GPU will be always on and used for all rendering,\nwhile enabling output to displays attached only to the integrated Intel GPU\nwithout a multiplexer.\n\nNote that this option only has any effect if the \"nvidia\" driver is specified\nin <option>services.xserver.videoDrivers</option>, and it should preferably\nbe the only driver there.\n\nIf this is enabled, then the bus IDs of the NVIDIA and Intel GPUs have to be\nspecified (<option>hardware.nvidia.optimus_prime.nvidiaBusId</option> and\n<option>hardware.nvidia.optimus_prime.intelBusId</option>).\n\nIf you enable this, you may want to also enable kernel modesetting for the\nNVIDIA driver (<option>hardware.nvidia.modesetting.enable</option>) in order\nto prevent tearing.\n\nNote that this configuration will only be successful when a display manager\nfor which the <option>services.xserver.displayManager.setupCommands</option>\noption is supported is used; notably, SLiM is not supported.\n","loc":["hardware","nvidia","optimus_prime","enable"],"readOnly":false,"type":"boolean"},"hardware.nvidia.optimus_prime.intelBusId":{"declarations":["nixos/modules/hardware/video/nvidia.nix"],"default":"","description":"Bus ID of the Intel GPU. You can find it using lspci; for example if lspci\nshows the Intel GPU at \"00:02.0\", set this option to \"PCI:0:2:0\".\n","example":"PCI:0:2:0","loc":["hardware","nvidia","optimus_prime","intelBusId"],"readOnly":false,"type":"Concatenated string"},"hardware.nvidia.optimus_prime.nvidiaBusId":{"declarations":["nixos/modules/hardware/video/nvidia.nix"],"default":"","description":"Bus ID of the NVIDIA GPU. You can find it using lspci; for example if lspci\nshows the NVIDIA GPU at \"01:00.0\", set this option to \"PCI:1:0:0\".\n","example":"PCI:1:0:0","loc":["hardware","nvidia","optimus_prime","nvidiaBusId"],"readOnly":false,"type":"Concatenated string"},"hardware.nvidiaOptimus.disable":{"declarations":["nixos/modules/services/hardware/nvidia-optimus.nix"],"default":false,"description":"Completely disable the NVIDIA graphics card and use the\nintegrated graphics processor instead.\n","loc":["hardware","nvidiaOptimus","disable"],"readOnly":false,"type":"boolean"},"hardware.onlykey.enable":{"declarations":["nixos/modules/hardware/onlykey.nix"],"default":false,"description":"Enable OnlyKey device (https://crp.to/p/) support.\n","loc":["hardware","onlykey","enable"],"readOnly":false,"type":"boolean"},"hardware.opengl.driSupport":{"declarations":["nixos/modules/hardware/opengl.nix"],"default":true,"description":"Whether to enable accelerated OpenGL rendering through the\nDirect Rendering Interface (DRI).\n","loc":["hardware","opengl","driSupport"],"readOnly":false,"type":"boolean"},"hardware.opengl.driSupport32Bit":{"declarations":["nixos/modules/hardware/opengl.nix"],"default":false,"description":"On 64-bit systems, whether to support Direct Rendering for\n32-bit applications (such as Wine).  This is currently only\nsupported for the <literal>nvidia</literal> and\n<literal>ati_unfree</literal> drivers, as well as\n<literal>Mesa</literal>.\n","loc":["hardware","opengl","driSupport32Bit"],"readOnly":false,"type":"boolean"},"hardware.opengl.enable":{"declarations":["nixos/modules/hardware/opengl.nix"],"default":false,"description":"Whether to enable OpenGL drivers. This is needed to enable\nOpenGL support in X11 systems, as well as for Wayland compositors\nlike sway, way-cooler and Weston. It is enabled by default\nby the corresponding modules, so you do not usually have to\nset it yourself, only if there is no module for your wayland\ncompositor of choice. See services.xserver.enable,\nprograms.sway.enable, and programs.way-cooler.enable.\n","loc":["hardware","opengl","enable"],"readOnly":false,"type":"boolean"},"hardware.opengl.extraPackages":{"declarations":["nixos/modules/hardware/opengl.nix"],"default":[],"description":"Additional packages to add to OpenGL drivers. This can be used\nto add OpenCL drivers, VA-API/VDPAU drivers etc.\n","example":{"_type":"literalExample","text":"with pkgs; [ vaapiIntel libvdpau-va-gl vaapiVdpau intel-ocl ]"},"loc":["hardware","opengl","extraPackages"],"readOnly":false,"type":"list of packages"},"hardware.opengl.extraPackages32":{"declarations":["nixos/modules/hardware/opengl.nix"],"default":[],"description":"Additional packages to add to 32-bit OpenGL drivers on\n64-bit systems. Used when <option>driSupport32Bit</option> is\nset. This can be used to add OpenCL drivers, VA-API/VDPAU drivers etc.\n","example":{"_type":"literalExample","text":"with pkgs.pkgsi686Linux; [ vaapiIntel libvdpau-va-gl vaapiVdpau ]"},"loc":["hardware","opengl","extraPackages32"],"readOnly":false,"type":"list of packages"},"hardware.opengl.s3tcSupport":{"declarations":["nixos/modules/hardware/opengl.nix"],"default":false,"description":"Make S3TC(S3 Texture Compression) via libtxc_dxtn available\nto OpenGL drivers instead of the patent-free S2TC replacement.\n\nUsing this library may require a patent license depending on your location.\n","loc":["hardware","opengl","s3tcSupport"],"readOnly":false,"type":"boolean"},"hardware.parallels.autoMountShares":{"declarations":["nixos/modules/virtualisation/parallels-guest.nix"],"default":true,"description":"Control prlfsmountd service. When this service is running, shares can not be manually\nmounted through `mount -t prl_fs ...` as this service will remount and trample any set options.\nRecommended to enable for simple file sharing, but extended share use such as for code should\ndisable this to manually mount shares.\n","loc":["hardware","parallels","autoMountShares"],"readOnly":false,"type":"boolean"},"hardware.parallels.enable":{"declarations":["nixos/modules/virtualisation/parallels-guest.nix"],"default":false,"description":"This enables Parallels Tools for Linux guests, along with provided\nvideo, mouse and other hardware drivers.\n","loc":["hardware","parallels","enable"],"readOnly":false,"type":"boolean"},"hardware.parallels.package":{"declarations":["nixos/modules/virtualisation/parallels-guest.nix"],"default":"config.boot.kernelPackages.prl-tools","description":"Defines which package to use for prl-tools. Override to change the version.\n","example":{"_type":"literalExample","text":"config.boot.kernelPackages.prl-tools"},"loc":["hardware","parallels","package"],"readOnly":false,"type":"package"},"hardware.pcmcia.config":{"declarations":["nixos/modules/hardware/pcmcia.nix"],"default":null,"description":"Path to the configuration file which maps the memory, IRQs\nand ports used by the PCMCIA hardware.\n","loc":["hardware","pcmcia","config"],"readOnly":false,"type":"unspecified"},"hardware.pcmcia.enable":{"declarations":["nixos/modules/hardware/pcmcia.nix"],"default":false,"description":"Enable this option to support PCMCIA card.\n","loc":["hardware","pcmcia","enable"],"readOnly":false,"type":"boolean"},"hardware.pcmcia.firmware":{"declarations":["nixos/modules/hardware/pcmcia.nix"],"default":[],"description":"List of firmware used to handle specific PCMCIA card.\n","loc":["hardware","pcmcia","firmware"],"readOnly":false,"type":"list of paths"},"hardware.pulseaudio.configFile":{"declarations":["nixos/modules/config/pulseaudio.nix"],"description":"The path to the default configuration options the PulseAudio server\nshould use. By default, the \"default.pa\" configuration\nfrom the PulseAudio distribution is used.\n","loc":["hardware","pulseaudio","configFile"],"readOnly":false,"type":"null or path"},"hardware.pulseaudio.daemon.config":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":{},"description":"Config of the pulse daemon. See <literal>man pulse-daemon.conf</literal>.","example":{"_type":"literalExample","text":"{ flat-volumes = \"no\"; }"},"loc":["hardware","pulseaudio","daemon","config"],"readOnly":false,"type":"attribute set of unspecifieds"},"hardware.pulseaudio.daemon.logLevel":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":"notice","description":"The log level that the system-wide pulseaudio daemon should use,\nif activated.\n","loc":["hardware","pulseaudio","daemon","logLevel"],"readOnly":false,"type":"string"},"hardware.pulseaudio.enable":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":false,"description":"Whether to enable the PulseAudio sound server.\n","loc":["hardware","pulseaudio","enable"],"readOnly":false,"type":"boolean"},"hardware.pulseaudio.extraClientConf":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":"","description":"Extra configuration appended to pulse/client.conf file.\n","loc":["hardware","pulseaudio","extraClientConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"hardware.pulseaudio.extraConfig":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":"","description":"Literal string to append to <literal>configFile</literal>\nand the config file generated by the pulseaudio module.\n","loc":["hardware","pulseaudio","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"hardware.pulseaudio.package":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":"pkgs.pulseaudio","description":"The PulseAudio derivation to use.  This can be used to enable\nfeatures (such as JACK support, Bluetooth) via the\n<literal>pulseaudioFull</literal> package.\n","example":{"_type":"literalExample","text":"pkgs.pulseaudioFull"},"loc":["hardware","pulseaudio","package"],"readOnly":false,"type":"package"},"hardware.pulseaudio.support32Bit":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":false,"description":"Whether to include the 32-bit pulseaudio libraries in the system or not.\nThis is only useful on 64-bit systems and currently limited to x86_64-linux.\n","loc":["hardware","pulseaudio","support32Bit"],"readOnly":false,"type":"boolean"},"hardware.pulseaudio.systemWide":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":false,"description":"If false, a PulseAudio server is launched automatically for\neach user that tries to use the sound system. The server runs\nwith user privileges. This is the recommended and most secure\nway to use PulseAudio. If true, one system-wide PulseAudio\nserver is launched on boot, running as the user \"pulse\", and\nonly users in the \"audio\" group will have access to the server.\nPlease read the PulseAudio documentation for more details.\n","loc":["hardware","pulseaudio","systemWide"],"readOnly":false,"type":"boolean"},"hardware.pulseaudio.tcp.anonymousClients.allowAll":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":false,"description":"Whether to enable all anonymous clients to stream to the server.","example":true,"loc":["hardware","pulseaudio","tcp","anonymousClients","allowAll"],"readOnly":false,"type":"boolean"},"hardware.pulseaudio.tcp.anonymousClients.allowedIpRanges":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":[],"description":"A list of IP subnets that are allowed to stream to the server.\n","example":{"_type":"literalExample","text":"[ \"127.0.0.1\" \"192.168.1.0/24\" ]"},"loc":["hardware","pulseaudio","tcp","anonymousClients","allowedIpRanges"],"readOnly":false,"type":"list of strings"},"hardware.pulseaudio.tcp.enable":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":false,"description":"Whether to enable tcp streaming support.","example":true,"loc":["hardware","pulseaudio","tcp","enable"],"readOnly":false,"type":"boolean"},"hardware.pulseaudio.zeroconf.discovery.enable":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":false,"description":"Whether to enable discovery of pulseaudio sinks in the local network.","example":true,"loc":["hardware","pulseaudio","zeroconf","discovery","enable"],"readOnly":false,"type":"boolean"},"hardware.pulseaudio.zeroconf.publish.enable":{"declarations":["nixos/modules/config/pulseaudio.nix"],"default":false,"description":"Whether to enable publishing the pulseaudio sink in the local network.","example":true,"loc":["hardware","pulseaudio","zeroconf","publish","enable"],"readOnly":false,"type":"boolean"},"hardware.raid.HPSmartArray.enable":{"declarations":["nixos/modules/hardware/raid/hpsa.nix"],"default":false,"description":"Whether to enable HP Smart Array kernel modules and CLI utility.","example":true,"loc":["hardware","raid","HPSmartArray","enable"],"readOnly":false,"type":"boolean"},"hardware.sane.brscan4.enable":{"declarations":["nixos/modules/services/hardware/sane_extra_backends/brscan4.nix"],"default":false,"description":"When enabled, will automatically register the \"brscan4\" sane\nbackend and bring configuration files to their expected location. \n","example":true,"loc":["hardware","sane","brscan4","enable"],"readOnly":false,"type":"boolean"},"hardware.sane.brscan4.netDevices":{"declarations":["nixos/modules/services/hardware/sane_extra_backends/brscan4.nix"],"default":{},"description":"The list of network devices that will be registered against the brscan4\nsane backend.\n","example":{"office1":{"ip":"192.168.1.2","model":"MFC-7860DW"},"office2":{"model":"MFC-7860DW","nodename":"BRW0080927AFBCE"}},"loc":["hardware","sane","brscan4","netDevices"],"readOnly":false,"type":"list or attribute set of submodules"},"hardware.sane.brscan4.netDevices.<name?>.ip":{"declarations":["nixos/modules/services/hardware/sane_extra_backends/brscan4.nix"],"default":null,"description":"The ip address of the device. If undefined, you will have to\nprovide a nodename.\n","example":{"_type":"literalExample","text":"192.168.1.2"},"loc":["hardware","sane","brscan4","netDevices","<name?>","ip"],"readOnly":false,"type":"null or string"},"hardware.sane.brscan4.netDevices.<name?>.model":{"declarations":["nixos/modules/services/hardware/sane_extra_backends/brscan4.nix"],"description":"The model of the network device.\n","example":{"_type":"literalExample","text":"MFC-7860DW"},"loc":["hardware","sane","brscan4","netDevices","<name?>","model"],"readOnly":false,"type":"string"},"hardware.sane.brscan4.netDevices.<name?>.name":{"declarations":["nixos/modules/services/hardware/sane_extra_backends/brscan4.nix"],"description":"The friendly name you give to the network device. If undefined,\nthe name of attribute will be used.\n","example":{"_type":"literalExample","text":"office1"},"loc":["hardware","sane","brscan4","netDevices","<name?>","name"],"readOnly":false,"type":"string"},"hardware.sane.brscan4.netDevices.<name?>.nodename":{"declarations":["nixos/modules/services/hardware/sane_extra_backends/brscan4.nix"],"default":null,"description":"The node name of the device. If undefined, you will have to\nprovide an ip.\n","example":{"_type":"literalExample","text":"BRW0080927AFBCE"},"loc":["hardware","sane","brscan4","netDevices","<name?>","nodename"],"readOnly":false,"type":"null or string"},"hardware.sane.enable":{"declarations":["nixos/modules/services/hardware/sane.nix"],"default":false,"description":"Enable support for SANE scanners.\n\n<note><para>\n  Users in the \"scanner\" group will gain access to the scanner, or the \"lp\" group if it's also a printer.\n</para></note>\n","loc":["hardware","sane","enable"],"readOnly":false,"type":"boolean"},"hardware.sane.extraBackends":{"declarations":["nixos/modules/services/hardware/sane.nix"],"default":[],"description":"Packages providing extra SANE backends to enable.\n\n<note><para>\n  The example contains the package for HP scanners.\n</para></note>\n","example":{"_type":"literalExample","text":"[ pkgs.hplipWithPlugin ]"},"loc":["hardware","sane","extraBackends"],"readOnly":false,"type":"list of paths"},"hardware.sane.netConf":{"declarations":["nixos/modules/services/hardware/sane.nix"],"default":"","description":"Network hosts that should be probed for remote scanners.\n","example":"192.168.0.16","loc":["hardware","sane","netConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"hardware.sane.snapshot":{"declarations":["nixos/modules/services/hardware/sane.nix"],"default":false,"description":"Use a development snapshot of SANE scanner drivers.","loc":["hardware","sane","snapshot"],"readOnly":false,"type":"boolean"},"hardware.sensor.iio.enable":{"declarations":["nixos/modules/hardware/sensor/iio.nix"],"default":false,"description":"Enable this option to support IIO sensors.","loc":["hardware","sensor","iio","enable"],"readOnly":false,"type":"boolean"},"hardware.steam-hardware.enable":{"declarations":["nixos/modules/hardware/steam-hardware.nix"],"default":false,"description":"Enable udev rules for Steam hardware such as the Steam Controller, other supported controllers and the HTC Vive","loc":["hardware","steam-hardware","enable"],"readOnly":false,"type":"boolean"},"hardware.trackpoint.device":{"declarations":["nixos/modules/tasks/trackpoint.nix"],"default":"TPPS/2 IBM TrackPoint","description":"The device name of the trackpoint. You can check with xinput.\nSome newer devices (example x1c6) use \"TPPS/2 Elan TrackPoint\".\n","loc":["hardware","trackpoint","device"],"readOnly":false,"type":"string"},"hardware.trackpoint.emulateWheel":{"declarations":["nixos/modules/tasks/trackpoint.nix"],"default":false,"description":"Enable scrolling while holding the middle mouse button.\n","loc":["hardware","trackpoint","emulateWheel"],"readOnly":false,"type":"boolean"},"hardware.trackpoint.enable":{"declarations":["nixos/modules/tasks/trackpoint.nix"],"default":false,"description":"Enable sensitivity and speed configuration for trackpoints.\n","loc":["hardware","trackpoint","enable"],"readOnly":false,"type":"boolean"},"hardware.trackpoint.fakeButtons":{"declarations":["nixos/modules/tasks/trackpoint.nix"],"default":false,"description":"Switch to \"bare\" PS/2 mouse support in case Trackpoint buttons are not recognized\nproperly. This can happen for example on models like the L430, T450, T450s, on\nwhich the Trackpoint buttons are actually a part of the Synaptics touchpad.\n","loc":["hardware","trackpoint","fakeButtons"],"readOnly":false,"type":"boolean"},"hardware.trackpoint.sensitivity":{"declarations":["nixos/modules/tasks/trackpoint.nix"],"default":128,"description":"Configure the trackpoint sensitivity. By default, the kernel\nconfigures 128.\n","example":255,"loc":["hardware","trackpoint","sensitivity"],"readOnly":false,"type":"signed integer"},"hardware.trackpoint.speed":{"declarations":["nixos/modules/tasks/trackpoint.nix"],"default":97,"description":"Configure the trackpoint speed. By default, the kernel\nconfigures 97.\n","example":255,"loc":["hardware","trackpoint","speed"],"readOnly":false,"type":"signed integer"},"hardware.u2f.enable":{"declarations":["nixos/modules/services/hardware/u2f.nix"],"default":false,"description":"Enable U2F hardware support.\n","loc":["hardware","u2f","enable"],"readOnly":false,"type":"boolean"},"hardware.usbWwan.enable":{"declarations":["nixos/modules/hardware/usb-wwan.nix"],"default":false,"description":"Enable this option to support USB WWAN adapters.\n","loc":["hardware","usbWwan","enable"],"readOnly":false,"type":"boolean"},"i18n.consoleColors":{"declarations":["nixos/modules/config/i18n.nix"],"default":[],"description":"The 16 colors palette used by the virtual consoles.\nLeave empty to use the default colors.\nColors must be in hexadecimal format and listed in\norder from color 0 to color 15.\n","example":["002b36","dc322f","859900","b58900","268bd2","d33682","2aa198","eee8d5","002b36","cb4b16","586e75","657b83","839496","6c71c4","93a1a1","fdf6e3"],"loc":["i18n","consoleColors"],"readOnly":false,"type":"list of strings"},"i18n.consoleFont":{"declarations":["nixos/modules/config/i18n.nix"],"default":"Lat2-Terminus16","description":"The font used for the virtual consoles.  Leave empty to use\nwhatever the <command>setfont</command> program considers the\ndefault font.\n","example":"LatArCyrHeb-16","loc":["i18n","consoleFont"],"readOnly":false,"type":"string"},"i18n.consoleKeyMap":{"declarations":["nixos/modules/config/i18n.nix"],"default":"us","description":"The keyboard mapping table for the virtual consoles.\n","example":"fr","loc":["i18n","consoleKeyMap"],"readOnly":false,"type":"string or path"},"i18n.consolePackages":{"declarations":["nixos/modules/config/i18n.nix"],"default":"with pkgs.kbdKeymaps; [ dvp neo ]","description":"List of additional packages that provide console fonts, keymaps and\nother resources.\n","loc":["i18n","consolePackages"],"readOnly":false,"type":"list of packages"},"i18n.consoleUseXkbConfig":{"declarations":["nixos/modules/config/i18n.nix"],"default":false,"description":"If set, configure the console keymap from the xserver keyboard\nsettings.\n","loc":["i18n","consoleUseXkbConfig"],"readOnly":false,"type":"boolean"},"i18n.defaultLocale":{"declarations":["nixos/modules/config/i18n.nix"],"default":"en_US.UTF-8","description":"The default locale.  It determines the language for program\nmessages, the format for dates and times, sort order, and so on.\nIt also determines the character set, such as UTF-8.\n","example":"nl_NL.UTF-8","loc":["i18n","defaultLocale"],"readOnly":false,"type":"string"},"i18n.glibcLocales":{"declarations":["nixos/modules/config/i18n.nix"],"default":"glibc-locales-2.27","description":"Customized pkg.glibcLocales package.\n\nChanging this option can disable handling of i18n.defaultLocale\nand supportedLocale.\n","example":{"_type":"literalExample","text":"pkgs.glibcLocales"},"loc":["i18n","glibcLocales"],"readOnly":false,"type":"path"},"i18n.inputMethod.enabled":{"declarations":["nixos/modules/i18n/input-method/default.nix"],"default":null,"description":"Select the enabled input method. Input methods is a software to input symbols that are not available on standard input devices.\n\nInput methods are specially used to input Chinese, Japanese and Korean characters.\n\nCurrently the following input methods are available in NixOS:\n\n<itemizedlist>\n<listitem><para>ibus: The intelligent input bus, extra input engines can be added using <literal>i18n.inputMethod.ibus.engines</literal>.</para></listitem>\n<listitem><para>fcitx: A customizable lightweight input method, extra input engines can be added using <literal>i18n.inputMethod.fcitx.engines</literal>.</para></listitem>\n<listitem><para>nabi: A Korean input method based on XIM. Nabi doesn't support Qt 5.</para></listitem>\n<listitem><para>uim: The universal input method, is a library with a XIM bridge. uim mainly support Chinese, Japanese and Korean.</para></listitem>\n</itemizedlist>\n","example":"fcitx","loc":["i18n","inputMethod","enabled"],"readOnly":false,"type":"null or one of \"ibus\", \"fcitx\", \"nabi\", \"uim\""},"i18n.inputMethod.fcitx.engines":{"declarations":["nixos/modules/i18n/input-method/fcitx.nix"],"default":[],"description":"Enabled Fcitx engines. Available engines are: <literal>anthy</literal>, <literal>chewing</literal>, <literal>cloudpinyin</literal>, <literal>hangul</literal>, <literal>libpinyin</literal>, <literal>m17n</literal>, <literal>mozc</literal>, <literal>rime</literal>, <literal>skk</literal>, <literal>table-extra</literal>, <literal>table-other</literal>, <literal>unikey</literal>.","example":{"_type":"literalExample","text":"with pkgs.fcitx-engines; [ mozc hangul ]"},"loc":["i18n","inputMethod","fcitx","engines"],"readOnly":false,"type":"list of packages"},"i18n.inputMethod.ibus.engines":{"declarations":["nixos/modules/i18n/input-method/ibus.nix"],"default":[],"description":"Enabled IBus engines. Available engines are: <literal>anthy</literal>, <literal>hangul</literal>, <literal>kkc</literal>, <literal>libpinyin</literal>, <literal>m17n</literal>, <literal>mozc</literal>, <literal>table</literal>, <literal>table-others</literal>, <literal>typing-booster</literal>, <literal>typing-booster-unwrapped</literal>, <literal>uniemoji</literal>.","example":{"_type":"literalExample","text":"with pkgs.ibus-engines; [ mozc hangul ]"},"loc":["i18n","inputMethod","ibus","engines"],"readOnly":false,"type":"list of packages"},"i18n.inputMethod.ibus.panel":{"declarations":["nixos/modules/i18n/input-method/ibus.nix"],"default":null,"description":"Replace the IBus panel with another panel.","example":{"_type":"literalExample","text":"''${pkgs.plasma5.plasma-desktop}/lib/libexec/kimpanel-ibus-panel"},"loc":["i18n","inputMethod","ibus","panel"],"readOnly":false,"type":"null or path"},"i18n.inputMethod.uim.toolbar":{"declarations":["nixos/modules/i18n/input-method/uim.nix"],"default":"gtk","description":"selected UIM toolbar.\n","example":"gtk-systray","loc":["i18n","inputMethod","uim","toolbar"],"readOnly":false,"type":"one of \"gtk\", \"gtk3\", \"gtk-systray\", \"gtk3-systray\", \"qt4\""},"i18n.supportedLocales":{"declarations":["nixos/modules/config/i18n.nix"],"default":["all"],"description":"List of locales that the system should support.  The value\n<literal>\"all\"</literal> means that all locales supported by\nGlibc will be installed.  A full list of supported locales\ncan be found at <link\nxlink:href=\"https://sourceware.org/git/?p=glibc.git;a=blob;f=localedata/SUPPORTED\"/>.\n","example":["en_US.UTF-8/UTF-8","nl_NL.UTF-8/UTF-8","nl_NL/ISO-8859-1"],"loc":["i18n","supportedLocales"],"readOnly":false,"type":"list of strings"},"krb5.appdefaults":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":{},"description":"Settings used by some Kerberos V5 applications.\n","example":{"_type":"literalExample","text":"{\n  pam = {\n    debug = false;\n    ticket_lifetime = 36000;\n    renew_lifetime = 36000;\n    max_timeout = 30;\n    timeout_shift = 2;\n    initial_timeout = 1;\n  };\n};\n"},"loc":["krb5","appdefaults"],"readOnly":false,"type":"attribute set or strings concatenated with \"\\n\""},"krb5.capaths":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":{},"description":"Authentication paths for non-hierarchical cross-realm authentication.\n","example":{"_type":"literalExample","text":"{\n  \"ATHENA.MIT.EDU\" = {\n    \"EXAMPLE.COM\" = \".\";\n  };\n  \"EXAMPLE.COM\" = {\n    \"ATHENA.MIT.EDU\" = \".\";\n  };\n};\n"},"loc":["krb5","capaths"],"readOnly":false,"type":"attribute set or strings concatenated with \"\\n\""},"krb5.config":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":null,"description":"Verbatim <literal>krb5.conf</literal> configuration.  Note that this\nis mutually exclusive with configuration via\n<literal>libdefaults</literal>, <literal>realms</literal>,\n<literal>domain_realm</literal>, <literal>capaths</literal>,\n<literal>appdefaults</literal>, <literal>plugins</literal> and\n<literal>extraConfig</literal> configuration options.  Consult\n<literal>man krb5.conf</literal> for documentation.\n","example":"[libdefaults]\n  default_realm = EXAMPLE.COM\n\n[realms]\n  EXAMPLE.COM = {\n    admin_server = kerberos.example.com\n    kdc = kerberos.example.com\n    default_principal_flags = +preauth\n  }\n\n[domain_realm]\n  example.com  = EXAMPLE.COM\n  .example.com = EXAMPLE.COM\n\n[logging]\n  kdc          = SYSLOG:NOTICE\n  admin_server = SYSLOG:NOTICE\n  default      = SYSLOG:NOTICE\n","loc":["krb5","config"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"krb5.defaultRealm":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":null,"description":"DEPRECATED, please use\n<literal>krb5.libdefaults.default_realm</literal>.\n","example":"ATHENA.MIT.EDU","loc":["krb5","defaultRealm"],"readOnly":false,"type":"null or string"},"krb5.domainRealm":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":null,"description":"DEPRECATED, please create a map of server hostnames to Kerberos realms\nin <literal>krb5.domain_realm</literal>.\n","example":"athena.mit.edu","loc":["krb5","domainRealm"],"readOnly":false,"type":"null or string"},"krb5.domain_realm":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":{},"description":"Map of server hostnames to Kerberos realms.\n","example":{"_type":"literalExample","text":"{\n  \"example.com\" = \"EXAMPLE.COM\";\n  \".example.com\" = \"EXAMPLE.COM\";\n};\n"},"loc":["krb5","domain_realm"],"readOnly":false,"type":"attribute set or strings concatenated with \"\\n\""},"krb5.enable":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":false,"description":"Whether to enable building krb5.conf, configuration file for Kerberos V.","example":true,"loc":["krb5","enable"],"readOnly":false,"type":"boolean"},"krb5.extraConfig":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":null,"description":"These lines go to the end of <literal>krb5.conf</literal> verbatim.\n<literal>krb5.conf</literal> may include any of the relations that are\nvalid for <literal>kdc.conf</literal> (see <literal>man\nkdc.conf</literal>), but it is not a recommended practice.\n","example":"[logging]\n  kdc          = SYSLOG:NOTICE\n  admin_server = SYSLOG:NOTICE\n  default      = SYSLOG:NOTICE\n","loc":["krb5","extraConfig"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"krb5.kdc":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":null,"description":"DEPRECATED, please pass a <literal>kdc</literal> attribute to a realm\nin <literal>krb5.realms</literal>.\n","example":"kerberos.mit.edu","loc":["krb5","kdc"],"readOnly":false,"type":"null or string"},"krb5.kerberos":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":"pkgs.krb5Full","description":"The Kerberos implementation that will be present in\n<literal>environment.systemPackages</literal> after enabling this\nservice.\n","example":{"_type":"literalExample","text":"pkgs.heimdalFull"},"loc":["krb5","kerberos"],"readOnly":false,"type":"package"},"krb5.kerberosAdminServer":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":null,"description":"DEPRECATED, please pass an <literal>admin_server</literal> attribute\nto a realm in <literal>krb5.realms</literal>.\n","example":"kerberos.mit.edu","loc":["krb5","kerberosAdminServer"],"readOnly":false,"type":"null or string"},"krb5.libdefaults":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":{},"description":"Settings used by the Kerberos V5 library.\n","example":{"_type":"literalExample","text":"{\n  default_realm = \"ATHENA.MIT.EDU\";\n};\n"},"loc":["krb5","libdefaults"],"readOnly":false,"type":"attribute set or strings concatenated with \"\\n\""},"krb5.plugins":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":{},"description":"Controls plugin module registration.\n","example":{"_type":"literalExample","text":"{\n  ccselect = {\n    disable = \"k5identity\";\n  };\n};\n"},"loc":["krb5","plugins"],"readOnly":false,"type":"attribute set or strings concatenated with \"\\n\""},"krb5.realms":{"declarations":["nixos/modules/config/krb5/default.nix"],"default":{},"description":"Realm-specific contact information and settings.","example":{"_type":"literalExample","text":"{\n  \"ATHENA.MIT.EDU\" = {\n    admin_server = \"athena.mit.edu\";\n    kdc = \"athena.mit.edu\";\n  };\n};\n"},"loc":["krb5","realms"],"readOnly":false,"type":"attribute set or strings concatenated with \"\\n\""},"lib":{"declarations":["nixos/modules/misc/lib.nix"],"default":{},"description":"This option allows modules to define helper functions, constants, etc.\n","loc":["lib"],"readOnly":false,"type":"attribute set of attribute sets"},"nesting.children":{"declarations":["nixos/modules/system/activation/top-level.nix"],"default":[],"description":"Additional configurations to build.\n","loc":["nesting","children"],"readOnly":false,"type":"unspecified"},"nesting.clone":{"declarations":["nixos/modules/system/activation/top-level.nix"],"default":[],"description":"Additional configurations to build based on the current\nconfiguration which then has a lower priority.\n\nTo switch to a cloned configuration (e.g. <literal>child-1</literal>)\nat runtime, run\n\n<programlisting>\n# sudo /run/current-system/fine-tune/child-1/bin/switch-to-configuration test\n</programlisting>\n","loc":["nesting","clone"],"readOnly":false,"type":"unspecified"},"networking.bonds":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"This option allows you to define bond devices that aggregate multiple,\nunderlying networking interfaces together. The value of this option is\nan attribute set. Each attribute specifies a bond, with the attribute\nname specifying the name of the bond's network interface\n","example":{"_type":"literalExample","text":{"anotherBond":{"interfaces":["enp4s0f0","enp4s0f1","enp5s0f0","enp5s0f1"]},"bond0":{"driverOptions":{"miimon":"100","mode":"active-backup"},"interfaces":["eth0","wlan0"]}}},"loc":["networking","bonds"],"readOnly":false,"type":"attribute set of submodules"},"networking.bonds.<name>.driverOptions":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"Options for the bonding driver.\nDocumentation can be found in\n<link xlink:href=\"https://www.kernel.org/doc/Documentation/networking/bonding.txt\" />\n","example":{"_type":"literalExample","text":{"miimon":"100","mode":"active-backup"}},"loc":["networking","bonds","<name>","driverOptions"],"readOnly":false,"type":"attribute set of strings"},"networking.bonds.<name>.interfaces":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The interfaces to bond together","example":["enp4s0f0","enp4s0f1","wlan0"],"loc":["networking","bonds","<name>","interfaces"],"readOnly":false,"type":"list of strings"},"networking.bonds.<name>.lacp_rate":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"DEPRECATED, use `driverOptions`.\nOption specifying the rate in which we'll ask our link partner\nto transmit LACPDU packets in 802.3ad mode.\n","example":"fast","loc":["networking","bonds","<name>","lacp_rate"],"readOnly":false,"type":"null or string"},"networking.bonds.<name>.miimon":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"DEPRECATED, use `driverOptions`.\nMiimon is the number of millisecond in between each round of polling\nby the device driver for failed links. By default polling is not\nenabled and the driver is trusted to properly detect and handle\nfailure scenarios.\n","example":100,"loc":["networking","bonds","<name>","miimon"],"readOnly":false,"type":"null or signed integer"},"networking.bonds.<name>.mode":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"DEPRECATED, use `driverOptions`.\nThe mode which the bond will be running. The default mode for\nthe bonding driver is balance-rr, optimizing for throughput.\nMore information about valid modes can be found at\nhttps://www.kernel.org/doc/Documentation/networking/bonding.txt\n","example":"active-backup","loc":["networking","bonds","<name>","mode"],"readOnly":false,"type":"null or string"},"networking.bonds.<name>.xmit_hash_policy":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"DEPRECATED, use `driverOptions`.\nSelects the transmit hash policy to use for slave selection in\nbalance-xor, 802.3ad, and tlb modes.\n","example":"layer2+3","loc":["networking","bonds","<name>","xmit_hash_policy"],"readOnly":false,"type":"null or string"},"networking.bridges":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"This option allows you to define Ethernet bridge devices\nthat connect physical networks together.  The value of this\noption is an attribute set.  Each attribute specifies a\nbridge, with the attribute name specifying the name of the\nbridge's network interface.\n","example":{"br0":{"interfaces":["eth0","eth1"]},"br1":{"interfaces":["eth2","wlan0"]}},"loc":["networking","bridges"],"readOnly":false,"type":"attribute set of submodules"},"networking.bridges.<name>.interfaces":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The physical network interfaces connected by the bridge.","example":["eth0","eth1"],"loc":["networking","bridges","<name>","interfaces"],"readOnly":false,"type":"list of strings"},"networking.bridges.<name>.rstp":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":false,"description":"Whether the bridge interface should enable rstp.","loc":["networking","bridges","<name>","rstp"],"readOnly":false,"type":"boolean"},"networking.connman.enable":{"declarations":["nixos/modules/services/networking/connman.nix"],"default":false,"description":"Whether to use ConnMan for managing your network connections.\n","loc":["networking","connman","enable"],"readOnly":false,"type":"boolean"},"networking.connman.enableVPN":{"declarations":["nixos/modules/services/networking/connman.nix"],"default":true,"description":"Whether to enable ConnMan VPN service.\n","loc":["networking","connman","enableVPN"],"readOnly":false,"type":"boolean"},"networking.connman.extraConfig":{"declarations":["nixos/modules/services/networking/connman.nix"],"default":"","description":"Configuration lines appended to the generated connman configuration file.\n","loc":["networking","connman","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.connman.extraFlags":{"declarations":["nixos/modules/services/networking/connman.nix"],"default":[],"description":"Extra flags to pass to connmand\n","example":["--nodnsproxy"],"loc":["networking","connman","extraFlags"],"readOnly":false,"type":"list of Concatenated strings"},"networking.connman.networkInterfaceBlacklist":{"declarations":["nixos/modules/services/networking/connman.nix"],"default":["vmnet","vboxnet","virbr","ifb","ve"],"description":"Default blacklisted interfaces, this includes NixOS containers interfaces (ve).\n","loc":["networking","connman","networkInterfaceBlacklist"],"readOnly":false,"type":"list of Concatenated strings"},"networking.defaultGateway":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The default gateway. It can be left empty if it is auto-detected through DHCP.\nIt can be specified as a string or an option set along with a network interface.\n","example":{"address":"131.211.84.1","interface":"enp3s0"},"loc":["networking","defaultGateway"],"readOnly":false,"type":"null or submodule or string convertible to it"},"networking.defaultGateway.address":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The default gateway address.","loc":["networking","defaultGateway","address"],"readOnly":false,"type":"string"},"networking.defaultGateway.interface":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The default gateway interface.","example":"enp0s3","loc":["networking","defaultGateway","interface"],"readOnly":false,"type":"null or string"},"networking.defaultGateway.metric":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The default gateway metric/preference.","example":42,"loc":["networking","defaultGateway","metric"],"readOnly":false,"type":"null or signed integer"},"networking.defaultGateway6":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The default ipv6 gateway. It can be left empty if it is auto-detected through DHCP.\nIt can be specified as a string or an option set along with a network interface.\n","example":{"address":"2001:4d0:1e04:895::1","interface":"enp3s0"},"loc":["networking","defaultGateway6"],"readOnly":false,"type":"null or submodule or string convertible to it"},"networking.defaultGateway6.address":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The default gateway address.","loc":["networking","defaultGateway6","address"],"readOnly":false,"type":"string"},"networking.defaultGateway6.interface":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The default gateway interface.","example":"enp0s3","loc":["networking","defaultGateway6","interface"],"readOnly":false,"type":"null or string"},"networking.defaultGateway6.metric":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The default gateway metric/preference.","example":42,"loc":["networking","defaultGateway6","metric"],"readOnly":false,"type":"null or signed integer"},"networking.defaultGatewayWindowSize":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The window size of the default gateway. It limits maximal data bursts that TCP peers\nare allowed to send to us.\n","example":524288,"loc":["networking","defaultGatewayWindowSize"],"readOnly":false,"type":"null or signed integer"},"networking.defaultMailServer.authPass":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":"","description":"Password used for SMTP auth. (STORED PLAIN TEXT, WORLD-READABLE IN NIX STORE)\n\nIt's recommended to use <option>authPassFile</option>\nwhich takes precedence over <option>authPass</option>.\n","example":"correctHorseBatteryStaple","loc":["networking","defaultMailServer","authPass"],"readOnly":false,"type":"string"},"networking.defaultMailServer.authPassFile":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":null,"description":"Path to a file that contains the password used for SMTP auth. The file\nshould not contain a trailing newline, if the password does not contain one.\nThis file should be readable by the users that need to execute ssmtp.\n\n<option>authPassFile</option> takes precedence over <option>authPass</option>.\n\nWarning: when <option>authPass</option> is non-empty <option>authPassFile</option>\ndefaults to a file in the WORLD-READABLE Nix store containing that password.\n","example":"/run/keys/ssmtp-authpass","loc":["networking","defaultMailServer","authPassFile"],"readOnly":false,"type":"null or string"},"networking.defaultMailServer.authUser":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":"","description":"Username used for SMTP auth. Leave blank to disable.\n","example":"foo@example.org","loc":["networking","defaultMailServer","authUser"],"readOnly":false,"type":"string"},"networking.defaultMailServer.directDelivery":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":false,"description":"Use the trivial Mail Transfer Agent (MTA)\n<command>ssmtp</command> package to allow programs to send\ne-mail.  If you don't want to run a “real” MTA like\n<command>sendmail</command> or <command>postfix</command> on\nyour machine, set this option to <literal>true</literal>, and\nset the option\n<option>networking.defaultMailServer.hostName</option> to the\nhost name of your preferred mail server.\n","loc":["networking","defaultMailServer","directDelivery"],"readOnly":false,"type":"boolean"},"networking.defaultMailServer.domain":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":"","description":"The domain from which mail will appear to be sent.\n","example":"example.org","loc":["networking","defaultMailServer","domain"],"readOnly":false,"type":"string"},"networking.defaultMailServer.hostName":{"declarations":["nixos/modules/programs/ssmtp.nix"],"description":"The host name of the default mail server to use to deliver\ne-mail. Can also contain a port number (ex: mail.example.org:587),\ndefaults to port 25 if no port is given.\n","example":"mail.example.org","loc":["networking","defaultMailServer","hostName"],"readOnly":false,"type":"string"},"networking.defaultMailServer.root":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":"","description":"The e-mail to which mail for users with UID &lt; 1000 is forwarded.\n","example":"root@example.org","loc":["networking","defaultMailServer","root"],"readOnly":false,"type":"string"},"networking.defaultMailServer.setSendmail":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":true,"description":"Whether to set the system sendmail to ssmtp's.","loc":["networking","defaultMailServer","setSendmail"],"readOnly":false,"type":"boolean"},"networking.defaultMailServer.useSTARTTLS":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":false,"description":"Whether the STARTTLS should be used to connect to the default\nmail server.  (This is needed for TLS-capable mail servers\nrunning on the default SMTP port 25.)\n","loc":["networking","defaultMailServer","useSTARTTLS"],"readOnly":false,"type":"boolean"},"networking.defaultMailServer.useTLS":{"declarations":["nixos/modules/programs/ssmtp.nix"],"default":false,"description":"Whether TLS should be used to connect to the default mail\nserver.\n","loc":["networking","defaultMailServer","useTLS"],"readOnly":false,"type":"boolean"},"networking.dhcpcd.allowInterfaces":{"declarations":["nixos/modules/services/networking/dhcpcd.nix"],"default":null,"description":"Enable the DHCP client for any interface whose name matches\nany of the shell glob patterns in this list. Any interface not\nexplicitly matched by this pattern will be denied. This pattern only\napplies when non-null.\n","loc":["networking","dhcpcd","allowInterfaces"],"readOnly":false,"type":"null or list of strings"},"networking.dhcpcd.denyInterfaces":{"declarations":["nixos/modules/services/networking/dhcpcd.nix"],"default":[],"description":"Disable the DHCP client for any interface whose name matches\nany of the shell glob patterns in this list. The purpose of\nthis option is to blacklist virtual interfaces such as those\ncreated by Xen, libvirt, LXC, etc.\n","loc":["networking","dhcpcd","denyInterfaces"],"readOnly":false,"type":"list of strings"},"networking.dhcpcd.enable":{"declarations":["nixos/modules/services/networking/dhcpcd.nix"],"default":true,"description":"Whether to enable dhcpcd for device configuration. This is mainly to\nexplicitly disable dhcpcd (for example when using networkd).\n","loc":["networking","dhcpcd","enable"],"readOnly":false,"type":"boolean"},"networking.dhcpcd.extraConfig":{"declarations":["nixos/modules/services/networking/dhcpcd.nix"],"default":"","description":"Literal string to append to the config file generated for dhcpcd.\n","loc":["networking","dhcpcd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.dhcpcd.persistent":{"declarations":["nixos/modules/services/networking/dhcpcd.nix"],"default":false,"description":"Whenever to leave interfaces configured on dhcpcd daemon\nshutdown. Set to true if you have your root or store mounted\nover the network or this machine accepts SSH connections\nthrough DHCP interfaces and clients should be notified when\nit shuts down.\n","loc":["networking","dhcpcd","persistent"],"readOnly":false,"type":"boolean"},"networking.dhcpcd.runHook":{"declarations":["nixos/modules/services/networking/dhcpcd.nix"],"default":"","description":"Shell code that will be run after all other hooks. See\n`man dhcpcd-run-hooks` for details on what is possible.\n","example":"if [[ $reason =~ BOUND ]]; then echo $interface: Routers are $new_routers - were $old_routers; fi","loc":["networking","dhcpcd","runHook"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.dnsExtensionMechanism":{"declarations":["nixos/modules/config/networking.nix"],"default":true,"description":"Enable the <code>edns0</code> option in <filename>resolv.conf</filename>. With\nthat option set, <code>glibc</code> supports use of the extension mechanisms for\nDNS (EDNS) specified in RFC 2671. The most popular user of that feature is DNSSEC,\nwhich does not work without it.\n","loc":["networking","dnsExtensionMechanism"],"readOnly":false,"type":"boolean"},"networking.dnsSingleRequest":{"declarations":["nixos/modules/config/networking.nix"],"default":false,"description":"Recent versions of glibc will issue both ipv4 (A) and ipv6 (AAAA)\naddress queries at the same time, from the same port. Sometimes upstream\nrouters will systemically drop the ipv4 queries. The symptom of this problem is\nthat 'getent hosts example.com' only returns ipv6 (or perhaps only ipv4) addresses. The\nworkaround for this is to specify the option 'single-request' in\n/etc/resolv.conf. This option enables that.\n","loc":["networking","dnsSingleRequest"],"readOnly":false,"type":"boolean"},"networking.domain":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The domain.  It can be left empty if it is auto-detected through DHCP.\n","example":"home","loc":["networking","domain"],"readOnly":false,"type":"null or string"},"networking.enableB43Firmware":{"declarations":["nixos/modules/hardware/network/b43.nix"],"default":false,"description":"Turn on this option if you want firmware for the NICs supported by the b43 module.\n","loc":["networking","enableB43Firmware"],"readOnly":false,"type":"boolean"},"networking.enableIPv6":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":true,"description":"Whether to enable support for IPv6.\n","loc":["networking","enableIPv6"],"readOnly":false,"type":"boolean"},"networking.extraHosts":{"declarations":["nixos/modules/config/networking.nix"],"default":"","description":"Additional verbatim entries to be appended to <filename>/etc/hosts</filename>.\n","example":"192.168.0.1 lanlocalhost","loc":["networking","extraHosts"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.extraResolvconfConf":{"declarations":["nixos/modules/config/networking.nix"],"default":"","description":"Extra configuration to append to <filename>resolvconf.conf</filename>.\n","example":"libc=NO","loc":["networking","extraResolvconfConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.firewall.allowPing":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":true,"description":"Whether to respond to incoming ICMPv4 echo requests\n(\"pings\").  ICMPv6 pings are always allowed because the\nlarger address space of IPv6 makes network scanning much\nless effective.\n","loc":["networking","firewall","allowPing"],"readOnly":false,"type":"boolean"},"networking.firewall.allowedTCPPortRanges":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"A range of TCP ports on which incoming connections are\naccepted.\n","example":[{"from":8999,"to":9003}],"loc":["networking","firewall","allowedTCPPortRanges"],"readOnly":false,"type":"list of attribute set of signed integerss"},"networking.firewall.allowedTCPPorts":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"List of TCP ports on which incoming connections are\naccepted.\n","example":[22,80],"loc":["networking","firewall","allowedTCPPorts"],"readOnly":false,"type":"list of signed integers"},"networking.firewall.allowedUDPPortRanges":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"Range of open UDP ports.\n","example":[{"from":60000,"to":61000}],"loc":["networking","firewall","allowedUDPPortRanges"],"readOnly":false,"type":"list of attribute set of signed integerss"},"networking.firewall.allowedUDPPorts":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"List of open UDP ports.\n","example":[53],"loc":["networking","firewall","allowedUDPPorts"],"readOnly":false,"type":"list of signed integers"},"networking.firewall.autoLoadConntrackHelpers":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":false,"description":"Whether to auto-load connection-tracking helpers.\nSee the description at networking.firewall.connectionTrackingModules\n\n(needs kernel 3.5+)\n","loc":["networking","firewall","autoLoadConntrackHelpers"],"readOnly":false,"type":"boolean"},"networking.firewall.checkReversePath":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":true,"description":"Performs a reverse path filter test on a packet.  If a reply\nto the packet would not be sent via the same interface that\nthe packet arrived on, it is refused.\n\nIf using asymmetric routing or other complicated routing, set\nthis option to loose mode or disable it and setup your own\ncounter-measures.\n\nThis option can be either true (or \"strict\"), \"loose\" (only\ndrop the packet if the source address is not reachable via any\ninterface) or false.  Defaults to the value of\nkernelHasRPFilter.\n\n(needs kernel 3.3+)\n","example":"loose","loc":["networking","firewall","checkReversePath"],"readOnly":false,"type":"boolean or one of \"strict\", \"loose\""},"networking.firewall.connectionTrackingModules":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"List of connection-tracking helpers that are auto-loaded.\nThe complete list of possible values is given in the example.\n\nAs helpers can pose as a security risk, it is advised to\nset this to an empty list and disable the setting\nnetworking.firewall.autoLoadConntrackHelpers unless you\nknow what you are doing. Connection tracking is disabled\nby default.\n\nLoading of helpers is recommended to be done through the\nCT target.  More info:\nhttps://home.regit.org/netfilter-en/secure-use-of-helpers/\n","example":["ftp","irc","sane","sip","tftp","amanda","h323","netbios_sn","pptp","snmp"],"loc":["networking","firewall","connectionTrackingModules"],"readOnly":false,"type":"list of strings"},"networking.firewall.enable":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":true,"description":"Whether to enable the firewall.  This is a simple stateful\nfirewall that blocks connection attempts to unauthorised TCP\nor UDP ports on this machine.  It does not affect packet\nforwarding.\n","loc":["networking","firewall","enable"],"readOnly":false,"type":"boolean"},"networking.firewall.extraCommands":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":"","description":"Additional shell commands executed as part of the firewall\ninitialisation script.  These are executed just before the\nfinal \"reject\" firewall rule is added, so they can be used\nto allow packets that would otherwise be refused.\n","example":"iptables -A INPUT -p icmp -j ACCEPT","loc":["networking","firewall","extraCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.firewall.extraPackages":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"Additional packages to be included in the environment of the system\nas well as the path of networking.firewall.extraCommands.\n","example":{"_type":"literalExample","text":"[ pkgs.ipset ]"},"loc":["networking","firewall","extraPackages"],"readOnly":false,"type":"list of packages"},"networking.firewall.extraStopCommands":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":"","description":"Additional shell commands executed as part of the firewall\nshutdown script.  These are executed just after the removal\nof the NixOS input rule, or if the service enters a failed\nstate.\n","example":"iptables -P INPUT ACCEPT","loc":["networking","firewall","extraStopCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.firewall.interfaces":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":{"default":{"allowedTCPPortRanges":[],"allowedTCPPorts":[],"allowedUDPPortRanges":[],"allowedUDPPorts":[]}},"description":"Interface-specific open ports. Setting this value will override\nall values of the <literal>networking.firewall.allowed*</literal>\noptions.\n","loc":["networking","firewall","interfaces"],"readOnly":false,"type":"attribute set of submodules"},"networking.firewall.interfaces.<name>.allowedTCPPortRanges":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"A range of TCP ports on which incoming connections are\naccepted.\n","example":[{"from":8999,"to":9003}],"loc":["networking","firewall","interfaces","<name>","allowedTCPPortRanges"],"readOnly":false,"type":"list of attribute set of signed integerss"},"networking.firewall.interfaces.<name>.allowedTCPPorts":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"List of TCP ports on which incoming connections are\naccepted.\n","example":[22,80],"loc":["networking","firewall","interfaces","<name>","allowedTCPPorts"],"readOnly":false,"type":"list of signed integers"},"networking.firewall.interfaces.<name>.allowedUDPPortRanges":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"Range of open UDP ports.\n","example":[{"from":60000,"to":61000}],"loc":["networking","firewall","interfaces","<name>","allowedUDPPortRanges"],"readOnly":false,"type":"list of attribute set of signed integerss"},"networking.firewall.interfaces.<name>.allowedUDPPorts":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"List of open UDP ports.\n","example":[53],"loc":["networking","firewall","interfaces","<name>","allowedUDPPorts"],"readOnly":false,"type":"list of signed integers"},"networking.firewall.logRefusedConnections":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":true,"description":"Whether to log rejected or dropped incoming connections.\n","loc":["networking","firewall","logRefusedConnections"],"readOnly":false,"type":"boolean"},"networking.firewall.logRefusedPackets":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":false,"description":"Whether to log all rejected or dropped incoming packets.\nThis tends to give a lot of log messages, so it's mostly\nuseful for debugging.\n","loc":["networking","firewall","logRefusedPackets"],"readOnly":false,"type":"boolean"},"networking.firewall.logRefusedUnicastsOnly":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":true,"description":"If <option>networking.firewall.logRefusedPackets</option>\nand this option are enabled, then only log packets\nspecifically directed at this machine, i.e., not broadcasts\nor multicasts.\n","loc":["networking","firewall","logRefusedUnicastsOnly"],"readOnly":false,"type":"boolean"},"networking.firewall.logReversePathDrops":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":false,"description":"Logs dropped packets failing the reverse path filter test if\nthe option networking.firewall.checkReversePath is enabled.\n","loc":["networking","firewall","logReversePathDrops"],"readOnly":false,"type":"boolean"},"networking.firewall.pingLimit":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":null,"description":"If pings are allowed, this allows setting rate limits\non them.  If non-null, this option should be in the form of\nflags like \"--limit 1/minute --limit-burst 5\"\n","example":"--limit 1/minute --limit-burst 5","loc":["networking","firewall","pingLimit"],"readOnly":false,"type":"null or strings concatenated with \" \""},"networking.firewall.rejectPackets":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":false,"description":"If set, refused packets are rejected rather than dropped\n(ignored).  This means that an ICMP \"port unreachable\" error\nmessage is sent back to the client (or a TCP RST packet in\ncase of an existing connection).  Rejecting packets makes\nport scanning somewhat easier.\n","loc":["networking","firewall","rejectPackets"],"readOnly":false,"type":"boolean"},"networking.firewall.trustedInterfaces":{"declarations":["nixos/modules/services/networking/firewall.nix"],"default":[],"description":"Traffic coming in from these interfaces will be accepted\nunconditionally.  Traffic from the loopback (lo) interface\nwill always be accepted.\n","example":["enp0s2"],"loc":["networking","firewall","trustedInterfaces"],"readOnly":false,"type":"list of strings"},"networking.hostConf":{"declarations":["nixos/modules/config/networking.nix"],"default":"multi on","description":"The contents of <filename>/etc/host.conf</filename>. See also <citerefentry><refentrytitle>host.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>.\n","example":"multi on\nreorder on\ntrim lan\n","loc":["networking","hostConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.hostId":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The 32-bit host ID of the machine, formatted as 8 hexadecimal characters.\n\nYou should try to make this ID unique among your machines. You can\ngenerate a random 32-bit ID using the following commands:\n\n<literal>head -c 8 /etc/machine-id</literal>\n\n(this derives it from the machine-id that systemd generates) or\n\n<literal>head -c4 /dev/urandom | od -A none -t x4</literal>\n","example":"4e98920d","loc":["networking","hostId"],"readOnly":false,"type":"null or string"},"networking.hostName":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":"nixos","description":"The name of the machine.  Leave it empty if you want to obtain\nit from a DHCP server (if using DHCP).\n","loc":["networking","hostName"],"readOnly":false,"type":"string"},"networking.hosts":{"declarations":["nixos/modules/config/networking.nix"],"default":{},"description":"Locally defined maps of hostnames to IP addresses.\n","example":{"_type":"literalExample","text":"{\n  \"127.0.0.1\" = [ \"foo.bar.baz\" ];\n  \"192.168.0.2\" = [ \"fileserver.local\" \"nameserver.local\" ];\n};\n"},"loc":["networking","hosts"],"readOnly":false,"type":"attribute set of list of stringss"},"networking.interfaces":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"The configuration for each network interface.  If\n<option>networking.useDHCP</option> is true, then every\ninterface not listed here will be configured using DHCP.\n","example":{"eth0":{"ipv4":{"addresses":[{"address":"131.211.84.78","prefixLength":25}]}}},"loc":["networking","interfaces"],"readOnly":false,"type":"list or attribute set of submodules"},"networking.interfaces.<name?>.ipv4.addresses":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":[],"description":"List of IPv4 addresses that will be statically assigned to the interface.\n","example":[{"address":"10.0.0.1","prefixLength":16},{"address":"192.168.1.1","prefixLength":24}],"loc":["networking","interfaces","<name?>","ipv4","addresses"],"readOnly":false,"type":"list of submodules"},"networking.interfaces.<name?>.ipv4.addresses.*.address":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"IPv4 address of the interface. Leave empty to configure the\ninterface using DHCP.\n","loc":["networking","interfaces","<name?>","ipv4","addresses","*","address"],"readOnly":false,"type":"string"},"networking.interfaces.<name?>.ipv4.addresses.*.prefixLength":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"Subnet mask of the interface, specified as the number of\nbits in the prefix (<literal>24</literal>).\n","loc":["networking","interfaces","<name?>","ipv4","addresses","*","prefixLength"],"readOnly":false,"type":"signed integer"},"networking.interfaces.<name?>.ipv4.routes":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":[],"description":"List of extra IPv4 static routes that will be assigned to the interface.\n","example":[{"address":"10.0.0.0","prefixLength":16},{"address":"192.168.2.0","prefixLength":24,"via":"192.168.1.1"}],"loc":["networking","interfaces","<name?>","ipv4","routes"],"readOnly":false,"type":"list of submodules"},"networking.interfaces.<name?>.ipv4.routes.*.address":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"IPv4 address of the network.","loc":["networking","interfaces","<name?>","ipv4","routes","*","address"],"readOnly":false,"type":"string"},"networking.interfaces.<name?>.ipv4.routes.*.options":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"Other route options. See the symbol <literal>OPTIONS</literal>\nin the <literal>ip-route(8)</literal> manual page for the details.\n","example":{"mtu":"1492","window":"524288"},"loc":["networking","interfaces","<name?>","ipv4","routes","*","options"],"readOnly":false,"type":"attribute set of strings"},"networking.interfaces.<name?>.ipv4.routes.*.prefixLength":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"Subnet mask of the network, specified as the number of\nbits in the prefix (<literal>24</literal>).\n","loc":["networking","interfaces","<name?>","ipv4","routes","*","prefixLength"],"readOnly":false,"type":"signed integer"},"networking.interfaces.<name?>.ipv4.routes.*.via":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"IPv4 address of the next hop.","loc":["networking","interfaces","<name?>","ipv4","routes","*","via"],"readOnly":false,"type":"null or string"},"networking.interfaces.<name?>.ipv6.addresses":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":[],"description":"List of IPv6 addresses that will be statically assigned to the interface.\n","example":[{"address":"fdfd:b3f0:482::1","prefixLength":48},{"address":"2001:1470:fffd:2098::e006","prefixLength":64}],"loc":["networking","interfaces","<name?>","ipv6","addresses"],"readOnly":false,"type":"list of submodules"},"networking.interfaces.<name?>.ipv6.addresses.*.address":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"IPv6 address of the interface. Leave empty to configure the\ninterface using DHCP.\n","loc":["networking","interfaces","<name?>","ipv6","addresses","*","address"],"readOnly":false,"type":"string"},"networking.interfaces.<name?>.ipv6.addresses.*.prefixLength":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"Subnet mask of the interface, specified as the number of\nbits in the prefix (<literal>64</literal>).\n","loc":["networking","interfaces","<name?>","ipv6","addresses","*","prefixLength"],"readOnly":false,"type":"signed integer"},"networking.interfaces.<name?>.ipv6.routes":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":[],"description":"List of extra IPv6 static routes that will be assigned to the interface.\n","example":[{"address":"fdfd:b3f0::","prefixLength":48},{"address":"2001:1470:fffd:2098::","prefixLength":64,"via":"fdfd:b3f0::1"}],"loc":["networking","interfaces","<name?>","ipv6","routes"],"readOnly":false,"type":"list of submodules"},"networking.interfaces.<name?>.ipv6.routes.*.address":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"IPv6 address of the network.","loc":["networking","interfaces","<name?>","ipv6","routes","*","address"],"readOnly":false,"type":"string"},"networking.interfaces.<name?>.ipv6.routes.*.options":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"Other route options. See the symbol <literal>OPTIONS</literal>\nin the <literal>ip-route(8)</literal> manual page for the details.\n","example":{"mtu":"1492","window":"524288"},"loc":["networking","interfaces","<name?>","ipv6","routes","*","options"],"readOnly":false,"type":"attribute set of strings"},"networking.interfaces.<name?>.ipv6.routes.*.prefixLength":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"Subnet mask of the network, specified as the number of\nbits in the prefix (<literal>64</literal>).\n","loc":["networking","interfaces","<name?>","ipv6","routes","*","prefixLength"],"readOnly":false,"type":"signed integer"},"networking.interfaces.<name?>.ipv6.routes.*.via":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"IPv6 address of the next hop.","loc":["networking","interfaces","<name?>","ipv6","routes","*","via"],"readOnly":false,"type":"null or string"},"networking.interfaces.<name?>.macAddress":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"MAC address of the interface. Leave empty to use the default.\n","example":"00:11:22:33:44:55","loc":["networking","interfaces","<name?>","macAddress"],"readOnly":false,"type":"null or string"},"networking.interfaces.<name?>.mtu":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"MTU size for packets leaving the interface. Leave empty to use the default.\n","example":9000,"loc":["networking","interfaces","<name?>","mtu"],"readOnly":false,"type":"null or signed integer"},"networking.interfaces.<name?>.name":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"Name of the interface.","example":"eth0","loc":["networking","interfaces","<name?>","name"],"readOnly":false,"type":"string"},"networking.interfaces.<name?>.preferTempAddress":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{"_type":"literalExample","text":"config.networking.enableIPv6"},"description":"When using SLAAC prefer a temporary (IPv6) address over the EUI-64\naddress for originating connections. This is used to reduce tracking.\n","loc":["networking","interfaces","<name?>","preferTempAddress"],"readOnly":false,"type":"boolean"},"networking.interfaces.<name?>.proxyARP":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":false,"description":"Turn on proxy_arp for this device (and proxy_ndp for ipv6).\nThis is mainly useful for creating pseudo-bridges between a real\ninterface and a virtual network such as VPN or a virtual machine for\ninterfaces that don't support real bridging (most wlan interfaces).\nAs ARP proxying acts slightly above the link-layer, below-ip traffic\nisn't bridged, so things like DHCP won't work. The advantage above\nusing NAT lies in the fact that no IP addresses are shared, so all\nhosts are reachable/routeable.\n\nWARNING: turns on ip-routing, so if you have multiple interfaces, you\nshould think of the consequence and setup firewall rules to limit this.\n","loc":["networking","interfaces","<name?>","proxyARP"],"readOnly":false,"type":"boolean"},"networking.interfaces.<name?>.useDHCP":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"Whether this interface should be configured with dhcp.\nNull implies the old behavior which depends on whether ip addresses\nare specified or not.\n","loc":["networking","interfaces","<name?>","useDHCP"],"readOnly":false,"type":"null or boolean"},"networking.interfaces.<name?>.virtual":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":false,"description":"Whether this interface is virtual and should be created by tunctl.\nThis is mainly useful for creating bridges between a host and a virtual\nnetwork such as VPN or a virtual machine.\n","loc":["networking","interfaces","<name?>","virtual"],"readOnly":false,"type":"boolean"},"networking.interfaces.<name?>.virtualOwner":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":"root","description":"In case of a virtual device, the user who owns it.\n","loc":["networking","interfaces","<name?>","virtualOwner"],"readOnly":false,"type":"string"},"networking.interfaces.<name?>.virtualType":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{"_type":"literalExample","text":"if hasPrefix \"tun\" name then \"tun\" else \"tap\""},"description":"The type of interface to create.\nThe default is TUN for an interface name starting\nwith \"tun\", otherwise TAP.\n","loc":["networking","interfaces","<name?>","virtualType"],"readOnly":false,"type":"one of \"tun\", \"tap\""},"networking.iproute2.enable":{"declarations":["nixos/modules/config/iproute2.nix"],"default":false,"description":"Whether to enable copy IP route configuration files.","example":true,"loc":["networking","iproute2","enable"],"readOnly":false,"type":"boolean"},"networking.iproute2.rttablesExtraConfig":{"declarations":["nixos/modules/config/iproute2.nix"],"default":"","description":"Verbatim lines to add to /etc/iproute2/rt_tables\n","loc":["networking","iproute2","rttablesExtraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.localCommands":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":"","description":"Shell commands to be executed at the end of the\n<literal>network-setup</literal> systemd service.  Note that if\nyou are using DHCP to obtain the network configuration,\ninterfaces may not be fully configured yet.\n","example":"text=anything; echo You can put $text here.","loc":["networking","localCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.macvlans":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"This option allows you to define macvlan interfaces which should\nbe automatically created.\n","example":{"_type":"literalExample","text":{"wan":{"interface":"enp2s0","mode":"vepa"}}},"loc":["networking","macvlans"],"readOnly":false,"type":"attribute set of submodules"},"networking.macvlans.<name>.interface":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The interface the macvlan will transmit packets through.","example":"enp4s0","loc":["networking","macvlans","<name>","interface"],"readOnly":false,"type":"string"},"networking.macvlans.<name>.mode":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The mode of the macvlan device.","example":"vepa","loc":["networking","macvlans","<name>","mode"],"readOnly":false,"type":"null or string"},"networking.nameservers":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":[],"description":"The list of nameservers.  It can be left empty if it is auto-detected through DHCP.\n","example":["130.161.158.4","130.161.33.17"],"loc":["networking","nameservers"],"readOnly":false,"type":"list of strings"},"networking.nat.dmzHost":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":null,"description":"The local IP address to which all traffic that does not match any\nforwarding rule is forwarded.\n","example":"10.0.0.1","loc":["networking","nat","dmzHost"],"readOnly":false,"type":"null or string"},"networking.nat.enable":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":false,"description":"Whether to enable Network Address Translation (NAT).\n","loc":["networking","nat","enable"],"readOnly":false,"type":"boolean"},"networking.nat.externalIP":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":null,"description":"The public IP address to which packets from the local\nnetwork are to be rewritten.  If this is left empty, the\nIP address associated with the external interface will be\nused.\n","example":"203.0.113.123","loc":["networking","nat","externalIP"],"readOnly":false,"type":"null or string"},"networking.nat.externalInterface":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":null,"description":"The name of the external network interface.\n","example":"eth1","loc":["networking","nat","externalInterface"],"readOnly":false,"type":"null or string"},"networking.nat.extraCommands":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":"","description":"Additional shell commands executed as part of the nat\ninitialisation script.\n","example":"iptables -A INPUT -p icmp -j ACCEPT","loc":["networking","nat","extraCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.nat.extraStopCommands":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":"","description":"Additional shell commands executed as part of the nat\nteardown script.\n","example":"iptables -D INPUT -p icmp -j ACCEPT || true","loc":["networking","nat","extraStopCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.nat.forwardPorts":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":[],"description":"List of forwarded ports from the external interface to\ninternal destinations by using DNAT.\n","example":[{"destination":"10.0.0.1:80","proto":"tcp","sourcePort":8080}],"loc":["networking","nat","forwardPorts"],"readOnly":false,"type":"list of submodules"},"networking.nat.forwardPorts.*.destination":{"declarations":["nixos/modules/services/networking/nat.nix"],"description":"Forward connection to destination ip:port; to specify a port range, use ip:start-end","example":"10.0.0.1:80","loc":["networking","nat","forwardPorts","*","destination"],"readOnly":false,"type":"string"},"networking.nat.forwardPorts.*.loopbackIPs":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":[],"description":"Public IPs for NAT reflection; for connections to `loopbackip:sourcePort' from the host itself and from other hosts behind NAT","example":{"_type":"literalExample","text":"[ \"55.1.2.3\" ]"},"loc":["networking","nat","forwardPorts","*","loopbackIPs"],"readOnly":false,"type":"list of strings"},"networking.nat.forwardPorts.*.proto":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":"tcp","description":"Protocol of forwarded connection","example":"udp","loc":["networking","nat","forwardPorts","*","proto"],"readOnly":false,"type":"string"},"networking.nat.forwardPorts.*.sourcePort":{"declarations":["nixos/modules/services/networking/nat.nix"],"description":"Source port of the external interface; to specify a port range, use a string with a colon (e.g. \"60000:61000\")","example":8080,"loc":["networking","nat","forwardPorts","*","sourcePort"],"readOnly":false,"type":"signed integer or string matching the pattern [[:digit:]]+:[[:digit:]]+"},"networking.nat.internalIPs":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":[],"description":"The IP address ranges for which to perform NAT.  Packets\ncoming from these addresses (on any interface) and destined\nfor the external interface will be rewritten.\n","example":["192.168.1.0/24"],"loc":["networking","nat","internalIPs"],"readOnly":false,"type":"list of strings"},"networking.nat.internalInterfaces":{"declarations":["nixos/modules/services/networking/nat.nix"],"default":[],"description":"The interfaces for which to perform NAT. Packets coming from\nthese interface and destined for the external interface will\nbe rewritten.\n","example":["eth0"],"loc":["networking","nat","internalInterfaces"],"readOnly":false,"type":"list of strings"},"networking.networkmanager.appendNameservers":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":[],"description":"A list of name servers that should be appended\nto the ones configured in NetworkManager or received by DHCP.\n","loc":["networking","networkmanager","appendNameservers"],"readOnly":false,"type":"list of strings"},"networking.networkmanager.dhcp":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"dhclient","description":"Which program (or internal library) should be used for DHCP.\n","loc":["networking","networkmanager","dhcp"],"readOnly":false,"type":"one of \"dhclient\", \"dhcpcd\", \"internal\""},"networking.networkmanager.dispatcherScripts":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":[],"description":"A list of scripts which will be executed in response to  network  events.\n","example":{"_type":"literalExample","text":"[ {\n      source = pkgs.writeText \"upHook\" ''\n\n        if [ \"$2\" != \"up\" ]; then\n            logger \"exit: event $2 != up\"\n        fi\n\n        # coreutils and iproute are in PATH too\n        logger \"Device $DEVICE_IFACE coming up\"\n    '';\n    type = \"basic\";\n} ]"},"loc":["networking","networkmanager","dispatcherScripts"],"readOnly":false,"type":"list of submodules"},"networking.networkmanager.dispatcherScripts.*.source":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"description":"Path to the hook script.\n","loc":["networking","networkmanager","dispatcherScripts","*","source"],"readOnly":false,"type":"path"},"networking.networkmanager.dispatcherScripts.*.type":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"basic","description":"Dispatcher hook type. Look up the hooks described at\n<link xlink:href=\"https://developer.gnome.org/NetworkManager/stable/NetworkManager.html\">https://developer.gnome.org/NetworkManager/stable/NetworkManager.html</link>\nand choose the type depending on the output folder.\nYou should then filter the event type (e.g., \"up\"/\"down\") from within your script.\n","loc":["networking","networkmanager","dispatcherScripts","*","type"],"readOnly":false,"type":"one of \"basic\", \"pre-down\", \"pre-up\""},"networking.networkmanager.dns":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"default","description":"Set the DNS (<literal>resolv.conf</literal>) processing mode.\n</para>\n<para>\nOptions:\n<variablelist>\n<varlistentry>\n  <term><literal>\"default\"</literal></term>\n  <listitem><para>\n    NetworkManager will update <literal>/etc/resolv.conf</literal> to\n    reflect the nameservers provided by currently active connections.\n  </para></listitem>\n</varlistentry>\n<varlistentry>\n  <term><literal>\"dnsmasq\"</literal></term>\n  <listitem>\n    <para>\n      Enable NetworkManager's dnsmasq integration. NetworkManager will\n      run dnsmasq as a local caching nameserver, using a \"split DNS\"\n      configuration if you are connected to a VPN, and then update\n      <literal>resolv.conf</literal> to point to the local nameserver.\n    </para>\n    <para>\n      It is possible to pass custom options to the dnsmasq instance by\n      adding them to files in the\n      <literal>/etc/NetworkManager/dnsmasq.d/</literal> directory.\n    </para>\n    <para>\n      When multiple upstream servers are available, dnsmasq will\n      initially contact them in parallel and then use the fastest to\n      respond, probing again other servers after some time.  This\n      behavior can be modified passing the\n      <literal>all-servers</literal> or <literal>strict-order</literal>\n      options to dnsmasq (see the manual page for more details).\n    </para>\n    <para>\n      Note that this option causes NetworkManager to launch and manage\n      its own instance of the dnsmasq daemon, which is\n      <emphasis>not</emphasis> the same as setting\n      <literal>services.dnsmasq.enable = true;</literal>.\n    </para>\n  </listitem>\n</varlistentry>\n<varlistentry>\n  <term><literal>\"unbound\"</literal></term>\n  <listitem><para>\n    NetworkManager will talk to unbound and dnssec-triggerd,\n    providing a \"split DNS\" configuration with DNSSEC support.\n    <literal>/etc/resolv.conf</literal> will be managed by\n    dnssec-trigger daemon.\n  </para></listitem>\n</varlistentry>\n<varlistentry>\n  <term><literal>\"systemd-resolved\"</literal></term>\n  <listitem><para>\n    NetworkManager will push the DNS configuration to systemd-resolved.\n  </para></listitem>\n</varlistentry>\n<varlistentry>\n  <term><literal>\"none\"</literal></term>\n  <listitem><para>\n    NetworkManager will not modify resolv.conf.\n  </para></listitem>\n</varlistentry>\n</variablelist>\n","loc":["networking","networkmanager","dns"],"readOnly":false,"type":"one of \"default\", \"dnsmasq\", \"unbound\", \"systemd-resolved\", \"none\""},"networking.networkmanager.dynamicHosts.enable":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":false,"description":"Enabling this option requires the\n<option>networking.networkmanager.dns</option> option to be\nset to <literal>dnsmasq</literal>. If enabled, the directories\ndefined by the\n<option>networking.networkmanager.dynamicHosts.hostsDirs</option>\noption will be set up when the service starts. The dnsmasq instance\nmanaged by NetworkManager will then watch those directories for\nhosts files (see the <literal>--hostsdir</literal> option of\ndnsmasq). This way a non-privileged user can add or override DNS\nentries on the local system (depending on what hosts directories\nthat are configured)..\n","loc":["networking","networkmanager","dynamicHosts","enable"],"readOnly":false,"type":"boolean"},"networking.networkmanager.dynamicHosts.hostsDirs":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":{},"description":"Defines a set of directories (relative to\n<literal>/run/NetworkManager/hostdirs</literal>) that dnsmasq will\nwatch for hosts files.\n","loc":["networking","networkmanager","dynamicHosts","hostsDirs"],"readOnly":false,"type":"attribute set of submodules"},"networking.networkmanager.dynamicHosts.hostsDirs.<name>.group":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"root","description":"The group that will own the hosts directory.\n","loc":["networking","networkmanager","dynamicHosts","hostsDirs","<name>","group"],"readOnly":false,"type":"string"},"networking.networkmanager.dynamicHosts.hostsDirs.<name>.user":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"root","description":"The user that will own the hosts directory.\n","loc":["networking","networkmanager","dynamicHosts","hostsDirs","<name>","user"],"readOnly":false,"type":"string"},"networking.networkmanager.enable":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":false,"description":"Whether to use NetworkManager to obtain an IP address and other\nconfiguration for all network interfaces that are not manually\nconfigured. If enabled, a group <literal>networkmanager</literal>\nwill be created. Add all users that should have permission\nto change network settings to this group.\n","loc":["networking","networkmanager","enable"],"readOnly":false,"type":"boolean"},"networking.networkmanager.enableStrongSwan":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":false,"description":"Enable the StrongSwan plugin.\n</para><para>\nIf you enable this option the\n<literal>networkmanager_strongswan</literal> plugin will be added to\nthe <option>networking.networkmanager.packages</option> option\nso you don't need to to that yourself.\n","loc":["networking","networkmanager","enableStrongSwan"],"readOnly":false,"type":"boolean"},"networking.networkmanager.ethernet.macAddress":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"preserve","description":"\"XX:XX:XX:XX:XX:XX\": MAC address of the interface.\n<literal>permanent</literal>: use the permanent MAC address of the device.\n<literal>preserve</literal>: don’t change the MAC address of the device upon activation.\n<literal>random</literal>: generate a randomized value upon each connect.\n<literal>stable</literal>: generate a stable, hashed MAC address.\n","example":"00:11:22:33:44:55","loc":["networking","networkmanager","ethernet","macAddress"],"readOnly":false,"type":"string or one of \"permanent\", \"preserve\", \"random\", \"stable\""},"networking.networkmanager.extraConfig":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"","description":"Configuration appended to the generated NetworkManager.conf.\n","loc":["networking","networkmanager","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.networkmanager.insertNameservers":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":[],"description":"A list of name servers that should be inserted before\nthe ones configured in NetworkManager or received by DHCP.\n","loc":["networking","networkmanager","insertNameservers"],"readOnly":false,"type":"list of strings"},"networking.networkmanager.logLevel":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"WARN","description":"Set the default logging verbosity level.\n","loc":["networking","networkmanager","logLevel"],"readOnly":false,"type":"one of \"OFF\", \"ERR\", \"WARN\", \"INFO\", \"DEBUG\", \"TRACE\""},"networking.networkmanager.packages":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":[],"description":"Extra packages that provide NetworkManager plugins.\n","loc":["networking","networkmanager","packages"],"readOnly":false,"type":"list of paths"},"networking.networkmanager.unmanaged":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":[],"description":"List of interfaces that will not be managed by NetworkManager.\nInterface name can be specified here, but if you need more fidelity\nsee \"Device List Format\" in NetworkManager.conf man page.\n","loc":["networking","networkmanager","unmanaged"],"readOnly":false,"type":"list of Concatenated strings"},"networking.networkmanager.wifi.macAddress":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":"preserve","description":"\"XX:XX:XX:XX:XX:XX\": MAC address of the interface.\n<literal>permanent</literal>: use the permanent MAC address of the device.\n<literal>preserve</literal>: don’t change the MAC address of the device upon activation.\n<literal>random</literal>: generate a randomized value upon each connect.\n<literal>stable</literal>: generate a stable, hashed MAC address.\n","example":"00:11:22:33:44:55","loc":["networking","networkmanager","wifi","macAddress"],"readOnly":false,"type":"string or one of \"permanent\", \"preserve\", \"random\", \"stable\""},"networking.networkmanager.wifi.powersave":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":null,"description":"Whether to enable Wi-Fi power saving.\n","loc":["networking","networkmanager","wifi","powersave"],"readOnly":false,"type":"null or boolean"},"networking.networkmanager.wifi.scanRandMacAddress":{"declarations":["nixos/modules/services/networking/networkmanager.nix"],"default":true,"description":"Whether to enable MAC address randomization of a Wi-Fi device\nduring scanning.\n","loc":["networking","networkmanager","wifi","scanRandMacAddress"],"readOnly":false,"type":"boolean"},"networking.nftables.enable":{"declarations":["nixos/modules/services/networking/nftables.nix"],"default":false,"description":"Whether to enable nftables.  nftables is a Linux-based packet\nfiltering framework intended to replace frameworks like iptables.\n\nThis conflicts with the standard networking firewall, so make sure to\ndisable it before using nftables.\n\nNote that if you have Docker enabled you will not be able to use\nnftables without intervention. Docker uses iptables internally to\nsetup NAT for containers. This module disables the ip_tables kernel\nmodule, however Docker automatically loads the module. Please see [1]\nfor more information.\n\nThere are other programs that use iptables internally too, such as\nlibvirt.\n\n[1]: https://github.com/NixOS/nixpkgs/issues/24318#issuecomment-289216273\n","loc":["networking","nftables","enable"],"readOnly":false,"type":"boolean"},"networking.nftables.ruleset":{"declarations":["nixos/modules/services/networking/nftables.nix"],"description":"The ruleset to be used with nftables.  Should be in a format that\ncan be loaded using \"/bin/nft -f\".  The ruleset is updated atomically.\n","example":"# Check out https://wiki.nftables.org/ for better documentation.\n# Table for both IPv4 and IPv6.\ntable inet filter {\n  # Block all incomming connections traffic except SSH and \"ping\".\n  chain input {\n    type filter hook input priority 0;\n\n    # accept any localhost traffic\n    iifname lo accept\n\n    # accept traffic originated from us\n    ct state {established, related} accept\n\n    # ICMP\n    # routers may also want: mld-listener-query, nd-router-solicit\n    ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept\n    ip protocol icmp icmp type { destination-unreachable, router-advertisement, time-exceeded, parameter-problem } accept\n\n    # allow \"ping\"\n    ip6 nexthdr icmp icmpv6 type echo-request accept\n    ip protocol icmp icmp type echo-request accept\n\n    # accept SSH connections (required for a server)\n    tcp dport 22 accept\n\n    # count and drop any other traffic\n    counter drop\n  }\n\n  # Allow all outgoing connections.\n  chain output {\n    type filter hook output priority 0;\n    accept\n  }\n\n  chain forward {\n    type filter hook forward priority 0;\n    accept\n  }\n}\n","loc":["networking","nftables","ruleset"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.nftables.rulesetFile":{"declarations":["nixos/modules/services/networking/nftables.nix"],"default":"nftables-rules","description":"The ruleset file to be used with nftables.  Should be in a format that\ncan be loaded using \"nft -f\".  The ruleset is updated atomically.\n","loc":["networking","nftables","rulesetFile"],"readOnly":false,"type":"path"},"networking.proxy.allProxy":{"declarations":["nixos/modules/config/networking.nix"],"default":null,"description":"This option specifies the all_proxy environment variable.\n","example":"http://127.0.0.1:3128","loc":["networking","proxy","allProxy"],"readOnly":false,"type":"null or string"},"networking.proxy.default":{"declarations":["nixos/modules/config/networking.nix"],"default":null,"description":"This option specifies the default value for httpProxy, httpsProxy, ftpProxy and rsyncProxy.\n","example":"http://127.0.0.1:3128","loc":["networking","proxy","default"],"readOnly":false,"type":"null or string"},"networking.proxy.ftpProxy":{"declarations":["nixos/modules/config/networking.nix"],"default":null,"description":"This option specifies the ftp_proxy environment variable.\n","example":"http://127.0.0.1:3128","loc":["networking","proxy","ftpProxy"],"readOnly":false,"type":"null or string"},"networking.proxy.httpProxy":{"declarations":["nixos/modules/config/networking.nix"],"default":null,"description":"This option specifies the http_proxy environment variable.\n","example":"http://127.0.0.1:3128","loc":["networking","proxy","httpProxy"],"readOnly":false,"type":"null or string"},"networking.proxy.httpsProxy":{"declarations":["nixos/modules/config/networking.nix"],"default":null,"description":"This option specifies the https_proxy environment variable.\n","example":"http://127.0.0.1:3128","loc":["networking","proxy","httpsProxy"],"readOnly":false,"type":"null or string"},"networking.proxy.noProxy":{"declarations":["nixos/modules/config/networking.nix"],"default":null,"description":"This option specifies the no_proxy environment variable.\nIf a default proxy is used and noProxy is null,\nthen noProxy will be set to 127.0.0.1,localhost.\n","example":"127.0.0.1,localhost,.localdomain","loc":["networking","proxy","noProxy"],"readOnly":false,"type":"null or string"},"networking.proxy.rsyncProxy":{"declarations":["nixos/modules/config/networking.nix"],"default":null,"description":"This option specifies the rsync_proxy environment variable.\n","example":"http://127.0.0.1:3128","loc":["networking","proxy","rsyncProxy"],"readOnly":false,"type":"null or string"},"networking.resolvconfOptions":{"declarations":["nixos/modules/config/networking.nix"],"default":[],"description":"Set the options in <filename>/etc/resolv.conf</filename>.\n","example":["ndots:1","rotate"],"loc":["networking","resolvconfOptions"],"readOnly":false,"type":"list of strings"},"networking.rxe.enable":{"declarations":["nixos/modules/services/networking/rxe.nix"],"default":false,"description":"Whether to enable RDMA over converged ethernet.","example":true,"loc":["networking","rxe","enable"],"readOnly":false,"type":"boolean"},"networking.rxe.interfaces":{"declarations":["nixos/modules/services/networking/rxe.nix"],"default":[],"description":"Enable RDMA on the listed interfaces. The corresponding virtual\nRDMA interfaces will be named rxe0 ... rxeN where the ordering\nwill be as they are named in the list. UDP port 4791 must be\nopen on the respective ethernet interfaces.\n","example":["eth0"],"loc":["networking","rxe","interfaces"],"readOnly":false,"type":"list of strings"},"networking.search":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":[],"description":"The list of search paths used when resolving domain names.\n","example":["example.com","local.domain"],"loc":["networking","search"],"readOnly":false,"type":"list of strings"},"networking.sits":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"This option allows you to define 6-to-4 interfaces which should be automatically created.\n","example":{"_type":"literalExample","text":{"hurricane":{"local":"10.0.0.22","remote":"10.0.0.1","ttl":255},"msipv6":{"dev":"enp3s0","remote":"192.168.0.1","ttl":127}}},"loc":["networking","sits"],"readOnly":false,"type":"attribute set of submodules"},"networking.sits.<name>.dev":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The underlying network device on which the tunnel resides.\n","example":"enp4s0f0","loc":["networking","sits","<name>","dev"],"readOnly":false,"type":"null or string"},"networking.sits.<name>.local":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The address of the local endpoint which the remote\nside should send packets to.\n","example":"10.0.0.22","loc":["networking","sits","<name>","local"],"readOnly":false,"type":"null or string"},"networking.sits.<name>.remote":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The address of the remote endpoint to forward traffic over.\n","example":"10.0.0.1","loc":["networking","sits","<name>","remote"],"readOnly":false,"type":"null or string"},"networking.sits.<name>.ttl":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"The time-to-live of the connection to the remote tunnel endpoint.\n","example":255,"loc":["networking","sits","<name>","ttl"],"readOnly":false,"type":"null or signed integer"},"networking.supplicant":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":{},"description":"Interfaces for which to start <command>wpa_supplicant</command>.\nThe supplicant is used to scan for and associate with wireless networks,\nor to authenticate with 802.1x capable network switches.\n\nThe value of this option is an attribute set. Each attribute configures a\n<command>wpa_supplicant</command> service, where the attribute name specifies\nthe name of the interface that <command>wpa_supplicant</command> operates on.\nThe attribute name can be a space separated list of interfaces.\nThe attribute names <literal>WLAN</literal>, <literal>LAN</literal> and <literal>DBUS</literal>\nhave a special meaning. <literal>WLAN</literal> and <literal>LAN</literal> are\nconfigurations for universal <command>wpa_supplicant</command> service that is\nstarted for each WLAN interface or for each LAN interface, respectively.\n<literal>DBUS</literal> defines a device-unrelated <command>wpa_supplicant</command>\nservice that can be accessed through <literal>D-Bus</literal>.\n","example":{"_type":"literalExample","text":"{ \"wlan0 wlan1\" = {\n    configFile.path = \"/etc/wpa_supplicant.conf\";\n    userControlled.group = \"network\";\n    extraConf = ''\n      ap_scan=1\n      p2p_disabled=1\n    '';\n    extraCmdArgs = \"-u -W\";\n    bridge = \"br0\";\n  };\n}\n"},"loc":["networking","supplicant"],"readOnly":false,"type":"attribute set of submodules"},"networking.supplicant.<name>.bridge":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":"","description":"Name of the bridge interface that wpa_supplicant should listen at.","loc":["networking","supplicant","<name>","bridge"],"readOnly":false,"type":"string"},"networking.supplicant.<name>.configFile.path":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":null,"description":"External <literal>wpa_supplicant.conf</literal> configuration file.\nThe configuration options defined declaratively within <literal>networking.supplicant</literal> have\nprecedence over options defined in <literal>configFile</literal>.\n","example":{"_type":"literalExample","text":"/etc/wpa_supplicant.conf"},"loc":["networking","supplicant","<name>","configFile","path"],"readOnly":false,"type":"null or path"},"networking.supplicant.<name>.configFile.writable":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":false,"description":"Whether the configuration file at <literal>configFile.path</literal> should be written to by\n<literal>wpa_supplicant</literal>.\n","loc":["networking","supplicant","<name>","configFile","writable"],"readOnly":false,"type":"boolean"},"networking.supplicant.<name>.driver":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":"nl80211,wext","description":"Force a specific wpa_supplicant driver.","loc":["networking","supplicant","<name>","driver"],"readOnly":false,"type":"null or string"},"networking.supplicant.<name>.extraCmdArgs":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":"","description":"Command line arguments to add when executing <literal>wpa_supplicant</literal>.","example":"-e/var/run/wpa_supplicant/entropy.bin","loc":["networking","supplicant","<name>","extraCmdArgs"],"readOnly":false,"type":"string"},"networking.supplicant.<name>.extraConf":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":"","description":"Configuration options for <literal>wpa_supplicant.conf</literal>.\nOptions defined here have precedence over options in <literal>configFile</literal>.\nNOTE: Do not write sensitive data into <literal>extraConf</literal> as it will\nbe world-readable in the <literal>nix-store</literal>. For sensitive information\nuse the <literal>configFile</literal> instead.\n","example":"ap_scan=1\ndevice_name=My-NixOS-Device\ndevice_type=1-0050F204-1\ndriver_param=use_p2p_group_interface=1\ndisable_scan_offload=1\np2p_listen_reg_class=81\np2p_listen_channel=1\np2p_oper_reg_class=81\np2p_oper_channel=1\nmanufacturer=NixOS\nmodel_name=NixOS_Unstable\nmodel_number=2015\n","loc":["networking","supplicant","<name>","extraConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.supplicant.<name>.userControlled.enable":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":false,"description":"Allow normal users to control wpa_supplicant through wpa_gui or wpa_cli.\nThis is useful for laptop users that switch networks a lot and don't want\nto depend on a large package such as NetworkManager just to pick nearby\naccess points.\n","loc":["networking","supplicant","<name>","userControlled","enable"],"readOnly":false,"type":"boolean"},"networking.supplicant.<name>.userControlled.group":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":"wheel","description":"Members of this group can control wpa_supplicant.","example":"network","loc":["networking","supplicant","<name>","userControlled","group"],"readOnly":false,"type":"string"},"networking.supplicant.<name>.userControlled.socketDir":{"declarations":["nixos/modules/services/networking/supplicant.nix"],"default":"/var/run/wpa_supplicant","description":"Directory of sockets for controlling wpa_supplicant.","loc":["networking","supplicant","<name>","userControlled","socketDir"],"readOnly":false,"type":"string"},"networking.tcpcrypt.enable":{"declarations":["nixos/modules/services/networking/tcpcrypt.nix"],"default":false,"description":"Whether to enable opportunistic TCP encryption. If the other end\nspeaks Tcpcrypt, then your traffic will be encrypted; otherwise\nit will be sent in clear text. Thus, Tcpcrypt alone provides no\nguarantees -- it is best effort. If, however, a Tcpcrypt\nconnection is successful and any attackers that exist are\npassive, then Tcpcrypt guarantees privacy.\n","loc":["networking","tcpcrypt","enable"],"readOnly":false,"type":"unspecified"},"networking.timeServers":{"declarations":["nixos/modules/config/networking.nix"],"default":["0.nixos.pool.ntp.org","1.nixos.pool.ntp.org","2.nixos.pool.ntp.org","3.nixos.pool.ntp.org"],"description":"The set of NTP servers from which to synchronise.\n","loc":["networking","timeServers"],"readOnly":false,"type":"unspecified"},"networking.useDHCP":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":true,"description":"Whether to use DHCP to obtain an IP address and other\nconfiguration for all network interfaces that are not manually\nconfigured.\n","loc":["networking","useDHCP"],"readOnly":false,"type":"boolean"},"networking.useHostResolvConf":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":false,"description":"In containers, whether to use the\n<filename>resolv.conf</filename> supplied by the host.\n","loc":["networking","useHostResolvConf"],"readOnly":false,"type":"boolean"},"networking.useNetworkd":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":false,"description":"Whether we should use networkd as the network configuration backend or\nthe legacy script based system. Note that this option is experimental,\nenable at your own risk.\n","loc":["networking","useNetworkd"],"readOnly":false,"type":"boolean"},"networking.usePredictableInterfaceNames":{"declarations":["nixos/modules/services/hardware/udev.nix"],"default":true,"description":"Whether to assign <link\nxlink:href='http://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames'>predictable\nnames to network interfaces</link>.  If enabled, interfaces\nare assigned names that contain topology information\n(e.g. <literal>wlp3s0</literal>) and thus should be stable\nacross reboots.  If disabled, names depend on the order in\nwhich interfaces are discovered by the kernel, which may\nchange randomly across reboots; for instance, you may find\n<literal>eth0</literal> and <literal>eth1</literal> flipping\nunpredictably.\n","loc":["networking","usePredictableInterfaceNames"],"readOnly":false,"type":"boolean"},"networking.vlans":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"This option allows you to define vlan devices that tag packets\non top of a physical interface. The value of this option is an\nattribute set. Each attribute specifies a vlan, with the name\nspecifying the name of the vlan interface.\n","example":{"_type":"literalExample","text":{"vlan0":{"id":3,"interface":"enp3s0"},"vlan1":{"id":1,"interface":"wlan0"}}},"loc":["networking","vlans"],"readOnly":false,"type":"attribute set of submodules"},"networking.vlans.<name>.id":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The vlan identifier","example":1,"loc":["networking","vlans","<name>","id"],"readOnly":false,"type":"signed integer"},"networking.vlans.<name>.interface":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The interface the vlan will transmit packets through.","example":"enp4s0","loc":["networking","vlans","<name>","interface"],"readOnly":false,"type":"string"},"networking.vpnc.services":{"declarations":["nixos/modules/config/vpnc.nix"],"default":{},"description":"The names of cisco VPNs and their associated definitions\n","example":{"_type":"literalExample","text":"{ test = ''\n    IPSec gateway 192.168.1.1\n    IPSec ID someID\n    IPSec secret secretKey\n    Xauth username name\n    Xauth password pass\n  '';\n}\n"},"loc":["networking","vpnc","services"],"readOnly":false,"type":"attribute set of strings"},"networking.vswitches":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"This option allows you to define Open vSwitches that connect\nphysical networks together. The value of this option is an\nattribute set. Each attribute specifies a vswitch, with the\nattribute name specifying the name of the vswitch's network\ninterface.\n","example":{"vs0":{"interfaces":["eth0","eth1"]},"vs1":{"interfaces":["eth2","wlan0"]}},"loc":["networking","vswitches"],"readOnly":false,"type":"attribute set of submodules"},"networking.vswitches.<name>.controllers":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":[],"description":"Specify the controller targets. For the allowed options see <literal>man 8 ovs-vsctl</literal>.\n","example":["ptcp:6653:[::1]"],"loc":["networking","vswitches","<name>","controllers"],"readOnly":false,"type":"list of strings"},"networking.vswitches.<name>.extraOvsctlCmds":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":"","description":"Commands to manipulate the Open vSwitch database. Every line executed with <literal>ovs-vsctl</literal>.\nAll commands are bundled together with the operations for adding the interfaces\ninto one atomic operation.\n","example":"set-fail-mode <switch_name> secure\nset Bridge <switch_name> stp_enable=true\n","loc":["networking","vswitches","<name>","extraOvsctlCmds"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.vswitches.<name>.interfaces":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The physical network interfaces connected by the vSwitch.","example":["eth0","eth1"],"loc":["networking","vswitches","<name>","interfaces"],"readOnly":false,"type":"list of strings"},"networking.vswitches.<name>.openFlowRules":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":"","description":"OpenFlow rules to insert into the Open vSwitch. All <literal>openFlowRules</literal> are\nloaded with <literal>ovs-ofctl</literal> within one atomic operation.\n","example":"actions=normal\n","loc":["networking","vswitches","<name>","openFlowRules"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"networking.wicd.enable":{"declarations":["nixos/modules/services/networking/wicd.nix"],"default":false,"description":"Whether to start <command>wicd</command>. Wired and\nwireless network configurations can then be managed by\nwicd-client.\n","loc":["networking","wicd","enable"],"readOnly":false,"type":"unspecified"},"networking.wireguard.interfaces":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":{},"description":"Wireguard interfaces.","example":{"wg0":{"ips":["192.168.20.4/24"],"peers":[{"allowedIPs":["192.168.20.1/32"],"endpoint":"demo.wireguard.io:12913","publicKey":"xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg="}],"privateKey":"yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk="}},"loc":["networking","wireguard","interfaces"],"readOnly":false,"type":"attribute set of submodules"},"networking.wireguard.interfaces.<name>.allowedIPsAsRoutes":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":true,"description":"Determines whether to add allowed IPs as routes or not.\n","example":false,"loc":["networking","wireguard","interfaces","<name>","allowedIPsAsRoutes"],"readOnly":false,"type":"boolean"},"networking.wireguard.interfaces.<name>.ips":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":[],"description":"The IP addresses of the interface.","example":["192.168.2.1/24"],"loc":["networking","wireguard","interfaces","<name>","ips"],"readOnly":false,"type":"list of strings"},"networking.wireguard.interfaces.<name>.listenPort":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":null,"description":"16-bit port for listening. Optional; if not specified,\nautomatically generated based on interface name.\n","example":51820,"loc":["networking","wireguard","interfaces","<name>","listenPort"],"readOnly":false,"type":"null or signed integer"},"networking.wireguard.interfaces.<name>.peers":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":[],"description":"Peers linked to the interface.","loc":["networking","wireguard","interfaces","<name>","peers"],"readOnly":false,"type":"list of submodules"},"networking.wireguard.interfaces.<name>.peers.*.allowedIPs":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"description":"List of IP (v4 or v6) addresses with CIDR masks from\n        which this peer is allowed to send incoming traffic and to which\n        outgoing traffic for this peer is directed. The catch-all 0.0.0.0/0 may\n        be specified for matching all IPv4 addresses, and ::/0 may be specified\n        for matching all IPv6 addresses.","example":["10.192.122.3/32","10.192.124.1/24"],"loc":["networking","wireguard","interfaces","<name>","peers","*","allowedIPs"],"readOnly":false,"type":"list of strings"},"networking.wireguard.interfaces.<name>.peers.*.endpoint":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":null,"description":"Endpoint IP or hostname of the peer, followed by a colon,\n        and then a port number of the peer.","example":"demo.wireguard.io:12913","loc":["networking","wireguard","interfaces","<name>","peers","*","endpoint"],"readOnly":false,"type":"null or string"},"networking.wireguard.interfaces.<name>.peers.*.persistentKeepalive":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":null,"description":"This is optional and is by default off, because most\n        users will not need it. It represents, in seconds, between 1 and 65535\n        inclusive, how often to send an authenticated empty packet to the peer,\n        for the purpose of keeping a stateful firewall or NAT mapping valid\n        persistently. For example, if the interface very rarely sends traffic,\n        but it might at anytime receive traffic from a peer, and it is behind\n        NAT, the interface might benefit from having a persistent keepalive\n        interval of 25 seconds; however, most users will not need this.","example":25,"loc":["networking","wireguard","interfaces","<name>","peers","*","persistentKeepalive"],"readOnly":false,"type":"null or signed integer"},"networking.wireguard.interfaces.<name>.peers.*.presharedKey":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":null,"description":"Base64 preshared key generated by wg genpsk. Optional,\nand may be omitted. This option adds an additional layer of\nsymmetric-key cryptography to be mixed into the already existing\npublic-key cryptography, for post-quantum resistance.\n\nWarning: Consider using presharedKeyFile instead if you do not\nwant to store the key in the world-readable Nix store.\n","example":"rVXs/Ni9tu3oDBLS4hOyAUAa1qTWVA3loR8eL20os3I=","loc":["networking","wireguard","interfaces","<name>","peers","*","presharedKey"],"readOnly":false,"type":"null or string"},"networking.wireguard.interfaces.<name>.peers.*.presharedKeyFile":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":null,"description":"File pointing to preshared key as generated by wg pensk. Optional,\nand may be omitted. This option adds an additional layer of\nsymmetric-key cryptography to be mixed into the already existing\npublic-key cryptography, for post-quantum resistance.\n","example":"/private/wireguard_psk","loc":["networking","wireguard","interfaces","<name>","peers","*","presharedKeyFile"],"readOnly":false,"type":"null or string"},"networking.wireguard.interfaces.<name>.peers.*.publicKey":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"description":"The base64 public key the peer.","example":"xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg=","loc":["networking","wireguard","interfaces","<name>","peers","*","publicKey"],"readOnly":false,"type":"string"},"networking.wireguard.interfaces.<name>.postSetup":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":"","description":"Commands called at the end of the interface setup.","example":{"_type":"literalExample","text":"printf \"nameserver 10.200.100.1\" | ${pkgs.openresolv}/bin/resolvconf -a wg0 -m 0\n"},"loc":["networking","wireguard","interfaces","<name>","postSetup"],"readOnly":false,"type":"strings concatenated with \"\\n\" or list of strings convertible to it"},"networking.wireguard.interfaces.<name>.postShutdown":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":"","description":"Commands called after shutting down the interface.","example":{"_type":"literalExample","text":"${pkgs.openresolv}/bin/resolvconf -d wg0"},"loc":["networking","wireguard","interfaces","<name>","postShutdown"],"readOnly":false,"type":"strings concatenated with \"\\n\" or list of strings convertible to it"},"networking.wireguard.interfaces.<name>.preSetup":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":"","description":"Commands called at the start of the interface setup.\n","example":{"_type":"literalExample","text":"${pkgs.iproute}/bin/ip netns add foo\n"},"loc":["networking","wireguard","interfaces","<name>","preSetup"],"readOnly":false,"type":"strings concatenated with \"\\n\" or list of strings convertible to it"},"networking.wireguard.interfaces.<name>.privateKey":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":null,"description":"Base64 private key generated by wg genkey.\n\nWarning: Consider using privateKeyFile instead if you do not\nwant to store the key in the world-readable Nix store.\n","example":"yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk=","loc":["networking","wireguard","interfaces","<name>","privateKey"],"readOnly":false,"type":"null or string"},"networking.wireguard.interfaces.<name>.privateKeyFile":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":null,"description":"Private key file as generated by wg genkey.\n","example":"/private/wireguard_key","loc":["networking","wireguard","interfaces","<name>","privateKeyFile"],"readOnly":false,"type":"null or string"},"networking.wireguard.interfaces.<name>.table":{"declarations":["nixos/modules/services/networking/wireguard.nix"],"default":"main","description":"The kernel routing table to add this interface's\n        associated routes to. Setting this is useful for e.g. policy routing\n        (\"ip rule\") or virtual routing and forwarding (\"ip vrf\"). Both numeric\n        table IDs and table names (/etc/rt_tables) can be used. Defaults to\n        \"main\".","loc":["networking","wireguard","interfaces","<name>","table"],"readOnly":false,"type":"string"},"networking.wireless.driver":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":"nl80211,wext","description":"Force a specific wpa_supplicant driver.","loc":["networking","wireless","driver"],"readOnly":false,"type":"string"},"networking.wireless.enable":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":false,"description":"Whether to enable wpa_supplicant.","example":true,"loc":["networking","wireless","enable"],"readOnly":false,"type":"boolean"},"networking.wireless.extraConfig":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":"","description":"Extra lines appended to the configuration file.\nSee wpa_supplicant.conf(5) for available options.\n","example":"p2p_disabled=1\n","loc":["networking","wireless","extraConfig"],"readOnly":false,"type":"string"},"networking.wireless.interfaces":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":[],"description":"The interfaces <command>wpa_supplicant</command> will use. If empty, it will\nautomatically use all wireless interfaces.\n","example":["wlan0","wlan1"],"loc":["networking","wireless","interfaces"],"readOnly":false,"type":"list of strings"},"networking.wireless.iwd.enable":{"declarations":["nixos/modules/services/networking/iwd.nix"],"default":false,"description":"Whether to enable iwd.","example":true,"loc":["networking","wireless","iwd","enable"],"readOnly":false,"type":"boolean"},"networking.wireless.networks":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":{},"description":"The network definitions to automatically connect to when\n <command>wpa_supplicant</command> is running. If this\n parameter is left empty wpa_supplicant will use\n/etc/wpa_supplicant.conf as the configuration file.\n","example":{"_type":"literalExample","text":"{ echelon = {\n    psk = \"abcdefgh\";\n  };\n  \"free.wifi\" = {};\n}\n"},"loc":["networking","wireless","networks"],"readOnly":false,"type":"attribute set of submodules"},"networking.wireless.networks.<name>.auth":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":null,"description":"Use this option to configure advanced authentication methods like EAP.\nSee wpa_supplicant.conf(5) for example configurations.\n\nMutually exclusive with <varname>psk</varname> and <varname>pskRaw</varname>.\n","example":"key_mgmt=WPA-EAP\neap=PEAP\nidentity=\"user@example.com\"\npassword=\"secret\"\n","loc":["networking","wireless","networks","<name>","auth"],"readOnly":false,"type":"null or string"},"networking.wireless.networks.<name>.extraConfig":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":"","description":"Extra configuration lines appended to the network block.\nSee wpa_supplicant.conf(5) for available options.\n","example":"bssid_blacklist=02:11:22:33:44:55 02:22:aa:44:55:66\n","loc":["networking","wireless","networks","<name>","extraConfig"],"readOnly":false,"type":"string"},"networking.wireless.networks.<name>.hidden":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":false,"description":"Set this to <literal>true</literal> if the SSID of the network is hidden.\n","loc":["networking","wireless","networks","<name>","hidden"],"readOnly":false,"type":"boolean"},"networking.wireless.networks.<name>.priority":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":null,"description":"By default, all networks will get same priority group (0). If some of the\nnetworks are more desirable, this field can be used to change the order in\nwhich wpa_supplicant goes through the networks when selecting a BSS. The\npriority groups will be iterated in decreasing priority (i.e., the larger the\npriority value, the sooner the network is matched against the scan results).\nWithin each priority group, networks will be selected based on security\npolicy, signal strength, etc.\n","loc":["networking","wireless","networks","<name>","priority"],"readOnly":false,"type":"null or signed integer"},"networking.wireless.networks.<name>.psk":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":null,"description":"The network's pre-shared key in plaintext defaulting\nto being a network without any authentication.\n\nBe aware that these will be written to the nix store\nin plaintext!\n\nMutually exclusive with <varname>pskRaw</varname>.\n","loc":["networking","wireless","networks","<name>","psk"],"readOnly":false,"type":"null or string"},"networking.wireless.networks.<name>.pskRaw":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":null,"description":"The network's pre-shared key in hex defaulting\nto being a network without any authentication.\n\nMutually exclusive with <varname>psk</varname>.\n","loc":["networking","wireless","networks","<name>","pskRaw"],"readOnly":false,"type":"null or string"},"networking.wireless.userControlled.enable":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":false,"description":"Allow normal users to control wpa_supplicant through wpa_gui or wpa_cli.\nThis is useful for laptop users that switch networks a lot and don't want\nto depend on a large package such as NetworkManager just to pick nearby\naccess points.\n\nWhen using a declarative network specification you cannot persist any\nsettings via wpa_gui or wpa_cli.\n","loc":["networking","wireless","userControlled","enable"],"readOnly":false,"type":"boolean"},"networking.wireless.userControlled.group":{"declarations":["nixos/modules/services/networking/wpa_supplicant.nix"],"default":"wheel","description":"Members of this group can control wpa_supplicant.","example":"network","loc":["networking","wireless","userControlled","group"],"readOnly":false,"type":"string"},"networking.wlanInterfaces":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":{},"description":"Creating multiple WLAN interfaces on top of one physical WLAN device (NIC).\n\nThe name of the WLAN interface corresponds to the name of the attribute.\nA NIC is referenced by the persistent device name of the WLAN interface that\n<literal>udev</literal> assigns to a NIC by default.\nIf a NIC supports multiple WLAN interfaces, then the one NIC can be used as\n<literal>device</literal> for multiple WLAN interfaces.\nIf a NIC is used for creating WLAN interfaces, then the default WLAN interface\nwith a persistent device name form <literal>udev</literal> is not created.\nA WLAN interface with the persistent name assigned from <literal>udev</literal>\nwould have to be created explicitly.\n","example":{"_type":"literalExample","text":{"wlan-adhoc0":{"device":"wlp6s0","mac":"02:00:00:00:00:01","type":"ibss"},"wlan-ap0":{"device":"wlp6s0","mac":"02:00:00:00:00:03"},"wlan-p2p0":{"device":"wlp6s0","mac":"02:00:00:00:00:02"},"wlan-station0":{"device":"wlp6s0"}}},"loc":["networking","wlanInterfaces"],"readOnly":false,"type":"attribute set of submodules"},"networking.wlanInterfaces.<name>.device":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"description":"The name of the underlying hardware WLAN device as assigned by <literal>udev</literal>.","example":"wlp6s0","loc":["networking","wlanInterfaces","<name>","device"],"readOnly":false,"type":"Concatenated string"},"networking.wlanInterfaces.<name>.flags":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"Flags for interface of type <literal>monitor</literal>.\n","example":"control","loc":["networking","wlanInterfaces","<name>","flags"],"readOnly":false,"type":"null or one of \"none\", \"fcsfail\", \"control\", \"otherbss\", \"cook\", \"active\""},"networking.wlanInterfaces.<name>.fourAddr":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"Whether to enable <literal>4-address mode</literal> with type <literal>managed</literal>.","loc":["networking","wlanInterfaces","<name>","fourAddr"],"readOnly":false,"type":"null or boolean"},"networking.wlanInterfaces.<name>.mac":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"MAC address to use for the device. If <literal>null</literal>, then the MAC of the\nunderlying hardware WLAN device is used.\n\nINFO: Locally administered MAC addresses are of the form:\n<itemizedlist>\n<listitem><para>x2:xx:xx:xx:xx:xx</para></listitem>\n<listitem><para>x6:xx:xx:xx:xx:xx</para></listitem>\n<listitem><para>xA:xx:xx:xx:xx:xx</para></listitem>\n<listitem><para>xE:xx:xx:xx:xx:xx</para></listitem>\n</itemizedlist>\n","example":"02:00:00:00:00:01","loc":["networking","wlanInterfaces","<name>","mac"],"readOnly":false,"type":"null or string"},"networking.wlanInterfaces.<name>.meshID":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":null,"description":"MeshID of interface with type <literal>mesh</literal>.","loc":["networking","wlanInterfaces","<name>","meshID"],"readOnly":false,"type":"null or Concatenated string"},"networking.wlanInterfaces.<name>.type":{"declarations":["nixos/modules/tasks/network-interfaces.nix"],"default":"managed","description":"The type of the WLAN interface.\nThe type has to be supported by the underlying hardware of the device.\n","example":"ibss","loc":["networking","wlanInterfaces","<name>","type"],"readOnly":false,"type":"one of \"managed\", \"ibss\", \"monitor\", \"mesh\", \"wds\""},"nix.allowedUsers":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":["*"],"description":"A list of names of users (separated by whitespace) that are\nallowed to connect to the Nix daemon. As with\n<option>nix.trustedUsers</option>, you can specify groups by\nprefixing them with <literal>@</literal>. Also, you can\nallow all users by specifying <literal>*</literal>. The\ndefault is <literal>*</literal>. Note that trusted users are\nalways allowed to connect.\n","example":["@wheel","@builders","alice","bob"],"loc":["nix","allowedUsers"],"readOnly":false,"type":"list of strings"},"nix.autoOptimiseStore":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":false,"description":"If set to true, Nix automatically detects files in the store that have\nidentical contents, and replaces them with hard links to a single copy.\nThis saves disk space. If set to false (the default), you can still run\nnix-store --optimise to get rid of duplicate files.\n","example":true,"loc":["nix","autoOptimiseStore"],"readOnly":false,"type":"boolean"},"nix.binaryCachePublicKeys":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"description":"List of public keys used to sign binary caches. If\n<option>nix.requireSignedBinaryCaches</option> is enabled,\nthen Nix will use a binary from a binary cache if and only\nif it is signed by <emphasis>any</emphasis> of the keys\nlisted here. By default, only the key for\n<uri>cache.nixos.org</uri> is included.\n","example":["hydra.nixos.org-1:CNHJZBh9K4tP3EKF6FkkgeVYsS3ohTl+oS0Qa8bezVs="],"loc":["nix","binaryCachePublicKeys"],"readOnly":false,"type":"list of strings"},"nix.binaryCaches":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":["https://cache.nixos.org/"],"description":"List of binary cache URLs used to obtain pre-built binaries\nof Nix packages.\n","loc":["nix","binaryCaches"],"readOnly":false,"type":"list of strings"},"nix.buildCores":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":1,"description":"This option defines the maximum number of concurrent tasks during\none build. It affects, e.g., -j option for make. The default is 1.\nThe special value 0 means that the builder should use all\navailable CPU cores in the system. Some builds may become\nnon-deterministic with this option; use with care! Packages will\nonly be affected if enableParallelBuilding is set for them.\n","example":64,"loc":["nix","buildCores"],"readOnly":false,"type":"signed integer"},"nix.buildMachines":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":[],"description":"This option lists the machines to be used if distributed\nbuilds are enabled (see\n<option>nix.distributedBuilds</option>).  Nix will perform\nderivations on those machines via SSH by copying the inputs\nto the Nix store on the remote machine, starting the build,\nthen copying the output back to the local Nix store.  Each\nelement of the list should be an attribute set containing\nthe machine's host name (<varname>hostname</varname>), the\nuser name to be used for the SSH connection\n(<varname>sshUser</varname>), the Nix system type\n(<varname>system</varname>, e.g.,\n<literal>\"i686-linux\"</literal>), the maximum number of\njobs to be run in parallel on that machine\n(<varname>maxJobs</varname>), the path to the SSH private\nkey to be used to connect (<varname>sshKey</varname>), a\nlist of supported features of the machine\n(<varname>supportedFeatures</varname>) and a list of\nmandatory features of the machine\n(<varname>mandatoryFeatures</varname>). The SSH private key\nshould not have a passphrase, and the corresponding public\nkey should be added to\n<filename>~<replaceable>sshUser</replaceable>/authorized_keys</filename>\non the remote machine.\n","example":{"_type":"literalExample","text":"[ { hostName = \"voila.labs.cs.uu.nl\";\n    sshUser = \"nix\";\n    sshKey = \"/root/.ssh/id_buildfarm\";\n    system = \"powerpc-darwin\";\n    maxJobs = 1;\n  }\n  { hostName = \"linux64.example.org\";\n    sshUser = \"buildfarm\";\n    sshKey = \"/root/.ssh/id_buildfarm\";\n    system = \"x86_64-linux\";\n    maxJobs = 2;\n    speedFactor = 2;\n    supportedFeatures = [ \"kvm\" ];\n    mandatoryFeatures = [ \"perf\" ];\n  }\n]\n"},"loc":["nix","buildMachines"],"readOnly":false,"type":"list of attribute sets"},"nix.checkConfig":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":true,"description":"If enabled (the default), checks that Nix can parse the generated nix.conf.\n","loc":["nix","checkConfig"],"readOnly":false,"type":"boolean"},"nix.daemonIONiceLevel":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":0,"description":"Nix daemon process I/O priority. This priority propagates to build processes.\n0 is the default Unix process I/O priority, 7 is the lowest.\n","loc":["nix","daemonIONiceLevel"],"readOnly":false,"type":"signed integer"},"nix.daemonNiceLevel":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":0,"description":"Nix daemon process priority. This priority propagates to build processes.\n0 is the default Unix process priority, 19 is the lowest.\n","loc":["nix","daemonNiceLevel"],"readOnly":false,"type":"signed integer"},"nix.distributedBuilds":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":false,"description":"Whether to distribute builds to the machines listed in\n<option>nix.buildMachines</option>.\n","loc":["nix","distributedBuilds"],"readOnly":false,"type":"boolean"},"nix.extraOptions":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":"","description":"Additional text appended to <filename>nix.conf</filename>.","example":"gc-keep-outputs = true\ngc-keep-derivations = true\n","loc":["nix","extraOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"nix.gc.automatic":{"declarations":["nixos/modules/services/misc/nix-gc.nix"],"default":false,"description":"Automatically run the garbage collector at a specific time.","loc":["nix","gc","automatic"],"readOnly":false,"type":"boolean"},"nix.gc.dates":{"declarations":["nixos/modules/services/misc/nix-gc.nix"],"default":"03:15","description":"Specification (in the format described by\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>) of the time at\nwhich the garbage collector will run.\n","loc":["nix","gc","dates"],"readOnly":false,"type":"string"},"nix.gc.options":{"declarations":["nixos/modules/services/misc/nix-gc.nix"],"default":"","description":"Options given to <filename>nix-collect-garbage</filename> when the\ngarbage collector is run automatically.\n","example":"--max-freed $((64 * 1024**3))","loc":["nix","gc","options"],"readOnly":false,"type":"string"},"nix.maxJobs":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":1,"description":"This option defines the maximum number of jobs that Nix will try\nto build in parallel.  The default is 1.  You should generally\nset it to the total number of logical cores in your system (e.g., 16\nfor two CPUs with 4 cores each and hyper-threading).\n","example":64,"loc":["nix","maxJobs"],"readOnly":false,"type":"signed integer or one of \"auto\""},"nix.nixPath":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":["nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixos","nixos-config=/etc/nixos/configuration.nix","/nix/var/nix/profiles/per-user/root/channels"],"description":"The default Nix expression search path, used by the Nix\nevaluator to look up paths enclosed in angle brackets\n(e.g. <literal>&lt;nixpkgs&gt;</literal>).\n","loc":["nix","nixPath"],"readOnly":false,"type":"list of strings"},"nix.nrBuildUsers":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"description":"Number of <literal>nixbld</literal> user accounts created to\nperform secure concurrent builds.  If you receive an error\nmessage saying that “all build users are currently in use”,\nyou should increase this value.\n","loc":["nix","nrBuildUsers"],"readOnly":false,"type":"signed integer"},"nix.optimise.automatic":{"declarations":["nixos/modules/services/misc/nix-optimise.nix"],"default":false,"description":"Automatically run the nix store optimiser at a specific time.","loc":["nix","optimise","automatic"],"readOnly":false,"type":"boolean"},"nix.optimise.dates":{"declarations":["nixos/modules/services/misc/nix-optimise.nix"],"default":["03:45"],"description":"Specification (in the format described by\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>) of the time at\nwhich the optimiser will run.\n","loc":["nix","optimise","dates"],"readOnly":false,"type":"list of strings"},"nix.package":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":"pkgs.nix","description":"This option specifies the Nix package instance to use throughout the system.\n","loc":["nix","package"],"readOnly":false,"type":"package"},"nix.readOnlyStore":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":true,"description":"If set, NixOS will enforce the immutability of the Nix store\nby making <filename>/nix/store</filename> a read-only bind\nmount.  Nix will automatically make the store writable when\nneeded.\n","loc":["nix","readOnlyStore"],"readOnly":false,"type":"boolean"},"nix.requireSignedBinaryCaches":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":true,"description":"If enabled (the default), Nix will only download binaries from binary caches if\nthey are cryptographically signed with any of the keys listed in\n<option>nix.binaryCachePublicKeys</option>. If disabled, signatures are neither\nrequired nor checked, so it's strongly recommended that you use only\ntrustworthy caches and https to prevent man-in-the-middle attacks.\n","loc":["nix","requireSignedBinaryCaches"],"readOnly":false,"type":"boolean"},"nix.sandboxPaths":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":[],"description":"Directories from the host filesystem to be included\nin the sandbox.\n","example":["/dev","/proc"],"loc":["nix","sandboxPaths"],"readOnly":false,"type":"list of strings"},"nix.sshServe.enable":{"declarations":["nixos/modules/services/misc/nix-ssh-serve.nix"],"default":false,"description":"Whether to enable serving the Nix store as a remote store via SSH.","loc":["nix","sshServe","enable"],"readOnly":false,"type":"boolean"},"nix.sshServe.keys":{"declarations":["nixos/modules/services/misc/nix-ssh-serve.nix"],"default":[],"description":"A list of SSH public keys allowed to access the binary cache via SSH.","example":["ssh-dss AAAAB3NzaC1k... alice@example.org"],"loc":["nix","sshServe","keys"],"readOnly":false,"type":"list of strings"},"nix.sshServe.protocol":{"declarations":["nixos/modules/services/misc/nix-ssh-serve.nix"],"default":"ssh","description":"The specific Nix-over-SSH protocol to use.","loc":["nix","sshServe","protocol"],"readOnly":false,"type":"one of \"ssh\", \"ssh-ng\""},"nix.trustedBinaryCaches":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":[],"description":"List of binary cache URLs that non-root users can use (in\naddition to those specified using\n<option>nix.binaryCaches</option>) by passing\n<literal>--option binary-caches</literal> to Nix commands.\n","example":["http://hydra.nixos.org/"],"loc":["nix","trustedBinaryCaches"],"readOnly":false,"type":"list of strings"},"nix.trustedUsers":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":["root"],"description":"A list of names of users that have additional rights when\nconnecting to the Nix daemon, such as the ability to specify\nadditional binary caches, or to import unsigned NARs. You\ncan also specify groups by prefixing them with\n<literal>@</literal>; for instance,\n<literal>@wheel</literal> means all users in the wheel\ngroup.\n","example":["root","alice","@wheel"],"loc":["nix","trustedUsers"],"readOnly":false,"type":"list of strings"},"nix.useSandbox":{"declarations":["nixos/modules/services/misc/nix-daemon.nix"],"default":true,"description":"\n          If set, Nix will perform builds in a sandboxed environment that it\n          will set up automatically for each build. This prevents impurities\n          in builds by disallowing access to dependencies outside of the Nix\n          store by using network and mount namespaces in a chroot environment.\n          This is enabled by default even though it has a possible performance\n          impact due to the initial setup time of a sandbox for each build. It\n          doesn't affect derivation hashes, so changing this option will not\n          trigger a rebuild of packages.\n        ","loc":["nix","useSandbox"],"readOnly":false,"type":"boolean or one of \"relaxed\""},"nixpkgs.config":{"declarations":["nixos/modules/misc/nixpkgs.nix"],"default":{},"description":"The configuration of the Nix Packages collection.  (For\ndetails, see the Nixpkgs documentation.)  It allows you to set\npackage configuration options.\n\nIgnored when <code>nixpkgs.pkgs</code> is set.\n","example":{"_type":"literalExample","text":"{ allowBroken = true; allowUnfree = true; }\n"},"loc":["nixpkgs","config"],"readOnly":false,"type":"nixpkgs config"},"nixpkgs.crossSystem":{"declarations":["nixos/modules/misc/nixpkgs.nix"],"default":{"_type":"literalExample","text":"(import \"${nixos}/../lib\").lib.systems.examples.aarch64-multiplatform"},"description":"Specifies the platform for which NixOS should be\nbuilt. Specify this only if it is different from\n<code>nixpkgs.localSystem</code>, the platform\n<emphasis>on</emphasis> which NixOS should be built. In other\nwords, specify this to cross-compile NixOS. Otherwise it\nshould be set as null, the default. See its description in the\nNixpkgs manual for more details.\n\nIgnored when <code>nixpkgs.pkgs</code> is set.\n","example":{"config":"aarch64-unknown-linux-gnu","system":"aarch64-linux"},"loc":["nixpkgs","crossSystem"],"readOnly":false,"type":"null or attribute set"},"nixpkgs.localSystem":{"declarations":["nixos/modules/misc/nixpkgs.nix"],"default":{"_type":"literalExample","text":"(import \"${nixos}/../lib\").lib.systems.examples.aarch64-multiplatform"},"description":"Specifies the platform on which NixOS should be built. When\n<code>nixpkgs.crossSystem</code> is unset, it also specifies\nthe platform <emphasis>for</emphasis> which NixOS should be\nbuilt.  If this option is unset, it defaults to the platform\ntype of the machine where evaluation happens. Specifying this\noption is useful when doing distributed multi-platform\ndeployment, or when building virtual machines. See its\ndescription in the Nixpkgs manual for more details.\n\nIgnored when <code>nixpkgs.pkgs</code> is set.\n","example":{"config":"aarch64-unknown-linux-gnu","system":"aarch64-linux"},"loc":["nixpkgs","localSystem"],"readOnly":false,"type":"attribute set"},"nixpkgs.overlays":{"declarations":["nixos/modules/misc/nixpkgs.nix"],"default":[],"description":"List of overlays to use with the Nix Packages collection.\n(For details, see the Nixpkgs documentation.)  It allows\nyou to override packages globally. This is a function that\ntakes as an argument the <emphasis>original</emphasis> Nixpkgs.\nThe first argument should be used for finding dependencies, and\nthe second should be used for overriding recipes.\n\nIgnored when <code>nixpkgs.pkgs</code> is set.\n","example":{"_type":"literalExample","text":"[ (self: super: {\n    openssh = super.openssh.override {\n      hpnSupport = true;\n      kerberos = self.libkrb5;\n    };\n  };\n) ]\n"},"loc":["nixpkgs","overlays"],"readOnly":false,"type":"list of nixpkgs overlays"},"nixpkgs.pkgs":{"declarations":["nixos/modules/misc/nixpkgs.nix"],"default":{"_type":"literalExample","text":"import \"${nixos}/..\" {\n            inherit (cfg) config overlays localSystem crossSystem;\n          }\n"},"description":"This is the evaluation of Nixpkgs that will be provided to\nall NixOS modules. Defining this option has the effect of\nignoring the other options that would otherwise be used to\nevaluate Nixpkgs, because those are arguments to the default\nvalue. The default value imports the Nixpkgs source files\nrelative to the location of this NixOS module, because\nNixOS and Nixpkgs are distributed together for consistency,\nso the <code>nixos</code> in the default value is in fact a\nrelative path. The <code>config</code>, <code>overlays</code>,\n<code>localSystem</code>, and <code>crossSystem</code> come\nfrom this option's siblings.\n\nThis option can be used by applications like NixOps to increase\nthe performance of evaluation, or to create packages that depend\non a container that should be built with the exact same evaluation\nof Nixpkgs, for example. Applications like this should set\ntheir default value using <code>lib.mkDefault</code>, so\nuser-provided configuration can override it without using\n<code>lib</code>.\n\nNote that using a distinct version of Nixpkgs with NixOS may\nbe an unexpected source of problems. Use this option with care.\n","example":{"_type":"literalExample","text":"import <nixpkgs> {}"},"loc":["nixpkgs","pkgs"],"readOnly":false,"type":"An evaluation of Nixpkgs; the top level attribute set of packages"},"nixpkgs.system":{"declarations":["nixos/modules/misc/nixpkgs.nix"],"default":{"system":"x86_64-linux"},"description":"Specifies the Nix platform type on which NixOS should be built.\nIt is better to specify <code>nixpkgs.localSystem</code> instead.\n<programlisting>\n{\n  nixpkgs.system = ..;\n}\n</programlisting>\nis the same as\n<programlisting>\n{\n  nixpkgs.localSystem.system = ..;\n}\n</programlisting>\nSee <code>nixpkgs.localSystem</code> for more information.\n\nIgnored when <code>nixpkgs.localSystem</code> is set.\nIgnored when <code>nixpkgs.pkgs</code> is set.\n","example":"i686-linux","loc":["nixpkgs","system"],"readOnly":false,"type":"string"},"power.ups.enable":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":false,"description":"Enables support for Power Devices, such as Uninterruptible Power\nSupplies, Power Distribution Units and Solar Controllers.\n","loc":["power","ups","enable"],"readOnly":false,"type":"boolean"},"power.ups.maxStartDelay":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":45,"description":"This can be set as a global variable above your first UPS\ndefinition and it can also be set in a UPS section.  This value\ncontrols how long upsdrvctl will wait for the driver to finish\nstarting.  This keeps your system from getting stuck due to a\nbroken driver or UPS.\n","loc":["power","ups","maxStartDelay"],"readOnly":false,"type":"signed integer"},"power.ups.mode":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":"standalone","description":"The MODE determines which part of the NUT is to be started, and\nwhich configuration files must be modified.\n\nThe values of MODE can be:\n\n- none: NUT is not configured, or use the Integrated Power\n  Management, or use some external system to startup NUT\n  components. So nothing is to be started.\n\n- standalone: This mode address a local only configuration, with 1\n  UPS protecting the local system. This implies to start the 3 NUT\n  layers (driver, upsd and upsmon) and the matching configuration\n  files. This mode can also address UPS redundancy.\n\n- netserver: same as for the standalone configuration, but also\n  need some more ACLs and possibly a specific LISTEN directive in\n  upsd.conf.  Since this MODE is opened to the network, a special\n  care should be applied to security concerns.\n\n- netclient: this mode only requires upsmon.\n","loc":["power","ups","mode"],"readOnly":false,"type":"string"},"power.ups.schedulerRules":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"description":"File which contains the rules to handle UPS events.\n","example":"/etc/nixos/upssched.conf","loc":["power","ups","schedulerRules"],"readOnly":false,"type":"string"},"power.ups.ups":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":{},"description":"This is where you configure all the UPSes that this system will be\nmonitoring directly.  These are usually attached to serial ports,\nbut USB devices are also supported.\n","loc":["power","ups","ups"],"readOnly":false,"type":"attribute set of submodules"},"power.ups.ups.<name>.description":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":"","description":"Description of the UPS.\n","loc":["power","ups","ups","<name>","description"],"readOnly":false,"type":"Concatenated string"},"power.ups.ups.<name>.directives":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":[],"description":"List of configuration directives for this UPS.\n","loc":["power","ups","ups","<name>","directives"],"readOnly":false,"type":"list of strings"},"power.ups.ups.<name>.driver":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"description":"Specify the program to run to talk to this UPS.  apcsmart,\nbestups, and sec are some examples.\n","loc":["power","ups","ups","<name>","driver"],"readOnly":false,"type":"string"},"power.ups.ups.<name>.maxStartDelay":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":null,"description":"This can be set as a global variable above your first UPS\ndefinition and it can also be set in a UPS section.  This value\ncontrols how long upsdrvctl will wait for the driver to finish\nstarting.  This keeps your system from getting stuck due to a\nbroken driver or UPS.\n","loc":["power","ups","ups","<name>","maxStartDelay"],"readOnly":false,"type":"null or signed integer"},"power.ups.ups.<name>.port":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"description":"The serial port to which your UPS is connected.  /dev/ttyS0 is\nusually the first port on Linux boxes, for example.\n","loc":["power","ups","ups","<name>","port"],"readOnly":false,"type":"string"},"power.ups.ups.<name>.shutdownOrder":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":0,"description":"When you have multiple UPSes on your system, you usually need to\nturn them off in a certain order.  upsdrvctl shuts down all the\n0s, then the 1s, 2s, and so on.  To exclude a UPS from the\nshutdown sequence, set this to -1.\n","loc":["power","ups","ups","<name>","shutdownOrder"],"readOnly":false,"type":"signed integer"},"power.ups.ups.<name>.summary":{"declarations":["nixos/modules/services/monitoring/ups.nix"],"default":"","description":"Lines which would be added inside ups.conf for handling this UPS.\n","loc":["power","ups","ups","<name>","summary"],"readOnly":false,"type":"Concatenated string"},"powerManagement.cpuFreqGovernor":{"declarations":["nixos/modules/tasks/cpu-freq.nix"],"default":null,"description":"Configure the governor used to regulate the frequence of the\navailable CPUs. By default, the kernel configures the\nperformance governor.\n","example":"ondemand","loc":["powerManagement","cpuFreqGovernor"],"readOnly":false,"type":"null or string"},"powerManagement.enable":{"declarations":["nixos/modules/config/power-management.nix"],"default":true,"description":"Whether to enable power management.  This includes support\nfor suspend-to-RAM and powersave features on laptops.\n","loc":["powerManagement","enable"],"readOnly":false,"type":"boolean"},"powerManagement.powerDownCommands":{"declarations":["nixos/modules/config/power-management.nix"],"default":"","description":"Commands executed when the machine powers down.  That is,\nthey're executed both when the system shuts down and when\nit goes to suspend or hibernation.\n","example":{"_type":"literalExample","text":"\"${pkgs.hdparm}/sbin/hdparm -B 255 /dev/sda\"\n"},"loc":["powerManagement","powerDownCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"powerManagement.powerUpCommands":{"declarations":["nixos/modules/config/power-management.nix"],"default":"","description":"Commands executed when the machine powers up.  That is,\nthey're executed both when the system first boots and when\nit resumes from suspend or hibernation.\n","example":{"_type":"literalExample","text":"\"${pkgs.hdparm}/sbin/hdparm -B 255 /dev/sda\"\n"},"loc":["powerManagement","powerUpCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"powerManagement.powertop.enable":{"declarations":["nixos/modules/tasks/powertop.nix"],"default":false,"description":"Whether to enable powertop auto tuning on startup.","example":true,"loc":["powerManagement","powertop","enable"],"readOnly":false,"type":"boolean"},"powerManagement.resumeCommands":{"declarations":["nixos/modules/config/power-management.nix"],"default":"","description":"Commands executed after the system resumes from suspend-to-RAM.","loc":["powerManagement","resumeCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"powerManagement.scsiLinkPolicy":{"declarations":["nixos/modules/tasks/scsi-link-power-management.nix"],"default":null,"description":"SCSI link power management policy. The kernel default is\n\"max_performance\".\n</para><para>\n\"med_power_with_dipm\" is supported by kernel versions\n4.15 and newer.\n","loc":["powerManagement","scsiLinkPolicy"],"readOnly":false,"type":"null or one of \"min_power\", \"max_performance\", \"medium_power\", \"med_power_with_dipm\""},"programs.adb.enable":{"declarations":["nixos/modules/programs/adb.nix"],"default":false,"description":"Whether to configure system to use Android Debug Bridge (adb).\nTo grant access to a user, it must be part of adbusers group:\n<code>users.users.alice.extraGroups = [\"adbusers\"];</code>\n","loc":["programs","adb","enable"],"readOnly":false,"relatedPackages":"<itemizedlist><listitem><para><literal>pkgs.androidenv.platformTools (android-platform-tools-r28.0.1)</literal>: ???.</para></listitem></itemizedlist>","type":"boolean"},"programs.atop.settings":{"declarations":["nixos/modules/programs/atop.nix"],"default":{},"description":"Parameters to be written to <filename>/etc/atoprc</filename>.\n","example":{"flags":"a1f","interval":5},"loc":["programs","atop","settings"],"readOnly":false,"type":"attribute set"},"programs.bash.enableCompletion":{"declarations":["nixos/modules/programs/bash/bash.nix"],"default":true,"description":"Enable Bash completion for all interactive bash shells.\n","loc":["programs","bash","enableCompletion"],"readOnly":false,"type":"boolean"},"programs.bash.interactiveShellInit":{"declarations":["nixos/modules/programs/bash/bash.nix"],"default":"","description":"Shell script code called during interactive bash shell initialisation.\n","loc":["programs","bash","interactiveShellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.bash.loginShellInit":{"declarations":["nixos/modules/programs/bash/bash.nix"],"default":"","description":"Shell script code called during login bash shell initialisation.\n","loc":["programs","bash","loginShellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.bash.promptInit":{"declarations":["nixos/modules/programs/bash/bash.nix"],"default":"# Provide a nice prompt if the terminal supports it.\nif [ \"$TERM\" != \"dumb\" -o -n \"$INSIDE_EMACS\" ]; then\n  PROMPT_COLOR=\"1;31m\"\n  let $UID && PROMPT_COLOR=\"1;32m\"\n  PS1=\"\\n\\[\\033[$PROMPT_COLOR\\][\\u@\\h:\\w]\\\\$\\[\\033[0m\\] \"\n  if test \"$TERM\" = \"xterm\"; then\n    PS1=\"\\[\\033]2;\\h:\\u:\\w\\007\\]$PS1\"\n  fi\nfi\n","description":"Shell script code used to initialise the bash prompt.\n","loc":["programs","bash","promptInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.bash.shellAliases":{"declarations":["nixos/modules/programs/bash/bash.nix"],"default":{},"description":"Set of aliases for bash shell, which overrides <option>environment.shellAliases</option>.\nSee <option>environment.shellAliases</option> for an option format description.\n","loc":["programs","bash","shellAliases"],"readOnly":false,"type":"attribute set of null or string or paths"},"programs.bash.shellInit":{"declarations":["nixos/modules/programs/bash/bash.nix"],"default":"","description":"Shell script code called during bash shell initialisation.\n","loc":["programs","bash","shellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.bcc.enable":{"declarations":["nixos/modules/programs/bcc.nix"],"default":false,"description":"Whether to enable bcc.","example":true,"loc":["programs","bcc","enable"],"readOnly":false,"type":"boolean"},"programs.browserpass.enable":{"declarations":["nixos/modules/programs/browserpass.nix"],"default":false,"description":"Whether to enable the NativeMessaging configuration for Chromium, Chrome, and Vivaldi..","example":true,"loc":["programs","browserpass","enable"],"readOnly":false,"type":"boolean"},"programs.ccache.cacheDir":{"declarations":["nixos/modules/programs/ccache.nix"],"default":"/var/cache/ccache","description":"CCache directory","loc":["programs","ccache","cacheDir"],"readOnly":false,"type":"path"},"programs.ccache.enable":{"declarations":["nixos/modules/programs/ccache.nix"],"default":false,"description":"Whether to enable CCache.","example":true,"loc":["programs","ccache","enable"],"readOnly":false,"type":"boolean"},"programs.ccache.packageNames":{"declarations":["nixos/modules/programs/ccache.nix"],"default":[],"description":"Nix top-level packages to be compiled using CCache","example":["wxGTK30","qt48","ffmpeg_3_3","libav_all"],"loc":["programs","ccache","packageNames"],"readOnly":false,"type":"list of strings"},"programs.cdemu.enable":{"declarations":["nixos/modules/programs/cdemu.nix"],"default":false,"description":"<command>cdemu</command> for members of\n<option>programs.cdemu.group</option>.\n","loc":["programs","cdemu","enable"],"readOnly":false,"type":"unspecified"},"programs.cdemu.group":{"declarations":["nixos/modules/programs/cdemu.nix"],"default":"cdrom","description":"Group that users must be in to use <command>cdemu</command>.\n","loc":["programs","cdemu","group"],"readOnly":false,"type":"unspecified"},"programs.cdemu.gui":{"declarations":["nixos/modules/programs/cdemu.nix"],"default":true,"description":"Whether to install the <command>cdemu</command> GUI (gCDEmu).\n","loc":["programs","cdemu","gui"],"readOnly":false,"type":"unspecified"},"programs.cdemu.image-analyzer":{"declarations":["nixos/modules/programs/cdemu.nix"],"default":true,"description":"Whether to install the image analyzer.\n","loc":["programs","cdemu","image-analyzer"],"readOnly":false,"type":"unspecified"},"programs.chromium.defaultSearchProviderSearchURL":{"declarations":["nixos/modules/programs/chromium.nix"],"default":null,"description":"Chromium default search provider url.","example":"https://encrypted.google.com/search?q={searchTerms}&{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:searchClient}{google:sourceId}{google:instantExtendedEnabledParameter}ie={inputEncoding}","loc":["programs","chromium","defaultSearchProviderSearchURL"],"readOnly":false,"type":"null or string"},"programs.chromium.defaultSearchProviderSuggestURL":{"declarations":["nixos/modules/programs/chromium.nix"],"default":null,"description":"Chromium default search provider url for suggestions.","example":"https://encrypted.google.com/complete/search?output=chrome&q={searchTerms}","loc":["programs","chromium","defaultSearchProviderSuggestURL"],"readOnly":false,"type":"null or string"},"programs.chromium.enable":{"declarations":["nixos/modules/programs/chromium.nix"],"default":false,"description":"Whether to enable <command>chromium</command> policies.","example":true,"loc":["programs","chromium","enable"],"readOnly":false,"type":"boolean"},"programs.chromium.extensions":{"declarations":["nixos/modules/programs/chromium.nix"],"default":[],"description":"List of chromium extensions to install.\nFor list of plugins ids see id in url of extensions on\n<link xlink:href=\"https://chrome.google.com/webstore/category/extensions\">chrome web store</link>\npage.\n","example":{"_type":"literalExample","text":"[\n  \"chlffgpmiacpedhhbkiomidkjlcfhogd\" # pushbullet\n  \"mbniclmhobmnbdlbpiphghaielnnpgdp\" # lightshot\n  \"gcbommkclmclpchllfjekcdonpmejbdp\" # https everywhere\n  \"cjpalhdlnbpafiamejdnhcphjbkeiagm\" # ublock origin\n]\n"},"loc":["programs","chromium","extensions"],"readOnly":false,"type":"list of strings"},"programs.chromium.extraOpts":{"declarations":["nixos/modules/programs/chromium.nix"],"default":{},"description":"Extra chromium policy options, see\n<link xlink:href=\"https://www.chromium.org/administrators/policy-list-3\">https://www.chromium.org/administrators/policy-list-3</link>\nfor a list of avalible options\n","loc":["programs","chromium","extraOpts"],"readOnly":false,"type":"attribute set"},"programs.chromium.homepageLocation":{"declarations":["nixos/modules/programs/chromium.nix"],"default":null,"description":"Chromium default homepage","example":"https://nixos.org","loc":["programs","chromium","homepageLocation"],"readOnly":false,"type":"null or string"},"programs.command-not-found.dbPath":{"declarations":["nixos/modules/programs/command-not-found/command-not-found.nix"],"default":"/nix/var/nix/profiles/per-user/root/channels/nixos/programs.sqlite","description":"Absolute path to programs.sqlite.\n\nBy default this file will be provided by your channel\n(nixexprs.tar.xz).\n","loc":["programs","command-not-found","dbPath"],"readOnly":false,"type":"path"},"programs.command-not-found.enable":{"declarations":["nixos/modules/programs/command-not-found/command-not-found.nix"],"default":true,"description":"Whether interactive shells should show which Nix package (if\nany) provides a missing command.\n","loc":["programs","command-not-found","enable"],"readOnly":false,"type":"boolean"},"programs.criu.enable":{"declarations":["nixos/modules/programs/criu.nix"],"default":false,"description":"Install <command>criu</command> along with necessary kernel options.\n","loc":["programs","criu","enable"],"readOnly":false,"type":"unspecified"},"programs.dconf.enable":{"declarations":["nixos/modules/programs/dconf.nix"],"default":false,"description":"Whether to enable dconf.","example":true,"loc":["programs","dconf","enable"],"readOnly":false,"type":"boolean"},"programs.digitalbitbox.enable":{"declarations":["nixos/modules/programs/digitalbitbox/default.nix"],"default":false,"description":"Installs the Digital Bitbox application and enables the complementary hardware module.\n","loc":["programs","digitalbitbox","enable"],"readOnly":false,"type":"boolean"},"programs.digitalbitbox.package":{"declarations":["nixos/modules/programs/digitalbitbox/default.nix"],"default":"pkgs.digitalbitbox","description":"The Digital Bitbox package to use. This can be used to install a package with udev rules that differ from the defaults.","loc":["programs","digitalbitbox","package"],"readOnly":false,"type":"package"},"programs.firejail.enable":{"declarations":["nixos/modules/programs/firejail.nix"],"default":false,"description":"Whether to enable firejail.","example":true,"loc":["programs","firejail","enable"],"readOnly":false,"type":"boolean"},"programs.firejail.wrappedBinaries":{"declarations":["nixos/modules/programs/firejail.nix"],"default":{},"description":"Wrap the binaries in firejail and place them in the global path.\n</para>\n<para>\nYou will get file collisions if you put the actual application binary in\nthe global environment and applications started via .desktop files are\nnot wrapped if they specify the absolute path to the binary.\n","loc":["programs","firejail","wrappedBinaries"],"readOnly":false,"type":"attribute set"},"programs.fish.enable":{"declarations":["nixos/modules/programs/fish.nix"],"default":false,"description":"Whether to configure fish as an interactive shell.\n","loc":["programs","fish","enable"],"readOnly":false,"type":"boolean"},"programs.fish.interactiveShellInit":{"declarations":["nixos/modules/programs/fish.nix"],"default":"","description":"Shell script code called during interactive fish shell initialisation.\n","loc":["programs","fish","interactiveShellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.fish.loginShellInit":{"declarations":["nixos/modules/programs/fish.nix"],"default":"","description":"Shell script code called during fish login shell initialisation.\n","loc":["programs","fish","loginShellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.fish.promptInit":{"declarations":["nixos/modules/programs/fish.nix"],"default":"","description":"Shell script code used to initialise fish prompt.\n","loc":["programs","fish","promptInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.fish.shellAliases":{"declarations":["nixos/modules/programs/fish.nix"],"default":{},"description":"Set of aliases for fish shell, which overrides <option>environment.shellAliases</option>.\nSee <option>environment.shellAliases</option> for an option format description.\n","loc":["programs","fish","shellAliases"],"readOnly":false,"type":"attribute set of null or string or paths"},"programs.fish.shellInit":{"declarations":["nixos/modules/programs/fish.nix"],"default":"","description":"Shell script code called during fish shell initialisation.\n","loc":["programs","fish","shellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.fish.vendor.completions.enable":{"declarations":["nixos/modules/programs/fish.nix"],"default":true,"description":"Whether fish should use completion files provided by other packages.\n","loc":["programs","fish","vendor","completions","enable"],"readOnly":false,"type":"boolean"},"programs.fish.vendor.config.enable":{"declarations":["nixos/modules/programs/fish.nix"],"default":true,"description":"Whether fish should source configuration snippets provided by other packages.\n","loc":["programs","fish","vendor","config","enable"],"readOnly":false,"type":"boolean"},"programs.fish.vendor.functions.enable":{"declarations":["nixos/modules/programs/fish.nix"],"default":true,"description":"Whether fish should autoload fish functions provided by other packages.\n","loc":["programs","fish","vendor","functions","enable"],"readOnly":false,"type":"boolean"},"programs.gnupg.agent.enable":{"declarations":["nixos/modules/programs/gnupg.nix"],"default":false,"description":"Enables GnuPG agent with socket-activation for every user session.\n","loc":["programs","gnupg","agent","enable"],"readOnly":false,"type":"boolean"},"programs.gnupg.agent.enableBrowserSocket":{"declarations":["nixos/modules/programs/gnupg.nix"],"default":false,"description":"Enable browser socket for GnuPG agent.\n","loc":["programs","gnupg","agent","enableBrowserSocket"],"readOnly":false,"type":"boolean"},"programs.gnupg.agent.enableExtraSocket":{"declarations":["nixos/modules/programs/gnupg.nix"],"default":false,"description":"Enable extra socket for GnuPG agent.\n","loc":["programs","gnupg","agent","enableExtraSocket"],"readOnly":false,"type":"boolean"},"programs.gnupg.agent.enableSSHSupport":{"declarations":["nixos/modules/programs/gnupg.nix"],"default":false,"description":"Enable SSH agent support in GnuPG agent. Also sets SSH_AUTH_SOCK\nenvironment variable correctly. This will disable socket-activation\nand thus always start a GnuPG agent per user session.\n","loc":["programs","gnupg","agent","enableSSHSupport"],"readOnly":false,"type":"boolean"},"programs.gnupg.dirmngr.enable":{"declarations":["nixos/modules/programs/gnupg.nix"],"default":false,"description":"Enables GnuPG network certificate management daemon with socket-activation for every user session.\n","loc":["programs","gnupg","dirmngr","enable"],"readOnly":false,"type":"boolean"},"programs.gphoto2.enable":{"declarations":["nixos/modules/programs/gphoto2.nix"],"default":false,"description":"Whether to configure system to use gphoto2.\nTo grant digital camera access to a user, the user must\nbe part of the camera group:\n<code>users.users.alice.extraGroups = [\"camera\"];</code>\n","loc":["programs","gphoto2","enable"],"readOnly":false,"type":"boolean"},"programs.iftop.enable":{"declarations":["nixos/modules/programs/iftop.nix"],"default":false,"description":"Whether to enable iftop + setcap wrapper.","example":true,"loc":["programs","iftop","enable"],"readOnly":false,"type":"boolean"},"programs.java.enable":{"declarations":["nixos/modules/programs/java.nix"],"default":false,"description":"Install and setup the Java development kit.\n<note>\n<para>This adds JAVA_HOME to the global environment, by sourcing the\n  jdk's setup-hook on shell init. It is equivalent to starting a shell\n  through 'nix-shell -p jdk', or roughly the following system-wide\n  configuration:\n</para>\n<programlisting>\n  environment.variables.JAVA_HOME = ${pkgs.jdk.home}/lib/openjdk;\n  environment.systemPackages = [ pkgs.jdk ];\n</programlisting>\n</note>\n","example":true,"loc":["programs","java","enable"],"readOnly":false,"type":"boolean"},"programs.java.package":{"declarations":["nixos/modules/programs/java.nix"],"default":"pkgs.jdk","description":"Java package to install. Typical values are pkgs.jdk or pkgs.jre.\n","loc":["programs","java","package"],"readOnly":false,"type":"package"},"programs.kbdlight.enable":{"declarations":["nixos/modules/programs/kbdlight.nix"],"default":false,"description":"Whether to enable kbdlight.","example":true,"loc":["programs","kbdlight","enable"],"readOnly":false,"type":"boolean"},"programs.less.clearDefaultCommands":{"declarations":["nixos/modules/programs/less.nix"],"default":false,"description":"Clear all default commands.\nYou should remember to set the quit key.\nOtherwise you will not be able to leave less without killing it.\n","loc":["programs","less","clearDefaultCommands"],"readOnly":false,"type":"boolean"},"programs.less.commands":{"declarations":["nixos/modules/programs/less.nix"],"default":{},"description":"Defines new command keys.","example":{"h":"noaction 5e(","l":"noaction 5e)"},"loc":["programs","less","commands"],"readOnly":false,"type":"attribute set of strings"},"programs.less.configFile":{"declarations":["nixos/modules/programs/less.nix"],"default":null,"description":"Path to lesskey configuration file.\n\n<option>configFile</option> takes precedence over <option>commands</option>,\n<option>clearDefaultCommands</option>, <option>lineEditingKeys</option>, and\n<option>envVariables</option>.\n","example":{"_type":"literalExample","text":"$${pkgs.my-configs}/lesskey"},"loc":["programs","less","configFile"],"readOnly":false,"type":"null or path"},"programs.less.enable":{"declarations":["nixos/modules/programs/less.nix"],"default":false,"description":"Whether to enable less.","example":true,"loc":["programs","less","enable"],"readOnly":false,"type":"boolean"},"programs.less.envVariables":{"declarations":["nixos/modules/programs/less.nix"],"default":{},"description":"Defines environment variables.","example":{"LESS":"--quit-if-one-screen"},"loc":["programs","less","envVariables"],"readOnly":false,"type":"attribute set of strings"},"programs.less.lessclose":{"declarations":["nixos/modules/programs/less.nix"],"default":null,"description":"When less closes a file opened in such a way, it will call another program, called the input postprocessor, which may  perform  any  desired  clean-up  action (such  as deleting the replacement file created by LESSOPEN).\n","loc":["programs","less","lessclose"],"readOnly":false,"type":"null or string"},"programs.less.lessopen":{"declarations":["nixos/modules/programs/less.nix"],"default":"|${pkgs.lesspipe}/bin/lesspipe.sh %s","description":"Before less opens a file, it first gives your input preprocessor a chance to modify the way the contents of the file are displayed.\n","loc":["programs","less","lessopen"],"readOnly":false,"type":"null or string"},"programs.less.lineEditingKeys":{"declarations":["nixos/modules/programs/less.nix"],"default":{},"description":"Defines new line-editing keys.","example":{"e":"abort"},"loc":["programs","less","lineEditingKeys"],"readOnly":false,"type":"attribute set of strings"},"programs.light.enable":{"declarations":["nixos/modules/programs/light.nix"],"default":false,"description":"Whether to install Light backlight control command\nand udev rules granting access to members of the \"video\" group.\n","loc":["programs","light","enable"],"readOnly":false,"type":"boolean"},"programs.mosh.enable":{"declarations":["nixos/modules/programs/mosh.nix"],"default":false,"description":"Whether to enable mosh. Note, this will open ports in your firewall!\n","loc":["programs","mosh","enable"],"readOnly":false,"type":"boolean"},"programs.mosh.withUtempter":{"declarations":["nixos/modules/programs/mosh.nix"],"default":true,"description":"Whether to enable libutempter for mosh.\nThis is required so that mosh can write to /var/run/utmp (which can be queried with `who` to display currently connected user sessions).\nNote, this will add a guid wrapper for the group utmp!\n","loc":["programs","mosh","withUtempter"],"readOnly":false,"type":"boolean"},"programs.mtr.enable":{"declarations":["nixos/modules/programs/mtr.nix"],"default":false,"description":"Whether to add mtr to the global environment and configure a\nsetcap wrapper for it.\n","loc":["programs","mtr","enable"],"readOnly":false,"type":"boolean"},"programs.nano.nanorc":{"declarations":["nixos/modules/programs/nano.nix"],"default":"","description":"The system-wide nano configuration.\nSee <citerefentry><refentrytitle>nanorc</refentrytitle><manvolnum>5</manvolnum></citerefentry>.\n","example":"set nowrap\nset tabstospaces\nset tabsize 2\n","loc":["programs","nano","nanorc"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.nano.syntaxHighlight":{"declarations":["nixos/modules/programs/nano.nix"],"default":true,"description":"Whether to enable syntax highlight for various languages.","loc":["programs","nano","syntaxHighlight"],"readOnly":false,"type":"boolean"},"programs.npm.enable":{"declarations":["nixos/modules/programs/npm.nix"],"default":false,"description":"Whether to enable <command>npm</command> global config.","example":true,"loc":["programs","npm","enable"],"readOnly":false,"type":"boolean"},"programs.npm.npmrc":{"declarations":["nixos/modules/programs/npm.nix"],"default":"prefix = ${HOME}/.npm\n","description":"The system-wide npm configuration.\nSee <link xlink:href=\"https://docs.npmjs.com/misc/config\"/>.\n","example":"prefix = ${HOME}/.npm\nhttps-proxy=proxy.example.com\ninit-license=MIT\ninit-author-url=http://npmjs.org\ncolor=true\n","loc":["programs","npm","npmrc"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.oblogout.bgcolor":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"black","description":"Colour name or hex code (#ffffff) of the background color.\n","loc":["programs","oblogout","bgcolor"],"readOnly":false,"type":"string"},"programs.oblogout.buttons":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"cancel, logout, restart, shutdown, suspend, hibernate","description":"List and order of buttons to show.\n","loc":["programs","oblogout","buttons"],"readOnly":false,"type":"string"},"programs.oblogout.buttontheme":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"simplistic","description":"Icon theme for the buttons, must be in the themes folder of\nthe package, or in\n<filename>~/.themes/&lt;name&gt;/oblogout/</filename>.\n","loc":["programs","oblogout","buttontheme"],"readOnly":false,"type":"string"},"programs.oblogout.cancel":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"Escape","description":"Cancel logout/shutdown shortcut.\n","loc":["programs","oblogout","cancel"],"readOnly":false,"type":"string"},"programs.oblogout.clock":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"","description":"Command to lock screen.\n","loc":["programs","oblogout","clock"],"readOnly":false,"type":"string"},"programs.oblogout.clogout":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"openbox --exit","description":"Command to logout.\n","loc":["programs","oblogout","clogout"],"readOnly":false,"type":"string"},"programs.oblogout.cswitchuser":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"","description":"Command to switch user.\n","loc":["programs","oblogout","cswitchuser"],"readOnly":false,"type":"string"},"programs.oblogout.enable":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":false,"description":"Whether to install OBLogout and create <filename>/etc/oblogout.conf</filename>.\nSee <filename>${pkgs.oblogout}/share/doc/README</filename>.\n","loc":["programs","oblogout","enable"],"readOnly":false,"type":"boolean"},"programs.oblogout.hibernate":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"H","description":"Hibernate shortcut.\n","loc":["programs","oblogout","hibernate"],"readOnly":false,"type":"string"},"programs.oblogout.lock":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"K","description":"Lock session shortcut.\n","loc":["programs","oblogout","lock"],"readOnly":false,"type":"string"},"programs.oblogout.logout":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"L","description":"Logout shortcut.\n","loc":["programs","oblogout","logout"],"readOnly":false,"type":"string"},"programs.oblogout.opacity":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":70,"description":"Opacity percentage of Cairo rendered backgrounds.\n","loc":["programs","oblogout","opacity"],"readOnly":false,"type":"signed integer"},"programs.oblogout.restart":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"R","description":"Restart shortcut.\n","loc":["programs","oblogout","restart"],"readOnly":false,"type":"string"},"programs.oblogout.shutdown":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"S","description":"Shutdown shortcut.\n","loc":["programs","oblogout","shutdown"],"readOnly":false,"type":"string"},"programs.oblogout.suspend":{"declarations":["nixos/modules/programs/oblogout.nix"],"default":"U","description":"Suspend shortcut.\n","loc":["programs","oblogout","suspend"],"readOnly":false,"type":"string"},"programs.plotinus.enable":{"declarations":["nixos/modules/programs/plotinus.nix"],"default":false,"description":"Whether to enable the Plotinus GTK+3 plugin.  Plotinus provides a\npopup (triggered by Ctrl-Shift-P) to search the menus of a\ncompatible application.\n","loc":["programs","plotinus","enable"],"readOnly":false,"type":"boolean"},"programs.qt5ct.enable":{"declarations":["nixos/modules/programs/qt5ct.nix"],"default":false,"description":"Whether to enable the Qt5 Configuration Tool (qt5ct), a\nprogram that allows users to configure Qt5 settings (theme,\nfont, icons, etc.) under desktop environments or window\nmanager without Qt integration.\n\nOfficial home page: <link xlink:href=\"https://sourceforge.net/projects/qt5ct/\">https://sourceforge.net/projects/qt5ct/</link>\n","loc":["programs","qt5ct","enable"],"readOnly":false,"type":"boolean"},"programs.rootston.config":{"declarations":["nixos/modules/programs/rootston.nix"],"default":"[keyboard]\nmeta-key = Logo\n\n# Sway/i3 like Keybindings\n# Maps key combinations with commands to execute\n# Commands include:\n# - \"exit\" to stop the compositor\n# - \"exec\" to execute a shell command\n# - \"close\" to close the current view\n# - \"next_window\" to cycle through windows\n[bindings]\nLogo+Shift+e = exit\nLogo+q = close\nLogo+m = maximize\nAlt+Tab = next_window\nLogo+Return = exec weston-terminal\nLogo+d = exec rofi -show run\n","description":"Default configuration for rootston (used when called without any\nparameters).\n","loc":["programs","rootston","config"],"readOnly":false,"type":"string"},"programs.rootston.configFile":{"declarations":["nixos/modules/programs/rootston.nix"],"default":"/etc/rootston.ini","description":"Path to the default rootston configuration file (the \"config\" option\nwill have no effect if you change the path).\n","example":{"_type":"literalExample","text":"${pkgs.rootston}/etc/rootston.ini"},"loc":["programs","rootston","configFile"],"readOnly":false,"type":"path"},"programs.rootston.enable":{"declarations":["nixos/modules/programs/rootston.nix"],"default":false,"description":"Whether to enable rootston, the reference compositor for wlroots. The purpose of rootston\nis to test and demonstrate the features of wlroots (if you want a real\nWayland compositor you should e.g. use Sway instead). You can manually\nstart the compositor by running \"rootston\" from a terminal.","example":true,"loc":["programs","rootston","enable"],"readOnly":false,"type":"boolean"},"programs.rootston.extraPackages":{"declarations":["nixos/modules/programs/rootston.nix"],"default":{"_type":"literalExample","text":"with pkgs; [\n  westonLite xwayland rofi\n]\n"},"description":"Extra packages to be installed system wide.\n","example":{"_type":"literalExample","text":"[ ]"},"loc":["programs","rootston","extraPackages"],"readOnly":false,"type":"list of packages"},"programs.rootston.extraSessionCommands":{"declarations":["nixos/modules/programs/rootston.nix"],"default":"","description":"Shell commands executed just before rootston is started.\n","example":"# Define a keymap (US QWERTY is the default)\nexport XKB_DEFAULT_LAYOUT=de,us\nexport XKB_DEFAULT_VARIANT=nodeadkeys\nexport XKB_DEFAULT_OPTIONS=grp:alt_shift_toggle,caps:escape\n","loc":["programs","rootston","extraSessionCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.screen.screenrc":{"declarations":["nixos/modules/programs/screen.nix"],"default":"","description":"The contents of /etc/screenrc file.\n","loc":["programs","screen","screenrc"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.sedutil.enable":{"declarations":["nixos/modules/programs/sedutil.nix"],"default":false,"description":"Whether to enable sedutil.","example":true,"loc":["programs","sedutil","enable"],"readOnly":false,"type":"boolean"},"programs.singularity.enable":{"declarations":["nixos/modules/programs/singularity.nix"],"default":false,"description":"Whether to enable Singularity.","example":true,"loc":["programs","singularity","enable"],"readOnly":false,"type":"boolean"},"programs.slock.enable":{"declarations":["nixos/modules/programs/slock.nix"],"default":false,"description":"Whether to install slock screen locker with setuid wrapper.\n","loc":["programs","slock","enable"],"readOnly":false,"type":"boolean"},"programs.spacefm.enable":{"declarations":["nixos/modules/programs/spacefm.nix"],"default":false,"description":"Whether to install SpaceFM and create <filename>/etc/spacefm/spacefm.conf</filename>.\n","loc":["programs","spacefm","enable"],"readOnly":false,"type":"boolean"},"programs.spacefm.settings":{"declarations":["nixos/modules/programs/spacefm.nix"],"default":{"graphical_su":"${pkgs.gksu}/bin/gksu","terminal_su":"${pkgs.sudo}/bin/sudo","tmp_dir":"/tmp"},"description":"The system-wide spacefm configuration.\nParameters to be written to <filename>/etc/spacefm/spacefm.conf</filename>.\nRefer to the <link xlink:href=\"https://ignorantguru.github.io/spacefm/spacefm-manual-en.html#programfiles-etc\">relevant entry</link> in the SpaceFM manual.\n","example":{"_type":"literalExample","text":"{\n          tmp_dir = \"/tmp\";\n          terminal_su = \"${pkgs.sudo}/bin/sudo\";\n          graphical_su = \"${pkgs.gksu}/bin/gksu\";\n        }"},"loc":["programs","spacefm","settings"],"readOnly":false,"type":"attribute set"},"programs.ssh.agentTimeout":{"declarations":["nixos/modules/programs/ssh.nix"],"default":null,"description":"How long to keep the private keys in memory. Use null to keep them forever.\n","example":"1h","loc":["programs","ssh","agentTimeout"],"readOnly":false,"type":"null or string"},"programs.ssh.askPassword":{"declarations":["nixos/modules/programs/ssh.nix"],"default":"${pkgs.x11_ssh_askpass}/libexec/x11-ssh-askpass","description":"Program used by SSH to ask for passwords.","loc":["programs","ssh","askPassword"],"readOnly":false,"type":"string"},"programs.ssh.extraConfig":{"declarations":["nixos/modules/programs/ssh.nix"],"default":"","description":"Extra configuration text appended to <filename>ssh_config</filename>.\nSee <citerefentry><refentrytitle>ssh_config</refentrytitle><manvolnum>5</manvolnum></citerefentry>\nfor help.\n","loc":["programs","ssh","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.ssh.forwardX11":{"declarations":["nixos/modules/programs/ssh.nix"],"default":false,"description":"Whether to request X11 forwarding on outgoing connections by default.\nThis is useful for running graphical programs on the remote machine and have them display to your local X11 server.\nHistorically, this value has depended on the value used by the local sshd daemon, but there really isn't a relation between the two.\nNote: there are some security risks to forwarding an X11 connection.\nNixOS's X server is built with the SECURITY extension, which prevents some obvious attacks.\nTo enable or disable forwarding on a per-connection basis, see the -X and -x options to ssh.\nThe -Y option to ssh enables trusted forwarding, which bypasses the SECURITY extension.\n","loc":["programs","ssh","forwardX11"],"readOnly":false,"type":"boolean"},"programs.ssh.hostKeyAlgorithms":{"declarations":["nixos/modules/programs/ssh.nix"],"default":["+ssh-dss"],"description":"Specifies the host key algorithms that the client wants to use in order of preference.\n","example":["ssh-ed25519","ssh-rsa"],"loc":["programs","ssh","hostKeyAlgorithms"],"readOnly":false,"type":"list of strings"},"programs.ssh.knownHosts":{"declarations":["nixos/modules/programs/ssh.nix"],"default":{},"description":"The set of system-wide known SSH hosts.\n","example":{"_type":"literalExample","text":"[\n  {\n    hostNames = [ \"myhost\" \"myhost.mydomain.com\" \"10.10.1.4\" ];\n    publicKeyFile = ./pubkeys/myhost_ssh_host_dsa_key.pub;\n  }\n  {\n    hostNames = [ \"myhost2\" ];\n    publicKeyFile = ./pubkeys/myhost2_ssh_host_dsa_key.pub;\n  }\n]\n"},"loc":["programs","ssh","knownHosts"],"readOnly":false,"type":"list or attribute set of submodules"},"programs.ssh.knownHosts.<name?>.hostNames":{"declarations":["nixos/modules/programs/ssh.nix"],"default":[],"description":"A list of host names and/or IP numbers used for accessing\nthe host's ssh service.\n","loc":["programs","ssh","knownHosts","<name?>","hostNames"],"readOnly":false,"type":"list of strings"},"programs.ssh.knownHosts.<name?>.publicKey":{"declarations":["nixos/modules/programs/ssh.nix"],"default":null,"description":"The public key data for the host. You can fetch a public key\nfrom a running SSH server with the <command>ssh-keyscan</command>\ncommand. The public key should not include any host names, only\nthe key type and the key itself.\n","example":"ecdsa-sha2-nistp521 AAAAE2VjZHN...UEPg==","loc":["programs","ssh","knownHosts","<name?>","publicKey"],"readOnly":false,"type":"null or string"},"programs.ssh.knownHosts.<name?>.publicKeyFile":{"declarations":["nixos/modules/programs/ssh.nix"],"default":null,"description":"The path to the public key file for the host. The public\nkey file is read at build time and saved in the Nix store.\nYou can fetch a public key file from a running SSH server\nwith the <command>ssh-keyscan</command> command. The content\nof the file should follow the same format as described for\nthe <literal>publicKey</literal> option.\n","loc":["programs","ssh","knownHosts","<name?>","publicKeyFile"],"readOnly":false,"type":"null or path"},"programs.ssh.package":{"declarations":["nixos/modules/programs/ssh.nix"],"default":"pkgs.openssh","description":"The package used for the openssh client and daemon.\n","loc":["programs","ssh","package"],"readOnly":false,"type":"package"},"programs.ssh.pubkeyAcceptedKeyTypes":{"declarations":["nixos/modules/programs/ssh.nix"],"default":["+ssh-dss"],"description":"Specifies the key types that will be used for public key authentication.\n","example":["ssh-ed25519","ssh-rsa"],"loc":["programs","ssh","pubkeyAcceptedKeyTypes"],"readOnly":false,"type":"list of strings"},"programs.ssh.setXAuthLocation":{"declarations":["nixos/modules/programs/ssh.nix"],"description":"Whether to set the path to <command>xauth</command> for X11-forwarded connections.\nThis causes a dependency on X11 packages.\n","loc":["programs","ssh","setXAuthLocation"],"readOnly":false,"type":"boolean"},"programs.ssh.startAgent":{"declarations":["nixos/modules/programs/ssh.nix"],"default":false,"description":"Whether to start the OpenSSH agent when you log in.  The OpenSSH agent\nremembers private keys for you so that you don't have to type in\npassphrases every time you make an SSH connection.  Use\n<command>ssh-add</command> to add a key to the agent.\n","loc":["programs","ssh","startAgent"],"readOnly":false,"type":"boolean"},"programs.sway.enable":{"declarations":["nixos/modules/programs/sway.nix"],"default":false,"description":"Whether to enable the tiling Wayland compositor Sway. After adding yourself to the \"sway\"\ngroup you can manually launch Sway by executing \"sway\" from a terminal.\nIf you call \"sway\" with any parameters the extraSessionCommands won't be\nexecuted and Sway won't be launched with dbus-launch.","example":true,"loc":["programs","sway","enable"],"readOnly":false,"type":"boolean"},"programs.sway.extraPackages":{"declarations":["nixos/modules/programs/sway.nix"],"default":{"_type":"literalExample","text":"with pkgs; [ i3status xwayland rxvt_unicode dmenu ];\n"},"description":"Extra packages to be installed system wide.\n","example":{"_type":"literalExample","text":"with pkgs; [\n  i3lock light termite\n]\n"},"loc":["programs","sway","extraPackages"],"readOnly":false,"type":"list of packages"},"programs.sway.extraSessionCommands":{"declarations":["nixos/modules/programs/sway.nix"],"default":"","description":"Shell commands executed just before Sway is started.\n","example":"# Define a keymap (US QWERTY is the default)\nexport XKB_DEFAULT_LAYOUT=de,us\nexport XKB_DEFAULT_VARIANT=nodeadkeys\nexport XKB_DEFAULT_OPTIONS=grp:alt_shift_toggle,caps:escape\n# Change the Keyboard repeat delay and rate\nexport WLC_REPEAT_DELAY=660\nexport WLC_REPEAT_RATE=25\n","loc":["programs","sway","extraSessionCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.sysdig.enable":{"declarations":["nixos/modules/programs/sysdig.nix"],"default":false,"description":"Whether to enable sysdig.","example":true,"loc":["programs","sysdig","enable"],"readOnly":false,"type":"boolean"},"programs.systemtap.enable":{"declarations":["nixos/modules/programs/systemtap.nix"],"default":false,"description":"Install <command>systemtap</command> along with necessary kernel options.\n","loc":["programs","systemtap","enable"],"readOnly":false,"type":"unspecified"},"programs.thefuck.alias":{"declarations":["nixos/modules/programs/thefuck.nix"],"default":"fuck","description":"`thefuck` needs an alias to be configured.\nThe default value is `fuck`, but you can use anything else as well.\n","loc":["programs","thefuck","alias"],"readOnly":false,"type":"Concatenated string"},"programs.thefuck.enable":{"declarations":["nixos/modules/programs/thefuck.nix"],"default":false,"description":"Whether to enable thefuck.","example":true,"loc":["programs","thefuck","enable"],"readOnly":false,"type":"boolean"},"programs.tmux.aggressiveResize":{"declarations":["nixos/modules/programs/tmux.nix"],"default":false,"description":"Resize the window to the size of the smallest session for which it is the current window.\n","loc":["programs","tmux","aggressiveResize"],"readOnly":false,"type":"boolean"},"programs.tmux.baseIndex":{"declarations":["nixos/modules/programs/tmux.nix"],"default":0,"description":"Base index for windows and panes.","example":1,"loc":["programs","tmux","baseIndex"],"readOnly":false,"type":"signed integer"},"programs.tmux.clock24":{"declarations":["nixos/modules/programs/tmux.nix"],"default":false,"description":"Use 24 hour clock.","loc":["programs","tmux","clock24"],"readOnly":false,"type":"boolean"},"programs.tmux.customPaneNavigationAndResize":{"declarations":["nixos/modules/programs/tmux.nix"],"default":false,"description":"Override the hjkl and HJKL bindings for pane navigation and resizing in VI mode.","loc":["programs","tmux","customPaneNavigationAndResize"],"readOnly":false,"type":"boolean"},"programs.tmux.enable":{"declarations":["nixos/modules/programs/tmux.nix"],"default":false,"description":"Whenever to configure <command>tmux</command> system-wide.","loc":["programs","tmux","enable"],"readOnly":false,"relatedPackages":"<itemizedlist><listitem><para><literal>pkgs.tmux (tmux-2.7)</literal>: Terminal multiplexer.</para>\n<programlisting>tmux is intended to be a modern, BSD-licensed alternative to programs such as GNU screen. Major features include:\n\n         * A powerful, consistent, well-documented and easily scriptable command interface.\n         * A window may be split horizontally and vertically into panes.\n         * Panes can be freely moved and resized, or arranged into preset layouts.\n         * Support for UTF-8 and 256-colour terminals.\n         * Copy and paste with multiple buffers.\n         * Interactive menus to select windows, sessions or clients.\n         * Change the current window by searching for text in the target.\n         * Terminal locking, manually or after a timeout.\n         * A clean, easily extended, BSD-licensed codebase, under active development.\n</programlisting></listitem></itemizedlist>","type":"boolean"},"programs.tmux.escapeTime":{"declarations":["nixos/modules/programs/tmux.nix"],"default":500,"description":"Time in milliseconds for which tmux waits after an escape is input.","example":0,"loc":["programs","tmux","escapeTime"],"readOnly":false,"type":"signed integer"},"programs.tmux.extraTmuxConf":{"declarations":["nixos/modules/programs/tmux.nix"],"default":"","description":"Additional contents of /etc/tmux.conf\n","loc":["programs","tmux","extraTmuxConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.tmux.historyLimit":{"declarations":["nixos/modules/programs/tmux.nix"],"default":2000,"description":"Maximum number of lines held in window history.","example":5000,"loc":["programs","tmux","historyLimit"],"readOnly":false,"type":"signed integer"},"programs.tmux.keyMode":{"declarations":["nixos/modules/programs/tmux.nix"],"default":"emacs","description":"VI or Emacs style shortcuts.","example":"vi","loc":["programs","tmux","keyMode"],"readOnly":false,"type":"one of \"emacs\", \"vi\""},"programs.tmux.newSession":{"declarations":["nixos/modules/programs/tmux.nix"],"default":false,"description":"Automatically spawn a session if trying to attach and none are running.","loc":["programs","tmux","newSession"],"readOnly":false,"type":"boolean"},"programs.tmux.resizeAmount":{"declarations":["nixos/modules/programs/tmux.nix"],"default":5,"description":"Number of lines/columns when resizing.","example":10,"loc":["programs","tmux","resizeAmount"],"readOnly":false,"type":"signed integer"},"programs.tmux.reverseSplit":{"declarations":["nixos/modules/programs/tmux.nix"],"default":false,"description":"Reverse the window split shortcuts.","loc":["programs","tmux","reverseSplit"],"readOnly":false,"type":"boolean"},"programs.tmux.secureSocket":{"declarations":["nixos/modules/programs/tmux.nix"],"default":true,"description":"Store tmux socket under /run, which is more secure than /tmp, but as a\ndownside it doesn't survive user logout.\n","loc":["programs","tmux","secureSocket"],"readOnly":false,"type":"boolean"},"programs.tmux.shortcut":{"declarations":["nixos/modules/programs/tmux.nix"],"default":"b","description":"Ctrl following by this key is used as the main shortcut.","example":"a","loc":["programs","tmux","shortcut"],"readOnly":false,"type":"string"},"programs.tmux.terminal":{"declarations":["nixos/modules/programs/tmux.nix"],"default":"screen","description":"Set the $TERM variable.","example":"screen-256color","loc":["programs","tmux","terminal"],"readOnly":false,"type":"string"},"programs.udevil.enable":{"declarations":["nixos/modules/programs/udevil.nix"],"default":false,"description":"Whether to enable udevil.","example":true,"loc":["programs","udevil","enable"],"readOnly":false,"type":"boolean"},"programs.vim.defaultEditor":{"declarations":["nixos/modules/programs/vim.nix"],"default":false,"description":"When enabled, installs vim and configures vim to be the default editor\nusing the EDITOR environment variable.\n","loc":["programs","vim","defaultEditor"],"readOnly":false,"type":"boolean"},"programs.way-cooler.enable":{"declarations":["nixos/modules/programs/way-cooler.nix"],"default":false,"description":"Whether to enable way-cooler.","example":true,"loc":["programs","way-cooler","enable"],"readOnly":false,"type":"boolean"},"programs.way-cooler.enableBar":{"declarations":["nixos/modules/programs/way-cooler.nix"],"default":true,"description":"Whether to enable an unofficial bar.\n","loc":["programs","way-cooler","enableBar"],"readOnly":false,"type":"boolean"},"programs.way-cooler.extraPackages":{"declarations":["nixos/modules/programs/way-cooler.nix"],"default":["weston-5.0.0","xwayland-1.19.6","dmenu-4.8"],"description":"Extra packages to be installed system wide.\n","example":{"_type":"literalExample","text":"with pkgs; [\n  westonLite xwayland dmenu\n]\n"},"loc":["programs","way-cooler","extraPackages"],"readOnly":false,"type":"list of packages"},"programs.way-cooler.extraSessionCommands":{"declarations":["nixos/modules/programs/way-cooler.nix"],"default":"","description":"Shell commands executed just before way-cooler is started.\n","example":"export XKB_DEFAULT_LAYOUT=us,de\nexport XKB_DEFAULT_VARIANT=,nodeadkeys\nexport XKB_DEFAULT_OPTIONS=grp:caps_toggle,\n","loc":["programs","way-cooler","extraSessionCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.wireshark.enable":{"declarations":["nixos/modules/programs/wireshark.nix"],"default":false,"description":"Whether to add Wireshark to the global environment and configure a\nsetcap wrapper for 'dumpcap' for users in the 'wireshark' group.\n","loc":["programs","wireshark","enable"],"readOnly":false,"type":"boolean"},"programs.wireshark.package":{"declarations":["nixos/modules/programs/wireshark.nix"],"default":"pkgs.wireshark-cli","description":"Which Wireshark package to install in the global environment.\n","loc":["programs","wireshark","package"],"readOnly":false,"type":"package"},"programs.xfs_quota.projects":{"declarations":["nixos/modules/programs/xfs_quota.nix"],"default":{},"description":"Setup of xfs_quota projects. Make sure the filesystem is mounted with the pquota option.","example":{"projname":{"id":50,"path":"/xfsprojects/projname","sizeHardLimit":"50g"}},"loc":["programs","xfs_quota","projects"],"readOnly":false,"type":"attribute set of submodules"},"programs.xfs_quota.projects.<name>.fileSystem":{"declarations":["nixos/modules/programs/xfs_quota.nix"],"default":"/","description":"XFS filesystem hosting the xfs_quota project.","loc":["programs","xfs_quota","projects","<name>","fileSystem"],"readOnly":false,"type":"string"},"programs.xfs_quota.projects.<name>.id":{"declarations":["nixos/modules/programs/xfs_quota.nix"],"description":"Project ID.","loc":["programs","xfs_quota","projects","<name>","id"],"readOnly":false,"type":"signed integer"},"programs.xfs_quota.projects.<name>.path":{"declarations":["nixos/modules/programs/xfs_quota.nix"],"description":"Project directory.","loc":["programs","xfs_quota","projects","<name>","path"],"readOnly":false,"type":"string"},"programs.xfs_quota.projects.<name>.sizeHardLimit":{"declarations":["nixos/modules/programs/xfs_quota.nix"],"default":null,"description":"Hard limit of the project size.","example":"50g","loc":["programs","xfs_quota","projects","<name>","sizeHardLimit"],"readOnly":false,"type":"null or string"},"programs.xfs_quota.projects.<name>.sizeSoftLimit":{"declarations":["nixos/modules/programs/xfs_quota.nix"],"default":null,"description":"Soft limit of the project size","example":"30g","loc":["programs","xfs_quota","projects","<name>","sizeSoftLimit"],"readOnly":false,"type":"null or string"},"programs.xonsh.config":{"declarations":["nixos/modules/programs/xonsh.nix"],"default":"","description":"Control file to customize your shell behavior.","loc":["programs","xonsh","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.xonsh.enable":{"declarations":["nixos/modules/programs/xonsh.nix"],"default":false,"description":"Whether to configure xonsh as an interactive shell.\n","loc":["programs","xonsh","enable"],"readOnly":false,"type":"boolean"},"programs.xonsh.package":{"declarations":["nixos/modules/programs/xonsh.nix"],"description":"xonsh package to use.\n","example":{"_type":"literalExample","text":"pkgs.xonsh.override { configFile = \"/path/to/xonshrc\"; }"},"loc":["programs","xonsh","package"],"readOnly":false,"type":"package"},"programs.xss-lock.enable":{"declarations":["nixos/modules/programs/xss-lock.nix"],"default":false,"description":"Whether to enable xss-lock.","example":true,"loc":["programs","xss-lock","enable"],"readOnly":false,"type":"boolean"},"programs.xss-lock.lockerCommand":{"declarations":["nixos/modules/programs/xss-lock.nix"],"description":"Locker to be used with xsslock","example":"xlock","loc":["programs","xss-lock","lockerCommand"],"readOnly":false,"type":"Concatenated string"},"programs.yabar.bars":{"declarations":["nixos/modules/programs/yabar.nix"],"default":{},"description":"List of bars that should be rendered by yabar.\n","loc":["programs","yabar","bars"],"readOnly":false,"type":"attribute set of submodules"},"programs.yabar.bars.<name>.extra":{"declarations":["nixos/modules/programs/yabar.nix"],"default":{},"description":"An attribute set which contains further attributes of a bar.\n","loc":["programs","yabar","bars","<name>","extra"],"readOnly":false,"type":"attribute set of Concatenated strings"},"programs.yabar.bars.<name>.font":{"declarations":["nixos/modules/programs/yabar.nix"],"default":"sans bold 9","description":"The font that will be used to draw the status bar.\n","example":"Droid Sans, FontAwesome Bold 9","loc":["programs","yabar","bars","<name>","font"],"readOnly":false,"type":"Concatenated string"},"programs.yabar.bars.<name>.indicators":{"declarations":["nixos/modules/programs/yabar.nix"],"default":{},"description":"Indicators that should be rendered by yabar.\n","loc":["programs","yabar","bars","<name>","indicators"],"readOnly":false,"type":"attribute set of submodules"},"programs.yabar.bars.<name>.indicators.<name>.align":{"declarations":["nixos/modules/programs/yabar.nix"],"default":"left","description":"Whether to align the indicator at the left or right of the bar.\n","example":"right","loc":["programs","yabar","bars","<name>","indicators","<name>","align"],"readOnly":false,"type":"one of \"left\", \"center\", \"right\""},"programs.yabar.bars.<name>.indicators.<name>.exec":{"declarations":["nixos/modules/programs/yabar.nix"],"description":"The type of the indicator to be executed.\n","example":"YABAR_DATE","loc":["programs","yabar","bars","<name>","indicators","<name>","exec"],"readOnly":false,"type":"Concatenated string"},"programs.yabar.bars.<name>.indicators.<name>.extra":{"declarations":["nixos/modules/programs/yabar.nix"],"default":{},"description":"An attribute set which contains further attributes of a indicator.\n","loc":["programs","yabar","bars","<name>","indicators","<name>","extra"],"readOnly":false,"type":"attribute set of Concatenated string or signed integers"},"programs.yabar.bars.<name>.position":{"declarations":["nixos/modules/programs/yabar.nix"],"default":"top","description":"The position where the bar will be rendered.\n","example":"bottom","loc":["programs","yabar","bars","<name>","position"],"readOnly":false,"type":"one of \"top\", \"bottom\""},"programs.yabar.enable":{"declarations":["nixos/modules/programs/yabar.nix"],"default":false,"description":"Whether to enable yabar.","example":true,"loc":["programs","yabar","enable"],"readOnly":false,"type":"boolean"},"programs.yabar.package":{"declarations":["nixos/modules/programs/yabar.nix"],"default":"yabar-unstable-2018-01-18","description":"The package which contains the `yabar` binary.\n\nNixpkgs provides the `yabar` and `yabar-unstable`\nderivations since 18.03, so it's possible to choose.\n","example":{"_type":"literalExample","text":"pkgs.yabar"},"loc":["programs","yabar","package"],"readOnly":false,"type":"package"},"programs.zsh.autosuggestions.enable":{"declarations":["nixos/modules/programs/zsh/zsh-autosuggestions.nix"],"default":false,"description":"Whether to enable zsh-autosuggestions.","example":true,"loc":["programs","zsh","autosuggestions","enable"],"readOnly":false,"type":"boolean"},"programs.zsh.autosuggestions.extraConfig":{"declarations":["nixos/modules/programs/zsh/zsh-autosuggestions.nix"],"default":{},"description":"Attribute set with additional configuration values","example":{"_type":"literalExample","text":"{\n  \"ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE\" = \"20\";\n}\n"},"loc":["programs","zsh","autosuggestions","extraConfig"],"readOnly":false,"type":"attribute set of strings"},"programs.zsh.autosuggestions.highlightStyle":{"declarations":["nixos/modules/programs/zsh/zsh-autosuggestions.nix"],"default":"fg=8","description":"Highlight style for suggestions ({fore,back}ground color)","example":"fg=cyan","loc":["programs","zsh","autosuggestions","highlightStyle"],"readOnly":false,"type":"string"},"programs.zsh.autosuggestions.strategy":{"declarations":["nixos/modules/programs/zsh/zsh-autosuggestions.nix"],"default":"default","description":"Set ZSH_AUTOSUGGEST_STRATEGY to choose the strategy for generating suggestions.\nThere are currently two to choose from:\n\n  * default: Chooses the most recent match.\n  * match_prev_cmd: Chooses the most recent match whose preceding history item matches\n    the most recently executed command (more info). Note that this strategy won't work as\n    expected with ZSH options that don't preserve the history order such as\n    HIST_IGNORE_ALL_DUPS or HIST_EXPIRE_DUPS_FIRST.\n","loc":["programs","zsh","autosuggestions","strategy"],"readOnly":false,"type":"one of \"default\", \"match_prev_cmd\""},"programs.zsh.enable":{"declarations":["nixos/modules/programs/zsh/zsh.nix"],"default":false,"description":"Whether to configure zsh as an interactive shell. To enable zsh for\na particular user, use the <option>users.users.&lt;name?&gt;.shell</option>\noption for that user. To enable zsh system-wide use the\n<option>users.defaultUserShell</option> option.\n","loc":["programs","zsh","enable"],"readOnly":false,"type":"boolean"},"programs.zsh.enableCompletion":{"declarations":["nixos/modules/programs/zsh/zsh.nix"],"default":true,"description":"Enable zsh completion for all interactive zsh shells.\n","loc":["programs","zsh","enableCompletion"],"readOnly":false,"type":"boolean"},"programs.zsh.enableGlobalCompInit":{"declarations":["nixos/modules/programs/zsh/zsh.nix"],"default":true,"description":"Enable execution of compinit call for all interactive zsh shells.\n\nThis option can be disabled if the user wants to extend its\n<literal>fpath</literal> and a custom <literal>compinit</literal>\ncall in the local config is required.\n","loc":["programs","zsh","enableGlobalCompInit"],"readOnly":false,"type":"boolean"},"programs.zsh.interactiveShellInit":{"declarations":["nixos/modules/programs/zsh/zsh.nix"],"default":"","description":"Shell script code called during interactive zsh shell initialisation.\n","loc":["programs","zsh","interactiveShellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.zsh.loginShellInit":{"declarations":["nixos/modules/programs/zsh/zsh.nix"],"default":"","description":"Shell script code called during zsh login shell initialisation.\n","loc":["programs","zsh","loginShellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.zsh.ohMyZsh.cacheDir":{"declarations":["nixos/modules/programs/zsh/oh-my-zsh.nix"],"default":"$HOME/.cache/oh-my-zsh","description":"Cache directory to be used by `oh-my-zsh`.\nWithout this option it would default to the read-only nix store.\n","loc":["programs","zsh","ohMyZsh","cacheDir"],"readOnly":false,"type":"string"},"programs.zsh.ohMyZsh.custom":{"declarations":["nixos/modules/programs/zsh/oh-my-zsh.nix"],"default":null,"description":"Path to a custom oh-my-zsh package to override config of oh-my-zsh.\n(Can't be used along with `customPkgs`).\n","loc":["programs","zsh","ohMyZsh","custom"],"readOnly":false,"type":"null or string"},"programs.zsh.ohMyZsh.customPkgs":{"declarations":["nixos/modules/programs/zsh/oh-my-zsh.nix"],"default":[],"description":"List of custom packages that should be loaded into `oh-my-zsh`.\n","loc":["programs","zsh","ohMyZsh","customPkgs"],"readOnly":false,"type":"list of packages"},"programs.zsh.ohMyZsh.enable":{"declarations":["nixos/modules/programs/zsh/oh-my-zsh.nix"],"default":false,"description":"Enable oh-my-zsh.\n","loc":["programs","zsh","ohMyZsh","enable"],"readOnly":false,"type":"unspecified"},"programs.zsh.ohMyZsh.package":{"declarations":["nixos/modules/programs/zsh/oh-my-zsh.nix"],"default":"pkgs.oh-my-zsh","description":"Package to install for `oh-my-zsh` usage.\n","loc":["programs","zsh","ohMyZsh","package"],"readOnly":false,"type":"package"},"programs.zsh.ohMyZsh.plugins":{"declarations":["nixos/modules/programs/zsh/oh-my-zsh.nix"],"default":[],"description":"List of oh-my-zsh plugins\n","loc":["programs","zsh","ohMyZsh","plugins"],"readOnly":false,"type":"list of strings"},"programs.zsh.ohMyZsh.theme":{"declarations":["nixos/modules/programs/zsh/oh-my-zsh.nix"],"default":"","description":"Name of the theme to be used by oh-my-zsh.\n","loc":["programs","zsh","ohMyZsh","theme"],"readOnly":false,"type":"string"},"programs.zsh.promptInit":{"declarations":["nixos/modules/programs/zsh/zsh.nix"],"default":"if [ \"$TERM\" != dumb ]; then\n    autoload -U promptinit && promptinit && prompt walters\nfi\n","description":"Shell script code used to initialise the zsh prompt.\n","loc":["programs","zsh","promptInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.zsh.shellAliases":{"declarations":["nixos/modules/programs/zsh/zsh.nix"],"default":{},"description":"Set of aliases for zsh shell, which overrides <option>environment.shellAliases</option>.\nSee <option>environment.shellAliases</option> for an option format description.\n","loc":["programs","zsh","shellAliases"],"readOnly":false,"type":"attribute set of null or string or paths"},"programs.zsh.shellInit":{"declarations":["nixos/modules/programs/zsh/zsh.nix"],"default":"","description":"Shell script code called during zsh shell initialisation.\n","loc":["programs","zsh","shellInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"programs.zsh.syntaxHighlighting.enable":{"declarations":["nixos/modules/programs/zsh/zsh-syntax-highlighting.nix"],"default":false,"description":"Whether to enable zsh-syntax-highlighting.","example":true,"loc":["programs","zsh","syntaxHighlighting","enable"],"readOnly":false,"type":"boolean"},"programs.zsh.syntaxHighlighting.highlighters":{"declarations":["nixos/modules/programs/zsh/zsh-syntax-highlighting.nix"],"default":["main"],"description":"Specifies the highlighters to be used by zsh-syntax-highlighting.\n\nThe following defined options can be found here:\nhttps://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md\n","loc":["programs","zsh","syntaxHighlighting","highlighters"],"readOnly":false,"type":"list of one of \"main\", \"brackets\", \"pattern\", \"cursor\", \"root\", \"line\"s"},"programs.zsh.syntaxHighlighting.patterns":{"declarations":["nixos/modules/programs/zsh/zsh-syntax-highlighting.nix"],"default":{},"description":"Specifies custom patterns to be highlighted by zsh-syntax-highlighting.\n\nPlease refer to the docs for more information about the usage:\nhttps://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/pattern.md\n","example":{"_type":"literalExample","text":"{\n  \"rm -rf *\" = \"fg=white,bold,bg=red\";\n}\n"},"loc":["programs","zsh","syntaxHighlighting","patterns"],"readOnly":false,"type":"attribute set of Concatenated strings"},"programs.zsh.zsh-autoenv.enable":{"declarations":["nixos/modules/programs/zsh/zsh-autoenv.nix"],"default":false,"description":"Whether to enable zsh-autoenv.","example":true,"loc":["programs","zsh","zsh-autoenv","enable"],"readOnly":false,"type":"boolean"},"programs.zsh.zsh-autoenv.package":{"declarations":["nixos/modules/programs/zsh/zsh-autoenv.nix"],"default":"pkgs.zsh-autoenv","description":"Package to install for `zsh-autoenv` usage.\n","loc":["programs","zsh","zsh-autoenv","package"],"readOnly":false,"type":"package"},"security.acme.certs":{"declarations":["nixos/modules/security/acme.nix"],"default":{},"description":"Attribute set of certificates to get signed and renewed.\n","example":{"_type":"literalExample","text":"{\n  \"example.com\" = {\n    webroot = \"/var/www/challenges/\";\n    email = \"foo@example.com\";\n    extraDomains = { \"www.example.com\" = null; \"foo.example.com\" = \"/var/www/foo/\"; };\n  };\n  \"bar.example.com\" = {\n    webroot = \"/var/www/challenges/\";\n    email = \"bar@example.com\";\n  };\n}\n"},"loc":["security","acme","certs"],"readOnly":false,"type":"attribute set of submodules"},"security.acme.certs.<name>.activationDelay":{"declarations":["nixos/modules/security/acme.nix"],"default":null,"description":"Systemd time span expression to delay copying new certificates to main\nstate directory. See <citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","loc":["security","acme","certs","<name>","activationDelay"],"readOnly":false,"type":"null or string"},"security.acme.certs.<name>.allowKeysForGroup":{"declarations":["nixos/modules/security/acme.nix"],"default":false,"description":"Give read permissions to the specified group\n(<option>security.acme.cert.&lt;name&gt;.group</option>) to read SSL private certificates.\n","loc":["security","acme","certs","<name>","allowKeysForGroup"],"readOnly":false,"type":"boolean"},"security.acme.certs.<name>.domain":{"declarations":["nixos/modules/security/acme.nix"],"default":"‹name›","description":"Domain to fetch certificate for (defaults to the entry name)","loc":["security","acme","certs","<name>","domain"],"readOnly":false,"type":"string"},"security.acme.certs.<name>.email":{"declarations":["nixos/modules/security/acme.nix"],"default":null,"description":"Contact email address for the CA to be able to reach you.","loc":["security","acme","certs","<name>","email"],"readOnly":false,"type":"null or string"},"security.acme.certs.<name>.extraDomains":{"declarations":["nixos/modules/security/acme.nix"],"default":{},"description":"A list of extra domain names, which are included in the one certificate to be issued, with their\nown server roots if needed.\n","example":{"_type":"literalExample","text":"{\n  \"example.org\" = \"/srv/http/nginx\";\n  \"mydomain.org\" = null;\n}\n"},"loc":["security","acme","certs","<name>","extraDomains"],"readOnly":false,"type":"attribute set of null or strings"},"security.acme.certs.<name>.group":{"declarations":["nixos/modules/security/acme.nix"],"default":"root","description":"Group running the ACME client.","loc":["security","acme","certs","<name>","group"],"readOnly":false,"type":"string"},"security.acme.certs.<name>.plugins":{"declarations":["nixos/modules/security/acme.nix"],"default":["fullchain.pem","full.pem","key.pem","account_key.json"],"description":"Plugins to enable. With default settings simp_le will\nstore public certificate bundle in <filename>fullchain.pem</filename>,\nprivate key in <filename>key.pem</filename> and those two previous\nfiles combined in <filename>full.pem</filename> in its state directory.\n","loc":["security","acme","certs","<name>","plugins"],"readOnly":false,"type":"list of one of \"cert.der\", \"cert.pem\", \"chain.pem\", \"external.sh\", \"fullchain.pem\", \"full.pem\", \"key.der\", \"key.pem\", \"account_key.json\"s"},"security.acme.certs.<name>.postRun":{"declarations":["nixos/modules/security/acme.nix"],"default":"","description":"Commands to run after new certificates go live. Typically\nthe web server and other servers using certificates need to\nbe reloaded.\n\nExecuted in the same directory with the new certificate.\n","example":"systemctl reload nginx.service","loc":["security","acme","certs","<name>","postRun"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"security.acme.certs.<name>.preDelay":{"declarations":["nixos/modules/security/acme.nix"],"default":"","description":"Commands to run after certificates are re-issued but before they are\nactivated. Typically the new certificate is published to DNS.\n\nExecuted in the same directory with the new certificate.\n","loc":["security","acme","certs","<name>","preDelay"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"security.acme.certs.<name>.user":{"declarations":["nixos/modules/security/acme.nix"],"default":"root","description":"User running the ACME client.","loc":["security","acme","certs","<name>","user"],"readOnly":false,"type":"string"},"security.acme.certs.<name>.webroot":{"declarations":["nixos/modules/security/acme.nix"],"description":"Where the webroot of the HTTP vhost is located.\n<filename>.well-known/acme-challenge/</filename> directory\nwill be created below the webroot if it doesn't exist.\n<literal>http://example.org/.well-known/acme-challenge/</literal> must also\nbe available (notice unencrypted HTTP).\n","example":"/var/lib/acme/acme-challenges","loc":["security","acme","certs","<name>","webroot"],"readOnly":false,"type":"string"},"security.acme.directory":{"declarations":["nixos/modules/security/acme.nix"],"default":"/var/lib/acme","description":"Directory where certs and other state will be stored by default.\n","loc":["security","acme","directory"],"readOnly":false,"type":"string"},"security.acme.preliminarySelfsigned":{"declarations":["nixos/modules/security/acme.nix"],"default":true,"description":"Whether a preliminary self-signed certificate should be generated before\ndoing ACME requests. This can be useful when certificates are required in\na webserver, but ACME needs the webserver to make its requests.\n\nWith preliminary self-signed certificate the webserver can be started and\ncan later reload the correct ACME certificates.\n","loc":["security","acme","preliminarySelfsigned"],"readOnly":false,"type":"boolean"},"security.acme.production":{"declarations":["nixos/modules/security/acme.nix"],"default":true,"description":"If set to true, use Let's Encrypt's production environment\ninstead of the staging environment. The main benefit of the\nstaging environment is to get much higher rate limits.\n\nSee\n<literal>https://letsencrypt.org/docs/staging-environment</literal>\nfor more detail.\n","loc":["security","acme","production"],"readOnly":false,"type":"boolean"},"security.acme.renewInterval":{"declarations":["nixos/modules/security/acme.nix"],"default":"weekly","description":"Systemd calendar expression when to check for renewal. See\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","loc":["security","acme","renewInterval"],"readOnly":false,"type":"string"},"security.acme.validMin":{"declarations":["nixos/modules/security/acme.nix"],"default":2592000,"description":"Minimum remaining validity before renewal in seconds.","loc":["security","acme","validMin"],"readOnly":false,"type":"signed integer"},"security.allowUserNamespaces":{"declarations":["nixos/modules/security/misc.nix"],"default":true,"description":"Whether to allow creation of user namespaces.  A recurring problem\nwith user namespaces is the presence of code paths where the kernel's\npermission checking logic fails to account for namespacing, instead\npermitting a namespaced process to act outside the namespace with the\nsame privileges as it would have inside it.  This is particularly\ndamaging in the common case of running as root within the namespace.\nWhen user namespace creation is disallowed, attempting to create\na user namespace fails with \"no space left on device\" (ENOSPC).\n","loc":["security","allowUserNamespaces"],"readOnly":false,"type":"boolean"},"security.apparmor.confineSUIDApplications":{"declarations":["nixos/modules/security/apparmor-suid.nix"],"default":true,"description":"Install AppArmor profiles for commonly-used SUID application\nto mitigate potential privilege escalation attacks due to bugs\nin such applications.\n\nCurrently available profiles: ping\n","loc":["security","apparmor","confineSUIDApplications"],"readOnly":false,"type":"unspecified"},"security.apparmor.enable":{"declarations":["nixos/modules/security/apparmor.nix"],"default":false,"description":"Enable the AppArmor Mandatory Access Control system.","loc":["security","apparmor","enable"],"readOnly":false,"type":"boolean"},"security.apparmor.packages":{"declarations":["nixos/modules/security/apparmor.nix"],"default":[],"description":"List of packages to be added to apparmor's include path","loc":["security","apparmor","packages"],"readOnly":false,"type":"list of packages"},"security.apparmor.profiles":{"declarations":["nixos/modules/security/apparmor.nix"],"default":[],"description":"List of files containing AppArmor profiles.","loc":["security","apparmor","profiles"],"readOnly":false,"type":"list of paths"},"security.audit.backlogLimit":{"declarations":["nixos/modules/security/audit.nix"],"default":64,"description":"The maximum number of outstanding audit buffers allowed; exceeding this is\nconsidered a failure and handled in a manner specified by failureMode.\n","loc":["security","audit","backlogLimit"],"readOnly":false,"type":"signed integer"},"security.audit.enable":{"declarations":["nixos/modules/security/audit.nix"],"default":false,"description":"Whether to enable the Linux audit system. The special `lock' value can be used to\nenable auditing and prevent disabling it until a restart. Be careful about locking\nthis, as it will prevent you from changing your audit configuration until you\nrestart. If possible, test your configuration using build-vm beforehand.\n","loc":["security","audit","enable"],"readOnly":false,"type":"one of <bool>, <bool>, \"lock\""},"security.audit.failureMode":{"declarations":["nixos/modules/security/audit.nix"],"default":"printk","description":"How to handle critical errors in the auditing system","loc":["security","audit","failureMode"],"readOnly":false,"type":"one of \"silent\", \"printk\", \"panic\""},"security.audit.rateLimit":{"declarations":["nixos/modules/security/audit.nix"],"default":0,"description":"The maximum messages per second permitted before triggering a failure as\nspecified by failureMode. Setting it to zero disables the limit.\n","loc":["security","audit","rateLimit"],"readOnly":false,"type":"signed integer"},"security.audit.rules":{"declarations":["nixos/modules/security/audit.nix"],"default":[],"description":"The ordered audit rules, with each string appearing as one line of the audit.rules file.\n","example":["-a exit,always -F arch=b64 -S execve"],"loc":["security","audit","rules"],"readOnly":false,"type":"list of strings"},"security.auditd.enable":{"declarations":["nixos/modules/security/auditd.nix"],"default":false,"description":"Whether to enable the Linux Audit daemon.","example":true,"loc":["security","auditd","enable"],"readOnly":false,"type":"boolean"},"security.chromiumSuidSandbox.enable":{"declarations":["nixos/modules/security/chromium-suid-sandbox.nix"],"default":false,"description":"Whether to install the Chromium SUID sandbox which is an executable that\nChromium may use in order to achieve sandboxing.\n\nIf you get the error \"The SUID sandbox helper binary was found, but is not\nconfigured correctly.\", turning this on might help.\n\nAlso, if the URL chrome://sandbox tells you that \"You are not adequately\nsandboxed!\", turning this on might resolve the issue.\n","loc":["security","chromiumSuidSandbox","enable"],"readOnly":false,"type":"boolean"},"security.dhparams.defaultBitSize":{"declarations":["nixos/modules/security/dhparams.nix"],"default":2048,"description":"This allows to override the default bit size for all of the\nDiffie-Hellman parameters set in\n<option>security.dhparams.params</option>.\n","loc":["security","dhparams","defaultBitSize"],"readOnly":false,"type":"integer of at least 16 bits"},"security.dhparams.enable":{"declarations":["nixos/modules/security/dhparams.nix"],"default":false,"description":"Whether to generate new DH params and clean up old DH params.\n","loc":["security","dhparams","enable"],"readOnly":false,"type":"boolean"},"security.dhparams.params":{"declarations":["nixos/modules/security/dhparams.nix"],"default":{},"description":"Diffie-Hellman parameters to generate.\n\nThe value is the size (in bits) of the DH params to generate. The\ngenerated DH params path can be found in\n<literal>config.security.dhparams.params.<replaceable>name</replaceable>.path</literal>.\n\n<note><para>The name of the DH params is taken as being the name of\nthe service it serves and the params will be generated before the\nsaid service is started.</para></note>\n\n<warning><para>If you are removing all dhparams from this list, you\nhave to leave <option>security.dhparams.enable</option> for at\nleast one activation in order to have them be cleaned up. This also\nmeans if you rollback to a version without any dhparams the\nexisting ones won't be cleaned up. Of course this only applies if\n<option>security.dhparams.stateful</option> is\n<literal>true</literal>.</para></warning>\n\n<note><title>For module implementers:</title><para>It's recommended\nto not set a specific bit size here, so that users can easily\noverride this by setting\n<option>security.dhparams.defaultBitSize</option>.</para></note>\n","example":{"_type":"literalExample","text":"{ nginx.bits = 3072; }"},"loc":["security","dhparams","params"],"readOnly":false,"type":"attribute set of submodule or signed integer convertible to its"},"security.dhparams.params.<name>.bits":{"declarations":["nixos/modules/security/dhparams.nix"],"default":2048,"description":"The bit size for the prime that is used during a Diffie-Hellman\nkey exchange.\n","loc":["security","dhparams","params","<name>","bits"],"readOnly":false,"type":"integer of at least 16 bits"},"security.dhparams.params.<name>.path":{"declarations":["nixos/modules/security/dhparams.nix"],"description":"The resulting path of the generated Diffie-Hellman parameters\nfile for other services to reference. This could be either a\nstore path or a file inside the directory specified by\n<option>security.dhparams.path</option>.\n","loc":["security","dhparams","params","<name>","path"],"readOnly":true,"type":"path"},"security.dhparams.path":{"declarations":["nixos/modules/security/dhparams.nix"],"default":"/var/lib/dhparams","description":"Path to the directory in which Diffie-Hellman parameters will be\nstored. This only is relevant if\n<option>security.dhparams.stateful</option> is\n<literal>true</literal>.\n","loc":["security","dhparams","path"],"readOnly":false,"type":"string"},"security.dhparams.stateful":{"declarations":["nixos/modules/security/dhparams.nix"],"default":true,"description":"Whether generation of Diffie-Hellman parameters should be stateful or\nnot. If this is enabled, PEM-encoded files for Diffie-Hellman\nparameters are placed in the directory specified by\n<option>security.dhparams.path</option>. Otherwise the files are\ncreated within the Nix store.\n\n<note><para>If this is <literal>false</literal> the resulting store\npath will be non-deterministic and will be rebuilt every time the\n<package>openssl</package> package changes.</para></note>\n","loc":["security","dhparams","stateful"],"readOnly":false,"type":"boolean"},"security.duosec.acceptEnvFactor":{"declarations":["nixos/modules/security/duosec.nix"],"default":false,"description":"Look for factor selection or passcode in the\n<literal>$DUO_PASSCODE</literal> environment variable before\nprompting the user for input.\n\nWhen $DUO_PASSCODE is non-empty, it will override\nautopush. The SSH client will need SendEnv DUO_PASSCODE in\nits configuration, and the SSH server will similarly need\nAcceptEnv DUO_PASSCODE.\n","loc":["security","duosec","acceptEnvFactor"],"readOnly":false,"type":"boolean"},"security.duosec.allowTcpForwarding":{"declarations":["nixos/modules/security/duosec.nix"],"default":false,"description":"By default, when SSH forwarding, enabling Duo Security will\ndisable TCP forwarding. By enabling this, you potentially\nundermine some of the SSH based login security. Note this is\nnot needed if you use PAM.\n","loc":["security","duosec","allowTcpForwarding"],"readOnly":false,"type":"boolean"},"security.duosec.autopush":{"declarations":["nixos/modules/security/duosec.nix"],"default":false,"description":"If <literal>true</literal>, Duo Unix will automatically send\na push login request to the user’s phone, falling back on a\nphone call if push is unavailable. If\n<literal>false</literal>, the user will be prompted to\nchoose an authentication method. When configured with\n<literal>autopush = yes</literal>, we recommend setting\n<literal>prompts = 1</literal>.\n","loc":["security","duosec","autopush"],"readOnly":false,"type":"boolean"},"security.duosec.failmode":{"declarations":["nixos/modules/security/duosec.nix"],"default":"safe","description":"On service or configuration errors that prevent Duo\nauthentication, fail \"safe\" (allow access) or \"secure\" (deny\naccess). The default is \"safe\".\n","loc":["security","duosec","failmode"],"readOnly":false,"type":"one of \"safe\", \"enum\""},"security.duosec.fallbackLocalIP":{"declarations":["nixos/modules/security/duosec.nix"],"default":false,"description":"Duo Unix reports the IP address of the authorizing user, for\nthe purposes of authorization and whitelisting. If Duo Unix\ncannot detect the IP address of the client, setting\n<literal>fallbackLocalIP = yes</literal> will cause Duo Unix\nto send the IP address of the server it is running on.\n\nIf you are using IP whitelisting, enabling this option could\ncause unauthorized logins if the local IP is listed in the\nwhitelist.\n","loc":["security","duosec","fallbackLocalIP"],"readOnly":false,"type":"boolean"},"security.duosec.group":{"declarations":["nixos/modules/security/duosec.nix"],"default":"","description":"Use Duo authentication for users only in this group.","loc":["security","duosec","group"],"readOnly":false,"type":"string"},"security.duosec.host":{"declarations":["nixos/modules/security/duosec.nix"],"description":"Duo API hostname.","loc":["security","duosec","host"],"readOnly":false,"type":"string"},"security.duosec.ikey":{"declarations":["nixos/modules/security/duosec.nix"],"description":"Integration key.","loc":["security","duosec","ikey"],"readOnly":false,"type":"string"},"security.duosec.motd":{"declarations":["nixos/modules/security/duosec.nix"],"default":false,"description":"Print the contents of <literal>/etc/motd</literal> to screen\nafter a successful login.\n","loc":["security","duosec","motd"],"readOnly":false,"type":"boolean"},"security.duosec.pam.enable":{"declarations":["nixos/modules/security/duosec.nix"],"default":false,"description":"If enabled, protect logins with Duo Security using PAM support.","loc":["security","duosec","pam","enable"],"readOnly":false,"type":"boolean"},"security.duosec.prompts":{"declarations":["nixos/modules/security/duosec.nix"],"default":3,"description":"If a user fails to authenticate with a second factor, Duo\nUnix will prompt the user to authenticate again. This option\nsets the maximum number of prompts that Duo Unix will\ndisplay before denying access. Must be 1, 2, or 3. Default\nis 3.\n\nFor example, when <literal>prompts = 1</literal>, the user\nwill have to successfully authenticate on the first prompt,\nwhereas if <literal>prompts = 2</literal>, if the user\nenters incorrect information at the initial prompt, he/she\nwill be prompted to authenticate again.\n\nWhen configured with <literal>autopush = true</literal>, we\nrecommend setting <literal>prompts = 1</literal>.\n","loc":["security","duosec","prompts"],"readOnly":false,"type":"one of 1, 2, 3"},"security.duosec.pushinfo":{"declarations":["nixos/modules/security/duosec.nix"],"default":false,"description":"Include information such as the command to be executed in\nthe Duo Push message.\n","loc":["security","duosec","pushinfo"],"readOnly":false,"type":"boolean"},"security.duosec.skey":{"declarations":["nixos/modules/security/duosec.nix"],"description":"Secret key.","loc":["security","duosec","skey"],"readOnly":false,"type":"string"},"security.duosec.ssh.enable":{"declarations":["nixos/modules/security/duosec.nix"],"default":false,"description":"If enabled, protect SSH logins with Duo Security.","loc":["security","duosec","ssh","enable"],"readOnly":false,"type":"boolean"},"security.hideProcessInformation":{"declarations":["nixos/modules/security/hidepid.nix"],"default":false,"description":"Restrict process information to the owning user.\n","loc":["security","hideProcessInformation"],"readOnly":false,"type":"boolean"},"security.lockKernelModules":{"declarations":["nixos/modules/security/lock-kernel-modules.nix"],"default":false,"description":"Disable kernel module loading once the system is fully initialised.\nModule loading is disabled until the next reboot.  Problems caused\nby delayed module loading can be fixed by adding the module(s) in\nquestion to <option>boot.kernelModules</option>.\n","loc":["security","lockKernelModules"],"readOnly":false,"type":"boolean"},"security.pam.enableEcryptfs":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Enable eCryptfs PAM module (mounting ecryptfs home directory on login).\n","loc":["security","pam","enableEcryptfs"],"readOnly":false,"type":"unspecified"},"security.pam.enableOTPW":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Enable the OTPW (one-time password) PAM module.\n","loc":["security","pam","enableOTPW"],"readOnly":false,"type":"unspecified"},"security.pam.enableSSHAgentAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Enable sudo logins if the user's SSH agent provides a key\npresent in <filename>~/.ssh/authorized_keys</filename>.\nThis allows machines to exclusively use SSH keys instead of\npasswords.\n","loc":["security","pam","enableSSHAgentAuth"],"readOnly":false,"type":"unspecified"},"security.pam.enableU2F":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Enable the U2F PAM module.\n","loc":["security","pam","enableU2F"],"readOnly":false,"type":"unspecified"},"security.pam.loginLimits":{"declarations":["nixos/modules/security/pam.nix"],"default":[],"description":"Define resource limits that should apply to users or groups.\n         Each item in the list should be an attribute set with a\n         <varname>domain</varname>, <varname>type</varname>,\n         <varname>item</varname>, and <varname>value</varname>\n         attribute.  The syntax and semantics of these attributes\n         must be that described in the limits.conf(5) man page.\n\n         Note that these limits do not apply to systemd services,\n         whose limits can be changed via <option>systemd.extraConfig</option>\n         instead.\n","example":[{"domain":"ftp","item":"nproc","type":"hard","value":"0"},{"domain":"@student","item":"maxlogins","type":"-","value":"4"}],"loc":["security","pam","loginLimits"],"readOnly":false,"type":"unspecified"},"security.pam.makeHomeDir.skelDirectory":{"declarations":["nixos/modules/security/pam.nix"],"default":"/var/empty","description":"Path to skeleton directory whose contents are copied to home\ndirectories newly created by <literal>pam_mkhomedir</literal>.\n","example":"/etc/skel","loc":["security","pam","makeHomeDir","skelDirectory"],"readOnly":false,"type":"string"},"security.pam.mount.enable":{"declarations":["nixos/modules/security/pam_mount.nix"],"default":false,"description":"Enable PAM mount system to mount fileystems on user login.\n","loc":["security","pam","mount","enable"],"readOnly":false,"type":"boolean"},"security.pam.mount.extraVolumes":{"declarations":["nixos/modules/security/pam_mount.nix"],"default":[],"description":"List of volume definitions for pam_mount.\nFor more information, visit <link\nxlink:href=\"http://pam-mount.sourceforge.net/pam_mount.conf.5.html\" />.\n","loc":["security","pam","mount","extraVolumes"],"readOnly":false,"type":"list of strings"},"security.pam.oath.digits":{"declarations":["nixos/modules/security/oath.nix"],"default":6,"description":"Specify the length of the one-time password in number of\ndigits.\n","loc":["security","pam","oath","digits"],"readOnly":false,"type":"one of 6, 7, 8"},"security.pam.oath.enable":{"declarations":["nixos/modules/security/oath.nix"],"default":false,"description":"Enable the OATH (one-time password) PAM module.\n","loc":["security","pam","oath","enable"],"readOnly":false,"type":"boolean"},"security.pam.oath.usersFile":{"declarations":["nixos/modules/security/oath.nix"],"default":"/etc/users.oath","description":"Set the path to file where the user's credentials are\nstored. This file must not be world readable!\n","loc":["security","pam","oath","usersFile"],"readOnly":false,"type":"path"},"security.pam.oath.window":{"declarations":["nixos/modules/security/oath.nix"],"default":5,"description":"Specify the number of one-time passwords to check in order\nto accommodate for situations where the system and the\nclient are slightly out of sync (iteration for HOTP or time\nsteps for TOTP).\n","loc":["security","pam","oath","window"],"readOnly":false,"type":"signed integer"},"security.pam.services":{"declarations":["nixos/modules/security/pam.nix"],"default":[],"description":"This option defines the PAM services.  A service typically\ncorresponds to a program that uses PAM,\ne.g. <command>login</command> or <command>passwd</command>.\nEach attribute of this set defines a PAM service, with the attribute name\ndefining the name of the service.\n","loc":["security","pam","services"],"readOnly":false,"type":"list or attribute set of submodules"},"security.pam.services.<name?>.allowNullPassword":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Whether to allow logging into accounts that have no password\nset (i.e., have an empty password field in\n<filename>/etc/passwd</filename> or\n<filename>/etc/group</filename>).  This does not enable\nlogging into disabled accounts (i.e., that have the password\nfield set to <literal>!</literal>).  Note that regardless of\nwhat the pam_unix documentation says, accounts with hashed\nempty passwords are always allowed to log in.\n","loc":["security","pam","services","<name?>","allowNullPassword"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.enableAppArmor":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Enable support for attaching AppArmor profiles at the\nuser/group level, e.g., as part of a role based access\ncontrol scheme.\n","loc":["security","pam","services","<name?>","enableAppArmor"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.enableGnomeKeyring":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If enabled, pam_gnome_keyring will attempt to automatically unlock the\nuser's default Gnome keyring upon login. If the user login password does\nnot match their keyring password, Gnome Keyring will prompt separately\nafter login.\n","loc":["security","pam","services","<name?>","enableGnomeKeyring"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.enableKwallet":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If enabled, pam_wallet will attempt to automatically unlock the\nuser's default KDE wallet upon login. If the user has no wallet named\n\"kdewallet\", or the login password does not match their wallet\npassword, KDE will prompt separately after login.\n","loc":["security","pam","services","<name?>","enableKwallet"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.forwardXAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Whether X authentication keys should be passed from the\ncalling user to the target user (e.g. for\n<command>su</command>)\n","loc":["security","pam","services","<name?>","forwardXAuth"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.fprintAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, fingerprint reader will be used (if exists and\nyour fingerprints are enrolled).\n","loc":["security","pam","services","<name?>","fprintAuth"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.googleAuthenticator.enable":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, users with enabled Google Authenticator (created\n<filename>~/.google_authenticator</filename>) will be required\nto provide Google Authenticator token to log in.\n","loc":["security","pam","services","<name?>","googleAuthenticator","enable"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.limits":{"declarations":["nixos/modules/security/pam.nix"],"description":"Attribute set describing resource limits.  Defaults to the\nvalue of <option>security.pam.loginLimits</option>.\n","loc":["security","pam","services","<name?>","limits"],"readOnly":false,"type":"unspecified"},"security.pam.services.<name?>.logFailures":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Whether to log authentication failures in <filename>/var/log/faillog</filename>.","loc":["security","pam","services","<name?>","logFailures"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.makeHomeDir":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Whether to try to create home directories for users\nwith <literal>$HOME</literal>s pointing to nonexistent\nlocations on session login.\n","loc":["security","pam","services","<name?>","makeHomeDir"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.name":{"declarations":["nixos/modules/security/pam.nix"],"description":"Name of the PAM service.","example":"sshd","loc":["security","pam","services","<name?>","name"],"readOnly":false,"type":"string"},"security.pam.services.<name?>.oathAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, the OATH Toolkit will be used.\n","loc":["security","pam","services","<name?>","oathAuth"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.otpwAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, the OTPW system will be used (if\n<filename>~/.otpw</filename> exists).\n","loc":["security","pam","services","<name?>","otpwAuth"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.pamMount":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Enable PAM mount (pam_mount) system to mount fileystems on user login.\n","loc":["security","pam","services","<name?>","pamMount"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.requireWheel":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Whether to permit root access only to members of group wheel.\n","loc":["security","pam","services","<name?>","requireWheel"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.rootOK":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, root doesn't need to authenticate (e.g. for the\n<command>useradd</command> service).\n","loc":["security","pam","services","<name?>","rootOK"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.setEnvironment":{"declarations":["nixos/modules/security/pam.nix"],"default":true,"description":"Whether the service should set the environment variables\nlisted in <option>environment.sessionVariables</option>\nusing <literal>pam_env.so</literal>.\n","loc":["security","pam","services","<name?>","setEnvironment"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.setLoginUid":{"declarations":["nixos/modules/security/pam.nix"],"description":"Set the login uid of the process\n(<filename>/proc/self/loginuid</filename>) for auditing\npurposes.  The login uid is only set by ‘entry points’ like\n<command>login</command> and <command>sshd</command>, not by\ncommands like <command>sudo</command>.\n","loc":["security","pam","services","<name?>","setLoginUid"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.showMotd":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Whether to show the message of the day.","loc":["security","pam","services","<name?>","showMotd"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.sshAgentAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, the calling user's SSH agent is used to authenticate\nagainst the keys in the calling user's\n<filename>~/.ssh/authorized_keys</filename>.  This is useful\nfor <command>sudo</command> on password-less remote systems.\n","loc":["security","pam","services","<name?>","sshAgentAuth"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.sssdStrictAccess":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"enforce sssd access control","loc":["security","pam","services","<name?>","sssdStrictAccess"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.startSession":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, the service will register a new session with\nsystemd's login manager.  For local sessions, this will give\nthe user access to audio devices, CD-ROM drives.  In the\ndefault PolicyKit configuration, it also allows the user to\nreboot the system.\n","loc":["security","pam","services","<name?>","startSession"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.text":{"declarations":["nixos/modules/security/pam.nix"],"description":"Contents of the PAM service file.","loc":["security","pam","services","<name?>","text"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"security.pam.services.<name?>.u2fAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, users listed in\n<filename>~/.config/Yubico/u2f_keys</filename> are able to log in\nwith the associated U2F key.\n","loc":["security","pam","services","<name?>","u2fAuth"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.unixAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":true,"description":"Whether users can log in with passwords defined in\n<filename>/etc/shadow</filename>.\n","loc":["security","pam","services","<name?>","unixAuth"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.updateWtmp":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"Whether to update <filename>/var/log/wtmp</filename>.","loc":["security","pam","services","<name?>","updateWtmp"],"readOnly":false,"type":"boolean"},"security.pam.services.<name?>.usbAuth":{"declarations":["nixos/modules/security/pam.nix"],"default":false,"description":"If set, users listed in\n<filename>/etc/pamusb.conf</filename> are able to log in\nwith the associated USB key.\n","loc":["security","pam","services","<name?>","usbAuth"],"readOnly":false,"type":"boolean"},"security.pam.usb.enable":{"declarations":["nixos/modules/security/pam_usb.nix"],"default":false,"description":"Enable USB login for all login systems that support it.  For\nmore information, visit <link\nxlink:href=\"https://github.com/aluzzardi/pam_usb/wiki/Getting-Started#setting-up-devices-and-users\" />.\n","loc":["security","pam","usb","enable"],"readOnly":false,"type":"boolean"},"security.pki.caCertificateBlacklist":{"declarations":["nixos/modules/security/ca.nix"],"default":[],"description":"A list of blacklisted CA certificate names that won't be imported from\nthe Mozilla Trust Store into\n<filename>/etc/ssl/certs/ca-certificates.crt</filename>. Use the\nnames from that file.\n","example":["WoSign","WoSign China","CA WoSign ECC Root","Certification Authority of WoSign G2"],"loc":["security","pki","caCertificateBlacklist"],"readOnly":false,"type":"list of strings"},"security.pki.certificateFiles":{"declarations":["nixos/modules/security/ca.nix"],"default":[],"description":"A list of files containing trusted root certificates in PEM\nformat. These are concatenated to form\n<filename>/etc/ssl/certs/ca-certificates.crt</filename>, which is\nused by many programs that use OpenSSL, such as\n<command>curl</command> and <command>git</command>.\n","example":{"_type":"literalExample","text":"[ \"${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt\" ]"},"loc":["security","pki","certificateFiles"],"readOnly":false,"type":"list of paths"},"security.pki.certificates":{"declarations":["nixos/modules/security/ca.nix"],"default":[],"description":"A list of trusted root certificates in PEM format.\n","example":{"_type":"literalExample","text":"[ ''\n    NixOS.org\n    =========\n    -----BEGIN CERTIFICATE-----\n    MIIGUDCCBTigAwIBAgIDD8KWMA0GCSqGSIb3DQEBBQUAMIGMMQswCQYDVQQGEwJJ\n    TDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0\n    ...\n    -----END CERTIFICATE-----\n  ''\n]\n"},"loc":["security","pki","certificates"],"readOnly":false,"type":"list of strings"},"security.polkit.adminIdentities":{"declarations":["nixos/modules/security/polkit.nix"],"default":["unix-user:0","unix-group:wheel"],"description":"Specifies which users are considered “administrators”, for those\nactions that require the user to authenticate as an\nadministrator (i.e. have an <literal>auth_admin</literal>\nvalue).  By default, this is the <literal>root</literal>\nuser and all users in the <literal>wheel</literal> group.\n","example":["unix-user:alice","unix-group:admin"],"loc":["security","polkit","adminIdentities"],"readOnly":false,"type":"list of strings"},"security.polkit.enable":{"declarations":["nixos/modules/security/polkit.nix"],"default":true,"description":"Whether to enable PolKit.","loc":["security","polkit","enable"],"readOnly":false,"type":"boolean"},"security.polkit.extraConfig":{"declarations":["nixos/modules/security/polkit.nix"],"default":"","description":"Any polkit rules to be added to config (in JavaScript ;-). See:\nhttp://www.freedesktop.org/software/polkit/docs/latest/polkit.8.html#polkit-rules\n","example":"/* Log authorization checks. */\npolkit.addRule(function(action, subject) {\n  polkit.log(\"user \" +  subject.user + \" is attempting action \" + action.id + \" from PID \" + subject.pid);\n});\n\n/* Allow any local user to do anything (dangerous!). */\npolkit.addRule(function(action, subject) {\n  if (subject.local) return \"yes\";\n});\n","loc":["security","polkit","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"security.rngd.enable":{"declarations":["nixos/modules/security/rngd.nix"],"default":true,"description":"Whether to enable the rng daemon, which adds entropy from\nhardware sources of randomness to the kernel entropy pool when\navailable.\n","loc":["security","rngd","enable"],"readOnly":false,"type":"boolean"},"security.rtkit.enable":{"declarations":["nixos/modules/security/rtkit.nix"],"default":false,"description":"Whether to enable the RealtimeKit system service, which hands\nout realtime scheduling priority to user processes on\ndemand. For example, the PulseAudio server uses this to\nacquire realtime priority.\n","loc":["security","rtkit","enable"],"readOnly":false,"type":"boolean"},"security.sudo.configFile":{"declarations":["nixos/modules/security/sudo.nix"],"description":"This string contains the contents of the\n<filename>sudoers</filename> file.\n","loc":["security","sudo","configFile"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"security.sudo.enable":{"declarations":["nixos/modules/security/sudo.nix"],"default":true,"description":"Whether to enable the <command>sudo</command> command, which\nallows non-root users to execute commands as root.\n","loc":["security","sudo","enable"],"readOnly":false,"type":"boolean"},"security.sudo.extraConfig":{"declarations":["nixos/modules/security/sudo.nix"],"default":"","description":"Extra configuration text appended to <filename>sudoers</filename>.\n","loc":["security","sudo","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"security.sudo.extraRules":{"declarations":["nixos/modules/security/sudo.nix"],"default":[],"description":"Define specific rules to be in the <filename>sudoers</filename> file.\nMore specific rules should come after more general ones in order to\nyield the expected behavior. You can use mkBefore/mkAfter to ensure\nthis is the case when configuration options are merged.\n","example":[{"commands":["ALL"],"groups":["sudo"]},{"commands":[{"command":"/home/root/secret.sh","options":["SETENV","NOPASSWD"]}],"groups":[1006],"users":["backup","database"]},{"commands":["/home/baz/cmd1.sh hello-sudo",{"command":"/home/baz/cmd2.sh \"\"","options":["SETENV"]}],"groups":["bar"],"runAs":"foo"}],"loc":["security","sudo","extraRules"],"readOnly":false,"type":"list of submodules"},"security.sudo.extraRules.*.commands":{"declarations":["nixos/modules/security/sudo.nix"],"description":"The commands for which the rule should apply.\n","loc":["security","sudo","extraRules","*","commands"],"readOnly":false,"type":"list of Concatenated string or submodules"},"security.sudo.extraRules.*.groups":{"declarations":["nixos/modules/security/sudo.nix"],"default":[],"description":"The groups / GIDs this rule should apply for.\n","loc":["security","sudo","extraRules","*","groups"],"readOnly":false,"type":"list of Concatenated string or signed integers"},"security.sudo.extraRules.*.host":{"declarations":["nixos/modules/security/sudo.nix"],"default":"ALL","description":"For what host this rule should apply.\n","loc":["security","sudo","extraRules","*","host"],"readOnly":false,"type":"Concatenated string"},"security.sudo.extraRules.*.runAs":{"declarations":["nixos/modules/security/sudo.nix"],"default":"ALL:ALL","description":"Under which user/group the specified command is allowed to run.\n\nA user can be specified using just the username: <code>\"foo\"</code>.\nIt is also possible to specify a user/group combination using <code>\"foo:bar\"</code>\nor to only allow running as a specific group with <code>\":bar\"</code>.\n","loc":["security","sudo","extraRules","*","runAs"],"readOnly":false,"type":"Concatenated string"},"security.sudo.extraRules.*.users":{"declarations":["nixos/modules/security/sudo.nix"],"default":[],"description":"The usernames / UIDs this rule should apply for.\n","loc":["security","sudo","extraRules","*","users"],"readOnly":false,"type":"list of Concatenated string or signed integers"},"security.sudo.wheelNeedsPassword":{"declarations":["nixos/modules/security/sudo.nix"],"default":true,"description":"Whether users of the <code>wheel</code> group must\nprovide a password to run commands as super user via <command>sudo</command>.\n","loc":["security","sudo","wheelNeedsPassword"],"readOnly":false,"type":"boolean"},"security.wrappers":{"declarations":["nixos/modules/security/wrappers/default.nix"],"default":{},"description":"This option allows the ownership and permissions on the setuid\nwrappers for specific programs to be overridden from the\ndefault (setuid root, but not setgid root).\n\n<note>\n  <para>The sub-attribute <literal>source</literal> is mandatory,\n  it must be the absolute path to the program to be wrapped.\n  </para>\n\n  <para>The sub-attribute <literal>program</literal> is optional and\n  can give the wrapper program a new name. The default name is the same\n  as the attribute name itself.</para>\n\n  <para>Additionally, this option can set capabilities on a\n  wrapper program that propagates those capabilities down to the\n  wrapped, real program.</para>\n\n  <para>NOTE: cap_setpcap, which is required for the wrapper\n  program to be able to raise caps into the Ambient set is NOT\n  raised to the Ambient set so that the real program cannot\n  modify its own capabilities!! This may be too restrictive for\n  cases in which the real program needs cap_setpcap but it at\n  least leans on the side security paranoid vs. too\n  relaxed.</para>\n</note>\n","example":{"_type":"literalExample","text":"{ sendmail.source = \"/nix/store/.../bin/sendmail\";\n  ping = {\n    source  = \"${pkgs.iputils.out}/bin/ping\";\n    owner   = \"nobody\";\n    group   = \"nogroup\";\n    capabilities = \"cap_net_raw+ep\";\n  };\n}\n"},"loc":["security","wrappers"],"readOnly":false,"type":"attribute set"},"services.SystemdJournal2Gelf.enable":{"declarations":["nixos/modules/services/logging/SystemdJournal2Gelf.nix"],"default":false,"description":"Whether to enable SystemdJournal2Gelf.\n","loc":["services","SystemdJournal2Gelf","enable"],"readOnly":false,"type":"boolean"},"services.SystemdJournal2Gelf.extraOptions":{"declarations":["nixos/modules/services/logging/SystemdJournal2Gelf.nix"],"default":"","description":"Any extra flags to pass to SystemdJournal2Gelf. Note that\nthese are basically <literal>journalctl</literal> flags.\n","loc":["services","SystemdJournal2Gelf","extraOptions"],"readOnly":false,"type":"Concatenated string"},"services.SystemdJournal2Gelf.graylogServer":{"declarations":["nixos/modules/services/logging/SystemdJournal2Gelf.nix"],"description":"Host and port of your graylog2 input. This should be a GELF\nUDP input.\n","example":"graylog2.example.com:11201","loc":["services","SystemdJournal2Gelf","graylogServer"],"readOnly":false,"type":"Concatenated string"},"services.SystemdJournal2Gelf.package":{"declarations":["nixos/modules/services/logging/SystemdJournal2Gelf.nix"],"default":"SystemdJournal2Gelf-20170413","description":"SystemdJournal2Gelf package to use.\n","loc":["services","SystemdJournal2Gelf","package"],"readOnly":false,"type":"package"},"services.accounts-daemon.enable":{"declarations":["nixos/modules/services/desktops/accountsservice.nix"],"default":false,"description":"Whether to enable AccountsService, a DBus service for accessing\nthe list of user accounts and information attached to those accounts.\n","loc":["services","accounts-daemon","enable"],"readOnly":false,"type":"boolean"},"services.acpid.acEventCommands":{"declarations":["nixos/modules/services/hardware/acpid.nix"],"default":"","description":"Shell commands to execute on an ac_adapter.* event.","loc":["services","acpid","acEventCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.acpid.enable":{"declarations":["nixos/modules/services/hardware/acpid.nix"],"default":false,"description":"Whether to enable the ACPI daemon.","loc":["services","acpid","enable"],"readOnly":false,"type":"boolean"},"services.acpid.handlers":{"declarations":["nixos/modules/services/hardware/acpid.nix"],"default":{},"description":"Event handlers.\n\n<note><para>\n  Handler can be a single command.\n</para></note>\n","example":{"ac-power":{"action":"vals=($1)  # space separated string to array of multiple values\ncase ${vals[3]} in\n    00000000)\n        echo unplugged >> /tmp/acpi.log\n        ;;\n    00000001)\n        echo plugged in >> /tmp/acpi.log\n        ;;\n    *)\n        echo unknown >> /tmp/acpi.log\n        ;;\nesac\n","event":"ac_adapter/*"}},"loc":["services","acpid","handlers"],"readOnly":false,"type":"attribute set of submodules"},"services.acpid.handlers.<name>.action":{"declarations":["nixos/modules/services/hardware/acpid.nix"],"description":"Shell commands to execute when the event is triggered.","loc":["services","acpid","handlers","<name>","action"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.acpid.handlers.<name>.event":{"declarations":["nixos/modules/services/hardware/acpid.nix"],"description":"Event type.","example":["button/power.*","button/lid.*","ac_adapter.*","button/mute.*","button/volumedown.*","cd/play.*","cd/next.*"],"loc":["services","acpid","handlers","<name>","event"],"readOnly":false,"type":"string"},"services.acpid.lidEventCommands":{"declarations":["nixos/modules/services/hardware/acpid.nix"],"default":"","description":"Shell commands to execute on a button/lid.* event.","loc":["services","acpid","lidEventCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.acpid.logEvents":{"declarations":["nixos/modules/services/hardware/acpid.nix"],"default":false,"description":"Log all event activity.","loc":["services","acpid","logEvents"],"readOnly":false,"type":"boolean"},"services.acpid.powerEventCommands":{"declarations":["nixos/modules/services/hardware/acpid.nix"],"default":"","description":"Shell commands to execute on a button/power.* event.","loc":["services","acpid","powerEventCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.activemq.baseDir":{"declarations":["nixos/modules/services/amqp/activemq/default.nix"],"default":"/var/activemq","description":"The base directory where ActiveMQ stores its persistent data and logs.\nThis will be overridden if you set \"activemq.base\" and \"activemq.data\"\nin the <literal>javaProperties</literal> option. You can also override\nthis in activemq.xml.\n","loc":["services","activemq","baseDir"],"readOnly":false,"type":"Concatenated string"},"services.activemq.configurationDir":{"declarations":["nixos/modules/services/amqp/activemq/default.nix"],"default":"${pkgs.activemq}/conf","description":"The base directory for ActiveMQ's configuration.\nBy default, this directory is searched for a file named activemq.xml,\nwhich should contain the configuration for the broker service.\n","loc":["services","activemq","configurationDir"],"readOnly":false,"type":"unspecified"},"services.activemq.configurationURI":{"declarations":["nixos/modules/services/amqp/activemq/default.nix"],"default":"xbean:activemq.xml","description":"The URI that is passed along to the BrokerFactory to\nset up the configuration of the ActiveMQ broker service.\nYou should not need to change this. For custom configuration,\nset the <literal>configurationDir</literal> instead, and create\nan activemq.xml configuration file in it.\n","loc":["services","activemq","configurationURI"],"readOnly":false,"type":"Concatenated string"},"services.activemq.enable":{"declarations":["nixos/modules/services/amqp/activemq/default.nix"],"default":false,"description":"Enable the Apache ActiveMQ message broker service.\n","loc":["services","activemq","enable"],"readOnly":false,"type":"boolean"},"services.activemq.extraJavaOptions":{"declarations":["nixos/modules/services/amqp/activemq/default.nix"],"default":"","description":"Add extra options here that you want to be sent to the\nJava runtime when the broker service is started.\n","example":"-Xmx2G -Xms2G -XX:MaxPermSize=512M","loc":["services","activemq","extraJavaOptions"],"readOnly":false,"type":"Concatenated string"},"services.activemq.javaProperties":{"declarations":["nixos/modules/services/amqp/activemq/default.nix"],"default":{},"description":"Specifies Java properties that are sent to the ActiveMQ\nbroker service with the \"-D\" option. You can set properties\nhere to change the behaviour and configuration of the broker.\nAll essential properties that are not set here are automatically\ngiven reasonable defaults.\n","example":{"java.net.preferIPv4Stack":"true"},"loc":["services","activemq","javaProperties"],"readOnly":false,"type":"attribute set"},"services.actkbd.bindings":{"declarations":["nixos/modules/services/hardware/actkbd.nix"],"default":[],"description":"Key bindings for <command>actkbd</command>.\n\nSee <command>actkbd</command> <filename>README</filename> for documentation.\n\nThe example shows a piece of what <option>sound.enableMediaKeys</option> does when enabled.\n","example":{"_type":"literalExample","text":"[ { keys = [ 113 ]; events = [ \"key\" ]; command = \"${pkgs.alsaUtils}/bin/amixer -q set Master toggle\"; }\n]\n"},"loc":["services","actkbd","bindings"],"readOnly":false,"type":"list of submodules"},"services.actkbd.bindings.*.attributes":{"declarations":["nixos/modules/services/hardware/actkbd.nix"],"default":["exec"],"description":"List of attributes.","loc":["services","actkbd","bindings","*","attributes"],"readOnly":false,"type":"list of strings"},"services.actkbd.bindings.*.command":{"declarations":["nixos/modules/services/hardware/actkbd.nix"],"default":"","description":"What to run.","loc":["services","actkbd","bindings","*","command"],"readOnly":false,"type":"string"},"services.actkbd.bindings.*.events":{"declarations":["nixos/modules/services/hardware/actkbd.nix"],"default":["key"],"description":"List of events to match.","loc":["services","actkbd","bindings","*","events"],"readOnly":false,"type":"list of one of \"key\", \"rep\", \"rel\"s"},"services.actkbd.bindings.*.keys":{"declarations":["nixos/modules/services/hardware/actkbd.nix"],"description":"List of keycodes to match.","loc":["services","actkbd","bindings","*","keys"],"readOnly":false,"type":"list of signed integers"},"services.actkbd.enable":{"declarations":["nixos/modules/services/hardware/actkbd.nix"],"default":false,"description":"Whether to enable the <command>actkbd</command> key mapping daemon.\n\nTurning this on will start an <command>actkbd</command>\ninstance for every evdev input that has at least one key\n(which is okay even for systems with tiny memory footprint,\nsince actkbd normally uses &lt;100 bytes of memory per\ninstance).\n\nThis allows binding keys globally without the need for e.g.\nX11.\n","loc":["services","actkbd","enable"],"readOnly":false,"type":"boolean"},"services.actkbd.extraConfig":{"declarations":["nixos/modules/services/hardware/actkbd.nix"],"default":"","description":"Literal contents to append to the end of actkbd configuration file.\n","loc":["services","actkbd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.aerospike.enable":{"declarations":["nixos/modules/services/databases/aerospike.nix"],"default":false,"description":"Whether to enable Aerospike server.","example":true,"loc":["services","aerospike","enable"],"readOnly":false,"type":"boolean"},"services.aerospike.extraConfig":{"declarations":["nixos/modules/services/databases/aerospike.nix"],"default":"","description":"Extra configuration","example":"namespace test {\n  replication-factor 2\n  memory-size 4G\n  default-ttl 30d\n  storage-engine memory\n}\n","loc":["services","aerospike","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.aerospike.networkConfig":{"declarations":["nixos/modules/services/databases/aerospike.nix"],"default":"service {\n  address any\n  port 3000\n}\n\nheartbeat {\n  address any\n  mode mesh\n  port 3002\n  interval 150\n  timeout 10\n}\n\nfabric {\n  address any\n  port 3001\n}\n\ninfo {\n  address any\n  port 3003\n}\n","description":"network section of configuration file","loc":["services","aerospike","networkConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.aerospike.package":{"declarations":["nixos/modules/services/databases/aerospike.nix"],"default":"aerospike-server-4.2.0.4","description":"Which Aerospike derivation to use","loc":["services","aerospike","package"],"readOnly":false,"type":"package"},"services.aerospike.workDir":{"declarations":["nixos/modules/services/databases/aerospike.nix"],"default":"/var/lib/aerospike","description":"Location where Aerospike stores its files","loc":["services","aerospike","workDir"],"readOnly":false,"type":"string"},"services.airsonic.contextPath":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":"/","description":"The context path, i.e., the last part of the Airsonic\nURL. Typically '/' or '/airsonic'. Default '/'\n","loc":["services","airsonic","contextPath"],"readOnly":false,"type":"path"},"services.airsonic.enable":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":false,"description":"Whether to enable Airsonic, the Free and Open Source media streaming server (fork of Subsonic and Libresonic).","example":true,"loc":["services","airsonic","enable"],"readOnly":false,"type":"boolean"},"services.airsonic.home":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":"/var/lib/airsonic","description":"The directory where Airsonic will create files.\nMake sure it is writable.\n","loc":["services","airsonic","home"],"readOnly":false,"type":"path"},"services.airsonic.jvmOptions":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":[],"description":"Extra command line options for the JVM running AirSonic.\nUseful for sending jukebox output to non-default alsa\ndevices.\n","example":["-Djavax.sound.sampled.Clip='#CODEC [plughw:1,0]'","-Djavax.sound.sampled.Port='#Port CODEC [hw:1]'","-Djavax.sound.sampled.SourceDataLine='#CODEC [plughw:1,0]'","-Djavax.sound.sampled.TargetDataLine='#CODEC [plughw:1,0]'"],"loc":["services","airsonic","jvmOptions"],"readOnly":false,"type":"list of strings"},"services.airsonic.listenAddress":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":"127.0.0.1","description":"The host name or IP address on which to bind Airsonic.\nOnly relevant if you have multiple network interfaces and want\nto make Airsonic available on only one of them. The default value\nwill bind Airsonic to all available network interfaces.\n","loc":["services","airsonic","listenAddress"],"readOnly":false,"type":"Concatenated string"},"services.airsonic.maxMemory":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":100,"description":"The memory limit (max Java heap size) in megabytes.\nDefault: 100\n","loc":["services","airsonic","maxMemory"],"readOnly":false,"type":"signed integer"},"services.airsonic.port":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":4040,"description":"The port on which Airsonic will listen for\nincoming HTTP traffic. Set to 0 to disable.\n","loc":["services","airsonic","port"],"readOnly":false,"type":"signed integer"},"services.airsonic.transcoders":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":["${pkgs.ffmpeg.bin}/bin/ffmpeg"],"description":"List of paths to transcoder executables that should be accessible\nfrom Airsonic. Symlinks will be created to each executable inside\n/var/lib/airsonic/transcoders.\n","loc":["services","airsonic","transcoders"],"readOnly":false,"type":"list of paths"},"services.airsonic.user":{"declarations":["nixos/modules/services/misc/airsonic.nix"],"default":"airsonic","description":"User account under which airsonic runs.","loc":["services","airsonic","user"],"readOnly":false,"type":"string"},"services.amule.dataDir":{"declarations":["nixos/modules/services/networking/amuled.nix"],"default":"/home/amule/","description":"The directory holding configuration, incoming and temporary files.\n","loc":["services","amule","dataDir"],"readOnly":false,"type":"unspecified"},"services.amule.enable":{"declarations":["nixos/modules/services/networking/amuled.nix"],"default":false,"description":"Whether to run the AMule daemon. You need to manually run \"amuled --ec-config\" to configure the service for the first time.\n","loc":["services","amule","enable"],"readOnly":false,"type":"unspecified"},"services.amule.user":{"declarations":["nixos/modules/services/networking/amuled.nix"],"default":null,"description":"The user the AMule daemon should run as.\n","loc":["services","amule","user"],"readOnly":false,"type":"unspecified"},"services.apache-kafka.brokerId":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":-1,"description":"Broker ID.","loc":["services","apache-kafka","brokerId"],"readOnly":false,"type":"signed integer"},"services.apache-kafka.enable":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":false,"description":"Whether to enable Apache Kafka.","loc":["services","apache-kafka","enable"],"readOnly":false,"type":"boolean"},"services.apache-kafka.extraProperties":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":null,"description":"Extra properties for server.properties.","loc":["services","apache-kafka","extraProperties"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.apache-kafka.hostname":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":"localhost","description":"Hostname the broker should bind to.","loc":["services","apache-kafka","hostname"],"readOnly":false,"type":"Concatenated string"},"services.apache-kafka.jvmOptions":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":["-server","-Xmx1G","-Xms1G","-XX:+UseCompressedOops","-XX:+UseParNewGC","-XX:+UseConcMarkSweepGC","-XX:+CMSClassUnloadingEnabled","-XX:+CMSScavengeBeforeRemark","-XX:+DisableExplicitGC","-Djava.awt.headless=true","-Djava.net.preferIPv4Stack=true"],"description":"Extra command line options for the JVM running Kafka.","example":["-Djava.net.preferIPv4Stack=true","-Dcom.sun.management.jmxremote","-Dcom.sun.management.jmxremote.local.only=true"],"loc":["services","apache-kafka","jvmOptions"],"readOnly":false,"type":"list of strings"},"services.apache-kafka.log4jProperties":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":"log4j.rootLogger=INFO, stdout \n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n","description":"Kafka log4j property configuration.","loc":["services","apache-kafka","log4jProperties"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.apache-kafka.logDirs":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":["/tmp/kafka-logs"],"description":"Log file directories","loc":["services","apache-kafka","logDirs"],"readOnly":false,"type":"list of paths"},"services.apache-kafka.package":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":"pkgs.apacheKafka","description":"The kafka package to use","loc":["services","apache-kafka","package"],"readOnly":false,"type":"package"},"services.apache-kafka.port":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":9092,"description":"Port number the broker should listen on.","loc":["services","apache-kafka","port"],"readOnly":false,"type":"signed integer"},"services.apache-kafka.serverProperties":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":null,"description":"Complete server.properties content. Other server.properties config\noptions will be ignored if this option is used.\n","loc":["services","apache-kafka","serverProperties"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.apache-kafka.zookeeper":{"declarations":["nixos/modules/services/misc/apache-kafka.nix"],"default":"localhost:2181","description":"Zookeeper connection string","loc":["services","apache-kafka","zookeeper"],"readOnly":false,"type":"Concatenated string"},"services.apcupsd.configText":{"declarations":["nixos/modules/services/monitoring/apcupsd.nix"],"default":"UPSTYPE usb\nNISIP 127.0.0.1\nBATTERYLEVEL 50\nMINUTES 5\n","description":"Contents of the runtime configuration file, apcupsd.conf. The default\nsettings makes apcupsd autodetect USB UPSes, limit network access to\nlocalhost and shutdown the system when the battery level is below 50\npercent, or when the UPS has calculated that it has 5 minutes or less\nof remaining power-on time. See man apcupsd.conf for details.\n","loc":["services","apcupsd","configText"],"readOnly":false,"type":"Concatenated string"},"services.apcupsd.enable":{"declarations":["nixos/modules/services/monitoring/apcupsd.nix"],"default":false,"description":"Whether to enable the APC UPS daemon. apcupsd monitors your UPS and\npermits orderly shutdown of your computer in the event of a power\nfailure. User manual: http://www.apcupsd.com/manual/manual.html.\nNote that apcupsd runs as root (to allow shutdown of computer).\nYou can check the status of your UPS with the \"apcaccess\" command.\n","loc":["services","apcupsd","enable"],"readOnly":false,"type":"boolean"},"services.apcupsd.hooks":{"declarations":["nixos/modules/services/monitoring/apcupsd.nix"],"default":{},"description":"Each attribute in this option names an apcupsd event and the string\nvalue it contains will be executed in a shell, in response to that\nevent (prior to the default action). See \"man apccontrol\" for the\nlist of events and what they represent.\n\nA hook script can stop apccontrol from doing its default action by\nexiting with value 99. Do not do this unless you know what you're\ndoing.\n","example":{"doshutdown":"# shell commands to notify that the computer is shutting down"},"loc":["services","apcupsd","hooks"],"readOnly":false,"type":"attribute set of Concatenated strings"},"services.arbtt.enable":{"declarations":["nixos/modules/services/monitoring/arbtt.nix"],"default":false,"description":"Enable the arbtt statistics capture service.\n","loc":["services","arbtt","enable"],"readOnly":false,"type":"boolean"},"services.arbtt.logFile":{"declarations":["nixos/modules/services/monitoring/arbtt.nix"],"default":"%h/.arbtt/capture.log","description":"The log file for captured samples.\n","example":"/home/username/.arbtt-capture.log","loc":["services","arbtt","logFile"],"readOnly":false,"type":"string"},"services.arbtt.package":{"declarations":["nixos/modules/services/monitoring/arbtt.nix"],"default":"pkgs.haskellPackages.arbtt","description":"The package to use for the arbtt binaries.\n","example":{"_type":"literalExample","text":"pkgs.haskellPackages.arbtt"},"loc":["services","arbtt","package"],"readOnly":false,"type":"package"},"services.arbtt.sampleRate":{"declarations":["nixos/modules/services/monitoring/arbtt.nix"],"default":60,"description":"The sampling interval in seconds.\n","example":120,"loc":["services","arbtt","sampleRate"],"readOnly":false,"type":"signed integer"},"services.aria2.downloadDir":{"declarations":["nixos/modules/services/networking/aria2.nix"],"default":"/var/lib/aria2/Downloads","description":"Directory to store downloaded files.\n","loc":["services","aria2","downloadDir"],"readOnly":false,"type":"Concatenated string"},"services.aria2.enable":{"declarations":["nixos/modules/services/networking/aria2.nix"],"default":false,"description":"Whether or not to enable the headless Aria2 daemon service.\n\nAria2 daemon can be controlled via the RPC interface using\none of many WebUI (http://localhost:6800/ by default).\n\nTargets are downloaded to /var/lib/aria2/Downloads by default and are\naccessible to users in the \"aria2\" group.\n","loc":["services","aria2","enable"],"readOnly":false,"type":"boolean"},"services.aria2.extraArguments":{"declarations":["nixos/modules/services/networking/aria2.nix"],"default":"","description":"Additional arguments to be passed to Aria2.\n","example":"--rpc-listen-all --remote-time=true","loc":["services","aria2","extraArguments"],"readOnly":false,"type":"Concatenated string"},"services.aria2.listenPortRange":{"declarations":["nixos/modules/services/networking/aria2.nix"],"default":[{"from":6881,"to":6999}],"description":"Set UDP listening port range used by DHT(IPv4, IPv6) and UDP tracker.\n","loc":["services","aria2","listenPortRange"],"readOnly":false,"type":"list of attribute sets"},"services.aria2.openPorts":{"declarations":["nixos/modules/services/networking/aria2.nix"],"default":false,"description":"Open listen and RPC ports found in listenPortRange and rpcListenPort\noptions in the firewall.\n","loc":["services","aria2","openPorts"],"readOnly":false,"type":"boolean"},"services.aria2.rpcListenPort":{"declarations":["nixos/modules/services/networking/aria2.nix"],"default":6800,"description":"Specify a port number for JSON-RPC/XML-RPC server to listen to. Possible Values: 1024-65535","loc":["services","aria2","rpcListenPort"],"readOnly":false,"type":"signed integer"},"services.aria2.rpcSecret":{"declarations":["nixos/modules/services/networking/aria2.nix"],"default":"aria2rpc","description":"Set RPC secret authorization token.\nRead https://aria2.github.io/manual/en/html/aria2c.html#rpc-auth to know how this option value is used.\n","loc":["services","aria2","rpcSecret"],"readOnly":false,"type":"Concatenated string"},"services.asterisk.confFiles":{"declarations":["nixos/modules/services/networking/asterisk.nix"],"default":{},"description":"Sets the content of config files (typically ending with\n<literal>.conf</literal>) in the Asterisk configuration directory.\n\nNote that if you want to change <literal>asterisk.conf</literal>, it\nis preferable to use the <option>services.asterisk.extraConfig</option>\noption over this option. If <literal>\"asterisk.conf\"</literal> is\nspecified with the <option>confFiles</option> option (not recommended),\nyou must be prepared to set your own <literal>astetcdir</literal>\npath.\n\nSee\n<link xlink:href=\"http://www.asterisk.org/community/documentation\"/>\nfor more examples of what is possible here.\n","example":{"_type":"literalExample","text":"{\n  \"extensions.conf\" = ''\n    [tests]\n    ; Dial 100 for \"hello, world\"\n    exten => 100,1,Answer()\n    same  =>     n,Wait(1)\n    same  =>     n,Playback(hello-world)\n    same  =>     n,Hangup()\n\n    [softphones]\n    include => tests\n\n    [unauthorized]\n  '';\n  \"sip.conf\" = ''\n    [general]\n    allowguest=no              ; Require authentication\n    context=unauthorized       ; Send unauthorized users to /dev/null\n    srvlookup=no               ; Don't do DNS lookup\n    udpbindaddr=0.0.0.0        ; Listen on all interfaces\n    nat=force_rport,comedia    ; Assume device is behind NAT\n\n    [softphone](!)\n    type=friend                ; Match on username first, IP second\n    context=softphones         ; Send to softphones context in\n                               ; extensions.conf file\n    host=dynamic               ; Device will register with asterisk\n    disallow=all               ; Manually specify codecs to allow\n    allow=g722\n    allow=ulaw\n    allow=alaw\n\n    [myphone](softphone)\n    secret=GhoshevFew          ; Change this password!\n  '';\n  \"logger.conf\" = ''\n    [general]\n\n    [logfiles]\n    ; Add debug output to log\n    syslog.local0 => notice,warning,error,debug\n  '';\n}\n"},"loc":["services","asterisk","confFiles"],"readOnly":false,"type":"attribute set of strings"},"services.asterisk.enable":{"declarations":["nixos/modules/services/networking/asterisk.nix"],"default":false,"description":"Whether to enable the Asterisk PBX server.\n","loc":["services","asterisk","enable"],"readOnly":false,"type":"boolean"},"services.asterisk.extraArguments":{"declarations":["nixos/modules/services/networking/asterisk.nix"],"default":[],"description":"Additional command line arguments to pass to Asterisk.\n","example":["-vvvddd","-e","1024"],"loc":["services","asterisk","extraArguments"],"readOnly":false,"type":"list of strings"},"services.asterisk.extraConfig":{"declarations":["nixos/modules/services/networking/asterisk.nix"],"default":"","description":"Extra configuration options appended to the default\n<literal>asterisk.conf</literal> file.\n","example":"[options]\nverbose=3\ndebug=3\n","loc":["services","asterisk","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.asterisk.package":{"declarations":["nixos/modules/services/networking/asterisk.nix"],"default":"pkgs.asterisk","description":"The Asterisk package to use.","loc":["services","asterisk","package"],"readOnly":false,"type":"package"},"services.asterisk.useTheseDefaultConfFiles":{"declarations":["nixos/modules/services/networking/asterisk.nix"],"default":["ari.conf","acl.conf","agents.conf","amd.conf","calendar.conf","cdr.conf","cdr_syslog.conf","cdr_custom.conf","cel.conf","cel_custom.conf","cli_aliases.conf","confbridge.conf","dundi.conf","features.conf","hep.conf","iax.conf","pjsip.conf","pjsip_wizard.conf","phone.conf","phoneprov.conf","queues.conf","res_config_sqlite3.conf","res_parking.conf","statsd.conf","udptl.conf","unistim.conf"],"description":"Sets these config files to the default content. The default value for\n          this option contains all necesscary files to avoid errors at startup.\n          This does not override settings via <option>services.asterisk.confFiles</option>.\n","example":["sip.conf","dundi.conf"],"loc":["services","asterisk","useTheseDefaultConfFiles"],"readOnly":false,"type":"list of strings"},"services.atd.allowEveryone":{"declarations":["nixos/modules/services/scheduling/atd.nix"],"default":false,"description":"Whether to make <filename>/var/spool/at{jobs,spool}</filename>\nwriteable by everyone (and sticky).  This is normally not\nneeded since the <command>at</command> commands are\nsetuid/setgid <literal>atd</literal>.\n","loc":["services","atd","allowEveryone"],"readOnly":false,"type":"boolean"},"services.atd.enable":{"declarations":["nixos/modules/services/scheduling/atd.nix"],"default":false,"description":"Whether to enable the <command>at</command> daemon, a command scheduler.\n","loc":["services","atd","enable"],"readOnly":false,"type":"boolean"},"services.atftpd.enable":{"declarations":["nixos/modules/services/networking/atftpd.nix"],"default":false,"description":"Whether to enable the atftpd TFTP server. By default, the server\nbinds to address 0.0.0.0.\n","loc":["services","atftpd","enable"],"readOnly":false,"type":"boolean"},"services.atftpd.extraOptions":{"declarations":["nixos/modules/services/networking/atftpd.nix"],"default":[],"description":"Extra command line arguments to pass to atftp.\n","example":{"_type":"literalExample","text":"[ \"--bind-address 192.168.9.1\"\n  \"--verbose=7\"\n]\n"},"loc":["services","atftpd","extraOptions"],"readOnly":false,"type":"list of strings"},"services.atftpd.root":{"declarations":["nixos/modules/services/networking/atftpd.nix"],"default":"/srv/tftp","description":"Document root directory for the atftpd.\n","loc":["services","atftpd","root"],"readOnly":false,"type":"path"},"services.autofs.autoMaster":{"declarations":["nixos/modules/services/misc/autofs.nix"],"description":"Contents of <literal>/etc/auto.master</literal> file. See <command>auto.master(5)</command> and <command>autofs(5)</command>.\n","example":{"_type":"literalExample","text":"let\n  mapConf = pkgs.writeText \"auto\" ''\n   kernel    -ro,soft,intr       ftp.kernel.org:/pub/linux\n   boot      -fstype=ext2        :/dev/hda1\n   windoze   -fstype=smbfs       ://windoze/c\n   removable -fstype=ext2        :/dev/hdd\n   cd        -fstype=iso9660,ro  :/dev/hdc\n   floppy    -fstype=auto        :/dev/fd0\n   server    -rw,hard,intr       / -ro myserver.me.org:/ \\\n                                 /usr myserver.me.org:/usr \\\n                                 /home myserver.me.org:/home\n  '';\nin ''\n  /auto file:${mapConf}\n''\n"},"loc":["services","autofs","autoMaster"],"readOnly":false,"type":"string"},"services.autofs.debug":{"declarations":["nixos/modules/services/misc/autofs.nix"],"default":false,"description":"Pass -d and -7 to automount and write log to the system journal.\n","loc":["services","autofs","debug"],"readOnly":false,"type":"unspecified"},"services.autofs.enable":{"declarations":["nixos/modules/services/misc/autofs.nix"],"default":false,"description":"Mount filesystems on demand. Unmount them automatically.\nYou may also be interested in afuse.\n","loc":["services","autofs","enable"],"readOnly":false,"type":"unspecified"},"services.autofs.timeout":{"declarations":["nixos/modules/services/misc/autofs.nix"],"default":600,"description":"Set the global minimum timeout, in seconds, until directories are unmounted","loc":["services","autofs","timeout"],"readOnly":false,"type":"unspecified"},"services.autorandr.defaultTarget":{"declarations":["nixos/modules/services/misc/autorandr.nix"],"default":"default","description":"Fallback if no monitor layout can be detected. See the docs\n(https://github.com/phillipberndt/autorandr/blob/v1.0/README.md#how-to-use)\nfor further reference.\n","loc":["services","autorandr","defaultTarget"],"readOnly":false,"type":"string"},"services.autorandr.enable":{"declarations":["nixos/modules/services/misc/autorandr.nix"],"default":false,"description":"Whether to enable handling of hotplug and sleep events by autorandr.","example":true,"loc":["services","autorandr","enable"],"readOnly":false,"type":"boolean"},"services.autossh.sessions":{"declarations":["nixos/modules/services/networking/autossh.nix"],"default":[],"description":"List of AutoSSH sessions to start as systemd services. Each service is\nnamed 'autossh-{session.name}'.\n","example":[{"extraArguments":"-N -D4343 billremote@socks.host.net","monitoringPort":20000,"name":"socks-peer","user":"bill"}],"loc":["services","autossh","sessions"],"readOnly":false,"type":"list of submodules"},"services.autossh.sessions.*.extraArguments":{"declarations":["nixos/modules/services/networking/autossh.nix"],"description":"Arguments to be passed to AutoSSH and retransmitted to SSH\nprocess. Some meaningful options include -N (don't run remote\ncommand), -D (open SOCKS proxy on local port), -R (forward\nremote port), -L (forward local port), -v (Enable debug). Check\nssh manual for the complete list.\n","example":"-N -D4343 bill@socks.example.net","loc":["services","autossh","sessions","*","extraArguments"],"readOnly":false,"type":"Concatenated string"},"services.autossh.sessions.*.monitoringPort":{"declarations":["nixos/modules/services/networking/autossh.nix"],"default":0,"description":"Port to be used by AutoSSH for peer monitoring. Note, that\nAutoSSH also uses mport+1. Value of 0 disables the keep-alive\nstyle monitoring\n","example":20000,"loc":["services","autossh","sessions","*","monitoringPort"],"readOnly":false,"type":"signed integer"},"services.autossh.sessions.*.name":{"declarations":["nixos/modules/services/networking/autossh.nix"],"description":"Name of the local AutoSSH session","example":"socks-peer","loc":["services","autossh","sessions","*","name"],"readOnly":false,"type":"Concatenated string"},"services.autossh.sessions.*.user":{"declarations":["nixos/modules/services/networking/autossh.nix"],"description":"Name of the user the AutoSSH session should run as","example":"bill","loc":["services","autossh","sessions","*","user"],"readOnly":false,"type":"Concatenated string"},"services.avahi.allowPointToPoint":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to use POINTTOPOINT interfaces. Might make mDNS unreliable due to usually large\nlatencies with such links and opens a potential security hole by allowing mDNS access from Internet\nconnections. Use with care and YMMV!\n","loc":["services","avahi","allowPointToPoint"],"readOnly":false,"type":"unspecified"},"services.avahi.browseDomains":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":[],"description":"List of non-local DNS domains to be browsed.\n","example":["0pointer.de","zeroconf.org"],"loc":["services","avahi","browseDomains"],"readOnly":false,"type":"unspecified"},"services.avahi.cacheEntriesMax":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":null,"description":"Number of resource records to be cached per interface. Use 0 to\ndisable caching. Avahi daemon defaults to 4096 if not set.\n","loc":["services","avahi","cacheEntriesMax"],"readOnly":false,"type":"null or signed integer"},"services.avahi.domainName":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":"local","description":"Domain name for all advertisements.\n","loc":["services","avahi","domainName"],"readOnly":false,"type":"string"},"services.avahi.enable":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to run the Avahi daemon, which allows Avahi clients\nto use Avahi's service discovery facilities and also allows\nthe local machine to advertise its presence and services\n(through the mDNS responder implemented by `avahi-daemon').\n","loc":["services","avahi","enable"],"readOnly":false,"type":"unspecified"},"services.avahi.extraConfig":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":"","description":"Extra config to append to avahi-daemon.conf.\n","loc":["services","avahi","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.avahi.hostName":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"description":"Host name advertised on the LAN. If not set, avahi will use the value\nof config.networking.hostName.\n","loc":["services","avahi","hostName"],"readOnly":false,"type":"string"},"services.avahi.interfaces":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":null,"description":"List of network interfaces that should be used by the <command>avahi-daemon</command>.\nOther interfaces will be ignored. If <literal>null</literal> all local interfaces\nexcept loopback and point-to-point will be used.\n","loc":["services","avahi","interfaces"],"readOnly":false,"type":"null or list of strings"},"services.avahi.ipv4":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":true,"description":"Whether to use IPv4","loc":["services","avahi","ipv4"],"readOnly":false,"type":"unspecified"},"services.avahi.ipv6":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to use IPv6","loc":["services","avahi","ipv6"],"readOnly":false,"type":"unspecified"},"services.avahi.nssmdns":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to enable the mDNS NSS (Name Service Switch) plug-in.\nEnabling it allows applications to resolve names in the `.local'\ndomain by transparently querying the Avahi daemon.\n","loc":["services","avahi","nssmdns"],"readOnly":false,"type":"unspecified"},"services.avahi.publish.addresses":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to register mDNS address records for all local IP addresses.","loc":["services","avahi","publish","addresses"],"readOnly":false,"type":"unspecified"},"services.avahi.publish.domain":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to announce the locally used domain name for browsing by other hosts.","loc":["services","avahi","publish","domain"],"readOnly":false,"type":"unspecified"},"services.avahi.publish.enable":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to allow publishing in general.","loc":["services","avahi","publish","enable"],"readOnly":false,"type":"unspecified"},"services.avahi.publish.hinfo":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to register an mDNS HINFO record which contains information about the\nlocal operating system and CPU.\n","loc":["services","avahi","publish","hinfo"],"readOnly":false,"type":"unspecified"},"services.avahi.publish.userServices":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to publish user services. Will set <literal>addresses=true</literal>.","loc":["services","avahi","publish","userServices"],"readOnly":false,"type":"unspecified"},"services.avahi.publish.workstation":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Whether to register a service of type \"_workstation._tcp\" on the local LAN.","loc":["services","avahi","publish","workstation"],"readOnly":false,"type":"unspecified"},"services.avahi.reflector":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":false,"description":"Reflect incoming mDNS requests to all allowed network interfaces.","loc":["services","avahi","reflector"],"readOnly":false,"type":"unspecified"},"services.avahi.wideArea":{"declarations":["nixos/modules/services/networking/avahi-daemon.nix"],"default":true,"description":"Whether to enable wide-area service discovery.","loc":["services","avahi","wideArea"],"readOnly":false,"type":"unspecified"},"services.awstats.enable":{"declarations":["nixos/modules/services/logging/awstats.nix"],"default":false,"description":"Enable the awstats program (but not service).\nCurrently only simple httpd (Apache) configs are supported,\nand awstats plugins may not work correctly.\n","loc":["services","awstats","enable"],"readOnly":false,"type":"boolean"},"services.awstats.extraConfig":{"declarations":["nixos/modules/services/logging/awstats.nix"],"default":"","description":"Extra configuration to be appendend to awstats.conf.","loc":["services","awstats","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.awstats.service.enable":{"declarations":["nixos/modules/services/logging/awstats.nix"],"default":false,"description":"Enable the awstats web service. This switches on httpd.","loc":["services","awstats","service","enable"],"readOnly":false,"type":"boolean"},"services.awstats.service.urlPrefix":{"declarations":["nixos/modules/services/logging/awstats.nix"],"default":"/awstats","description":"The URL prefix under which the awstats service appears.","loc":["services","awstats","service","urlPrefix"],"readOnly":false,"type":"Concatenated string"},"services.awstats.updateAt":{"declarations":["nixos/modules/services/logging/awstats.nix"],"default":null,"description":"Specification of the time at which awstats will get updated.\n(in the format described by <citerefentry>\n  <refentrytitle>systemd.time</refentrytitle>\n  <manvolnum>7</manvolnum></citerefentry>)\n","example":"hourly","loc":["services","awstats","updateAt"],"readOnly":false,"type":"null or Concatenated string"},"services.awstats.vardir":{"declarations":["nixos/modules/services/logging/awstats.nix"],"default":"/var/lib/awstats","description":"The directory where variable awstats data will be stored.","loc":["services","awstats","vardir"],"readOnly":false,"type":"path"},"services.babeld.enable":{"declarations":["nixos/modules/services/networking/babeld.nix"],"default":false,"description":"Whether to run the babeld network routing daemon.\n","loc":["services","babeld","enable"],"readOnly":false,"type":"unspecified"},"services.babeld.extraConfig":{"declarations":["nixos/modules/services/networking/babeld.nix"],"default":"","description":"Options that will be copied to babeld.conf.\nSee <citerefentry><refentrytitle>babeld</refentrytitle><manvolnum>8</manvolnum></citerefentry> for details.\n","loc":["services","babeld","extraConfig"],"readOnly":false,"type":"unspecified"},"services.babeld.interfaceDefaults":{"declarations":["nixos/modules/services/networking/babeld.nix"],"default":null,"description":"A set describing default parameters for babeld interfaces.\nSee <citerefentry><refentrytitle>babeld</refentrytitle><manvolnum>8</manvolnum></citerefentry> for options.\n","example":{"split-horizon":true,"type":"tunnel"},"loc":["services","babeld","interfaceDefaults"],"readOnly":false,"type":"null or attribute set of unspecifieds"},"services.babeld.interfaces":{"declarations":["nixos/modules/services/networking/babeld.nix"],"default":{},"description":"A set describing babeld interfaces.\nSee <citerefentry><refentrytitle>babeld</refentrytitle><manvolnum>8</manvolnum></citerefentry> for options.\n","example":{"enp0s2":{"hello-interval":5,"split-horizon":"auto","type":"wired"}},"loc":["services","babeld","interfaces"],"readOnly":false,"type":"attribute set of attribute set of unspecifiedss"},"services.bacula-dir.enable":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":false,"description":"Whether to enable Bacula Director Daemon.\n","loc":["services","bacula-dir","enable"],"readOnly":false,"type":"boolean"},"services.bacula-dir.extraConfig":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"","description":"Extra configuration for Bacula Director Daemon.\n","example":"TODO\n","loc":["services","bacula-dir","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.bacula-dir.extraDirectorConfig":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"","description":"Extra configuration to be passed in Director directive.\n","example":"Maximum Concurrent Jobs = 20;\nHeartbeat Interval = 30;\n","loc":["services","bacula-dir","extraDirectorConfig"],"readOnly":false,"type":"unspecified"},"services.bacula-dir.extraMessagesConfig":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"","description":"Extra configuration to be passed in Messages directive.\n","example":"console = all\n","loc":["services","bacula-dir","extraMessagesConfig"],"readOnly":false,"type":"unspecified"},"services.bacula-dir.name":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"nixos-dir","description":"The director name used by the system administrator. This directive is required.\n","loc":["services","bacula-dir","name"],"readOnly":false,"type":"unspecified"},"services.bacula-dir.password":{"declarations":["nixos/modules/services/backup/bacula.nix"],"description":"Specifies the password that must be supplied for a Director.\n","loc":["services","bacula-dir","password"],"readOnly":false,"type":"unspecified"},"services.bacula-dir.port":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":9101,"description":"Specify the port (a positive integer) on which the Director daemon will listen for Bacula Console connections. This same port number must be specified in the Director resource of the Console configuration file. The default is 9101, so normally this directive need not be specified. This directive should not be used if you specify DirAddresses (N.B plural) directive.\n","loc":["services","bacula-dir","port"],"readOnly":false,"type":"signed integer"},"services.bacula-fd.director":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":{},"description":"This option defines director resources in Bacula File Daemon.\n","loc":["services","bacula-fd","director"],"readOnly":false,"type":"attribute set of submodules"},"services.bacula-fd.director.<name>.monitor":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"no","description":"If Monitor is set to no (default), this director will have full \n","example":"yes","loc":["services","bacula-fd","director","<name>","monitor"],"readOnly":false,"type":"unspecified"},"services.bacula-fd.director.<name>.password":{"declarations":["nixos/modules/services/backup/bacula.nix"],"description":"Specifies the password that must be supplied for a Director to b\n","loc":["services","bacula-fd","director","<name>","password"],"readOnly":false,"type":"unspecified"},"services.bacula-fd.enable":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":false,"description":"Whether to enable the Bacula File Daemon.\n","loc":["services","bacula-fd","enable"],"readOnly":false,"type":"boolean"},"services.bacula-fd.extraClientConfig":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"","description":"Extra configuration to be passed in Client directive.\n","example":"Maximum Concurrent Jobs = 20;\nHeartbeat Interval = 30;\n","loc":["services","bacula-fd","extraClientConfig"],"readOnly":false,"type":"unspecified"},"services.bacula-fd.extraMessagesConfig":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"","description":"Extra configuration to be passed in Messages directive.\n","example":"console = all\n","loc":["services","bacula-fd","extraMessagesConfig"],"readOnly":false,"type":"unspecified"},"services.bacula-fd.name":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"nixos-fd","description":"The client name that must be used by the Director when connecting.\nGenerally, it is a good idea to use a name related to the machine\nso that error messages can be easily identified if you have multiple\nClients. This directive is required.\n","loc":["services","bacula-fd","name"],"readOnly":false,"type":"unspecified"},"services.bacula-fd.port":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":9102,"description":"This specifies the port number on which the Client listens for\nDirector connections. It must agree with the FDPort specified in\nthe Client resource of the Director's configuration file.\n","loc":["services","bacula-fd","port"],"readOnly":false,"type":"signed integer"},"services.bacula-sd.device":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":{},"description":"This option defines Device resources in Bacula Storage Daemon.\n","loc":["services","bacula-sd","device"],"readOnly":false,"type":"attribute set of submodules"},"services.bacula-sd.device.<name>.archiveDevice":{"declarations":["nixos/modules/services/backup/bacula.nix"],"description":"The specified name-string gives the system file name of the storage device managed by this storage daemon. This will usually be the device file name of a removable storage device (tape drive), for example \" /dev/nst0\" or \"/dev/rmt/0mbn\". For a DVD-writer, it will be for example /dev/hdc. It may also be a directory name if you are archiving to disk storage.\n","loc":["services","bacula-sd","device","<name>","archiveDevice"],"readOnly":false,"type":"unspecified"},"services.bacula-sd.device.<name>.extraDeviceConfig":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"","description":"Extra configuration to be passed in Device directive.\n","example":"LabelMedia = yes\nRandom Access = no\nAutomaticMount = no\nRemovableMedia = no\nMaximumOpenWait = 60\nAlwaysOpen = no\n","loc":["services","bacula-sd","device","<name>","extraDeviceConfig"],"readOnly":false,"type":"unspecified"},"services.bacula-sd.device.<name>.mediaType":{"declarations":["nixos/modules/services/backup/bacula.nix"],"description":"The specified name-string names the type of media supported by this device, for example, \"DLT7000\". Media type names are arbitrary in that you set them to anything you want, but they must be known to the volume database to keep track of which storage daemons can read which volumes. In general, each different storage type should have a unique Media Type associated with it. The same name-string must appear in the appropriate Storage resource definition in the Director's configuration file.\n","loc":["services","bacula-sd","device","<name>","mediaType"],"readOnly":false,"type":"unspecified"},"services.bacula-sd.director":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":{},"description":"This option defines Director resources in Bacula Storage Daemon.\n","loc":["services","bacula-sd","director"],"readOnly":false,"type":"attribute set of submodules"},"services.bacula-sd.director.<name>.monitor":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"no","description":"If Monitor is set to no (default), this director will have full \n","example":"yes","loc":["services","bacula-sd","director","<name>","monitor"],"readOnly":false,"type":"unspecified"},"services.bacula-sd.director.<name>.password":{"declarations":["nixos/modules/services/backup/bacula.nix"],"description":"Specifies the password that must be supplied for a Director to b\n","loc":["services","bacula-sd","director","<name>","password"],"readOnly":false,"type":"unspecified"},"services.bacula-sd.enable":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":false,"description":"Whether to enable Bacula Storage Daemon.\n","loc":["services","bacula-sd","enable"],"readOnly":false,"type":"boolean"},"services.bacula-sd.extraMessagesConfig":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"","description":"Extra configuration to be passed in Messages directive.\n","example":"console = all\n","loc":["services","bacula-sd","extraMessagesConfig"],"readOnly":false,"type":"unspecified"},"services.bacula-sd.extraStorageConfig":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"","description":"Extra configuration to be passed in Storage directive.\n","example":"Maximum Concurrent Jobs = 20;\nHeartbeat Interval = 30;\n","loc":["services","bacula-sd","extraStorageConfig"],"readOnly":false,"type":"unspecified"},"services.bacula-sd.name":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":"nixos-sd","description":"Specifies the Name of the Storage daemon.\n","loc":["services","bacula-sd","name"],"readOnly":false,"type":"unspecified"},"services.bacula-sd.port":{"declarations":["nixos/modules/services/backup/bacula.nix"],"default":9103,"description":"Specifies port number on which the Storage daemon listens for Director connections. The default is 9103.\n","loc":["services","bacula-sd","port"],"readOnly":false,"type":"signed integer"},"services.bamf.enable":{"declarations":["nixos/modules/services/desktops/bamf.nix"],"default":false,"description":"Whether to enable bamf.","example":true,"loc":["services","bamf","enable"],"readOnly":false,"type":"boolean"},"services.beegfs":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":{},"description":"BeeGFS configurations. Every mount point requires a separate configuration.\n","loc":["services","beegfs"],"readOnly":false,"type":"attribute set of submodules"},"services.beegfs.<name>.admon.enable":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":false,"description":"Whether to enable BeeGFS admon daemon.","example":true,"loc":["services","beegfs","<name>","admon","enable"],"readOnly":false,"type":"boolean"},"services.beegfs.<name>.admon.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":"","description":"Additional lines for beegfs-admon.conf. See documentation\nfor further details.\n","loc":["services","beegfs","<name>","admon","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.beegfs.<name>.client.enable":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":false,"description":"Whether to enable BeeGFS client.","example":true,"loc":["services","beegfs","<name>","client","enable"],"readOnly":false,"type":"boolean"},"services.beegfs.<name>.client.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":"","description":"Additional lines for beegfs-client.conf.\nSee documentation for further details.\n","loc":["services","beegfs","<name>","client","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.beegfs.<name>.client.mount":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":true,"description":"Create fstab entry automatically","loc":["services","beegfs","<name>","client","mount"],"readOnly":false,"type":"boolean"},"services.beegfs.<name>.client.mountPoint":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":"/run/beegfs","description":"Mount point under which the beegfs filesytem should be mounted.\nIf mounted manually the mount option specifing the config file is needed:\ncfgFile=/etc/beegfs/beegfs-client-&lt;name&gt;.conf\n","loc":["services","beegfs","<name>","client","mountPoint"],"readOnly":false,"type":"string"},"services.beegfs.<name>.connAuthFile":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":"","description":"File containing shared secret authentication.","example":"/etc/my.key","loc":["services","beegfs","<name>","connAuthFile"],"readOnly":false,"type":"string"},"services.beegfs.<name>.connPortShift":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":0,"description":"For each additional beegfs configuration shift all\nservice TCP/UDP ports by at least 5.\n","example":5,"loc":["services","beegfs","<name>","connPortShift"],"readOnly":false,"type":"signed integer"},"services.beegfs.<name>.helperd.enable":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":true,"description":"Enable the BeeGFS helperd.\nThe helpered is need for logging purposes on the client.\nDisabling <literal>helperd</literal> allows for runing the client\nwith <literal>allowUnfree = false</literal>.\n","loc":["services","beegfs","<name>","helperd","enable"],"readOnly":false,"type":"boolean"},"services.beegfs.<name>.helperd.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":"","description":"Additional lines for beegfs-helperd.conf. See documentation\nfor further details.\n","loc":["services","beegfs","<name>","helperd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.beegfs.<name>.meta.enable":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":false,"description":"Whether to enable BeeGFS meta data daemon.","example":true,"loc":["services","beegfs","<name>","meta","enable"],"readOnly":false,"type":"boolean"},"services.beegfs.<name>.meta.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":"","description":"Additional lines for beegfs-meta.conf. See documentation\nfor further details.\n","loc":["services","beegfs","<name>","meta","extraConfig"],"readOnly":false,"type":"string"},"services.beegfs.<name>.meta.storeDir":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":null,"description":"Data directory for meta data service.\nMust not be shared with other beegfs daemons.\nThe underlying filesystem must be mounted with xattr turned on.\nThis directory must exist and it must be initialized\nwith beegfs-setup-meta, e.g.\n\"beegfs-setup-meta -C -s &lt;serviceID&gt; -p &lt;storeDir&gt;\"\n","example":"/data/beegfs-meta","loc":["services","beegfs","<name>","meta","storeDir"],"readOnly":false,"type":"path"},"services.beegfs.<name>.mgmtd.enable":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":false,"description":"Whether to enable BeeGFS mgmtd daemon.","example":true,"loc":["services","beegfs","<name>","mgmtd","enable"],"readOnly":false,"type":"boolean"},"services.beegfs.<name>.mgmtd.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":"","description":"Additional lines for beegfs-mgmtd.conf. See documentation\nfor further details.\n","loc":["services","beegfs","<name>","mgmtd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.beegfs.<name>.mgmtd.storeDir":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":null,"description":"Data directory for mgmtd.\nMust not be shared with other beegfs daemons.\nThis directory must exist and it must be initialized\nwith beegfs-setup-mgmtd, e.g. \"beegfs-setup-mgmtd -C -p &lt;storeDir&gt;\"\n","example":"/data/beegfs-mgmtd","loc":["services","beegfs","<name>","mgmtd","storeDir"],"readOnly":false,"type":"path"},"services.beegfs.<name>.mgmtdHost":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":null,"description":"Hostname of managament host.","example":"master","loc":["services","beegfs","<name>","mgmtdHost"],"readOnly":false,"type":"string"},"services.beegfs.<name>.storage.enable":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":false,"description":"Whether to enable BeeGFS storage daemon.","example":true,"loc":["services","beegfs","<name>","storage","enable"],"readOnly":false,"type":"boolean"},"services.beegfs.<name>.storage.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":"","description":"Addional lines for beegfs-storage.conf. See documentation\nfor further details.\n","loc":["services","beegfs","<name>","storage","extraConfig"],"readOnly":false,"type":"string"},"services.beegfs.<name>.storage.storeDir":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":null,"description":"Data directories for storage service.\nMust not be shared with other beegfs daemons.\nThe underlying filesystem must be mounted with xattr turned on.\nThis directory must exist and it must be initialized\nwith beegfs-setup-storage, e.g.\n\"beegfs-setup-storage -C -s &lt;serviceID&gt; -i &lt;storageTargetID&gt; -p &lt;storeDir&gt;\"\n","example":"/data/beegfs-storage","loc":["services","beegfs","<name>","storage","storeDir"],"readOnly":false,"type":"path"},"services.beegfsEnable":{"declarations":["nixos/modules/services/network-filesystems/beegfs.nix"],"default":false,"description":"Whether to enable BeeGFS.","example":true,"loc":["services","beegfsEnable"],"readOnly":false,"type":"boolean"},"services.bepasty.enable":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":false,"description":"Whether to enable Bepasty servers.","example":true,"loc":["services","bepasty","enable"],"readOnly":false,"type":"boolean"},"services.bepasty.servers":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":{},"description":"configure a number of bepasty servers which will be started with\ngunicorn.\n","loc":["services","bepasty","servers"],"readOnly":false,"type":"attribute set of submodules"},"services.bepasty.servers.<name>.bind":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":"127.0.0.1:8000","description":"Bind address to be used for this server.\n","example":"0.0.0.0:8000","loc":["services","bepasty","servers","<name>","bind"],"readOnly":false,"type":"string"},"services.bepasty.servers.<name>.dataDir":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":"/var/lib/bepasty/data","description":"Path to the directory where the pastes will be saved to\n","loc":["services","bepasty","servers","<name>","dataDir"],"readOnly":false,"type":"string"},"services.bepasty.servers.<name>.defaultPermissions":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":"read","description":"default permissions for all unauthenticated accesses.\n","example":"read,create,delete","loc":["services","bepasty","servers","<name>","defaultPermissions"],"readOnly":false,"type":"string"},"services.bepasty.servers.<name>.extraConfig":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":"","description":"Extra configuration for bepasty server to be appended on the\nconfiguration.\nsee https://bepasty-server.readthedocs.org/en/latest/quickstart.html#configuring-bepasty\nfor all options.\n","example":"PERMISSIONS = {\n  'myadminsecret': 'admin,list,create,read,delete',\n}\nMAX_ALLOWED_FILE_SIZE = 5 * 1000 * 1000\n","loc":["services","bepasty","servers","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.bepasty.servers.<name>.secretKey":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":"","description":"server secret for safe session cookies, must be set.\n\nWarning: this secret is stored in the WORLD-READABLE Nix store!\n\nIt's recommended to use <option>secretKeyFile</option>\nwhich takes precedence over <option>secretKey</option>.\n","loc":["services","bepasty","servers","<name>","secretKey"],"readOnly":false,"type":"string"},"services.bepasty.servers.<name>.secretKeyFile":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":null,"description":"A file that contains the server secret for safe session cookies, must be set.\n\n<option>secretKeyFile</option> takes precedence over <option>secretKey</option>.\n\nWarning: when <option>secretKey</option> is non-empty <option>secretKeyFile</option>\ndefaults to a file in the WORLD-READABLE Nix store containing that secret.\n","loc":["services","bepasty","servers","<name>","secretKeyFile"],"readOnly":false,"type":"null or string"},"services.bepasty.servers.<name>.workDir":{"declarations":["nixos/modules/services/misc/bepasty.nix"],"default":"/var/lib/bepasty","description":"Path to the working directory (used for config and pidfile).\nDefaults to the users home directory.\n","loc":["services","bepasty","servers","<name>","workDir"],"readOnly":false,"type":"string"},"services.bind.blockedNetworks":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":[],"description":"\n          What networks are just blocked.\n        ","loc":["services","bind","blockedNetworks"],"readOnly":false,"type":"unspecified"},"services.bind.cacheNetworks":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":["127.0.0.0/24"],"description":"\n          What networks are allowed to use us as a resolver.\n        ","loc":["services","bind","cacheNetworks"],"readOnly":false,"type":"unspecified"},"services.bind.configFile":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":"confFile","description":"\n          Overridable config file to use for named. By default, that\n          generated by nixos.\n        ","loc":["services","bind","configFile"],"readOnly":false,"type":"path"},"services.bind.enable":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":false,"description":"\n          Whether to enable BIND domain name server.\n        ","loc":["services","bind","enable"],"readOnly":false,"type":"unspecified"},"services.bind.extraConfig":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":"","description":"\n          Extra lines to be added verbatim to the generated named configuration file.\n        ","loc":["services","bind","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.bind.extraOptions":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":"","description":"Extra lines to be added verbatim to the options section of the\ngenerated named configuration file.\n","loc":["services","bind","extraOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.bind.forwarders":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":[],"description":"\n          List of servers we should forward requests to.\n        ","loc":["services","bind","forwarders"],"readOnly":false,"type":"unspecified"},"services.bind.ipv4Only":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":false,"description":"\n          Only use ipv4, even if the host supports ipv6.\n        ","loc":["services","bind","ipv4Only"],"readOnly":false,"type":"unspecified"},"services.bind.listenOn":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":["any"],"description":"\n          Interfaces to listen on.\n        ","loc":["services","bind","listenOn"],"readOnly":false,"type":"list of strings"},"services.bind.listenOnIpv6":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":["any"],"description":"\n          Ipv6 interfaces to listen on.\n        ","loc":["services","bind","listenOnIpv6"],"readOnly":false,"type":"list of strings"},"services.bind.zones":{"declarations":["nixos/modules/services/networking/bind.nix"],"default":[],"description":"\n          List of zones we claim authority over.\n            master=false means slave server; slaves means addresses\n           who may request zone transfer.\n        ","example":[{"file":"/var/dns/example.com","master":false,"masters":["192.168.0.1"],"name":"example.com","slaves":[]}],"loc":["services","bind","zones"],"readOnly":false,"type":"unspecified"},"services.bird.config":{"declarations":["nixos/modules/services/networking/bird.nix"],"description":"BIRD Internet Routing Daemon configuration file.\n<link xlink:href='http://bird.network.cz/'/>\n","loc":["services","bird","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.bird.enable":{"declarations":["nixos/modules/services/networking/bird.nix"],"default":false,"description":"Whether to enable BIRD Internet Routing Daemon (1.9.x with IPv4 suport).","example":true,"loc":["services","bird","enable"],"readOnly":false,"type":"boolean"},"services.bird2.config":{"declarations":["nixos/modules/services/networking/bird.nix"],"description":"BIRD Internet Routing Daemon configuration file.\n<link xlink:href='http://bird.network.cz/'/>\n","loc":["services","bird2","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.bird2.enable":{"declarations":["nixos/modules/services/networking/bird.nix"],"default":false,"description":"Whether to enable BIRD Internet Routing Daemon (2.x).","example":true,"loc":["services","bird2","enable"],"readOnly":false,"type":"boolean"},"services.bird6.config":{"declarations":["nixos/modules/services/networking/bird.nix"],"description":"BIRD Internet Routing Daemon configuration file.\n<link xlink:href='http://bird.network.cz/'/>\n","loc":["services","bird6","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.bird6.enable":{"declarations":["nixos/modules/services/networking/bird.nix"],"default":false,"description":"Whether to enable BIRD Internet Routing Daemon (1.9.x with IPv6 suport).","example":true,"loc":["services","bird6","enable"],"readOnly":false,"type":"boolean"},"services.bitlbee.authBackend":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":"storage","description":"How users are authenticated\n  storage -- save passwords internally\n  pam -- Linux PAM authentication\n","loc":["services","bitlbee","authBackend"],"readOnly":false,"type":"one of \"storage\", \"pam\""},"services.bitlbee.authMode":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":"Open","description":"The following authentication modes are available:\n  Open -- Accept connections from anyone, use NickServ for user authentication.\n  Closed -- Require authorization (using the PASS command during login) before allowing the user to connect at all.\n  Registered -- Only allow registered users to use this server; this disables the register- and the account command until the user identifies himself.\n","loc":["services","bitlbee","authMode"],"readOnly":false,"type":"one of \"Open\", \"Closed\", \"Registered\""},"services.bitlbee.configDir":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":"/var/lib/bitlbee","description":"Specify an alternative directory to store all the per-user configuration\nfiles.\n","loc":["services","bitlbee","configDir"],"readOnly":false,"type":"path"},"services.bitlbee.enable":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":false,"description":"Whether to run the BitlBee IRC to other chat network gateway.\nRunning it allows you to access the MSN, Jabber, Yahoo! and ICQ chat\nnetworks via an IRC client.\n","loc":["services","bitlbee","enable"],"readOnly":false,"type":"unspecified"},"services.bitlbee.extraDefaults":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":"","description":"Will be inserted in the Default section of the config file.\n","loc":["services","bitlbee","extraDefaults"],"readOnly":false,"type":"unspecified"},"services.bitlbee.extraSettings":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":"","description":"Will be inserted in the Settings section of the config file.\n","loc":["services","bitlbee","extraSettings"],"readOnly":false,"type":"unspecified"},"services.bitlbee.hostName":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":"","description":"Normally, BitlBee gets a hostname using getsockname(). If you have a nicer\nalias for your BitlBee daemon, you can set it here and BitlBee will identify\nitself with that name instead.\n","loc":["services","bitlbee","hostName"],"readOnly":false,"type":"string"},"services.bitlbee.interface":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":"127.0.0.1","description":"The interface the BitlBee deamon will be listening to.  If `127.0.0.1',\nonly clients on the local host can connect to it; if `0.0.0.0', clients\ncan access it from any network interface.\n","loc":["services","bitlbee","interface"],"readOnly":false,"type":"unspecified"},"services.bitlbee.libpurple_plugins":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":[],"description":"The list of libpurple plugins to install.\n","example":{"_type":"literalExample","text":"[ pkgs.purple-matrix ]"},"loc":["services","bitlbee","libpurple_plugins"],"readOnly":false,"type":"list of packages"},"services.bitlbee.plugins":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":[],"description":"The list of bitlbee plugins to install.\n","example":{"_type":"literalExample","text":"[ pkgs.bitlbee-facebook ]"},"loc":["services","bitlbee","plugins"],"readOnly":false,"type":"list of packages"},"services.bitlbee.portNumber":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":6667,"description":"Number of the port BitlBee will be listening to.\n","loc":["services","bitlbee","portNumber"],"readOnly":false,"type":"unspecified"},"services.bitlbee.protocols":{"declarations":["nixos/modules/services/networking/bitlbee.nix"],"default":"","description":"This option allows to remove the support of protocol, even if compiled\nin. If nothing is given, there are no restrictions.\n","loc":["services","bitlbee","protocols"],"readOnly":false,"type":"string"},"services.bloop.install":{"declarations":["nixos/modules/services/development/bloop.nix"],"default":false,"description":"Whether to install a user service for the Bloop server.\n\nThe service must be manually started for each user with\n\"systemctl --user start bloop\".\n","loc":["services","bloop","install"],"readOnly":false,"type":"boolean"},"services.boinc.allowRemoteGuiRpc":{"declarations":["nixos/modules/services/computing/boinc/client.nix"],"default":false,"description":"If set to true, any remote host can connect to and control this BOINC\nclient (subject to password authentication). If instead set to false,\nonly the hosts listed in <varname>dataDir</varname>/remote_hosts.cfg will be allowed to\nconnect.\n\nSee also: <link xlink:href=\"http://boinc.berkeley.edu/wiki/Controlling_BOINC_remotely#Remote_access\"/>\n","loc":["services","boinc","allowRemoteGuiRpc"],"readOnly":false,"type":"boolean"},"services.boinc.dataDir":{"declarations":["nixos/modules/services/computing/boinc/client.nix"],"default":"/var/lib/boinc","description":"The directory in which to store BOINC's configuration and data files.\n","loc":["services","boinc","dataDir"],"readOnly":false,"type":"path"},"services.boinc.enable":{"declarations":["nixos/modules/services/computing/boinc/client.nix"],"default":false,"description":"Whether to enable the BOINC distributed computing client. If this\noption is set to true, the boinc_client daemon will be run as a\nbackground service. The boinccmd command can be used to control the\ndaemon.\n","loc":["services","boinc","enable"],"readOnly":false,"type":"boolean"},"services.boinc.extraEnvPackages":{"declarations":["nixos/modules/services/computing/boinc/client.nix"],"default":[],"description":"Additional packages to make available in the environment in which\nBOINC will run. Common choices are:\n<variablelist>\n  <varlistentry>\n    <term><varname>pkgs.virtualbox</varname></term>\n    <listitem><para>\n      The VirtualBox virtual machine framework. Required by some BOINC\n      projects, such as ATLAS@home.\n    </para></listitem>\n  </varlistentry>\n  <varlistentry>\n    <term><varname>pkgs.ocl-icd</varname></term>\n    <listitem><para>\n      OpenCL infrastructure library. Required by BOINC projects that\n      use OpenCL, in addition to a device-specific OpenCL driver.\n    </para></listitem>\n  </varlistentry>\n  <varlistentry>\n    <term><varname>pkgs.linuxPackages.nvidia_x11</varname></term>\n    <listitem><para>\n      Provides CUDA libraries. Required by BOINC projects that use\n      CUDA. Note that this requires an NVIDIA graphics device to be\n      present on the system.\n    </para><para>\n      Also provides OpenCL drivers for NVIDIA GPUs;\n      <varname>pkgs.ocl-icd</varname> is also needed in this case.\n    </para></listitem>\n  </varlistentry>\n</variablelist>\n","example":"[ pkgs.virtualbox ]","loc":["services","boinc","extraEnvPackages"],"readOnly":false,"type":"list of packages"},"services.boinc.package":{"declarations":["nixos/modules/services/computing/boinc/client.nix"],"default":"pkgs.boinc","description":"Which BOINC package to use.\n","loc":["services","boinc","package"],"readOnly":false,"type":"package"},"services.borgbackup.jobs":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":{},"description":"Deduplicating backups using BorgBackup.","example":{"_type":"literalExample","text":"{\n  rootBackup = {\n    paths = \"/\";\n    exclude = [ \"/nix\" ];\n    repo = \"/path/to/local/repo\";\n    encryption = {\n      mode = \"repokey\";\n      passphrase = \"secret\";\n    };\n    compression = \"auto,lzma\";\n    startAt = \"weekly\";\n  };\n}\n"},"loc":["services","borgbackup","jobs"],"readOnly":false,"type":"attribute set of submodules"},"services.borgbackup.jobs.<name>.appendFailedSuffix":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":true,"description":"Append a <literal>.failed</literal> suffix\nto the archive name, which is only removed if\n<command>borg create</command> has a zero exit status.\n","loc":["services","borgbackup","jobs","<name>","appendFailedSuffix"],"readOnly":false,"type":"boolean"},"services.borgbackup.jobs.<name>.archiveBaseName":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"${config.networking.hostName}-<name>","description":"How to name the created archives. A timestamp, whose format is\ndetermined by <option>dateFormat</option>, will be appended. The full\nname can be modified at runtime (<literal>$archiveName</literal>).\nPlaceholders like <literal>{hostname}</literal> must not be used.\n","loc":["services","borgbackup","jobs","<name>","archiveBaseName"],"readOnly":false,"type":"string matching the pattern [^/{}]+"},"services.borgbackup.jobs.<name>.compression":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"lz4","description":"Compression method to use. Refer to\n<command>borg help compression</command>\nfor all available options.\n","example":"auto,lzma","loc":["services","borgbackup","jobs","<name>","compression"],"readOnly":false,"type":"string matching the pattern none|(auto,)?(lz4|zstd|zlib|lzma)(,[[:digit:]]{1,2})?"},"services.borgbackup.jobs.<name>.dateFormat":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"+%Y-%m-%dT%H:%M:%S","description":"Arguments passed to <command>date</command>\nto create a timestamp suffix for the archive name.\n","example":"-u +%s","loc":["services","borgbackup","jobs","<name>","dateFormat"],"readOnly":false,"type":"string"},"services.borgbackup.jobs.<name>.doInit":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":true,"description":"Run <command>borg init</command> if the\nspecified <option>repo</option> does not exist.\nYou should set this to <literal>false</literal>\nif the repository is located on an external drive\nthat might not always be mounted.\n","loc":["services","borgbackup","jobs","<name>","doInit"],"readOnly":false,"type":"boolean"},"services.borgbackup.jobs.<name>.encryption.mode":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"description":"Encryption mode to use. Setting a mode\nother than <literal>\"none\"</literal> requires\nyou to specify a <option>passCommand</option>\nor a <option>passphrase</option>.\n","loc":["services","borgbackup","jobs","<name>","encryption","mode"],"readOnly":false,"type":"one of \"repokey\", \"keyfile\", \"repokey-blake2\", \"keyfile-blake2\", \"authenticated\", \"authenticated-blake2\", \"none\""},"services.borgbackup.jobs.<name>.encryption.passCommand":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":null,"description":"A command which prints the passphrase to stdout.\nMutually exclusive with <option>passphrase</option>.\n","example":"cat /path/to/passphrase_file","loc":["services","borgbackup","jobs","<name>","encryption","passCommand"],"readOnly":false,"type":"null or string"},"services.borgbackup.jobs.<name>.encryption.passphrase":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":null,"description":"The passphrase the backups are encrypted with.\nMutually exclusive with <option>passCommand</option>.\nIf you do not want the passphrase to be stored in the\nworld-readable Nix store, use <option>passCommand</option>.\n","loc":["services","borgbackup","jobs","<name>","encryption","passphrase"],"readOnly":false,"type":"null or string"},"services.borgbackup.jobs.<name>.environment":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":{},"description":"Environment variables passed to the backup script.\nYou can for example specify which SSH key to use.\n","example":{"BORG_RSH":"ssh -i /path/to/key"},"loc":["services","borgbackup","jobs","<name>","environment"],"readOnly":false,"type":"attribute set of strings"},"services.borgbackup.jobs.<name>.exclude":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":[],"description":"Exclude paths matching any of the given patterns. See\n<command>borg help patterns</command> for pattern syntax.\n","example":["/home/*/.cache","/nix"],"loc":["services","borgbackup","jobs","<name>","exclude"],"readOnly":false,"type":"list of strings"},"services.borgbackup.jobs.<name>.extraArgs":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Additional arguments for all <command>borg</command> calls the\nservice has. Handle with care.\n","example":"--remote-path=/path/to/borg","loc":["services","borgbackup","jobs","<name>","extraArgs"],"readOnly":false,"type":"string"},"services.borgbackup.jobs.<name>.extraCreateArgs":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Additional arguments for <command>borg create</command>.\nCan also be set at runtime using <literal>$extraCreateArgs</literal>.\n","example":"--stats --checkpoint-interval 600","loc":["services","borgbackup","jobs","<name>","extraCreateArgs"],"readOnly":false,"type":"string"},"services.borgbackup.jobs.<name>.extraInitArgs":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Additional arguments for <command>borg init</command>.\nCan also be set at runtime using <literal>$extraInitArgs</literal>.\n","example":"--append-only","loc":["services","borgbackup","jobs","<name>","extraInitArgs"],"readOnly":false,"type":"string"},"services.borgbackup.jobs.<name>.extraPruneArgs":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Additional arguments for <command>borg prune</command>.\nCan also be set at runtime using <literal>$extraPruneArgs</literal>.\n","example":"--save-space","loc":["services","borgbackup","jobs","<name>","extraPruneArgs"],"readOnly":false,"type":"string"},"services.borgbackup.jobs.<name>.group":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"root","description":"The group borg is run as. User or group needs read permission\nfor the specified <option>paths</option>.\n","loc":["services","borgbackup","jobs","<name>","group"],"readOnly":false,"type":"string"},"services.borgbackup.jobs.<name>.paths":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"description":"Path(s) to back up.","example":"/home/user","loc":["services","borgbackup","jobs","<name>","paths"],"readOnly":false,"type":"path or non-empty list of paths"},"services.borgbackup.jobs.<name>.postCreate":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Shell commands to run after <command>borg create</command>. The name\nof the created archive is stored in <literal>$archiveName</literal>.\n","loc":["services","borgbackup","jobs","<name>","postCreate"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.borgbackup.jobs.<name>.postHook":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Shell commands to run just before exit. They are executed\neven if a previous command exits with a non-zero exit code.\nThe latter is available as <literal>$exitStatus</literal>.\n","loc":["services","borgbackup","jobs","<name>","postHook"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.borgbackup.jobs.<name>.postInit":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Shell commands to run after <command>borg init</command>.\n","loc":["services","borgbackup","jobs","<name>","postInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.borgbackup.jobs.<name>.postPrune":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Shell commands to run after <command>borg prune</command>.\n","loc":["services","borgbackup","jobs","<name>","postPrune"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.borgbackup.jobs.<name>.preHook":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"","description":"Shell commands to run before the backup.\nThis can for example be used to mount file systems.\n","example":"# To add excluded paths at runtime\nextraCreateArgs=\"$extraCreateArgs --exclude /some/path\"\n","loc":["services","borgbackup","jobs","<name>","preHook"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.borgbackup.jobs.<name>.privateTmp":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":true,"description":"Set the <literal>PrivateTmp</literal> option for\nthe systemd-service. Set to false if you need sockets\nor other files from global /tmp.\n","loc":["services","borgbackup","jobs","<name>","privateTmp"],"readOnly":false,"type":"boolean"},"services.borgbackup.jobs.<name>.prune.keep":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":{},"description":"Prune a repository by deleting all archives not matching any of the\nspecified retention options. See <command>borg help prune</command>\nfor the available options.\n","example":{"_type":"literalExample","text":"{\n  within = \"1d\"; # Keep all archives from the last day\n  daily = 7;\n  weekly = 4;\n  monthly = -1;  # Keep at least one archive for each month\n}\n"},"loc":["services","borgbackup","jobs","<name>","prune","keep"],"readOnly":false,"type":"attribute set of signed integer or string matching the pattern [[:digit:]]+[Hdwmy]s"},"services.borgbackup.jobs.<name>.prune.prefix":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"${archiveBaseName}","description":"Only consider archive names starting with this prefix for pruning.\nBy default, only archives created by this job are considered.\nUse <literal>\"\"</literal> to consider all archives.\n","loc":["services","borgbackup","jobs","<name>","prune","prefix"],"readOnly":false,"type":"string"},"services.borgbackup.jobs.<name>.readWritePaths":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":[],"description":"By default, borg cannot write anywhere on the system but\n<literal>$HOME/.config/borg</literal> and <literal>$HOME/.cache/borg</literal>.\nIf, for example, your preHook script needs to dump files\nsomewhere, put those directories here.\n","example":["/var/backup/mysqldump"],"loc":["services","borgbackup","jobs","<name>","readWritePaths"],"readOnly":false,"type":"list of paths"},"services.borgbackup.jobs.<name>.repo":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"description":"Remote or local repository to back up to.","example":"user@machine:/path/to/repo","loc":["services","borgbackup","jobs","<name>","repo"],"readOnly":false,"type":"string"},"services.borgbackup.jobs.<name>.startAt":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"daily","description":"When or how often the backup should run.\nMust be in the format described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\nIf you do not want the backup to start\nautomatically, use <literal>[ ]</literal>.\n","loc":["services","borgbackup","jobs","<name>","startAt"],"readOnly":false,"type":"string or list of strings"},"services.borgbackup.jobs.<name>.user":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"root","description":"The user <command>borg</command> is run as.\nUser or group need read permission\nfor the specified <option>paths</option>.\n","loc":["services","borgbackup","jobs","<name>","user"],"readOnly":false,"type":"string"},"services.borgbackup.repos":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":{},"description":"Serve BorgBackup repositories to given public SSH keys,\nrestricting their access to the repository only.\nAlso, clients do not need to specify the absolute path when accessing the repository,\ni.e. <literal>user@machine:.</literal> is enough. (Note colon and dot.)\n","loc":["services","borgbackup","repos"],"readOnly":false,"type":"attribute set of submodules"},"services.borgbackup.repos.<name>.allowSubRepos":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":false,"description":"Allow clients to create repositories in subdirectories of the\nspecified <option>path</option>. These can be accessed using\n<literal>user@machine:path/to/subrepo</literal>. Note that a\n<option>quota</option> applies to repositories independently.\nTherefore, if this is enabled, clients can create multiple\nrepositories and upload an arbitrary amount of data.\n","loc":["services","borgbackup","repos","<name>","allowSubRepos"],"readOnly":false,"type":"boolean"},"services.borgbackup.repos.<name>.authorizedKeys":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":[],"description":"Public SSH keys that are given full write access to this repository.\nYou should use a different SSH key for each repository you write to, because\nthe specified keys are restricted to running <command>borg serve</command>\nand can only access this single repository.\n","loc":["services","borgbackup","repos","<name>","authorizedKeys"],"readOnly":false,"type":"list of strings"},"services.borgbackup.repos.<name>.authorizedKeysAppendOnly":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":[],"description":"Public SSH keys that can only be used to append new data (archives) to the repository.\nNote that archives can still be marked as deleted and are subsequently removed from disk\nupon accessing the repo with full write access, e.g. when pruning.\n","loc":["services","borgbackup","repos","<name>","authorizedKeysAppendOnly"],"readOnly":false,"type":"list of strings"},"services.borgbackup.repos.<name>.group":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"borg","description":"The group <command>borg serve</command> is run as.\nUser or group needs write permission\nfor the specified <option>path</option>.\n","loc":["services","borgbackup","repos","<name>","group"],"readOnly":false,"type":"string"},"services.borgbackup.repos.<name>.path":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"/var/lib/borgbackup","description":"Where to store the backups. Note that the directory\nis created automatically, with correct permissions.\n","loc":["services","borgbackup","repos","<name>","path"],"readOnly":false,"type":"path"},"services.borgbackup.repos.<name>.quota":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":null,"description":"Storage quota for the repository. This quota is ensured for all\nsub-repositories if <option>allowSubRepos</option> is enabled\nbut not for the overall storage space used.\n","example":"100G","loc":["services","borgbackup","repos","<name>","quota"],"readOnly":false,"type":"null or string matching the pattern [[:digit:].]+[KMGTP]?"},"services.borgbackup.repos.<name>.user":{"declarations":["nixos/modules/services/backup/borgbackup.nix"],"default":"borg","description":"The user <command>borg serve</command> is run as.\nUser or group needs write permission\nfor the specified <option>path</option>.\n","loc":["services","borgbackup","repos","<name>","user"],"readOnly":false,"type":"string"},"services.bosun.checkFrequency":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":"5m","description":"Bosun's check frequency\n","loc":["services","bosun","checkFrequency"],"readOnly":false,"type":"string"},"services.bosun.enable":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":false,"description":"Whether to run bosun.\n","loc":["services","bosun","enable"],"readOnly":false,"type":"boolean"},"services.bosun.extraConfig":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":"","description":"Extra configuration options for Bosun. You should describe your\ndesired templates, alerts, macros, etc through this configuration\noption.\n\nA detailed description of the supported syntax can be found at-spi2-atk\nhttp://bosun.org/configuration.html\n","loc":["services","bosun","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.bosun.group":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":"bosun","description":"Group account under which bosun runs.\n","loc":["services","bosun","group"],"readOnly":false,"type":"Concatenated string"},"services.bosun.influxHost":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":null,"description":"Host and port of the influxdb database.\n","example":"localhost:8086","loc":["services","bosun","influxHost"],"readOnly":false,"type":"null or Concatenated string"},"services.bosun.ledisDir":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":"/var/lib/bosun/ledis_data","description":"Path to bosun's ledis data dir\n","loc":["services","bosun","ledisDir"],"readOnly":false,"type":"path"},"services.bosun.listenAddress":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":":8070","description":"The host address and port that bosun's web interface will listen on.\n","loc":["services","bosun","listenAddress"],"readOnly":false,"type":"Concatenated string"},"services.bosun.opentsdbHost":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":"localhost:4242","description":"Host and port of the OpenTSDB database that stores bosun data.\nTo disable opentsdb you can pass null as parameter.\n","loc":["services","bosun","opentsdbHost"],"readOnly":false,"type":"null or Concatenated string"},"services.bosun.package":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":"pkgs.bosun","description":"bosun binary to use.\n","example":{"_type":"literalExample","text":"pkgs.bosun"},"loc":["services","bosun","package"],"readOnly":false,"type":"package"},"services.bosun.stateFile":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":"/var/lib/bosun/bosun.state","description":"Path to bosun's state file.\n","loc":["services","bosun","stateFile"],"readOnly":false,"type":"path"},"services.bosun.user":{"declarations":["nixos/modules/services/monitoring/bosun.nix"],"default":"bosun","description":"User account under which bosun runs.\n","loc":["services","bosun","user"],"readOnly":false,"type":"Concatenated string"},"services.brltty.enable":{"declarations":["nixos/modules/services/hardware/brltty.nix"],"default":false,"description":"Whether to enable the BRLTTY daemon.","loc":["services","brltty","enable"],"readOnly":false,"type":"boolean"},"services.btrfs.autoScrub.enable":{"declarations":["nixos/modules/tasks/filesystems/btrfs.nix"],"default":false,"description":"Whether to enable Enable regular btrfs scrub.","example":true,"loc":["services","btrfs","autoScrub","enable"],"readOnly":false,"type":"boolean"},"services.btrfs.autoScrub.fileSystems":{"declarations":["nixos/modules/tasks/filesystems/btrfs.nix"],"description":"List of paths to btrfs filesystems to regularily call <command>btrfs scrub</command> on.\nDefaults to all mount points with btrfs filesystems.\nIf you mount a filesystem multiple times or additionally mount subvolumes,\nyou need to manually specify this list to avoid scrubbing multiple times.\n","example":["/"],"loc":["services","btrfs","autoScrub","fileSystems"],"readOnly":false,"type":"list of paths"},"services.btrfs.autoScrub.interval":{"declarations":["nixos/modules/tasks/filesystems/btrfs.nix"],"default":"monthly","description":"Systemd calendar expression for when to scrub btrfs filesystems.\nThe recommended period is a month but could be less\n(<citerefentry><refentrytitle>btrfs-scrub</refentrytitle>\n<manvolnum>8</manvolnum></citerefentry>).\nSee\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>\nfor more information on the syntax.\n","example":"weekly","loc":["services","btrfs","autoScrub","interval"],"readOnly":false,"type":"string"},"services.btsync.apiKey":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":"","description":"API key, which enables the developer API.","loc":["services","btsync","apiKey"],"readOnly":false,"type":"string"},"services.btsync.checkForUpdates":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":true,"description":"Determines whether to check for updates and alert the user\nabout them in the UI.\n","loc":["services","btsync","checkForUpdates"],"readOnly":false,"type":"boolean"},"services.btsync.deviceName":{"declarations":["nixos/modules/services/networking/btsync.nix"],"description":"Name of the Bittorrent Sync device.\n","example":"Voltron","loc":["services","btsync","deviceName"],"readOnly":false,"type":"string"},"services.btsync.directoryRoot":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":"","description":"Default directory to add folders in the web UI.","example":"/media","loc":["services","btsync","directoryRoot"],"readOnly":false,"type":"string"},"services.btsync.downloadLimit":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":0,"description":"Download speed limit. 0 is unlimited (default).\n","example":1024,"loc":["services","btsync","downloadLimit"],"readOnly":false,"type":"signed integer"},"services.btsync.enable":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":false,"description":"If enabled, start the Bittorrent Sync daemon. Once enabled, you can\ninteract with the service through the Web UI, or configure it in your\nNixOS configuration. Enabling the <literal>btsync</literal> service\nalso installs a systemd user unit which can be used to start\nuser-specific copies of the daemon. Once installed, you can use\n<literal>systemctl --user start btsync</literal> as your user to start\nthe daemon using the configuration file located at\n<literal>$HOME/.config/btsync.conf</literal>.\n","loc":["services","btsync","enable"],"readOnly":false,"type":"boolean"},"services.btsync.enableWebUI":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":false,"description":"Enable Web UI for administration. Bound to the specified\n<literal>httpListenAddress</literal> and\n<literal>httpListenPort</literal>.\n","loc":["services","btsync","enableWebUI"],"readOnly":false,"type":"boolean"},"services.btsync.encryptLAN":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":true,"description":"Encrypt LAN data.","loc":["services","btsync","encryptLAN"],"readOnly":false,"type":"boolean"},"services.btsync.httpListenAddr":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":"0.0.0.0","description":"HTTP address to bind to.\n","example":"1.2.3.4","loc":["services","btsync","httpListenAddr"],"readOnly":false,"type":"string"},"services.btsync.httpListenPort":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":9000,"description":"HTTP port to bind on.\n","loc":["services","btsync","httpListenPort"],"readOnly":false,"type":"signed integer"},"services.btsync.httpLogin":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":"","description":"HTTP web login username.\n","example":"allyourbase","loc":["services","btsync","httpLogin"],"readOnly":false,"type":"string"},"services.btsync.httpPass":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":"","description":"HTTP web login password.\n","example":"arebelongtous","loc":["services","btsync","httpPass"],"readOnly":false,"type":"string"},"services.btsync.listeningPort":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":0,"description":"Listening port. Defaults to 0 which randomizes the port.\n","example":44444,"loc":["services","btsync","listeningPort"],"readOnly":false,"type":"signed integer"},"services.btsync.package":{"declarations":["nixos/modules/services/networking/btsync.nix"],"description":"Branch of bittorrent sync to use.\n","example":{"_type":"literalExample","text":"pkgs.bittorrentSync20"},"loc":["services","btsync","package"],"readOnly":false,"type":"package"},"services.btsync.sharedFolders":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":[],"description":"Shared folder list. If enabled, web UI must be\ndisabled. Secrets can be generated using <literal>btsync\n--generate-secret</literal>. Note that this secret will be\nput inside the Nix store, so it is realistically not very\nsecret.\n\nIf you would like to be able to modify the contents of this\ndirectories, it is recommended that you make your user a\nmember of the <literal>btsync</literal> group.\n\nDirectories in this list should be in the\n<literal>btsync</literal> group, and that group must have\nwrite access to the directory. It is also recommended that\n<literal>chmod g+s</literal> is applied to the directory\nso that any sub directories created will also belong to\nthe <literal>btsync</literal> group. Also,\n<literal>setfacl -d -m group:btsync:rwx</literal> and\n<literal>setfacl -m group:btsync:rwx</literal> should also\nbe applied so that the sub directories are writable by\nthe group.\n","example":[{"directory":"/home/user/sync_test","knownHosts":["192.168.1.2:4444","192.168.1.3:4444"],"searchLAN":true,"secret":"AHMYFPCQAHBM7LQPFXQ7WV6Y42IGUXJ5Y","useDHT":false,"useRelayServer":true,"useSyncTrash":true,"useTracker":true}],"loc":["services","btsync","sharedFolders"],"readOnly":false,"type":"unspecified"},"services.btsync.storagePath":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":"/var/lib/btsync/","description":"Where BitTorrent Sync will store it's database files (containing\nthings like username info and licenses). Generally, you should not\nneed to ever change this.\n","loc":["services","btsync","storagePath"],"readOnly":false,"type":"path"},"services.btsync.uploadLimit":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":0,"description":"Upload speed limit. 0 is unlimited (default).\n","example":1024,"loc":["services","btsync","uploadLimit"],"readOnly":false,"type":"signed integer"},"services.btsync.useUpnp":{"declarations":["nixos/modules/services/networking/btsync.nix"],"default":true,"description":"Use Universal Plug-n-Play (UPnP)\n","loc":["services","btsync","useUpnp"],"readOnly":false,"type":"boolean"},"services.buildbot-master.bpPort":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":9989,"description":"Port where the master will listen to Buildbot Worker.","loc":["services","buildbot-master","bpPort"],"readOnly":false,"type":"signed integer"},"services.buildbot-master.buildbotDir":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"/home/buildbot/master","description":"Specifies the Buildbot directory.","loc":["services","buildbot-master","buildbotDir"],"readOnly":false,"type":"path"},"services.buildbot-master.buildbotUrl":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"http://localhost:8010/","description":"Specifies the Buildbot URL.","loc":["services","buildbot-master","buildbotUrl"],"readOnly":false,"type":"string"},"services.buildbot-master.builders":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":["util.BuilderConfig(name='runtests',workernames=['example-worker'],factory=factory)"],"description":"List of Builders.","loc":["services","buildbot-master","builders"],"readOnly":false,"type":"list of strings"},"services.buildbot-master.changeSource":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":[],"description":"List of Change Sources.","example":["changes.GitPoller('git://github.com/buildbot/pyflakes.git', workdir='gitpoller-workdir', branch='master', pollinterval=300)"],"loc":["services","buildbot-master","changeSource"],"readOnly":false,"type":"list of strings"},"services.buildbot-master.dbUrl":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"sqlite:///state.sqlite","description":"Specifies the database connection string.","loc":["services","buildbot-master","dbUrl"],"readOnly":false,"type":"string"},"services.buildbot-master.enable":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":false,"description":"Whether to enable the Buildbot continuous integration server.","loc":["services","buildbot-master","enable"],"readOnly":false,"type":"boolean"},"services.buildbot-master.extraConfig":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"c['buildbotNetUsageData'] = None","description":"Extra configuration to append to master.cfg","loc":["services","buildbot-master","extraConfig"],"readOnly":false,"type":"string"},"services.buildbot-master.extraGroups":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":[],"description":"List of extra groups that the buildbot user should be a part of.","loc":["services","buildbot-master","extraGroups"],"readOnly":false,"type":"list of strings"},"services.buildbot-master.factorySteps":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":[],"description":"Factory Steps","example":["steps.Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental')","steps.ShellCommand(command=['trial', 'pyflakes'])"],"loc":["services","buildbot-master","factorySteps"],"readOnly":false,"type":"list of strings"},"services.buildbot-master.group":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"buildbot","description":"Primary group of buildbot user.","loc":["services","buildbot-master","group"],"readOnly":false,"type":"string"},"services.buildbot-master.home":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"/home/buildbot","description":"Buildbot home directory.","loc":["services","buildbot-master","home"],"readOnly":false,"type":"path"},"services.buildbot-master.listenAddress":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"0.0.0.0","description":"Specifies the bind address on which the buildbot HTTP interface listens.","loc":["services","buildbot-master","listenAddress"],"readOnly":false,"type":"string"},"services.buildbot-master.masterCfg":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"master.cfg","description":"Optionally pass master.cfg path. Other options in this configuration will be ignored.","example":"/etc/nixos/buildbot/master.cfg","loc":["services","buildbot-master","masterCfg"],"readOnly":false,"type":"path"},"services.buildbot-master.package":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"pkgs.pythonPackages.buildbot-full","description":"Package to use for buildbot.","example":{"_type":"literalExample","text":"pkgs.python3Packages.buildbot-full"},"loc":["services","buildbot-master","package"],"readOnly":false,"type":"package"},"services.buildbot-master.packages":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":["git-minimal-2.19.1"],"description":"Packages to add to PATH for the buildbot process.","example":{"_type":"literalExample","text":"[ pkgs.git ]"},"loc":["services","buildbot-master","packages"],"readOnly":false,"type":"list of packages"},"services.buildbot-master.port":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":8010,"description":"Specifies port number on which the buildbot HTTP interface listens.","loc":["services","buildbot-master","port"],"readOnly":false,"type":"signed integer"},"services.buildbot-master.pythonPackages":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"pythonPackages: with pythonPackages; [ ]","description":"Packages to add the to the PYTHONPATH of the buildbot process.","example":{"_type":"literalExample","text":"pythonPackages: with pythonPackages; [ requests ]"},"loc":["services","buildbot-master","pythonPackages"],"readOnly":false,"type":"unspecified"},"services.buildbot-master.schedulers":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":["schedulers.SingleBranchScheduler(name='all', change_filter=util.ChangeFilter(branch='master'), treeStableTimer=None, builderNames=['runtests'])","schedulers.ForceScheduler(name='force',builderNames=['runtests'])"],"description":"List of Schedulers.","loc":["services","buildbot-master","schedulers"],"readOnly":false,"type":"list of strings"},"services.buildbot-master.status":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":[],"description":"List of status notification endpoints.","loc":["services","buildbot-master","status"],"readOnly":false,"type":"list of strings"},"services.buildbot-master.title":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"Buildbot","description":"Specifies the Buildbot Title.","loc":["services","buildbot-master","title"],"readOnly":false,"type":"string"},"services.buildbot-master.titleUrl":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"Buildbot","description":"Specifies the Buildbot TitleURL.","loc":["services","buildbot-master","titleUrl"],"readOnly":false,"type":"string"},"services.buildbot-master.user":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":"buildbot","description":"User the buildbot server should execute under.","loc":["services","buildbot-master","user"],"readOnly":false,"type":"string"},"services.buildbot-master.workers":{"declarations":["nixos/modules/services/continuous-integration/buildbot/master.nix"],"default":["worker.Worker('example-worker', 'pass')"],"description":"List of Workers.","loc":["services","buildbot-master","workers"],"readOnly":false,"type":"list of strings"},"services.buildbot-worker.adminMessage":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":null,"description":"Name of the administrator of this worker","loc":["services","buildbot-worker","adminMessage"],"readOnly":false,"type":"null or string"},"services.buildbot-worker.buildbotDir":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":"/home/bbworker/worker","description":"Specifies the Buildbot directory.","loc":["services","buildbot-worker","buildbotDir"],"readOnly":false,"type":"path"},"services.buildbot-worker.enable":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":false,"description":"Whether to enable the Buildbot Worker.","loc":["services","buildbot-worker","enable"],"readOnly":false,"type":"boolean"},"services.buildbot-worker.extraGroups":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":[],"description":"List of extra groups that the Buildbot Worker user should be a part of.","loc":["services","buildbot-worker","extraGroups"],"readOnly":false,"type":"list of strings"},"services.buildbot-worker.group":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":"bbworker","description":"Primary group of buildbot Worker user.","loc":["services","buildbot-worker","group"],"readOnly":false,"type":"string"},"services.buildbot-worker.home":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":"/home/bbworker","description":"Buildbot home directory.","loc":["services","buildbot-worker","home"],"readOnly":false,"type":"path"},"services.buildbot-worker.hostMessage":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":null,"description":"Description of this worker","loc":["services","buildbot-worker","hostMessage"],"readOnly":false,"type":"null or string"},"services.buildbot-worker.masterUrl":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":"localhost:9989","description":"Specifies the Buildbot Worker connection string.","loc":["services","buildbot-worker","masterUrl"],"readOnly":false,"type":"string"},"services.buildbot-worker.package":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":"pkgs.pythonPackages.buildbot-worker","description":"Package to use for buildbot worker.","example":{"_type":"literalExample","text":"pkgs.python3Packages.buildbot-worker"},"loc":["services","buildbot-worker","package"],"readOnly":false,"type":"package"},"services.buildbot-worker.packages":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":["git-minimal-2.19.1"],"description":"Packages to add to PATH for the buildbot process.","example":{"_type":"literalExample","text":"[ pkgs.git ]"},"loc":["services","buildbot-worker","packages"],"readOnly":false,"type":"list of packages"},"services.buildbot-worker.user":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":"bbworker","description":"User the buildbot Worker should execute under.","loc":["services","buildbot-worker","user"],"readOnly":false,"type":"string"},"services.buildbot-worker.workerPass":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":"pass","description":"Specifies the Buildbot Worker password.","loc":["services","buildbot-worker","workerPass"],"readOnly":false,"type":"string"},"services.buildbot-worker.workerPassFile":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"description":"File used to store the Buildbot Worker password","loc":["services","buildbot-worker","workerPassFile"],"readOnly":false,"type":"path"},"services.buildbot-worker.workerUser":{"declarations":["nixos/modules/services/continuous-integration/buildbot/worker.nix"],"default":"example-worker","description":"Specifies the Buildbot Worker user.","loc":["services","buildbot-worker","workerUser"],"readOnly":false,"type":"string"},"services.buildkite-agent.dataDir":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":"/var/lib/buildkite-agent","description":"The workdir for the agent","loc":["services","buildkite-agent","dataDir"],"readOnly":false,"type":"string"},"services.buildkite-agent.enable":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":false,"description":"Whether to enable buildkite-agent.","example":true,"loc":["services","buildkite-agent","enable"],"readOnly":false,"type":"boolean"},"services.buildkite-agent.extraConfig":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":"","description":"Extra lines to be added verbatim to the configuration file.\n","example":"debug=true","loc":["services","buildkite-agent","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.checkout":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `checkout` hook script will replace the default checkout routine of the\nbootstrap.sh script. You can use this hook to do your own SCM checkout\nbehaviour\n","loc":["services","buildkite-agent","hooks","checkout"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.command":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `command` hook script will replace the default implementation of running\nthe build command.\n","loc":["services","buildkite-agent","hooks","command"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.environment":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `environment` hook will run before all other commands, and can be used\nto set up secrets, data, etc. Anything exported in hooks will be available\nto the build script.\n\nNote: the contents of this file will be copied to the world-readable\nNix store.\n","example":"export SECRET_VAR=`head -1 /run/keys/secret`\n","loc":["services","buildkite-agent","hooks","environment"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.post-artifact":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `post-artifact` hook will run just after artifacts are uploaded\n","loc":["services","buildkite-agent","hooks","post-artifact"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.post-checkout":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `post-checkout` hook will run after the bootstrap script has checked out\nyour projects source code.\n","loc":["services","buildkite-agent","hooks","post-checkout"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.post-command":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `post-command` hook will run after the bootstrap script has run your\nbuild commands\n","loc":["services","buildkite-agent","hooks","post-command"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.pre-artifact":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `pre-artifact` hook will run just before artifacts are uploaded\n","loc":["services","buildkite-agent","hooks","pre-artifact"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.pre-checkout":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `pre-checkout` hook will run just before your projects source code is\nchecked out from your SCM provider\n","loc":["services","buildkite-agent","hooks","pre-checkout"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.pre-command":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `pre-command` hook will run just before your build command runs\n","loc":["services","buildkite-agent","hooks","pre-command"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooks.pre-exit":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":null,"description":"The `pre-exit` hook will run just before your build job finishes\n","loc":["services","buildkite-agent","hooks","pre-exit"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.buildkite-agent.hooksPath":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":"generated from services.buildkite-agent.hooks","description":"Path to the directory storing the hooks.\nConsider using <option>services.buildkite-agent.hooks.&lt;name&gt;</option>\ninstead.\n","loc":["services","buildkite-agent","hooksPath"],"readOnly":false,"type":"path"},"services.buildkite-agent.meta-data":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":"","description":"Meta data for the agent. This is a comma-separated list of\n<code>key=value</code> pairs.\n","example":"queue=default,docker=true,ruby2=true","loc":["services","buildkite-agent","meta-data"],"readOnly":false,"type":"string"},"services.buildkite-agent.name":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":"%hostname-%n","description":"The name of the agent.\n","loc":["services","buildkite-agent","name"],"readOnly":false,"type":"string"},"services.buildkite-agent.openssh.privateKeyPath":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"description":"Private agent key.\n\nA run-time path to the key file, which is supposed to be provisioned\noutside of Nix store.\n","loc":["services","buildkite-agent","openssh","privateKeyPath"],"readOnly":false,"type":"path"},"services.buildkite-agent.openssh.publicKeyPath":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"description":"Public agent key.\n\nA run-time path to the key file, which is supposed to be provisioned\noutside of Nix store.\n","loc":["services","buildkite-agent","openssh","publicKeyPath"],"readOnly":false,"type":"path"},"services.buildkite-agent.package":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":"pkgs.buildkite-agent","description":"Which buildkite-agent derivation to use","loc":["services","buildkite-agent","package"],"readOnly":false,"type":"package"},"services.buildkite-agent.runtimePackages":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"default":"[ pkgs.bash pkgs.nix ]","description":"Add programs to the buildkite-agent environment","loc":["services","buildkite-agent","runtimePackages"],"readOnly":false,"type":"list of packages"},"services.buildkite-agent.tokenPath":{"declarations":["nixos/modules/services/continuous-integration/buildkite-agent.nix"],"description":"The token from your Buildkite \"Agents\" page.\n\nA run-time path to the token file, which is supposed to be provisioned\noutside of Nix store.\n","loc":["services","buildkite-agent","tokenPath"],"readOnly":false,"type":"path"},"services.cachefilesd.cacheDir":{"declarations":["nixos/modules/services/network-filesystems/cachefilesd.nix"],"default":"/var/cache/fscache","description":"Directory to contain filesystem cache.","loc":["services","cachefilesd","cacheDir"],"readOnly":false,"type":"string"},"services.cachefilesd.enable":{"declarations":["nixos/modules/services/network-filesystems/cachefilesd.nix"],"default":false,"description":"Whether to enable cachefilesd network filesystems caching daemon.","loc":["services","cachefilesd","enable"],"readOnly":false,"type":"boolean"},"services.cachefilesd.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/cachefilesd.nix"],"default":"","description":"Additional configuration file entries. See cachefilesd.conf(5) for more information.","example":"brun 10%","loc":["services","cachefilesd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.caddy.agree":{"declarations":["nixos/modules/services/web-servers/caddy.nix"],"default":false,"description":"Agree to Let's Encrypt Subscriber Agreement","loc":["services","caddy","agree"],"readOnly":false,"type":"boolean"},"services.caddy.ca":{"declarations":["nixos/modules/services/web-servers/caddy.nix"],"default":"https://acme-v02.api.letsencrypt.org/directory","description":"Certificate authority ACME server. The default (Let's Encrypt production server) should be fine for most people.","example":"https://acme-staging-v02.api.letsencrypt.org/directory","loc":["services","caddy","ca"],"readOnly":false,"type":"Concatenated string"},"services.caddy.config":{"declarations":["nixos/modules/services/web-servers/caddy.nix"],"default":"","description":"Verbatim Caddyfile to use","example":"example.com {\ngzip\nminify\nlog syslog\n\nroot /srv/http\n}\n","loc":["services","caddy","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.caddy.dataDir":{"declarations":["nixos/modules/services/web-servers/caddy.nix"],"default":"/var/lib/caddy","description":"The data directory, for storing certificates. Before 17.09, this\nwould create a .caddy directory. With 17.09 the contents of the\n.caddy directory are in the specified data directory instead.\n","loc":["services","caddy","dataDir"],"readOnly":false,"type":"path"},"services.caddy.email":{"declarations":["nixos/modules/services/web-servers/caddy.nix"],"default":"","description":"Email address (for Let's Encrypt certificate)","loc":["services","caddy","email"],"readOnly":false,"type":"Concatenated string"},"services.caddy.enable":{"declarations":["nixos/modules/services/web-servers/caddy.nix"],"default":false,"description":"Whether to enable Caddy web server.","example":true,"loc":["services","caddy","enable"],"readOnly":false,"type":"boolean"},"services.caddy.package":{"declarations":["nixos/modules/services/web-servers/caddy.nix"],"default":"pkgs.caddy","description":"Caddy package to use.","loc":["services","caddy","package"],"readOnly":false,"type":"package"},"services.cadvisor.enable":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":false,"description":"Whether to enable cadvisor service.","loc":["services","cadvisor","enable"],"readOnly":false,"type":"boolean"},"services.cadvisor.listenAddress":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":"127.0.0.1","description":"Cadvisor listening host","loc":["services","cadvisor","listenAddress"],"readOnly":false,"type":"string"},"services.cadvisor.port":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":8080,"description":"Cadvisor listening port","loc":["services","cadvisor","port"],"readOnly":false,"type":"signed integer"},"services.cadvisor.storageDriver":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":null,"description":"Cadvisor storage driver.","example":"influxdb","loc":["services","cadvisor","storageDriver"],"readOnly":false,"type":"null or string"},"services.cadvisor.storageDriverDb":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":"root","description":"Cadvisord storage driver database name.","loc":["services","cadvisor","storageDriverDb"],"readOnly":false,"type":"string"},"services.cadvisor.storageDriverHost":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":"localhost:8086","description":"Cadvisor storage driver host.","loc":["services","cadvisor","storageDriverHost"],"readOnly":false,"type":"string"},"services.cadvisor.storageDriverPassword":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":"root","description":"Cadvisor storage driver password.\n\nWarning: this password is stored in the world-readable Nix store. It's\nrecommended to use the <option>storageDriverPasswordFile</option> option\nsince that gives you control over the security of the password.\n<option>storageDriverPasswordFile</option> also takes precedence over <option>storageDriverPassword</option>.\n","loc":["services","cadvisor","storageDriverPassword"],"readOnly":false,"type":"string"},"services.cadvisor.storageDriverPasswordFile":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"description":"File that contains the cadvisor storage driver password.\n\n<option>storageDriverPasswordFile</option> takes precedence over <option>storageDriverPassword</option>\n\nWarning: when <option>storageDriverPassword</option> is non-empty this defaults to a file in the\nworld-readable Nix store that contains the value of <option>storageDriverPassword</option>.\n\nIt's recommended to override this with a path not in the Nix store.\nTip: use <link xlink:href='https://nixos.org/nixops/manual/#idm140737318306400'>nixops key management</link>\n","loc":["services","cadvisor","storageDriverPasswordFile"],"readOnly":false,"type":"string"},"services.cadvisor.storageDriverSecure":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":false,"description":"Cadvisor storage driver, enable secure communication.","loc":["services","cadvisor","storageDriverSecure"],"readOnly":false,"type":"boolean"},"services.cadvisor.storageDriverUser":{"declarations":["nixos/modules/services/monitoring/cadvisor.nix"],"default":"root","description":"Cadvisor storage driver username.","loc":["services","cadvisor","storageDriverUser"],"readOnly":false,"type":"string"},"services.calibre-server.enable":{"declarations":["nixos/modules/services/misc/calibre-server.nix"],"default":false,"description":"Whether to enable calibre-server.","example":true,"loc":["services","calibre-server","enable"],"readOnly":false,"type":"boolean"},"services.calibre-server.libraryDir":{"declarations":["nixos/modules/services/misc/calibre-server.nix"],"description":"The directory where the Calibre library to serve is.\n","loc":["services","calibre-server","libraryDir"],"readOnly":false,"type":"path"},"services.canto-daemon.enable":{"declarations":["nixos/modules/services/misc/canto-daemon.nix"],"default":false,"description":"Whether to enable the canto RSS daemon.","loc":["services","canto-daemon","enable"],"readOnly":false,"type":"boolean"},"services.cassandra.enable":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":false,"description":"Whether to enable Apache Cassandra – Scalable and highly available database.\n.","example":true,"loc":["services","cassandra","enable"],"readOnly":false,"type":"boolean"},"services.cassandra.extraConfig":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":{},"description":"Extra options to be merged into cassandra.yaml as nix attribute set.\n","example":{"commitlog_sync_batch_window_in_ms":3},"loc":["services","cassandra","extraConfig"],"readOnly":false,"type":"attribute set"},"services.cassandra.fullRepairInterval":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":"3w","description":"Set the interval how often full repairs are run, i.e.\n`nodetool repair --full` is executed. See\nhttps://cassandra.apache.org/doc/latest/operating/repair.html\nfor more information.\n\nSet to `null` to disable full repairs.\n","example":{"_type":"literalExample","text":"null"},"loc":["services","cassandra","fullRepairInterval"],"readOnly":false,"type":"null or string"},"services.cassandra.fullRepairOptions":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":[],"description":"Options passed through to the full repair command.\n","example":["--partitioner-range"],"loc":["services","cassandra","fullRepairOptions"],"readOnly":false,"type":"list of strings"},"services.cassandra.group":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":"cassandra","description":"Run Apache Cassandra under this group.","loc":["services","cassandra","group"],"readOnly":false,"type":"string"},"services.cassandra.homeDir":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":"/var/lib/cassandra","description":"Home directory for Apache Cassandra.\n","loc":["services","cassandra","homeDir"],"readOnly":false,"type":"path"},"services.cassandra.incrementalRepairInterval":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":"3d","description":"Set the interval how often incremental repairs are run, i.e.\n`nodetool repair` is executed. See\nhttps://cassandra.apache.org/doc/latest/operating/repair.html\nfor more information.\n\nSet to `null` to disable incremental repairs.\n","example":{"_type":"literalExample","text":"null"},"loc":["services","cassandra","incrementalRepairInterval"],"readOnly":false,"type":"null or string"},"services.cassandra.incrementalRepairOptions":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":[],"description":"Options passed through to the incremental repair command.\n","example":["--partitioner-range"],"loc":["services","cassandra","incrementalRepairOptions"],"readOnly":false,"type":"list of Concatenated strings"},"services.cassandra.jvmOpts":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":[],"description":"Populate the JVM_OPT environment variable.\n","loc":["services","cassandra","jvmOpts"],"readOnly":false,"type":"list of strings"},"services.cassandra.listenAddress":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":"127.0.0.1","description":"Address or interface to bind to and tell other Cassandra nodes\nto connect to. You _must_ change this if you want multiple\nnodes to be able to communicate!\n\nSet listenAddress OR listenInterface, not both.\n\nLeaving it blank leaves it up to\nInetAddress.getLocalHost(). This will always do the Right\nThing _if_ the node is properly configured (hostname, name\nresolution, etc), and the Right Thing is to use the address\nassociated with the hostname (it might not be).\n\nSetting listen_address to 0.0.0.0 is always wrong.\n","example":{"_type":"literalExample","text":"null"},"loc":["services","cassandra","listenAddress"],"readOnly":false,"type":"null or string"},"services.cassandra.listenInterface":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":null,"description":"Set listenAddress OR listenInterface, not both. Interfaces\nmust correspond to a single address, IP aliasing is not\nsupported.\n","example":"eth1","loc":["services","cassandra","listenInterface"],"readOnly":false,"type":"null or string"},"services.cassandra.package":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":"pkgs.cassandra","description":"The Apache Cassandra package to use.\n","example":{"_type":"literalExample","text":"pkgs.cassandra_3_11"},"loc":["services","cassandra","package"],"readOnly":false,"type":"package"},"services.cassandra.rpcAddress":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":"127.0.0.1","description":"The address or interface to bind the native transport server to.\n\nSet rpcAddress OR rpcInterface, not both.\n\nLeaving rpcAddress blank has the same effect as on\nlistenAddress (i.e. it will be based on the configured hostname\nof the node).\n\nNote that unlike listenAddress, you can specify 0.0.0.0, but you\nmust also set extraConfig.broadcast_rpc_address to a value other\nthan 0.0.0.0.\n\nFor security reasons, you should not expose this port to the\ninternet. Firewall it if needed.\n","example":{"_type":"literalExample","text":"null"},"loc":["services","cassandra","rpcAddress"],"readOnly":false,"type":"null or string"},"services.cassandra.rpcInterface":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":null,"description":"Set rpcAddress OR rpcInterface, not both. Interfaces must\ncorrespond to a single address, IP aliasing is not supported.\n","example":"eth1","loc":["services","cassandra","rpcInterface"],"readOnly":false,"type":"null or string"},"services.cassandra.user":{"declarations":["nixos/modules/services/databases/cassandra.nix"],"default":"cassandra","description":"Run Apache Cassandra under this user.","loc":["services","cassandra","user"],"readOnly":false,"type":"string"},"services.ceph.client.enable":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":false,"description":"Whether to enable Ceph client configuration.","example":true,"loc":["services","ceph","client","enable"],"readOnly":false,"type":"boolean"},"services.ceph.client.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":{},"description":"Extra configuration to add to the client section. Configuration for rados gateways\nwould be added here, with their own sections, see example.\n","example":"{\n  # This would create a section for a radosgw daemon named node0 and related\n  # configuration for it\n  \"client.radosgw.node0\" = { \"some config option\" = \"true\"; };\n};\n","loc":["services","ceph","client","extraConfig"],"readOnly":false,"type":"attribute set of strings"},"services.ceph.enable":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":false,"description":"Whether to enable Ceph global configuration.","example":true,"loc":["services","ceph","enable"],"readOnly":false,"type":"boolean"},"services.ceph.global.authClientRequired":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":"cephx","description":"Enables requiring the cluster to authenticate itself to the client.\n","loc":["services","ceph","global","authClientRequired"],"readOnly":false,"type":"one of \"cephx\", \"none\""},"services.ceph.global.authClusterRequired":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":"cephx","description":"Enables requiring daemons to authenticate with eachother in the cluster.\n","loc":["services","ceph","global","authClusterRequired"],"readOnly":false,"type":"one of \"cephx\", \"none\""},"services.ceph.global.authServiceRequired":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":"cephx","description":"Enables requiring clients to authenticate with the cluster to access services in the cluster (e.g. radosgw, mds or osd).\n","loc":["services","ceph","global","authServiceRequired"],"readOnly":false,"type":"one of \"cephx\", \"none\""},"services.ceph.global.clusterName":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":"ceph","description":"Name of cluster\n","loc":["services","ceph","global","clusterName"],"readOnly":false,"type":"string"},"services.ceph.global.clusterNetwork":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":null,"description":"A comma-separated list of subnets that will be used as cluster networks in the cluster.\n","example":"10.10.0.0/24, 192.168.0.0/24\n","loc":["services","ceph","global","clusterNetwork"],"readOnly":false,"type":"null or strings concatenated with \",\""},"services.ceph.global.fsid":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"description":"Filesystem ID, a generated uuid, its must be generated and set before\nattempting to start a cluster\n","example":"433a2193-4f8a-47a0-95d2-209d7ca2cca5\n","loc":["services","ceph","global","fsid"],"readOnly":false,"type":"string"},"services.ceph.global.maxOpenFiles":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":131072,"description":"Max open files for each OSD daemon.\n","loc":["services","ceph","global","maxOpenFiles"],"readOnly":false,"type":"signed integer"},"services.ceph.global.monHost":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":null,"description":"List of hostname shortnames/IP addresses of the initial monitors.\n","example":"10.10.0.1, 10.10.0.2, 10.10.0.3\n","loc":["services","ceph","global","monHost"],"readOnly":false,"type":"null or strings concatenated with \",\""},"services.ceph.global.monInitialMembers":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":null,"description":"List of hosts that will be used as monitors at startup.\n","example":"node0, node1, node2 \n","loc":["services","ceph","global","monInitialMembers"],"readOnly":false,"type":"null or strings concatenated with \",\""},"services.ceph.global.publicNetwork":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":null,"description":"A comma-separated list of subnets that will be used as public networks in the cluster.\n","example":"10.20.0.0/24, 192.168.1.0/24\n","loc":["services","ceph","global","publicNetwork"],"readOnly":false,"type":"null or strings concatenated with \",\""},"services.ceph.mds.daemons":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":[],"description":"A list of metadata service daemons that should have a service created. The names correspond\nto the id part in ceph i.e. [ \"name1\" ] would result in mds.name1\n","example":"[ \"name1\" \"name2\" ];\n","loc":["services","ceph","mds","daemons"],"readOnly":false,"type":"list of strings"},"services.ceph.mds.enable":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":false,"description":"Whether to enable Ceph MDS daemon.","example":true,"loc":["services","ceph","mds","enable"],"readOnly":false,"type":"boolean"},"services.ceph.mds.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":{},"description":"Extra configuration to add to the MDS section.\n","loc":["services","ceph","mds","extraConfig"],"readOnly":false,"type":"attribute set of strings"},"services.ceph.mgr.daemons":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":[],"description":"A list of names for manager daemons that should have a service created. The names correspond\nto the id part in ceph i.e. [ \"name1\" ] would result in mgr.name1\n","example":"[ \"name1\" \"name2\" ];\n","loc":["services","ceph","mgr","daemons"],"readOnly":false,"type":"list of strings"},"services.ceph.mgr.enable":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":false,"description":"Whether to enable Ceph MGR daemon.","example":true,"loc":["services","ceph","mgr","enable"],"readOnly":false,"type":"boolean"},"services.ceph.mgr.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":{},"description":"Extra configuration to add to the global section for manager daemons.\n","loc":["services","ceph","mgr","extraConfig"],"readOnly":false,"type":"attribute set of strings"},"services.ceph.mon.daemons":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":[],"description":"A list of monitor daemons that should have a service created. The names correspond\nto the id part in ceph i.e. [ \"name1\" ] would result in mon.name1\n","example":"[ \"name1\" \"name2\" ];\n","loc":["services","ceph","mon","daemons"],"readOnly":false,"type":"list of strings"},"services.ceph.mon.enable":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":false,"description":"Whether to enable Ceph MON daemon.","example":true,"loc":["services","ceph","mon","enable"],"readOnly":false,"type":"boolean"},"services.ceph.mon.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":{},"description":"Extra configuration to add to the monitor section.\n","loc":["services","ceph","mon","extraConfig"],"readOnly":false,"type":"attribute set of strings"},"services.ceph.osd.daemons":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":[],"description":"A list of OSD daemons that should have a service created. The names correspond\nto the id part in ceph i.e. [ \"name1\" ] would result in osd.name1\n","example":"[ \"name1\" \"name2\" ];\n","loc":["services","ceph","osd","daemons"],"readOnly":false,"type":"list of strings"},"services.ceph.osd.enable":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":false,"description":"Whether to enable Ceph OSD daemon.","example":true,"loc":["services","ceph","osd","enable"],"readOnly":false,"type":"boolean"},"services.ceph.osd.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":{"osd crush chooseleaf type":"1","osd journal size":"10000","osd pool default min size":"2","osd pool default pg num":"200","osd pool default pgp num":"200","osd pool default size":"3"},"description":"Extra configuration to add to the OSD section.\n","loc":["services","ceph","osd","extraConfig"],"readOnly":false,"type":"attribute set of strings"},"services.ceph.rgw.daemons":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":[],"description":"A list of rados gateway daemons that should have a service created. The names correspond\nto the id part in ceph i.e. [ \"name1\" ] would result in client.name1, radosgw daemons\naren't daemons to cluster in the sense that OSD, MGR or MON daemons are. They are simply\ndaemons, from ceph, that uses the cluster as a backend.\n","example":"[ \"name1\" \"name2\" ];\n","loc":["services","ceph","rgw","daemons"],"readOnly":false,"type":"list of strings"},"services.ceph.rgw.enable":{"declarations":["nixos/modules/services/network-filesystems/ceph.nix"],"default":false,"description":"Whether to enable Ceph RadosGW daemon.","example":true,"loc":["services","ceph","rgw","enable"],"readOnly":false,"type":"boolean"},"services.certmgr.defaultRemote":{"declarations":["nixos/modules/services/security/certmgr.nix"],"default":"127.0.0.1:8888","description":"The default CA host:port to use.","loc":["services","certmgr","defaultRemote"],"readOnly":false,"type":"string"},"services.certmgr.enable":{"declarations":["nixos/modules/services/security/certmgr.nix"],"default":false,"description":"Whether to enable certmgr.","example":true,"loc":["services","certmgr","enable"],"readOnly":false,"type":"boolean"},"services.certmgr.metricsAddress":{"declarations":["nixos/modules/services/security/certmgr.nix"],"default":"127.0.0.1","description":"The address for the Prometheus HTTP endpoint.","loc":["services","certmgr","metricsAddress"],"readOnly":false,"type":"string"},"services.certmgr.metricsPort":{"declarations":["nixos/modules/services/security/certmgr.nix"],"default":9488,"description":"The port for the Prometheus HTTP endpoint.","loc":["services","certmgr","metricsPort"],"readOnly":false,"type":"16 bit unsigned integer; between 0 and 65535 (both inclusive)"},"services.certmgr.renewInterval":{"declarations":["nixos/modules/services/security/certmgr.nix"],"default":"30m","description":"How often to check certificate expirations and how often to update the cert_next_expires metric.","loc":["services","certmgr","renewInterval"],"readOnly":false,"type":"string"},"services.certmgr.specs":{"declarations":["nixos/modules/services/security/certmgr.nix"],"default":{},"description":"Certificate specs as described by:\n<link xlink:href=\"https://github.com/cloudflare/certmgr#certificate-specs\" />\nThese will be added to the Nix store, so they will be world readable.\n","example":{"_type":"literalExample","text":"{\n  exampleCert =\n  let\n    domain = \"example.com\";\n    secret = name: \"/var/lib/secrets/${name}.pem\";\n  in {\n    service = \"nginx\";\n    action = \"reload\";\n    authority = {\n      file.path = secret \"ca\";\n    };\n    certificate = {\n      path = secret domain;\n    };\n    private_key = {\n      owner = \"root\";\n      group = \"root\";\n      mode = \"0600\";\n      path = secret \"${domain}-key\";\n    };\n    request = {\n      CN = domain;\n      hosts = [ \"mail.${domain}\" \"www.${domain}\" ];\n      key = {\n        algo = \"rsa\";\n        size = 2048;\n      };\n      names = {\n        O = \"Example Organization\";\n        C = \"USA\";\n      };\n    };\n  };\n  otherCert = \"/var/certmgr/specs/other-cert.json\";\n}\n"},"loc":["services","certmgr","specs"],"readOnly":false,"type":"attribute set of submodule or paths"},"services.certmgr.svcManager":{"declarations":["nixos/modules/services/security/certmgr.nix"],"default":"systemd","description":"This specifies the service manager to use for restarting or reloading services.\nSee: <link xlink:href=\"https://github.com/cloudflare/certmgr#certmgryaml\" />.\nFor how to use the \"command\" service manager in particular,\nsee: <link xlink:href=\"https://github.com/cloudflare/certmgr#command-svcmgr-and-how-to-use-it\" />.\n","loc":["services","certmgr","svcManager"],"readOnly":false,"type":"one of \"circus\", \"command\", \"dummy\", \"openrc\", \"systemd\", \"sysv\""},"services.certmgr.validMin":{"declarations":["nixos/modules/services/security/certmgr.nix"],"default":"72h","description":"The interval before a certificate expires to start attempting to renew it.","loc":["services","certmgr","validMin"],"readOnly":false,"type":"string"},"services.cfdyndns.apikey":{"declarations":["nixos/modules/services/misc/cfdyndns.nix"],"description":"The API Key to use to authenticate to CloudFlare.\n","loc":["services","cfdyndns","apikey"],"readOnly":false,"type":"string"},"services.cfdyndns.email":{"declarations":["nixos/modules/services/misc/cfdyndns.nix"],"description":"The email address to use to authenticate to CloudFlare.\n","loc":["services","cfdyndns","email"],"readOnly":false,"type":"string"},"services.cfdyndns.enable":{"declarations":["nixos/modules/services/misc/cfdyndns.nix"],"default":false,"description":"Whether to enable Cloudflare Dynamic DNS Client.","example":true,"loc":["services","cfdyndns","enable"],"readOnly":false,"type":"boolean"},"services.cfdyndns.records":{"declarations":["nixos/modules/services/misc/cfdyndns.nix"],"default":[],"description":"The records to update in CloudFlare.\n","example":["host.tld"],"loc":["services","cfdyndns","records"],"readOnly":false,"type":"list of strings"},"services.cfssl.address":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":"127.0.0.1","description":"Address to bind.","loc":["services","cfssl","address"],"readOnly":false,"type":"string"},"services.cfssl.ca":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":"${cfg.dataDir}/ca.pem","description":"CA used to sign the new certificate -- accepts '[file:]fname' or 'env:varname'.","loc":["services","cfssl","ca"],"readOnly":false,"type":"string"},"services.cfssl.caBundle":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Path to root certificate store.","loc":["services","cfssl","caBundle"],"readOnly":false,"type":"null or path"},"services.cfssl.caKey":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":"file:${cfg.dataDir}/ca-key.pem","description":"CA private key -- accepts '[file:]fname' or 'env:varname'.","loc":["services","cfssl","caKey"],"readOnly":false,"type":"string"},"services.cfssl.configFile":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Path to configuration file. Do not put this in nix-store as it might contain secrets.","loc":["services","cfssl","configFile"],"readOnly":false,"type":"null or string"},"services.cfssl.dataDir":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":"/var/lib/cfssl","description":"Cfssl work directory.","loc":["services","cfssl","dataDir"],"readOnly":false,"type":"path"},"services.cfssl.dbConfig":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Certificate db configuration file. Path must be writeable.","loc":["services","cfssl","dbConfig"],"readOnly":false,"type":"null or path"},"services.cfssl.enable":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":false,"description":"Whether to enable the CFSSL CA api-server.","example":true,"loc":["services","cfssl","enable"],"readOnly":false,"type":"boolean"},"services.cfssl.intBundle":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Path to intermediate certificate store.","loc":["services","cfssl","intBundle"],"readOnly":false,"type":"null or path"},"services.cfssl.intDir":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Intermediates directory.","loc":["services","cfssl","intDir"],"readOnly":false,"type":"null or path"},"services.cfssl.logLevel":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":1,"description":"Log level (0 = DEBUG, 5 = FATAL).","loc":["services","cfssl","logLevel"],"readOnly":false,"type":"one of 0, 1, 2, 3, 4, 5"},"services.cfssl.metadata":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Metadata file for root certificate presence.\nThe content of the file is a json dictionary (k,v): each key k is\na SHA-1 digest of a root certificate while value v is a list of key\nstore filenames.\n","loc":["services","cfssl","metadata"],"readOnly":false,"type":"null or path"},"services.cfssl.mutualTlsCa":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Mutual TLS - require clients be signed by this CA.","loc":["services","cfssl","mutualTlsCa"],"readOnly":false,"type":"null or path"},"services.cfssl.mutualTlsClientCert":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Mutual TLS - client certificate to call remote instance requiring client certs.","loc":["services","cfssl","mutualTlsClientCert"],"readOnly":false,"type":"null or path"},"services.cfssl.mutualTlsClientKey":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Mutual TLS - client key to call remote instance requiring client certs. Do not put this in nix-store.","loc":["services","cfssl","mutualTlsClientKey"],"readOnly":false,"type":"null or path"},"services.cfssl.mutualTlsCn":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Mutual TLS - regex for whitelist of allowed client CNs.","loc":["services","cfssl","mutualTlsCn"],"readOnly":false,"type":"null or string"},"services.cfssl.port":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":8888,"description":"Port to bind.","loc":["services","cfssl","port"],"readOnly":false,"type":"16 bit unsigned integer; between 0 and 65535 (both inclusive)"},"services.cfssl.remote":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Remote CFSSL server.","loc":["services","cfssl","remote"],"readOnly":false,"type":"null or string"},"services.cfssl.responder":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Certificate for OCSP responder.","loc":["services","cfssl","responder"],"readOnly":false,"type":"null or path"},"services.cfssl.responderKey":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Private key for OCSP responder certificate. Do not put this in nix-store.","loc":["services","cfssl","responderKey"],"readOnly":false,"type":"null or string"},"services.cfssl.tlsCert":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Other endpoint's CA to set up TLS protocol.","loc":["services","cfssl","tlsCert"],"readOnly":false,"type":"null or path"},"services.cfssl.tlsKey":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"Other endpoint's CA private key. Do not put this in nix-store.","loc":["services","cfssl","tlsKey"],"readOnly":false,"type":"null or string"},"services.cfssl.tlsRemoteCa":{"declarations":["nixos/modules/services/security/cfssl.nix"],"default":null,"description":"CAs to trust for remote TLS requests.","loc":["services","cfssl","tlsRemoteCa"],"readOnly":false,"type":"null or path"},"services.cgmanager.enable":{"declarations":["nixos/modules/services/system/cgmanager.nix"],"default":false,"description":"Whether to enable cgmanager.","example":true,"loc":["services","cgmanager","enable"],"readOnly":false,"type":"boolean"},"services.cgminer.config":{"declarations":["nixos/modules/services/misc/cgminer.nix"],"default":{},"description":"Additional config","example":{"auto-fan":true,"auto-gpu":true,"expiry":120,"failover-only":true,"gpu-threads":2,"log":5,"queue":1,"scan-time":60,"temp-histeresys":3},"loc":["services","cgminer","config"],"readOnly":false,"type":"unspecified"},"services.cgminer.enable":{"declarations":["nixos/modules/services/misc/cgminer.nix"],"default":false,"description":"Whether to enable cgminer, an ASIC/FPGA/GPU miner for bitcoin and\nlitecoin.\n","loc":["services","cgminer","enable"],"readOnly":false,"type":"unspecified"},"services.cgminer.hardware":{"declarations":["nixos/modules/services/misc/cgminer.nix"],"default":[],"description":"List of config options for every GPU","example":[{"gpu-engine":"0-985","gpu-fan":"0-85","gpu-memclock":860,"gpu-powertune":20,"intensity":9,"temp-cutoff":95,"temp-overheat":85,"temp-target":75},{"gpu-engine":"0-950","gpu-fan":"0-85","gpu-memclock":825,"gpu-powertune":20,"intensity":9,"temp-cutoff":95,"temp-overheat":85,"temp-target":75}],"loc":["services","cgminer","hardware"],"readOnly":false,"type":"unspecified"},"services.cgminer.package":{"declarations":["nixos/modules/services/misc/cgminer.nix"],"default":"pkgs.cgminer","description":"Which cgminer derivation to use.","loc":["services","cgminer","package"],"readOnly":false,"type":"package"},"services.cgminer.pools":{"declarations":["nixos/modules/services/misc/cgminer.nix"],"default":[],"description":"List of pools where to mine","example":[{"password":"X","url":"http://p2pool.org:9332","username":"17EUZxTvs9uRmPsjPZSYUU3zCz9iwstudk"}],"loc":["services","cgminer","pools"],"readOnly":false,"type":"unspecified"},"services.cgminer.user":{"declarations":["nixos/modules/services/misc/cgminer.nix"],"default":"cgminer","description":"User account under which cgminer runs","loc":["services","cgminer","user"],"readOnly":false,"type":"unspecified"},"services.charybdis.config":{"declarations":["nixos/modules/services/networking/charybdis.nix"],"description":"Charybdis IRC daemon configuration file.\n","loc":["services","charybdis","config"],"readOnly":false,"type":"Concatenated string"},"services.charybdis.enable":{"declarations":["nixos/modules/services/networking/charybdis.nix"],"default":false,"description":"Whether to enable Charybdis IRC daemon.","example":true,"loc":["services","charybdis","enable"],"readOnly":false,"type":"boolean"},"services.charybdis.group":{"declarations":["nixos/modules/services/networking/charybdis.nix"],"default":"ircd","description":"Charybdis IRC daemon group.\n","loc":["services","charybdis","group"],"readOnly":false,"type":"Concatenated string"},"services.charybdis.motd":{"declarations":["nixos/modules/services/networking/charybdis.nix"],"default":null,"description":"Charybdis MOTD text.\n\nCharybdis will read its MOTD from /etc/charybdis/ircd.motd .\nIf set, the value of this option will be written to this path.\n","loc":["services","charybdis","motd"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.charybdis.statedir":{"declarations":["nixos/modules/services/networking/charybdis.nix"],"default":"/var/lib/charybdis","description":"Location of the state directory of charybdis.\n","loc":["services","charybdis","statedir"],"readOnly":false,"type":"Concatenated string"},"services.charybdis.user":{"declarations":["nixos/modules/services/networking/charybdis.nix"],"default":"ircd","description":"Charybdis IRC daemon user.\n","loc":["services","charybdis","user"],"readOnly":false,"type":"Concatenated string"},"services.chronos.enable":{"declarations":["nixos/modules/services/scheduling/chronos.nix"],"default":false,"description":"Whether to enable graphite web frontend.","loc":["services","chronos","enable"],"readOnly":false,"type":"boolean"},"services.chronos.httpPort":{"declarations":["nixos/modules/services/scheduling/chronos.nix"],"default":4400,"description":"Chronos listening port","loc":["services","chronos","httpPort"],"readOnly":false,"type":"signed integer"},"services.chronos.master":{"declarations":["nixos/modules/services/scheduling/chronos.nix"],"default":"zk://localhost:2181/mesos","description":"Chronos mesos master zookeeper address","loc":["services","chronos","master"],"readOnly":false,"type":"string"},"services.chronos.zookeeperHosts":{"declarations":["nixos/modules/services/scheduling/chronos.nix"],"default":["localhost:2181"],"description":"Chronos mesos zookepper addresses","loc":["services","chronos","zookeeperHosts"],"readOnly":false,"type":"list of strings"},"services.chrony.enable":{"declarations":["nixos/modules/services/networking/chrony.nix"],"default":false,"description":"Whether to synchronise your machine's time using chrony.\nMake sure you disable NTP if you enable this service.\n","loc":["services","chrony","enable"],"readOnly":false,"type":"unspecified"},"services.chrony.extraConfig":{"declarations":["nixos/modules/services/networking/chrony.nix"],"default":"","description":"Extra configuration directives that should be added to\n<literal>chrony.conf</literal>\n","loc":["services","chrony","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.chrony.extraFlags":{"declarations":["nixos/modules/services/networking/chrony.nix"],"default":[],"description":"Extra flags passed to the chronyd command.","example":["-s"],"loc":["services","chrony","extraFlags"],"readOnly":false,"type":"list of strings"},"services.chrony.initstepslew":{"declarations":["nixos/modules/services/networking/chrony.nix"],"default":{"enabled":true,"servers":["0.nixos.pool.ntp.org","1.nixos.pool.ntp.org","2.nixos.pool.ntp.org","3.nixos.pool.ntp.org"],"threshold":1000},"description":"Allow chronyd to make a rapid measurement of the system clock error at\nboot time, and to correct the system clock by stepping before normal\noperation begins.\n","loc":["services","chrony","initstepslew"],"readOnly":false,"type":"unspecified"},"services.chrony.servers":{"declarations":["nixos/modules/services/networking/chrony.nix"],"default":["0.nixos.pool.ntp.org","1.nixos.pool.ntp.org","2.nixos.pool.ntp.org","3.nixos.pool.ntp.org"],"description":"The set of NTP servers from which to synchronise.\n","loc":["services","chrony","servers"],"readOnly":false,"type":"unspecified"},"services.cjdns.ETHInterface.beacon":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":2,"description":"Auto-connect to other cjdns nodes on the same network.\nOptions:\n  0: Disabled.\n  1: Accept beacons, this will cause cjdns to accept incoming\n     beacon messages and try connecting to the sender.\n  2: Accept and send beacons, this will cause cjdns to broadcast\n     messages on the local network which contain a randomly\n     generated per-session password, other nodes which have this\n     set to 1 or 2 will hear the beacon messages and connect\n     automatically.\n","loc":["services","cjdns","ETHInterface","beacon"],"readOnly":false,"type":"signed integer"},"services.cjdns.ETHInterface.bind":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":"","description":"Bind to this device for native ethernet operation.\n<literal>all</literal> is a pseudo-name which will try to connect to all devices.\n","example":"eth0","loc":["services","cjdns","ETHInterface","bind"],"readOnly":false,"type":"string"},"services.cjdns.ETHInterface.connectTo":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":{},"description":"Credentials for connecting look similar to UDP credientials\nexcept they begin with the mac address.\n","example":{"01:02:03:04:05:06":{"hostname":"homer.hype","password":"5kG15EfpdcKNX3f2GSQ0H1HC7yIfxoCoImnO5FHM","publicKey":"371zpkgs8ss387tmr81q04mp0hg1skb51hw34vk1cq644mjqhup0.k"}},"loc":["services","cjdns","ETHInterface","connectTo"],"readOnly":false,"type":"attribute set of submodules"},"services.cjdns.ETHInterface.connectTo.<name>.hostname":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":"","description":"Optional hostname to add to /etc/hosts; prevents reverse lookup failures.","example":"foobar.hype","loc":["services","cjdns","ETHInterface","connectTo","<name>","hostname"],"readOnly":false,"type":"string"},"services.cjdns.ETHInterface.connectTo.<name>.password":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"description":"Authorized password to the opposite end of the tunnel.","loc":["services","cjdns","ETHInterface","connectTo","<name>","password"],"readOnly":false,"type":"string"},"services.cjdns.ETHInterface.connectTo.<name>.publicKey":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"description":"Public key at the opposite end of the tunnel.","loc":["services","cjdns","ETHInterface","connectTo","<name>","publicKey"],"readOnly":false,"type":"string"},"services.cjdns.UDPInterface.bind":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":"","description":"Address and port to bind UDP tunnels to.\n","example":"192.168.1.32:43211","loc":["services","cjdns","UDPInterface","bind"],"readOnly":false,"type":"string"},"services.cjdns.UDPInterface.connectTo":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":{},"description":"Credentials for making UDP tunnels.\n","example":{"192.168.1.1:27313":{"hostname":"homer.hype","password":"5kG15EfpdcKNX3f2GSQ0H1HC7yIfxoCoImnO5FHM","publicKey":"371zpkgs8ss387tmr81q04mp0hg1skb51hw34vk1cq644mjqhup0.k"}},"loc":["services","cjdns","UDPInterface","connectTo"],"readOnly":false,"type":"attribute set of submodules"},"services.cjdns.UDPInterface.connectTo.<name>.hostname":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":"","description":"Optional hostname to add to /etc/hosts; prevents reverse lookup failures.","example":"foobar.hype","loc":["services","cjdns","UDPInterface","connectTo","<name>","hostname"],"readOnly":false,"type":"string"},"services.cjdns.UDPInterface.connectTo.<name>.password":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"description":"Authorized password to the opposite end of the tunnel.","loc":["services","cjdns","UDPInterface","connectTo","<name>","password"],"readOnly":false,"type":"string"},"services.cjdns.UDPInterface.connectTo.<name>.publicKey":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"description":"Public key at the opposite end of the tunnel.","loc":["services","cjdns","UDPInterface","connectTo","<name>","publicKey"],"readOnly":false,"type":"string"},"services.cjdns.addExtraHosts":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":false,"description":"Whether to add cjdns peers with an associated hostname to\n<filename>/etc/hosts</filename>.  Beware that enabling this\nincurs heavy eval-time costs.\n","loc":["services","cjdns","addExtraHosts"],"readOnly":false,"type":"boolean"},"services.cjdns.admin.bind":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":"127.0.0.1:11234","description":"Bind the administration port to this address and port.\n","loc":["services","cjdns","admin","bind"],"readOnly":false,"type":"string"},"services.cjdns.authorizedPasswords":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":[],"description":"Any remote cjdns nodes that offer these passwords on\nconnection will be allowed to route through this node.\n","example":["snyrfgkqsc98qh1y4s5hbu0j57xw5s0","z9md3t4p45mfrjzdjurxn4wuj0d8swv","49275fut6tmzu354pq70sr5b95qq0vj"],"loc":["services","cjdns","authorizedPasswords"],"readOnly":false,"type":"list of strings"},"services.cjdns.confFile":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":null,"description":"Ignore all other cjdns options and load configuration from this file.\n","example":"/etc/cjdroute.conf","loc":["services","cjdns","confFile"],"readOnly":false,"type":"null or path"},"services.cjdns.enable":{"declarations":["nixos/modules/services/networking/cjdns.nix"],"default":false,"description":"Whether to enable the cjdns network encryption\nand routing engine. A file at /etc/cjdns.keys will\nbe created if it does not exist to contain a random\nsecret key that your IPv6 address will be derived from.\n","loc":["services","cjdns","enable"],"readOnly":false,"type":"boolean"},"services.clamav.daemon.enable":{"declarations":["nixos/modules/services/security/clamav.nix"],"default":false,"description":"Whether to enable ClamAV clamd daemon.","example":true,"loc":["services","clamav","daemon","enable"],"readOnly":false,"type":"boolean"},"services.clamav.daemon.extraConfig":{"declarations":["nixos/modules/services/security/clamav.nix"],"default":"","description":"Extra configuration for clamd. Contents will be added verbatim to the\nconfiguration file.\n","loc":["services","clamav","daemon","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.clamav.updater.enable":{"declarations":["nixos/modules/services/security/clamav.nix"],"default":false,"description":"Whether to enable ClamAV freshclam updater.","example":true,"loc":["services","clamav","updater","enable"],"readOnly":false,"type":"boolean"},"services.clamav.updater.extraConfig":{"declarations":["nixos/modules/services/security/clamav.nix"],"default":"","description":"Extra configuration for freshclam. Contents will be added verbatim to the\nconfiguration file.\n","loc":["services","clamav","updater","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.clamav.updater.frequency":{"declarations":["nixos/modules/services/security/clamav.nix"],"default":12,"description":"Number of database checks per day.\n","loc":["services","clamav","updater","frequency"],"readOnly":false,"type":"signed integer"},"services.clamav.updater.interval":{"declarations":["nixos/modules/services/security/clamav.nix"],"default":"hourly","description":"How often freshclam is invoked. See systemd.time(7) for more\ninformation about the format.\n","loc":["services","clamav","updater","interval"],"readOnly":false,"type":"string"},"services.clamsmtp.enable":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":false,"description":"Whether to enable clamsmtp.","loc":["services","clamsmtp","enable"],"readOnly":false,"type":"boolean"},"services.clamsmtp.instances":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"description":"Instances of clamsmtp to run.","loc":["services","clamsmtp","instances"],"readOnly":false,"type":"list of submodules"},"services.clamsmtp.instances.*.action":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":"drop","description":"Action to take when a virus is detected.\n\nNote that viruses often spoof sender addresses, so bouncing is\nin most cases not a good idea.\n","loc":["services","clamsmtp","instances","*","action"],"readOnly":false,"type":"one of \"bounce\", \"drop\", \"pass\""},"services.clamsmtp.instances.*.header":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":"","description":"A header to add to scanned messages. See clamsmtpd.conf(5) for\nmore details. Empty means no header.\n","example":"X-Virus-Scanned: ClamAV using ClamSMTP","loc":["services","clamsmtp","instances","*","header"],"readOnly":false,"type":"string"},"services.clamsmtp.instances.*.keepAlives":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":0,"description":"Number of seconds to wait between each NOOP sent to the sending\nserver. 0 to disable.\n\nThis is meant for slow servers where the sending MTA times out\nwaiting for clamd to scan the file.\n","loc":["services","clamsmtp","instances","*","keepAlives"],"readOnly":false,"type":"signed integer"},"services.clamsmtp.instances.*.listen":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"description":"Address to wait for incoming SMTP connections on. See\nclamsmtpd.conf(5) for more details.\n","example":"127.0.0.1:10025","loc":["services","clamsmtp","instances","*","listen"],"readOnly":false,"type":"string"},"services.clamsmtp.instances.*.maxConnections":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":64,"description":"Maximum number of connections to accept at once.","loc":["services","clamsmtp","instances","*","maxConnections"],"readOnly":false,"type":"signed integer"},"services.clamsmtp.instances.*.outAddress":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"description":"Address of the SMTP server to send email to once it has been\nscanned.\n","loc":["services","clamsmtp","instances","*","outAddress"],"readOnly":false,"type":"string"},"services.clamsmtp.instances.*.quarantine":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":false,"description":"Whether to quarantine files that contain viruses by leaving them\nin the temporary directory.\n","loc":["services","clamsmtp","instances","*","quarantine"],"readOnly":false,"type":"boolean"},"services.clamsmtp.instances.*.tempDirectory":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":"/tmp","description":"Temporary directory that needs to be accessible to both clamd\nand clamsmtpd.\n","loc":["services","clamsmtp","instances","*","tempDirectory"],"readOnly":false,"type":"string"},"services.clamsmtp.instances.*.timeout":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":180,"description":"Time-out for network connections.","loc":["services","clamsmtp","instances","*","timeout"],"readOnly":false,"type":"signed integer"},"services.clamsmtp.instances.*.transparentProxy":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":false,"description":"Enable clamsmtp's transparent proxy support.","loc":["services","clamsmtp","instances","*","transparentProxy"],"readOnly":false,"type":"boolean"},"services.clamsmtp.instances.*.virusAction":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":null,"description":"Command to run when a virus is found. Please see VIRUS ACTION in\nclamsmtpd(8) for a discussion of this option and its safe use.\n","loc":["services","clamsmtp","instances","*","virusAction"],"readOnly":false,"type":"null or path"},"services.clamsmtp.instances.*.xClient":{"declarations":["nixos/modules/services/mail/clamsmtp.nix"],"default":false,"description":"Send the XCLIENT command to the receiving server, for forwarding\nclient addresses and connection information if the receiving\nserver supports this feature.\n","loc":["services","clamsmtp","instances","*","xClient"],"readOnly":false,"type":"boolean"},"services.clickhouse.enable":{"declarations":["nixos/modules/services/databases/clickhouse.nix"],"default":false,"description":"Whether to enable ClickHouse database server.","loc":["services","clickhouse","enable"],"readOnly":false,"type":"unspecified"},"services.clipmenu.enable":{"declarations":["nixos/modules/services/misc/clipmenu.nix"],"default":false,"description":"Whether to enable clipmenu, the clipboard management daemon.","example":true,"loc":["services","clipmenu","enable"],"readOnly":false,"type":"boolean"},"services.clipmenu.package":{"declarations":["nixos/modules/services/misc/clipmenu.nix"],"default":"pkgs.clipmenu","description":"clipmenu derivation to use.","loc":["services","clipmenu","package"],"readOnly":false,"type":"package"},"services.cloud-init.config":{"declarations":["nixos/modules/services/system/cloud-init.nix"],"default":"system_info:\n  distro: nixos\nusers:\n   - root\n\ndisable_root: false\npreserve_hostname: false\n\ncloud_init_modules:\n - migrator\n - seed_random\n - bootcmd\n - write-files\n - growpart\n - resizefs\n - update_etc_hosts\n - ca-certs\n - rsyslog\n - users-groups\n\ncloud_config_modules:\n - disk_setup\n - mounts\n - ssh-import-id\n - set-passwords\n - timezone\n - disable-ec2-metadata\n - runcmd\n - ssh\n\ncloud_final_modules:\n - rightscale_userdata\n - scripts-vendor\n - scripts-per-once\n - scripts-per-boot\n - scripts-per-instance\n - scripts-user\n - ssh-authkey-fingerprints\n - keys-to-console\n - phone-home\n - final-message\n - power-state-change\n","description":"cloud-init configuration.","loc":["services","cloud-init","config"],"readOnly":false,"type":"string"},"services.cloud-init.enable":{"declarations":["nixos/modules/services/system/cloud-init.nix"],"default":false,"description":"Enable the cloud-init service. This services reads\nconfiguration metadata in a cloud environment and configures\nthe machine according to this metadata.\n\nThis configuration is not completely compatible with the\nNixOS way of doing configuration, as configuration done by\ncloud-init might be overriden by a subsequent nixos-rebuild\ncall. However, some parts of cloud-init fall outside of\nNixOS's responsibility, like filesystem resizing and ssh\npublic key provisioning, and cloud-init is useful for that\nparts. Thus, be wary that using cloud-init in NixOS might\ncome as some cost.\n","loc":["services","cloud-init","enable"],"readOnly":false,"type":"boolean"},"services.cntlm.configText":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"default":"","description":"Verbatim contents of <filename>cntlm.conf</filename>.","loc":["services","cntlm","configText"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.cntlm.domain":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"description":"Proxy account domain/workgroup name.","loc":["services","cntlm","domain"],"readOnly":false,"type":"unspecified"},"services.cntlm.enable":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"default":false,"description":"Whether to enable the cntlm, which start a local proxy.\n","loc":["services","cntlm","enable"],"readOnly":false,"type":"unspecified"},"services.cntlm.extraConfig":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"default":"","description":"Additional config appended to the end of the generated <filename>cntlm.conf</filename>.","loc":["services","cntlm","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.cntlm.netbios_hostname":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"default":"","description":"The hostname of your machine.\n","loc":["services","cntlm","netbios_hostname"],"readOnly":false,"type":"string"},"services.cntlm.noproxy":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"default":[],"description":"A list of domains where the proxy is skipped.\n","example":["*.example.com","example.com"],"loc":["services","cntlm","noproxy"],"readOnly":false,"type":"unspecified"},"services.cntlm.password":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"default":"/etc/cntlm.password","description":"Proxy account password. Note: use chmod 0600 on /etc/cntlm.password for security.","loc":["services","cntlm","password"],"readOnly":false,"type":"string"},"services.cntlm.port":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"default":[3128],"description":"Specifies on which ports the cntlm daemon listens.","loc":["services","cntlm","port"],"readOnly":false,"type":"unspecified"},"services.cntlm.proxy":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"description":"A list of NTLM/NTLMv2 authenticating HTTP proxies.\n\nParent proxy, which requires authentication. The same as proxy on the command-line, can be used more than  once  to  specify  unlimited\nnumber  of  proxies.  Should  one proxy fail, cntlm automatically moves on to the next one. The connect request fails only if the whole\nlist of proxies is scanned and (for each request) and found to be invalid. Command-line takes precedence over the configuration file.\n","example":["proxy.example.com:81"],"loc":["services","cntlm","proxy"],"readOnly":false,"type":"unspecified"},"services.cntlm.username":{"declarations":["nixos/modules/services/networking/cntlm.nix"],"description":"Proxy account name, without the possibility to include domain name ('at' sign is interpreted literally).\n","loc":["services","cntlm","username"],"readOnly":false,"type":"unspecified"},"services.codimd.configuration.allowAnonymous":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Whether to allow anonymous usage.\n","loc":["services","codimd","configuration","allowAnonymous"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.allowAnonymousEdits":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":false,"description":"Whether to allow guests to edit existing notes with the `freely' permission,\nwhen <option>allowAnonymous</option> is enabled.\n","loc":["services","codimd","configuration","allowAnonymousEdits"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.allowEmailRegister":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Wether to enable email registration.\n","loc":["services","codimd","configuration","allowEmailRegister"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.allowFreeURL":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":false,"description":"Whether to allow note creation by accessing a nonexistent note URL.\n","loc":["services","codimd","configuration","allowFreeURL"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.allowGravatar":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Whether to use gravatar as profile picture source.\n","loc":["services","codimd","configuration","allowGravatar"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.allowOrigin":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":[],"description":"List of domains to whitelist.\n","example":["localhost","codimd.org"],"loc":["services","codimd","configuration","allowOrigin"],"readOnly":false,"type":"list of strings"},"services.codimd.configuration.allowPDFExport":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Whether to enable PDF exports.\n","loc":["services","codimd","configuration","allowPDFExport"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.azure":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the azure third-party integration.","loc":["services","codimd","configuration","azure"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.azure.connectionString":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Azure Blob Storage connection string.\n","loc":["services","codimd","configuration","azure","connectionString"],"readOnly":false,"type":"string"},"services.codimd.configuration.azure.container":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Azure Blob Storage container name.\nIt will be created if non-existent.\n","loc":["services","codimd","configuration","azure","container"],"readOnly":false,"type":"string"},"services.codimd.configuration.csp":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Specify the Content Security Policy which is passed to Helmet.\nFor configuration details see <link xlink:href=\"https://helmetjs.github.io/docs/csp/\"\n>https://helmetjs.github.io/docs/csp/</link>.\n","example":{"_type":"literalExample","text":"{\n  enable = true;\n  directives = {\n    scriptSrc = \"trustworthy.scripts.example.com\";\n  };\n  upgradeInsecureRequest = \"auto\";\n  addDefaults = true;\n}\n"},"loc":["services","codimd","configuration","csp"],"readOnly":false,"type":"null or attribute set"},"services.codimd.configuration.db":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":{},"description":"Specify the configuration for sequelize.\nCodiMD supports mysql, postgres, sqlite and mssql.\nSee <link xlink:href=\"https://sequelize.readthedocs.io/en/v3/\">\nhttps://sequelize.readthedocs.io/en/v3/</link> for more information.\nNote: This option overrides <option>db</option>.\n","example":{"_type":"literalExample","text":"{\n  dialect = \"sqlite\";\n  storage = \"/var/lib/codimd/db.codimd.sqlite\";\n}\n"},"loc":["services","codimd","configuration","db"],"readOnly":false,"type":"attribute set"},"services.codimd.configuration.dbURL":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Specify which database to use.\nCodiMD supports mysql, postgres, sqlite and mssql.\nSee <link xlink:href=\"https://sequelize.readthedocs.io/en/v3/\">\nhttps://sequelize.readthedocs.io/en/v3/</link> for more information.\nNote: This option overrides <option>db</option>.\n","example":"postgres://user:pass@host:5432/dbname\n","loc":["services","codimd","configuration","dbURL"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.debug":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":false,"description":"Whether to enable debug mode.","example":true,"loc":["services","codimd","configuration","debug"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.defaultNotePath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"./public/default.md","description":"Path to the default Note file.\n(Non-canonical paths are relative to CodiMD's base directory)\n","loc":["services","codimd","configuration","defaultNotePath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.defaultPermission":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"editable","description":"Default permissions for notes.\nThis only applies for signed-in users.\n","loc":["services","codimd","configuration","defaultPermission"],"readOnly":false,"type":"one of \"freely\", \"editable\", \"limited\", \"locked\", \"private\""},"services.codimd.configuration.dhParamPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Path to the SSL dh params. Needed when <option>useSSL</option> is enabled.\n","example":"/var/lib/codimd/dhparam.pem","loc":["services","codimd","configuration","dhParamPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.docsPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"./public/docs","description":"Path to the docs directory.\n(Non-canonical paths are relative to CodiMD's base directory)\n","loc":["services","codimd","configuration","docsPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.documentMaxLength":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":100000,"description":"Specify the maximum document length.\n","loc":["services","codimd","configuration","documentMaxLength"],"readOnly":false,"type":"signed integer"},"services.codimd.configuration.domain":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Domain name for the CodiMD instance.\n","example":"codimd.org","loc":["services","codimd","configuration","domain"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.dropbox":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the Dropbox third-party integration.","loc":["services","codimd","configuration","dropbox"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.dropbox.appKey":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Dropbox app key.\n","loc":["services","codimd","configuration","dropbox","appKey"],"readOnly":false,"type":"string"},"services.codimd.configuration.dropbox.clientID":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Dropbox API client ID.\n","loc":["services","codimd","configuration","dropbox","clientID"],"readOnly":false,"type":"string"},"services.codimd.configuration.dropbox.clientSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Dropbox API client secret.\n","loc":["services","codimd","configuration","dropbox","clientSecret"],"readOnly":false,"type":"string"},"services.codimd.configuration.email":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Whether to enable email sign-in.\n","loc":["services","codimd","configuration","email"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.errorPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"./public/views/error.ejs","description":"Path to the error template file.\n(Non-canonical paths are relative to CodiMD's base directory)\n","loc":["services","codimd","configuration","errorPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.facebook":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the facebook third-party integration","loc":["services","codimd","configuration","facebook"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.facebook.clientID":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Facebook API client ID.\n","loc":["services","codimd","configuration","facebook","clientID"],"readOnly":false,"type":"string"},"services.codimd.configuration.facebook.clientSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Facebook API client secret.\n","loc":["services","codimd","configuration","facebook","clientSecret"],"readOnly":false,"type":"string"},"services.codimd.configuration.github":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the GitHub third-party integration.","loc":["services","codimd","configuration","github"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.github.clientID":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"GitHub API client ID.\n","loc":["services","codimd","configuration","github","clientID"],"readOnly":false,"type":"string"},"services.codimd.configuration.github.clientSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Github API client secret.\n","loc":["services","codimd","configuration","github","clientSecret"],"readOnly":false,"type":"string"},"services.codimd.configuration.gitlab":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the GitLab third-party integration.","loc":["services","codimd","configuration","gitlab"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.gitlab.baseURL":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"","description":"GitLab API authentication endpoint.\nOnly needed for other endpoints than gitlab.com.\n","loc":["services","codimd","configuration","gitlab","baseURL"],"readOnly":false,"type":"string"},"services.codimd.configuration.gitlab.clientID":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"GitLab API client ID.\n","loc":["services","codimd","configuration","gitlab","clientID"],"readOnly":false,"type":"string"},"services.codimd.configuration.gitlab.clientSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"GitLab API client secret.\n","loc":["services","codimd","configuration","gitlab","clientSecret"],"readOnly":false,"type":"string"},"services.codimd.configuration.gitlab.scope":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"api","description":"GitLab API requested scope.\nGitLab snippet import/export requires api scope.\n","loc":["services","codimd","configuration","gitlab","scope"],"readOnly":false,"type":"one of \"api\", \"read_user\""},"services.codimd.configuration.google":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the Google third-party integration.","loc":["services","codimd","configuration","google"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.google.clientID":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Google API client ID.\n","loc":["services","codimd","configuration","google","clientID"],"readOnly":false,"type":"string"},"services.codimd.configuration.google.clientSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Google API client secret.\n","loc":["services","codimd","configuration","google","clientSecret"],"readOnly":false,"type":"string"},"services.codimd.configuration.hackmdPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"./public/views/hackmd.ejs","description":"Path to the hackmd template file.\n(Non-canonical paths are relative to CodiMD's base directory)\n","loc":["services","codimd","configuration","hackmdPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.heartbeatInterval":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":5000,"description":"Specify the socket.io heartbeat interval.\n","loc":["services","codimd","configuration","heartbeatInterval"],"readOnly":false,"type":"signed integer"},"services.codimd.configuration.heartbeatTimeout":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":10000,"description":"Specify the socket.io heartbeat timeout.\n","loc":["services","codimd","configuration","heartbeatTimeout"],"readOnly":false,"type":"signed integer"},"services.codimd.configuration.host":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"localhost","description":"Address to listen on.\n","loc":["services","codimd","configuration","host"],"readOnly":false,"type":"string"},"services.codimd.configuration.hsts.enable":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Wheter to enable HSTS if HTTPS is also enabled.\n","loc":["services","codimd","configuration","hsts","enable"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.hsts.includeSubdomains":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Whether to include subdomains in HSTS.\n","loc":["services","codimd","configuration","hsts","includeSubdomains"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.hsts.maxAgeSeconds":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":31536000,"description":"Max duration for clients to keep the HSTS status.\n","loc":["services","codimd","configuration","hsts","maxAgeSeconds"],"readOnly":false,"type":"signed integer"},"services.codimd.configuration.hsts.preload":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Whether to allow preloading of the site's HSTS status.\n","loc":["services","codimd","configuration","hsts","preload"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.imageUploadType":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"filesystem","description":"Specify where to upload images.\n","loc":["services","codimd","configuration","imageUploadType"],"readOnly":false,"type":"one of \"imgur\", \"s3\", \"minio\", \"filesystem\""},"services.codimd.configuration.imgur.clientId":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Imgur API client ID.\n","loc":["services","codimd","configuration","imgur","clientId"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.indexPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"./public/views/index.ejs","description":"Path to the index template file.\n(Non-canonical paths are relative to CodiMD's base directory)\n","loc":["services","codimd","configuration","indexPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.ldap":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the LDAP integration.","loc":["services","codimd","configuration","ldap"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.ldap.bindCredentials":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Bind credentials for LDAP access.\n","loc":["services","codimd","configuration","ldap","bindCredentials"],"readOnly":false,"type":"string"},"services.codimd.configuration.ldap.bindDn":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Bind DN for LDAP access.\n","loc":["services","codimd","configuration","ldap","bindDn"],"readOnly":false,"type":"string"},"services.codimd.configuration.ldap.providerName":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"","description":"Optional name to be displayed at login form, indicating the LDAP provider.\n","loc":["services","codimd","configuration","ldap","providerName"],"readOnly":false,"type":"string"},"services.codimd.configuration.ldap.searchAttributes":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"LDAP attributes to search with.\n","example":["displayName","mail"],"loc":["services","codimd","configuration","ldap","searchAttributes"],"readOnly":false,"type":"list of strings"},"services.codimd.configuration.ldap.searchBase":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"LDAP directory to begin search from.\n","example":"o=users,dc=example,dc=com","loc":["services","codimd","configuration","ldap","searchBase"],"readOnly":false,"type":"string"},"services.codimd.configuration.ldap.searchFilter":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"LDAP filter to search with.\n","example":"(uid={{username}})","loc":["services","codimd","configuration","ldap","searchFilter"],"readOnly":false,"type":"string"},"services.codimd.configuration.ldap.tlsca":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Root CA for LDAP TLS in PEM format.\n","example":"server-cert.pem,root.pem","loc":["services","codimd","configuration","ldap","tlsca"],"readOnly":false,"type":"string"},"services.codimd.configuration.ldap.url":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"URL of LDAP server.\n","example":"ldap://localhost","loc":["services","codimd","configuration","ldap","url"],"readOnly":false,"type":"string"},"services.codimd.configuration.ldap.userNameField":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"","description":"LDAP field which is used as the username on CodiMD.\nBy default <option>useridField</option> is used.\n","loc":["services","codimd","configuration","ldap","userNameField"],"readOnly":false,"type":"string"},"services.codimd.configuration.ldap.useridField":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"LDAP field which is a unique identifier for users on CodiMD.\n","example":"uid","loc":["services","codimd","configuration","ldap","useridField"],"readOnly":false,"type":"string"},"services.codimd.configuration.mattermost":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the Mattermost third-party integration.","loc":["services","codimd","configuration","mattermost"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.mattermost.baseURL":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Mattermost authentication endpoint.\n","loc":["services","codimd","configuration","mattermost","baseURL"],"readOnly":false,"type":"string"},"services.codimd.configuration.mattermost.clientID":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Mattermost API client ID.\n","loc":["services","codimd","configuration","mattermost","clientID"],"readOnly":false,"type":"string"},"services.codimd.configuration.mattermost.clientSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Mattermost API client secret.\n","loc":["services","codimd","configuration","mattermost","clientSecret"],"readOnly":false,"type":"string"},"services.codimd.configuration.minio":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the minio third-party integration.","loc":["services","codimd","configuration","minio"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.minio.accessKey":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Minio access key.\n","loc":["services","codimd","configuration","minio","accessKey"],"readOnly":false,"type":"string"},"services.codimd.configuration.minio.endpoint":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Minio endpoint.\n","loc":["services","codimd","configuration","minio","endpoint"],"readOnly":false,"type":"string"},"services.codimd.configuration.minio.port":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":9000,"description":"Minio listen port.\n","loc":["services","codimd","configuration","minio","port"],"readOnly":false,"type":"signed integer"},"services.codimd.configuration.minio.secretKey":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Minio secret key.\n","loc":["services","codimd","configuration","minio","secretKey"],"readOnly":false,"type":"string"},"services.codimd.configuration.minio.secure":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Whether to use HTTPS for Minio.\n","loc":["services","codimd","configuration","minio","secure"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.oauth2":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the OAuth integration.","loc":["services","codimd","configuration","oauth2"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.oauth2.authorizationURL":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Specify the OAuth authorization URL.\n","loc":["services","codimd","configuration","oauth2","authorizationURL"],"readOnly":false,"type":"string"},"services.codimd.configuration.oauth2.clientID":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Specify the OAuth client ID.\n","loc":["services","codimd","configuration","oauth2","clientID"],"readOnly":false,"type":"string"},"services.codimd.configuration.oauth2.clientSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Specify the OAuth client secret.\n","loc":["services","codimd","configuration","oauth2","clientSecret"],"readOnly":false,"type":"string"},"services.codimd.configuration.oauth2.tokenURL":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Specify the OAuth token URL.\n","loc":["services","codimd","configuration","oauth2","tokenURL"],"readOnly":false,"type":"string"},"services.codimd.configuration.path":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Specify where a UNIX domain socket should be placed.\n","example":"/var/run/codimd.sock","loc":["services","codimd","configuration","path"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.port":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":3000,"description":"Port to listen on.\n","example":"80","loc":["services","codimd","configuration","port"],"readOnly":false,"type":"signed integer"},"services.codimd.configuration.prettyPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"./public/views/pretty.ejs","description":"Path to the pretty template file.\n(Non-canonical paths are relative to CodiMD's base directory)\n","loc":["services","codimd","configuration","prettyPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.protocolUseSSL":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":false,"description":"Enable to use TLS for resource paths.\nThis only applies when <option>domain</option> is set.\n","loc":["services","codimd","configuration","protocolUseSSL"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.s3":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the s3 third-party integration.","loc":["services","codimd","configuration","s3"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.s3.accessKeyId":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"AWS access key id.\n","loc":["services","codimd","configuration","s3","accessKeyId"],"readOnly":false,"type":"string"},"services.codimd.configuration.s3.region":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"AWS S3 region.\n","loc":["services","codimd","configuration","s3","region"],"readOnly":false,"type":"string"},"services.codimd.configuration.s3.secretAccessKey":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"AWS access key.\n","loc":["services","codimd","configuration","s3","secretAccessKey"],"readOnly":false,"type":"string"},"services.codimd.configuration.s3bucket":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Specify the bucket name for upload types <literal>s3</literal> and <literal>minio</literal>.\n","loc":["services","codimd","configuration","s3bucket"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.saml":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the SAML integration.","loc":["services","codimd","configuration","saml"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.saml.attribute.email":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"","description":"Attribute map for `email'.\nDefaults to `NameID' of SAML response if\n<option>identifierFormat</option> has\nthe default value.\n","loc":["services","codimd","configuration","saml","attribute","email"],"readOnly":false,"type":"string"},"services.codimd.configuration.saml.attribute.id":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"","description":"Attribute map for `id'.\nDefaults to `NameID' of SAML response.\n","loc":["services","codimd","configuration","saml","attribute","id"],"readOnly":false,"type":"string"},"services.codimd.configuration.saml.attribute.username":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"","description":"Attribute map for `username'.\nDefaults to `NameID' of SAML response.\n","loc":["services","codimd","configuration","saml","attribute","username"],"readOnly":false,"type":"string"},"services.codimd.configuration.saml.externalGroups":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":[],"description":"Excluded group names.\n","example":["Temporary-staff","External-users"],"loc":["services","codimd","configuration","saml","externalGroups"],"readOnly":false,"type":"list of strings"},"services.codimd.configuration.saml.groupAttribute":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"","description":"Optional attribute name for group list.\n","example":"memberOf","loc":["services","codimd","configuration","saml","groupAttribute"],"readOnly":false,"type":"string"},"services.codimd.configuration.saml.identifierFormat":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress","description":"Optional name identifier format.\n","loc":["services","codimd","configuration","saml","identifierFormat"],"readOnly":false,"type":"string"},"services.codimd.configuration.saml.idpCert":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Path to IdP certificate file in PEM format.\n","example":"/path/to/cert.pem","loc":["services","codimd","configuration","saml","idpCert"],"readOnly":false,"type":"path"},"services.codimd.configuration.saml.idpSsoUrl":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"IdP authentication endpoint.\n","example":"https://idp.example.com/sso","loc":["services","codimd","configuration","saml","idpSsoUrl"],"readOnly":false,"type":"string"},"services.codimd.configuration.saml.issuer":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"","description":"Optional identity of the service provider.\nThis defaults to the server URL.\n","loc":["services","codimd","configuration","saml","issuer"],"readOnly":false,"type":"string"},"services.codimd.configuration.saml.requiredGroups":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":[],"description":"Required group names.\n","example":["Hackmd-users","Codimd-users"],"loc":["services","codimd","configuration","saml","requiredGroups"],"readOnly":false,"type":"list of strings"},"services.codimd.configuration.sessionLife":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":1209600000,"description":"Session life time in milliseconds.\n","loc":["services","codimd","configuration","sessionLife"],"readOnly":false,"type":"signed integer"},"services.codimd.configuration.sessionName":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"connect.sid","description":"Specify the name of the session cookie.\n","loc":["services","codimd","configuration","sessionName"],"readOnly":false,"type":"string"},"services.codimd.configuration.sessionSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Specify the secret used to sign the session cookie.\nIf unset, one will be generated on startup.\n","loc":["services","codimd","configuration","sessionSecret"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.slidePath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"./public/views/slide.hbs","description":"Path to the slide template file.\n(Non-canonical paths are relative to CodiMD's base directory)\n","loc":["services","codimd","configuration","slidePath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.sslCAPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":[],"description":"SSL ca chain. Needed when <option>useSSL</option> is enabled.\n","example":["/var/lib/codimd/ca.crt"],"loc":["services","codimd","configuration","sslCAPath"],"readOnly":false,"type":"list of strings"},"services.codimd.configuration.sslCertPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Path to the SSL cert. Needed when <option>useSSL</option> is enabled.\n","example":"/var/lib/codimd/codimd.crt","loc":["services","codimd","configuration","sslCertPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.sslKeyPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Path to the SSL key. Needed when <option>useSSL</option> is enabled.\n","example":"/var/lib/codimd/codimd.key","loc":["services","codimd","configuration","sslKeyPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.tmpPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"/tmp","description":"Path to the temp directory CodiMD should use.\nNote that <option>serviceConfig.PrivateTmp</option> is enabled for\nthe CodiMD systemd service by default.\n(Non-canonical paths are relative to CodiMD's base directory)\n","loc":["services","codimd","configuration","tmpPath"],"readOnly":false,"type":"string"},"services.codimd.configuration.twitter":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Configure the Twitter third-party integration.","loc":["services","codimd","configuration","twitter"],"readOnly":false,"type":"null or submodule"},"services.codimd.configuration.twitter.consumerKey":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Twitter API consumer key.\n","loc":["services","codimd","configuration","twitter","consumerKey"],"readOnly":false,"type":"string"},"services.codimd.configuration.twitter.consumerSecret":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"description":"Twitter API consumer secret.\n","loc":["services","codimd","configuration","twitter","consumerSecret"],"readOnly":false,"type":"string"},"services.codimd.configuration.uploadsPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"/var/lib/codimd/uploads","description":"Path under which uploaded files are saved.\n","loc":["services","codimd","configuration","uploadsPath"],"readOnly":false,"type":"string"},"services.codimd.configuration.urlAddPort":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":false,"description":"Enable to add the port to callback URLs.\nThis only applies when <option>domain</option> is set\nand only for ports other than 80 and 443.\n","loc":["services","codimd","configuration","urlAddPort"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.urlPath":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":null,"description":"Path under which CodiMD is accessible.\n","example":"/url/path/to/codimd","loc":["services","codimd","configuration","urlPath"],"readOnly":false,"type":"null or string"},"services.codimd.configuration.useCDN":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":true,"description":"Whether to use CDN resources or not.\n","loc":["services","codimd","configuration","useCDN"],"readOnly":false,"type":"boolean"},"services.codimd.configuration.useSSL":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":false,"description":"Enable to use SSL server. This will also enable\n<option>protocolUseSSL</option>.\n","loc":["services","codimd","configuration","useSSL"],"readOnly":false,"type":"boolean"},"services.codimd.enable":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":false,"description":"Whether to enable the CodiMD Markdown Editor.","example":true,"loc":["services","codimd","enable"],"readOnly":false,"type":"boolean"},"services.codimd.groups":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":[],"description":"Groups to which the codimd user should be added.\n","loc":["services","codimd","groups"],"readOnly":false,"type":"list of strings"},"services.codimd.workDir":{"declarations":["nixos/modules/services/web-apps/codimd.nix"],"default":"/var/lib/codimd","description":"Working directory for the CodiMD service.\n","loc":["services","codimd","workDir"],"readOnly":false,"type":"path"},"services.collectd.autoLoadPlugin":{"declarations":["nixos/modules/services/monitoring/collectd.nix"],"default":false,"description":"Enable plugin autoloading.\n","loc":["services","collectd","autoLoadPlugin"],"readOnly":false,"type":"boolean"},"services.collectd.dataDir":{"declarations":["nixos/modules/services/monitoring/collectd.nix"],"default":"/var/lib/collectd","description":"Data directory for collectd agent.\n","loc":["services","collectd","dataDir"],"readOnly":false,"type":"path"},"services.collectd.enable":{"declarations":["nixos/modules/services/monitoring/collectd.nix"],"default":false,"description":"Whether to enable collectd agent.","example":true,"loc":["services","collectd","enable"],"readOnly":false,"type":"boolean"},"services.collectd.extraConfig":{"declarations":["nixos/modules/services/monitoring/collectd.nix"],"default":"","description":"Extra configuration for collectd.\n","loc":["services","collectd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.collectd.include":{"declarations":["nixos/modules/services/monitoring/collectd.nix"],"default":[],"description":"Additional paths to load config from.\n","loc":["services","collectd","include"],"readOnly":false,"type":"list of strings"},"services.collectd.package":{"declarations":["nixos/modules/services/monitoring/collectd.nix"],"default":"pkgs.collectd","description":"Which collectd package to use.\n","loc":["services","collectd","package"],"readOnly":false,"type":"package"},"services.collectd.user":{"declarations":["nixos/modules/services/monitoring/collectd.nix"],"default":"collectd","description":"User under which to run collectd.\n","loc":["services","collectd","user"],"readOnly":false,"type":"null or string"},"services.colord.enable":{"declarations":["nixos/modules/services/x11/colord.nix"],"default":false,"description":"Whether to enable colord, the color management daemon.","example":true,"loc":["services","colord","enable"],"readOnly":false,"type":"boolean"},"services.compton.activeOpacity":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":"1.0","description":"Opacity of active windows (number in range 0.0 - 1.0).\n","example":"0.8","loc":["services","compton","activeOpacity"],"readOnly":false,"type":"string"},"services.compton.backend":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":"xrender","description":"Backend to use: <literal>glx</literal>, <literal>xrender</literal> or <literal>xr_glx_hybrid</literal>.\n","loc":["services","compton","backend"],"readOnly":false,"type":"one of \"glx\", \"xrender\", \"xr_glx_hybrid\""},"services.compton.enable":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":false,"description":"Whether of not to enable Compton as the X.org composite manager.\n","loc":["services","compton","enable"],"readOnly":false,"type":"boolean"},"services.compton.extraOptions":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":"","description":"Additional Compton configuration.\n","example":"unredir-if-possible = true;\ndbe = true;\n","loc":["services","compton","extraOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.compton.fade":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":false,"description":"Fade windows in and out.\n","loc":["services","compton","fade"],"readOnly":false,"type":"boolean"},"services.compton.fadeDelta":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":10,"description":"Time between fade animation step (in ms).\n","example":5,"loc":["services","compton","fadeDelta"],"readOnly":false,"type":"signed integer"},"services.compton.fadeExclude":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":[],"description":"List of conditions of windows that should not be faded.\nSee <literal>compton(1)</literal> man page for more examples.\n","example":["window_type *= 'menu'","name ~= 'Firefox$'","focused = 1"],"loc":["services","compton","fadeExclude"],"readOnly":false,"type":"list of strings"},"services.compton.fadeSteps":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":["0.028","0.03"],"description":"Opacity change between fade steps (in and out).\n(numbers in range 0.01 - 1.0)\n","example":["0.04","0.04"],"loc":["services","compton","fadeSteps"],"readOnly":false,"type":"list of strings"},"services.compton.inactiveOpacity":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":"1.0","description":"Opacity of inactive windows (number in range 0.1 - 1.0).\n","example":"0.8","loc":["services","compton","inactiveOpacity"],"readOnly":false,"type":"string"},"services.compton.menuOpacity":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":"1.0","description":"Opacity of dropdown and popup menu (number in range 0.0 - 1.0).\n","example":"0.8","loc":["services","compton","menuOpacity"],"readOnly":false,"type":"string"},"services.compton.opacityRules":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":[],"description":"Rules that control the opacity of windows, in format PERCENT:PATTERN.\n","example":["95:class_g = 'URxvt' && !_NET_WM_STATE@:32a","0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"],"loc":["services","compton","opacityRules"],"readOnly":false,"type":"list of strings"},"services.compton.package":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":"pkgs.compton","description":"Compton derivation to use.\n","example":{"_type":"literalExample","text":"pkgs.compton"},"loc":["services","compton","package"],"readOnly":false,"type":"package"},"services.compton.refreshRate":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":0,"description":"Screen refresh rate (0 = automatically detect).\n","example":60,"loc":["services","compton","refreshRate"],"readOnly":false,"type":"signed integer"},"services.compton.shadow":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":false,"description":"Draw window shadows.\n","loc":["services","compton","shadow"],"readOnly":false,"type":"boolean"},"services.compton.shadowExclude":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":[],"description":"List of conditions of windows that should have no shadow.\nSee <literal>compton(1)</literal> man page for more examples.\n","example":["window_type *= 'menu'","name ~= 'Firefox$'","focused = 1"],"loc":["services","compton","shadowExclude"],"readOnly":false,"type":"list of strings"},"services.compton.shadowOffsets":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":[-15,-15],"description":"Left and right offset for shadows (in pixels).\n","example":[-10,-15],"loc":["services","compton","shadowOffsets"],"readOnly":false,"type":"list of signed integers"},"services.compton.shadowOpacity":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":"0.75","description":"Window shadows opacity (number in range 0.0 - 1.0).\n","example":"0.8","loc":["services","compton","shadowOpacity"],"readOnly":false,"type":"string"},"services.compton.vSync":{"declarations":["nixos/modules/services/x11/compton.nix"],"default":"none","description":"Enable vertical synchronization using the specified method.\nSee <literal>compton(1)</literal> man page an explanation.\n","example":"opengl-swc","loc":["services","compton","vSync"],"readOnly":false,"type":"one of \"none\", \"drm\", \"opengl\", \"opengl-oml\", \"opengl-swc\", \"opengl-mswc\""},"services.confd.backend":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":"etcd","description":"Confd config storage backend to use.","loc":["services","confd","backend"],"readOnly":false,"type":"one of \"etcd\", \"consul\", \"redis\", \"zookeeper\""},"services.confd.confDir":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":"/etc/confd","description":"The path to the confd configs.","loc":["services","confd","confDir"],"readOnly":false,"type":"path"},"services.confd.enable":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":false,"description":"Whether to enable confd service.","example":true,"loc":["services","confd","enable"],"readOnly":false,"type":"boolean"},"services.confd.interval":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":10,"description":"Confd check interval.","loc":["services","confd","interval"],"readOnly":false,"type":"signed integer"},"services.confd.logLevel":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":"info","description":"Confd log level.","loc":["services","confd","logLevel"],"readOnly":false,"type":"one of \"info\", \"debug\""},"services.confd.nodes":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":["http://127.0.0.1:2379"],"description":"Confd list of nodes to connect to.","loc":["services","confd","nodes"],"readOnly":false,"type":"list of strings"},"services.confd.package":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":"pkgs.confd","description":"Confd package to use.","loc":["services","confd","package"],"readOnly":false,"type":"package"},"services.confd.prefix":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":"/","description":"The string to prefix to keys.","loc":["services","confd","prefix"],"readOnly":false,"type":"path"},"services.confd.watch":{"declarations":["nixos/modules/services/misc/confd.nix"],"default":true,"description":"Confd, whether to watch etcd config for changes.","loc":["services","confd","watch"],"readOnly":false,"type":"boolean"},"services.confluence.catalinaOptions":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":[],"description":"Java options to pass to catalina/tomcat.","example":["-Xms1024m","-Xmx2048m","-Dconfluence.disable.peopledirectory.all=true"],"loc":["services","confluence","catalinaOptions"],"readOnly":false,"type":"list of strings"},"services.confluence.enable":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":false,"description":"Whether to enable Atlassian Confluence service.","example":true,"loc":["services","confluence","enable"],"readOnly":false,"type":"boolean"},"services.confluence.group":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":"confluence","description":"Group which runs confluence.","loc":["services","confluence","group"],"readOnly":false,"type":"string"},"services.confluence.home":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":"/var/lib/confluence","description":"Home directory of the confluence instance.","loc":["services","confluence","home"],"readOnly":false,"type":"string"},"services.confluence.jrePackage":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":"pkgs.oraclejre8","description":"Note that Atlassian only support the Oracle JRE (JRASERVER-46152).","loc":["services","confluence","jrePackage"],"readOnly":false,"type":"package"},"services.confluence.listenAddress":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":"127.0.0.1","description":"Address to listen on.","loc":["services","confluence","listenAddress"],"readOnly":false,"type":"string"},"services.confluence.listenPort":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":8090,"description":"Port to listen on.","loc":["services","confluence","listenPort"],"readOnly":false,"type":"signed integer"},"services.confluence.proxy.enable":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":false,"description":"Whether to enable proxy support.","example":true,"loc":["services","confluence","proxy","enable"],"readOnly":false,"type":"boolean"},"services.confluence.proxy.name":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"description":"Virtual hostname at the proxy","example":"confluence.example.com","loc":["services","confluence","proxy","name"],"readOnly":false,"type":"string"},"services.confluence.proxy.port":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":443,"description":"Port used at the proxy","example":80,"loc":["services","confluence","proxy","port"],"readOnly":false,"type":"signed integer"},"services.confluence.proxy.scheme":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":"https","description":"Protocol used at the proxy.","example":"http","loc":["services","confluence","proxy","scheme"],"readOnly":false,"type":"string"},"services.confluence.sso.applicationName":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"description":"Exact name of this Confluence instance in Crowd","example":"jira","loc":["services","confluence","sso","applicationName"],"readOnly":false,"type":"string"},"services.confluence.sso.applicationPassword":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"description":"Application password of this Confluence instance in Crowd","loc":["services","confluence","sso","applicationPassword"],"readOnly":false,"type":"string"},"services.confluence.sso.crowd":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"description":"Crowd Base URL without trailing slash","example":"http://localhost:8095/crowd","loc":["services","confluence","sso","crowd"],"readOnly":false,"type":"string"},"services.confluence.sso.enable":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":false,"description":"Whether to enable SSO with Atlassian Crowd.","example":true,"loc":["services","confluence","sso","enable"],"readOnly":false,"type":"boolean"},"services.confluence.sso.validationInterval":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":2,"description":"Set to 0, if you want authentication checks to occur on each\nrequest. Otherwise set to the number of minutes between request\nto validate if the user is logged in or out of the Crowd SSO\nserver. Setting this value to 1 or higher will increase the\nperformance of Crowd's integration.\n","example":0,"loc":["services","confluence","sso","validationInterval"],"readOnly":false,"type":"signed integer"},"services.confluence.user":{"declarations":["nixos/modules/services/web-apps/atlassian/confluence.nix"],"default":"confluence","description":"User which runs confluence.","loc":["services","confluence","user"],"readOnly":false,"type":"string"},"services.consul.alerts.consulAddr":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":"localhost:8500","description":"Consul api listening adddress","loc":["services","consul","alerts","consulAddr"],"readOnly":false,"type":"string"},"services.consul.alerts.enable":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":false,"description":"Whether to enable consul-alerts.","example":true,"loc":["services","consul","alerts","enable"],"readOnly":false,"type":"boolean"},"services.consul.alerts.listenAddr":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":"localhost:9000","description":"Api listening address.","loc":["services","consul","alerts","listenAddr"],"readOnly":false,"type":"string"},"services.consul.alerts.package":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":"pkgs.consul-alerts","description":"Package to use for consul-alerts.","loc":["services","consul","alerts","package"],"readOnly":false,"type":"package"},"services.consul.alerts.watchChecks":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":true,"description":"Whether to enable check watcher.","loc":["services","consul","alerts","watchChecks"],"readOnly":false,"type":"boolean"},"services.consul.alerts.watchEvents":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":true,"description":"Whether to enable event watcher.","loc":["services","consul","alerts","watchEvents"],"readOnly":false,"type":"boolean"},"services.consul.dropPrivileges":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":true,"description":"Whether the consul agent should be run as a non-root consul user.\n","loc":["services","consul","dropPrivileges"],"readOnly":false,"type":"boolean"},"services.consul.enable":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":false,"description":"Enables the consul daemon.\n","loc":["services","consul","enable"],"readOnly":false,"type":"boolean"},"services.consul.extraConfig":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":{},"description":"Extra configuration options which are serialized to json and added\nto the config.json file.\n","loc":["services","consul","extraConfig"],"readOnly":false,"type":"unspecified"},"services.consul.extraConfigFiles":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":[],"description":"Additional configuration files to pass to consul\nNOTE: These will not trigger the service to be restarted when altered.\n","loc":["services","consul","extraConfigFiles"],"readOnly":false,"type":"list of strings"},"services.consul.forceIpv4":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":false,"description":"Whether we should force the interfaces to only pull ipv4 addresses.\n","loc":["services","consul","forceIpv4"],"readOnly":false,"type":"boolean"},"services.consul.interface.advertise":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":null,"description":"The name of the interface to pull the advertise_addr from.\n","loc":["services","consul","interface","advertise"],"readOnly":false,"type":"null or string"},"services.consul.interface.bind":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":null,"description":"The name of the interface to pull the bind_addr from.\n","loc":["services","consul","interface","bind"],"readOnly":false,"type":"null or string"},"services.consul.leaveOnStop":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":false,"description":"If enabled, causes a leave action to be sent when closing consul.\nThis allows a clean termination of the node, but permanently removes\nit from the cluster. You probably don't want this option unless you\nare running a node which going offline in a permanent / semi-permanent\nfashion.\n","loc":["services","consul","leaveOnStop"],"readOnly":false,"type":"boolean"},"services.consul.package":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":"pkgs.consul","description":"The package used for the Consul agent and CLI.\n","loc":["services","consul","package"],"readOnly":false,"type":"package"},"services.consul.webUi":{"declarations":["nixos/modules/services/networking/consul.nix"],"default":false,"description":"Enables the web interface on the consul http port.\n","loc":["services","consul","webUi"],"readOnly":false,"type":"boolean"},"services.coturn.alt-listening-port":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":"listening-port + 1","description":"Alternative listening port for UDP and TCP listeners;\ndefault (or zero) value means \"listening port plus one\".\nThis is needed for RFC 5780 support\n(STUN extension specs, NAT behavior discovery). The TURN Server\nsupports RFC 5780 only if it is started with more than one\nlistening IP address of the same family (IPv4 or IPv6).\nRFC 5780 is supported only by UDP protocol, other protocols\nare listening to that endpoint only for \"symmetry\".\n","loc":["services","coturn","alt-listening-port"],"readOnly":false,"type":"signed integer"},"services.coturn.alt-tls-listening-port":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":"tls-listening-port + 1","description":"Alternative listening port for TLS and DTLS protocols.\n","loc":["services","coturn","alt-tls-listening-port"],"readOnly":false,"type":"signed integer"},"services.coturn.cert":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":null,"description":"Certificate file in PEM format.\n","example":"/var/lib/acme/example.com/fullchain.pem","loc":["services","coturn","cert"],"readOnly":false,"type":"null or string"},"services.coturn.cli-ip":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":"127.0.0.1","description":"Local system IP address to be used for CLI server endpoint.\n","loc":["services","coturn","cli-ip"],"readOnly":false,"type":"string"},"services.coturn.cli-password":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":null,"description":"CLI access password.\nFor the security reasons, it is recommended to use the encrypted\nfor of the password (see the -P command in the turnadmin utility).\n","loc":["services","coturn","cli-password"],"readOnly":false,"type":"null or string"},"services.coturn.cli-port":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":5766,"description":"CLI server port.\n","loc":["services","coturn","cli-port"],"readOnly":false,"type":"signed integer"},"services.coturn.dh-file":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":null,"description":"Use custom DH TLS key, stored in PEM format in the file.\n","loc":["services","coturn","dh-file"],"readOnly":false,"type":"null or string"},"services.coturn.enable":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Whether to enable coturn TURN server.","example":true,"loc":["services","coturn","enable"],"readOnly":false,"type":"boolean"},"services.coturn.extraConfig":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":"","description":"Additional configuration options","loc":["services","coturn","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.coturn.listening-ips":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":[],"description":"Listener IP addresses of relay server.\nIf no IP(s) specified in the config file or in the command line options,\nthen all IPv4 and IPv6 system IPs will be used for listening.\n","example":["203.0.113.42","2001:DB8::42"],"loc":["services","coturn","listening-ips"],"readOnly":false,"type":"list of strings"},"services.coturn.listening-port":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":3478,"description":"TURN listener port for UDP and TCP.\nNote: actually, TLS and DTLS sessions can connect to the\n\"plain\" TCP and UDP port(s), too - if allowed by configuration.\n","loc":["services","coturn","listening-port"],"readOnly":false,"type":"signed integer"},"services.coturn.lt-cred-mech":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Use long-term credential mechanism.\n","loc":["services","coturn","lt-cred-mech"],"readOnly":false,"type":"boolean"},"services.coturn.max-port":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":65535,"description":"Upper bound of UDP relay endpoints\n","loc":["services","coturn","max-port"],"readOnly":false,"type":"signed integer"},"services.coturn.min-port":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":49152,"description":"Lower bound of UDP relay endpoints\n","loc":["services","coturn","min-port"],"readOnly":false,"type":"signed integer"},"services.coturn.no-auth":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"This option is opposite to lt-cred-mech.\n(TURN Server with no-auth option allows anonymous access).\nIf neither option is defined, and no users are defined,\nthen no-auth is default. If at least one user is defined,\nin this file or in command line or in usersdb file, then\nlt-cred-mech is default.\n","loc":["services","coturn","no-auth"],"readOnly":false,"type":"boolean"},"services.coturn.no-cli":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Turn OFF the CLI support.\n","loc":["services","coturn","no-cli"],"readOnly":false,"type":"boolean"},"services.coturn.no-dtls":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Disable DTLS client listener","loc":["services","coturn","no-dtls"],"readOnly":false,"type":"boolean"},"services.coturn.no-tcp":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Disable TCP client listener","loc":["services","coturn","no-tcp"],"readOnly":false,"type":"boolean"},"services.coturn.no-tcp-relay":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Disable TCP relay endpoints","loc":["services","coturn","no-tcp-relay"],"readOnly":false,"type":"boolean"},"services.coturn.no-tls":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Disable TLS client listener","loc":["services","coturn","no-tls"],"readOnly":false,"type":"boolean"},"services.coturn.no-udp":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Disable UDP client listener","loc":["services","coturn","no-udp"],"readOnly":false,"type":"boolean"},"services.coturn.no-udp-relay":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Disable UDP relay endpoints","loc":["services","coturn","no-udp-relay"],"readOnly":false,"type":"boolean"},"services.coturn.pkey":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":null,"description":"Private key file in PEM format.\n","example":"/var/lib/acme/example.com/key.pem","loc":["services","coturn","pkey"],"readOnly":false,"type":"null or string"},"services.coturn.realm":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":"nixos","description":"The default realm to be used for the users when no explicit\norigin/realm relationship was found in the database, or if the TURN\nserver is not using any database (just the commands-line settings\nand the userdb file). Must be used with long-term credentials\nmechanism or with TURN REST API.\n","example":"example.com","loc":["services","coturn","realm"],"readOnly":false,"type":"string"},"services.coturn.relay-ips":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":[],"description":"Relay address (the local IP address that will be used to relay the\npackets to the peer).\nMultiple relay addresses may be used.\nThe same IP(s) can be used as both listening IP(s) and relay IP(s).\n\nIf no relay IP(s) specified, then the turnserver will apply the default\npolicy: it will decide itself which relay addresses to be used, and it\nwill always be using the client socket IP address as the relay IP address\nof the TURN session (if the requested relay address family is the same\nas the family of the client socket).\n","example":["203.0.113.42","2001:DB8::42"],"loc":["services","coturn","relay-ips"],"readOnly":false,"type":"list of strings"},"services.coturn.secure-stun":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"Require authentication of the STUN Binding request.\nBy default, the clients are allowed anonymous access to the STUN Binding functionality.\n","loc":["services","coturn","secure-stun"],"readOnly":false,"type":"boolean"},"services.coturn.static-auth-secret":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":null,"description":"'Static' authentication secret value (a string) for TURN REST API only.\nIf not set, then the turn server\nwill try to use the 'dynamic' value in turn_secret table\nin user database (if present). The database-stored  value can be changed on-the-fly\nby a separate program, so this is why that other mode is 'dynamic'.\n","loc":["services","coturn","static-auth-secret"],"readOnly":false,"type":"null or string"},"services.coturn.tls-listening-port":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":5349,"description":"TURN listener port for TLS.\nNote: actually, \"plain\" TCP and UDP sessions can connect to the TLS and\nDTLS port(s), too - if allowed by configuration. The TURN server\n\"automatically\" recognizes the type of traffic. Actually, two listening\nendpoints (the \"plain\" one and the \"tls\" one) are equivalent in terms of\nfunctionality; but we keep both endpoints to satisfy the RFC 5766 specs.\nFor secure TCP connections, we currently support SSL version 3 and\nTLS version 1.0, 1.1 and 1.2.\nFor secure UDP connections, we support DTLS version 1.\n","loc":["services","coturn","tls-listening-port"],"readOnly":false,"type":"signed integer"},"services.coturn.use-auth-secret":{"declarations":["nixos/modules/services/networking/coturn.nix"],"default":false,"description":"TURN REST API flag.\nFlag that sets a special authorization option that is based upon authentication secret.\nThis feature can be used with the long-term authentication mechanism, only.\nThis feature purpose is to support \"TURN Server REST API\", see\n\"TURN REST API\" link in the project's page\nhttps://github.com/coturn/coturn/\n\nThis option is used with timestamp:\n\nusercombo -> \"timestamp:userid\"\nturn user -> usercombo\nturn password -> base64(hmac(secret key, usercombo))\n\nThis allows TURN credentials to be accounted for a specific user id.\nIf you don't have a suitable id, the timestamp alone can be used.\nThis option is just turning on secret-based authentication.\nThe actual value of the secret is defined either by option static-auth-secret,\nor can be found in the turn_secret table in the database.\n","loc":["services","coturn","use-auth-secret"],"readOnly":false,"type":"boolean"},"services.couchdb.bindAddress":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"127.0.0.1","description":"Defines the IP address by which CouchDB will be accessible.\n","loc":["services","couchdb","bindAddress"],"readOnly":false,"type":"Concatenated string"},"services.couchdb.configFile":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"description":"Configuration file for persisting runtime changes. File\nneeds to be readable and writable from couchdb user/group.\n","loc":["services","couchdb","configFile"],"readOnly":false,"type":"Concatenated string"},"services.couchdb.databaseDir":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"/var/lib/couchdb","description":"Specifies location of CouchDB database files (*.couch named). This\nlocation should be writable and readable for the user the CouchDB\nservice runs as (couchdb by default).\n","loc":["services","couchdb","databaseDir"],"readOnly":false,"type":"path"},"services.couchdb.enable":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":false,"description":"Whether to run CouchDB Server.\n","loc":["services","couchdb","enable"],"readOnly":false,"type":"boolean"},"services.couchdb.extraConfig":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"","description":"Extra configuration. Overrides any other cofiguration.\n","loc":["services","couchdb","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.couchdb.group":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"couchdb","description":"Group account under which couchdb runs.\n","loc":["services","couchdb","group"],"readOnly":false,"type":"Concatenated string"},"services.couchdb.logFile":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"/var/log/couchdb.log","description":"Specifies the location of file for logging output.\n","loc":["services","couchdb","logFile"],"readOnly":false,"type":"path"},"services.couchdb.package":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"pkgs.couchdb","description":"CouchDB package to use.\n","example":{"_type":"literalExample","text":"pkgs.couchdb"},"loc":["services","couchdb","package"],"readOnly":false,"type":"package"},"services.couchdb.port":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":5984,"description":"Defined the port number to listen.\n","loc":["services","couchdb","port"],"readOnly":false,"type":"signed integer"},"services.couchdb.uriFile":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"/var/run/couchdb/couchdb.uri","description":"This file contains the full URI that can be used to access this\ninstance of CouchDB. It is used to help discover the port CouchDB is\nrunning on (if it was set to 0 (e.g. automatically assigned any free\none). This file should be writable and readable for the user that\nruns the CouchDB service (couchdb by default).\n","loc":["services","couchdb","uriFile"],"readOnly":false,"type":"path"},"services.couchdb.user":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"couchdb","description":"User account under which couchdb runs.\n","loc":["services","couchdb","user"],"readOnly":false,"type":"Concatenated string"},"services.couchdb.viewIndexDir":{"declarations":["nixos/modules/services/databases/couchdb.nix"],"default":"/var/lib/couchdb","description":"Specifies location of CouchDB view index files. This location should\nbe writable and readable for the user that runs the CouchDB service\n(couchdb by default).\n","loc":["services","couchdb","viewIndexDir"],"readOnly":false,"type":"path"},"services.couchpotato.enable":{"declarations":["nixos/modules/services/misc/couchpotato.nix"],"default":false,"description":"Whether to enable CouchPotato Server.","example":true,"loc":["services","couchpotato","enable"],"readOnly":false,"type":"boolean"},"services.cpuminer-cryptonight.enable":{"declarations":["nixos/modules/services/misc/cpuminer-cryptonight.nix"],"default":false,"description":"Whether to enable the cpuminer cryptonight miner.\n","loc":["services","cpuminer-cryptonight","enable"],"readOnly":false,"type":"boolean"},"services.cpuminer-cryptonight.pass":{"declarations":["nixos/modules/services/misc/cpuminer-cryptonight.nix"],"default":"x","description":"Password for mining server","loc":["services","cpuminer-cryptonight","pass"],"readOnly":false,"type":"Concatenated string"},"services.cpuminer-cryptonight.threads":{"declarations":["nixos/modules/services/misc/cpuminer-cryptonight.nix"],"default":0,"description":"Number of miner threads, defaults to available processors","loc":["services","cpuminer-cryptonight","threads"],"readOnly":false,"type":"signed integer"},"services.cpuminer-cryptonight.url":{"declarations":["nixos/modules/services/misc/cpuminer-cryptonight.nix"],"description":"URL of mining server","loc":["services","cpuminer-cryptonight","url"],"readOnly":false,"type":"Concatenated string"},"services.cpuminer-cryptonight.user":{"declarations":["nixos/modules/services/misc/cpuminer-cryptonight.nix"],"description":"Username for mining server","loc":["services","cpuminer-cryptonight","user"],"readOnly":false,"type":"Concatenated string"},"services.crashplan.enable":{"declarations":["nixos/modules/services/backup/crashplan.nix"],"default":false,"description":"Starts crashplan background service.\n","loc":["services","crashplan","enable"],"readOnly":false,"type":"boolean"},"services.crashplansb.enable":{"declarations":["nixos/modules/services/backup/crashplan-small-business.nix"],"default":false,"description":"Starts crashplan for small business background service.\n","loc":["services","crashplansb","enable"],"readOnly":false,"type":"boolean"},"services.crashplansb.maxRam":{"declarations":["nixos/modules/services/backup/crashplan-small-business.nix"],"default":"1024m","description":"Maximum amount of ram that the crashplan engine should use.\n","example":"2G","loc":["services","crashplansb","maxRam"],"readOnly":false,"type":"string"},"services.crashplansb.openPorts":{"declarations":["nixos/modules/services/backup/crashplan-small-business.nix"],"default":true,"description":"Open ports in the firewall for crashplan.","loc":["services","crashplansb","openPorts"],"readOnly":false,"type":"boolean"},"services.crashplansb.ports":{"declarations":["nixos/modules/services/backup/crashplan-small-business.nix"],"default":[4242,4243,4244,4247],"description":"which ports to open.","loc":["services","crashplansb","ports"],"readOnly":false,"type":"list of signed integers"},"services.cron.cronFiles":{"declarations":["nixos/modules/services/scheduling/cron.nix"],"default":[],"description":"A list of extra crontab files that will be read and appended to the main\ncrontab file when the cron service starts.\n","loc":["services","cron","cronFiles"],"readOnly":false,"type":"list of paths"},"services.cron.enable":{"declarations":["nixos/modules/services/scheduling/cron.nix"],"default":false,"description":"Whether to enable the Vixie cron daemon.","loc":["services","cron","enable"],"readOnly":false,"type":"boolean"},"services.cron.mailto":{"declarations":["nixos/modules/services/scheduling/cron.nix"],"default":null,"description":"Email address to which job output will be mailed.","loc":["services","cron","mailto"],"readOnly":false,"type":"null or string"},"services.cron.systemCronJobs":{"declarations":["nixos/modules/services/scheduling/cron.nix"],"default":[],"description":"A list of Cron jobs to be appended to the system-wide\ncrontab.  See the manual page for crontab for the expected\nformat. If you want to get the results mailed you must setuid\nsendmail. See <option>security.wrappers</option>\n\nIf neither /var/cron/cron.deny nor /var/cron/cron.allow exist only root\nwill is allowed to have its own crontab file. The /var/cron/cron.deny file\nis created automatically for you. So every user can use a crontab.\n\nMany nixos modules set systemCronJobs, so if you decide to disable vixie cron\nand enable another cron daemon, you may want it to get its system crontab\nbased on systemCronJobs.\n","example":{"_type":"literalExample","text":"[ \"* * * * *  test   ls -l / > /tmp/cronout 2>&1\"\n  \"* * * * *  eelco  echo Hello World > /home/eelco/cronout\"\n]\n"},"loc":["services","cron","systemCronJobs"],"readOnly":false,"type":"list of strings"},"services.crowd.catalinaOptions":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":[],"description":"Java options to pass to catalina/tomcat.","example":["-Xms1024m","-Xmx2048m"],"loc":["services","crowd","catalinaOptions"],"readOnly":false,"type":"list of strings"},"services.crowd.enable":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":false,"description":"Whether to enable Atlassian Crowd service.","example":true,"loc":["services","crowd","enable"],"readOnly":false,"type":"boolean"},"services.crowd.group":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":"crowd","description":"Group which runs Crowd.","loc":["services","crowd","group"],"readOnly":false,"type":"string"},"services.crowd.home":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":"/var/lib/crowd","description":"Home directory of the Crowd instance.","loc":["services","crowd","home"],"readOnly":false,"type":"string"},"services.crowd.jrePackage":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":"pkgs.oraclejre8","description":"Note that Atlassian only support the Oracle JRE (JRASERVER-46152).","loc":["services","crowd","jrePackage"],"readOnly":false,"type":"package"},"services.crowd.listenAddress":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":"127.0.0.1","description":"Address to listen on.","loc":["services","crowd","listenAddress"],"readOnly":false,"type":"string"},"services.crowd.listenPort":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":8092,"description":"Port to listen on.","loc":["services","crowd","listenPort"],"readOnly":false,"type":"signed integer"},"services.crowd.openidPassword":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"description":"Application password for OpenID server.","loc":["services","crowd","openidPassword"],"readOnly":false,"type":"string"},"services.crowd.proxy.enable":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":false,"description":"Whether to enable reverse proxy support.","example":true,"loc":["services","crowd","proxy","enable"],"readOnly":false,"type":"boolean"},"services.crowd.proxy.name":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"description":"Virtual hostname at the proxy","example":"crowd.example.com","loc":["services","crowd","proxy","name"],"readOnly":false,"type":"string"},"services.crowd.proxy.port":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":443,"description":"Port used at the proxy","example":80,"loc":["services","crowd","proxy","port"],"readOnly":false,"type":"signed integer"},"services.crowd.proxy.scheme":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":"https","description":"Protocol used at the proxy.","example":"http","loc":["services","crowd","proxy","scheme"],"readOnly":false,"type":"string"},"services.crowd.proxy.secure":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":true,"description":"Whether the connections to the proxy should be considered secure.","loc":["services","crowd","proxy","secure"],"readOnly":false,"type":"boolean"},"services.crowd.user":{"declarations":["nixos/modules/services/web-apps/atlassian/crowd.nix"],"default":"crowd","description":"User which runs Crowd.","loc":["services","crowd","user"],"readOnly":false,"type":"string"},"services.dante.config":{"declarations":["nixos/modules/services/networking/dante.nix"],"description":"Contents of Dante's configuration file.\nNOTE: user.privileged, user.unprivileged and logoutput are set by the service.\n","loc":["services","dante","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dante.enable":{"declarations":["nixos/modules/services/networking/dante.nix"],"default":false,"description":"Whether to enable Dante SOCKS proxy.","example":true,"loc":["services","dante","enable"],"readOnly":false,"type":"boolean"},"services.das_watchdog.enable":{"declarations":["nixos/modules/services/monitoring/das_watchdog.nix"],"default":false,"description":"Whether to enable realtime watchdog.","example":true,"loc":["services","das_watchdog","enable"],"readOnly":false,"type":"boolean"},"services.datadog-agent.apiKeyFile":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"description":"Path to a file containing the Datadog API key to associate the\nagent with your account.\n","example":"/run/keys/datadog_api_key","loc":["services","datadog-agent","apiKeyFile"],"readOnly":false,"type":"path"},"services.datadog-agent.checks":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":{},"description":"Configuration for all Datadog checks. Keys of this attribute\nset will be used as the name of the check to create the\nappropriate configuration in `conf.d/$check.d/conf.yaml`.\n\nThe configuration is converted into JSON from the plain Nix\nlanguage configuration, meaning that you should write\nconfiguration adhering to Datadog's documentation - but in Nix\nlanguage.\n\nRefer to the implementation of this module (specifically the\ndefinition of `defaultChecks`) for an example.\n\nNote: The 'disk' and 'network' check are configured in\nseparate options because they exist by default. Attempting to\noverride their configuration here will have no effect.\n","example":{"http_check":{"init_config":null,"instances":[{"name":"some-service","tags":["some-service"],"url":"http://localhost:1337/healthz"}]}},"loc":["services","datadog-agent","checks"],"readOnly":false,"type":"attribute set of attribute sets"},"services.datadog-agent.diskCheck":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":{"init_config":{},"instances":[{"use-mount":"no"}]},"description":"Disk check config","loc":["services","datadog-agent","diskCheck"],"readOnly":false,"type":"attribute set"},"services.datadog-agent.enable":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":false,"description":"Whether to enable the datadog-agent v6 monitoring service\n","loc":["services","datadog-agent","enable"],"readOnly":false,"type":"boolean"},"services.datadog-agent.enableLiveProcessCollection":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":false,"description":"Whether to enable the live process collection agent.\n","loc":["services","datadog-agent","enableLiveProcessCollection"],"readOnly":false,"type":"boolean"},"services.datadog-agent.extraConfig":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":{},"description":"Extra configuration options that will be merged into the\nmain config file <filename>datadog.yaml</filename>.\n","loc":["services","datadog-agent","extraConfig"],"readOnly":false,"type":"attribute set"},"services.datadog-agent.extraIntegrations":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":{},"description":"Extra integrations from the Datadog core-integrations\nrepository that should be built and included.\n\nBy default the included integrations are disk, mongo, network,\nnginx and postgres.\n\nTo include additional integrations the name of the derivation\nand a function to filter its dependencies from the Python\npackage set must be provided.\n","example":{"ntp":"<function>"},"loc":["services","datadog-agent","extraIntegrations"],"readOnly":false,"type":"attribute set"},"services.datadog-agent.hostname":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":null,"description":"The hostname to show in the Datadog dashboard (optional)","example":"mymachine.mydomain","loc":["services","datadog-agent","hostname"],"readOnly":false,"type":"null or Concatenated string"},"services.datadog-agent.logLevel":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":null,"description":"Logging verbosity.","loc":["services","datadog-agent","logLevel"],"readOnly":false,"type":"null or one of \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\""},"services.datadog-agent.networkCheck":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":{"init_config":{},"instances":[{"collect_connection_state":false,"excluded_interfaces":["lo","lo0"]}]},"description":"Network check config","loc":["services","datadog-agent","networkCheck"],"readOnly":false,"type":"attribute set"},"services.datadog-agent.package":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":"pkgs.datadog-agent","description":"Which DataDog v6 agent package to use. Note that the provided\npackage is expected to have an overridable `python`-attribute\nwhich configures the Python environment with the Datadog\nchecks.\n","loc":["services","datadog-agent","package"],"readOnly":false,"type":"package"},"services.datadog-agent.tags":{"declarations":["nixos/modules/services/monitoring/datadog-agent.nix"],"default":null,"description":"The tags to mark this Datadog agent","example":["test","service"],"loc":["services","datadog-agent","tags"],"readOnly":false,"type":"null or list of strings"},"services.davfs2.davGroup":{"declarations":["nixos/modules/services/network-filesystems/davfs2.nix"],"default":"davfs2","description":"The group of the running mount.davfs daemon. Ordinary users must be\nmember of this group in order to mount a davfs2 file system. Value must\nbe given as name, not as numerical id.\n","loc":["services","davfs2","davGroup"],"readOnly":false,"type":"Concatenated string"},"services.davfs2.davUser":{"declarations":["nixos/modules/services/network-filesystems/davfs2.nix"],"default":"davfs2","description":"When invoked by root the mount.davfs daemon will run as this user.\nValue must be given as name, not as numerical id.\n","loc":["services","davfs2","davUser"],"readOnly":false,"type":"Concatenated string"},"services.davfs2.enable":{"declarations":["nixos/modules/services/network-filesystems/davfs2.nix"],"default":false,"description":"Whether to enable davfs2.\n","loc":["services","davfs2","enable"],"readOnly":false,"type":"boolean"},"services.davfs2.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/davfs2.nix"],"default":"","description":"Extra lines appended to the configuration of davfs2.\n","example":"kernel_fs coda\nproxy foo.bar:8080\nuse_locks 0\n","loc":["services","davfs2","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dbus.packages":{"declarations":["nixos/modules/services/system/dbus.nix"],"default":[],"description":"Packages whose D-Bus configuration files should be included in\nthe configuration of the D-Bus system-wide or session-wide\nmessage bus.  Specifically, files in the following directories\nwill be included into their respective DBus configuration paths:\n<filename><replaceable>pkg</replaceable>/etc/dbus-1/system.d</filename>\n<filename><replaceable>pkg</replaceable>/share/dbus-1/system-services</filename>\n<filename><replaceable>pkg</replaceable>/etc/dbus-1/session.d</filename>\n<filename><replaceable>pkg</replaceable>/share/dbus-1/services</filename>\n","loc":["services","dbus","packages"],"readOnly":false,"type":"list of paths"},"services.dbus.socketActivated":{"declarations":["nixos/modules/services/system/dbus.nix"],"default":false,"description":"Make the user instance socket activated.\n","loc":["services","dbus","socketActivated"],"readOnly":false,"type":"boolean"},"services.dd-agent.api_key":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"description":"The Datadog API key to associate the agent with your account.\n\nWarning: this key is stored in cleartext within the world-readable\nNix store! Consider using the new v6\n<option>services.datadog-agent</option> module instead.\n","example":"ae0aa6a8f08efa988ba0a17578f009ab","loc":["services","dd-agent","api_key"],"readOnly":false,"type":"string"},"services.dd-agent.enable":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"default":false,"description":"Whether to enable the dd-agent v5 monitoring service.\nFor datadog-agent v6, see <option>services.datadog-agent.enable</option>.\n","loc":["services","dd-agent","enable"],"readOnly":false,"type":"boolean"},"services.dd-agent.hostname":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"default":null,"description":"The hostname to show in the Datadog dashboard (optional)","example":"mymachine.mydomain","loc":["services","dd-agent","hostname"],"readOnly":false,"type":"null or Concatenated string"},"services.dd-agent.jmxConfig":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"default":null,"description":"JMX integration configuration","loc":["services","dd-agent","jmxConfig"],"readOnly":false,"type":"null or Concatenated string"},"services.dd-agent.mongoConfig":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"default":null,"description":"MongoDB integration configuration","loc":["services","dd-agent","mongoConfig"],"readOnly":false,"type":"null or Concatenated string"},"services.dd-agent.nginxConfig":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"default":null,"description":"Datadog nginx integration configuration","loc":["services","dd-agent","nginxConfig"],"readOnly":false,"type":"null or Concatenated string"},"services.dd-agent.postgresqlConfig":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"default":null,"description":"Datadog PostgreSQL integration configuration","loc":["services","dd-agent","postgresqlConfig"],"readOnly":false,"type":"null or Concatenated string"},"services.dd-agent.processConfig":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"default":null,"description":"Process integration configuration\n\nSee http://docs.datadoghq.com/integrations/process/\n","loc":["services","dd-agent","processConfig"],"readOnly":false,"type":"null or Concatenated string"},"services.dd-agent.tags":{"declarations":["nixos/modules/services/monitoring/dd-agent/dd-agent.nix"],"default":null,"description":"The tags to mark this Datadog agent","example":["test","service"],"loc":["services","dd-agent","tags"],"readOnly":false,"type":"null or list of strings"},"services.ddclient.configFile":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"/etc/ddclient.conf","description":"Path to configuration file.\nWhen set to the default '/etc/ddclient.conf' it will be populated with the various other options in this module. When it is changed (for example: '/root/nixos/secrets/ddclient.conf') the file read directly to configure ddclient. This is a source of impurity.\nThe purpose of this is to avoid placing secrets into the store.\n","example":"/root/nixos/secrets/ddclient.conf","loc":["services","ddclient","configFile"],"readOnly":false,"type":"path"},"services.ddclient.domains":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":[""],"description":"Domain name(s) to synchronize.\n","loc":["services","ddclient","domains"],"readOnly":false,"type":"list of strings"},"services.ddclient.enable":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":false,"description":"Whether to synchronise your machine's IP address with a dynamic DNS provider (e.g. dyndns.org).\n","loc":["services","ddclient","enable"],"readOnly":false,"type":"boolean"},"services.ddclient.extraConfig":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"","description":"Extra configuration. Contents will be added verbatim to the configuration file.\n","loc":["services","ddclient","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.ddclient.interval":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"10min","description":"The interval at which to run the check and update.\nSee <command>man 7 systemd.time</command> for the format.\n","loc":["services","ddclient","interval"],"readOnly":false,"type":"string"},"services.ddclient.password":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"","description":"Password. WARNING: The password becomes world readable in the Nix store.\n","loc":["services","ddclient","password"],"readOnly":false,"type":"string"},"services.ddclient.protocol":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"dyndns2","description":"Protocol to use with dynamic DNS provider (see https://sourceforge.net/p/ddclient/wiki/protocols).\n","loc":["services","ddclient","protocol"],"readOnly":false,"type":"string"},"services.ddclient.quiet":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":false,"description":"Print no messages for unnecessary updates.\n","loc":["services","ddclient","quiet"],"readOnly":false,"type":"boolean"},"services.ddclient.script":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"","description":"script as required by some providers.\n","loc":["services","ddclient","script"],"readOnly":false,"type":"string"},"services.ddclient.server":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"","description":"Server address.\n","loc":["services","ddclient","server"],"readOnly":false,"type":"string"},"services.ddclient.ssl":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":true,"description":"Whether to use to use SSL/TLS to connect to dynamic DNS provider.\n","loc":["services","ddclient","ssl"],"readOnly":false,"type":"boolean"},"services.ddclient.use":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"web, web=checkip.dyndns.com/, web-skip='Current IP Address: '","description":"Method to determine the IP address to send to the dynamic DNS provider.\n","loc":["services","ddclient","use"],"readOnly":false,"type":"string"},"services.ddclient.username":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"","description":"User name.\n","loc":["services","ddclient","username"],"readOnly":false,"type":"string"},"services.ddclient.verbose":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":true,"description":"Print verbose information.\n","loc":["services","ddclient","verbose"],"readOnly":false,"type":"boolean"},"services.ddclient.zone":{"declarations":["nixos/modules/services/networking/ddclient.nix"],"default":"","description":"zone as required by some providers.\n","loc":["services","ddclient","zone"],"readOnly":false,"type":"string"},"services.deluge.enable":{"declarations":["nixos/modules/services/torrent/deluge.nix"],"default":false,"description":"Whether to enable Deluge daemon.","example":true,"loc":["services","deluge","enable"],"readOnly":false,"type":"boolean"},"services.deluge.openFilesLimit":{"declarations":["nixos/modules/services/torrent/deluge.nix"],"default":4096,"description":"Number of files to allow deluged to open.\n","example":8192,"loc":["services","deluge","openFilesLimit"],"readOnly":false,"type":"unspecified"},"services.deluge.web.enable":{"declarations":["nixos/modules/services/torrent/deluge.nix"],"default":false,"description":"Whether to enable Deluge Web daemon.","example":true,"loc":["services","deluge","web","enable"],"readOnly":false,"type":"boolean"},"services.devmon.enable":{"declarations":["nixos/modules/services/misc/devmon.nix"],"default":false,"description":"Whether to enable devmon, an automatic device mounting daemon.\n","loc":["services","devmon","enable"],"readOnly":false,"type":"unspecified"},"services.dhcpd4.configFile":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":null,"description":"The path of the DHCP server configuration file.  If no file\nis specified, a file is generated using the other options.\n","loc":["services","dhcpd4","configFile"],"readOnly":false,"type":"null or path"},"services.dhcpd4.enable":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":false,"description":"Whether to enable the DHCPv4 server.\n","loc":["services","dhcpd4","enable"],"readOnly":false,"type":"boolean"},"services.dhcpd4.extraConfig":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":"","description":"Extra text to be appended to the DHCP server configuration\nfile. Currently, you almost certainly need to specify something\nthere, such as the options specifying the subnet mask, DNS servers,\netc.\n","example":"option subnet-mask 255.255.255.0;\noption broadcast-address 192.168.1.255;\noption routers 192.168.1.5;\noption domain-name-servers 130.161.158.4, 130.161.33.17, 130.161.180.1;\noption domain-name \"example.org\";\nsubnet 192.168.1.0 netmask 255.255.255.0 {\n  range 192.168.1.100 192.168.1.200;\n}\n","loc":["services","dhcpd4","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dhcpd4.extraFlags":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":[],"description":"Additional command line flags to be passed to the dhcpd daemon.\n","loc":["services","dhcpd4","extraFlags"],"readOnly":false,"type":"list of strings"},"services.dhcpd4.interfaces":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":["eth0"],"description":"The interfaces on which the DHCP server should listen.\n","loc":["services","dhcpd4","interfaces"],"readOnly":false,"type":"list of strings"},"services.dhcpd4.machines":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":[],"description":"A list mapping Ethernet addresses to IPv4 addresses for the\nDHCP server.\n","example":[{"ethernetAddress":"00:16:76:9a:32:1d","hostName":"foo","ipAddress":"192.168.1.10"},{"ethernetAddress":"00:19:d1:1d:c4:9a","hostName":"bar","ipAddress":"192.168.1.11"}],"loc":["services","dhcpd4","machines"],"readOnly":false,"type":"list of submodules"},"services.dhcpd4.machines.*.ethernetAddress":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"description":"MAC address of the machine.\n","example":"00:16:76:9a:32:1d","loc":["services","dhcpd4","machines","*","ethernetAddress"],"readOnly":false,"type":"string"},"services.dhcpd4.machines.*.hostName":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"description":"Hostname which is assigned statically to the machine.\n","example":"foo","loc":["services","dhcpd4","machines","*","hostName"],"readOnly":false,"type":"string"},"services.dhcpd4.machines.*.ipAddress":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"description":"IP address of the machine.\n","example":"192.168.1.10","loc":["services","dhcpd4","machines","*","ipAddress"],"readOnly":false,"type":"string"},"services.dhcpd4.stateDir":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":"/var/lib/dhcp","description":"State directory for the DHCP server.\n","loc":["services","dhcpd4","stateDir"],"readOnly":false,"type":"path"},"services.dhcpd6.configFile":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":null,"description":"The path of the DHCP server configuration file.  If no file\nis specified, a file is generated using the other options.\n","loc":["services","dhcpd6","configFile"],"readOnly":false,"type":"null or path"},"services.dhcpd6.enable":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":false,"description":"Whether to enable the DHCPv6 server.\n","loc":["services","dhcpd6","enable"],"readOnly":false,"type":"boolean"},"services.dhcpd6.extraConfig":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":"","description":"Extra text to be appended to the DHCP server configuration\nfile. Currently, you almost certainly need to specify something\nthere, such as the options specifying the subnet mask, DNS servers,\netc.\n","example":"option subnet-mask 255.255.255.0;\noption broadcast-address 192.168.1.255;\noption routers 192.168.1.5;\noption domain-name-servers 130.161.158.4, 130.161.33.17, 130.161.180.1;\noption domain-name \"example.org\";\nsubnet 192.168.1.0 netmask 255.255.255.0 {\n  range 192.168.1.100 192.168.1.200;\n}\n","loc":["services","dhcpd6","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dhcpd6.extraFlags":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":[],"description":"Additional command line flags to be passed to the dhcpd daemon.\n","loc":["services","dhcpd6","extraFlags"],"readOnly":false,"type":"list of strings"},"services.dhcpd6.interfaces":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":["eth0"],"description":"The interfaces on which the DHCP server should listen.\n","loc":["services","dhcpd6","interfaces"],"readOnly":false,"type":"list of strings"},"services.dhcpd6.machines":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":[],"description":"A list mapping Ethernet addresses to IPv6 addresses for the\nDHCP server.\n","example":[{"ethernetAddress":"00:16:76:9a:32:1d","hostName":"foo","ipAddress":"192.168.1.10"},{"ethernetAddress":"00:19:d1:1d:c4:9a","hostName":"bar","ipAddress":"192.168.1.11"}],"loc":["services","dhcpd6","machines"],"readOnly":false,"type":"list of submodules"},"services.dhcpd6.machines.*.ethernetAddress":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"description":"MAC address of the machine.\n","example":"00:16:76:9a:32:1d","loc":["services","dhcpd6","machines","*","ethernetAddress"],"readOnly":false,"type":"string"},"services.dhcpd6.machines.*.hostName":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"description":"Hostname which is assigned statically to the machine.\n","example":"foo","loc":["services","dhcpd6","machines","*","hostName"],"readOnly":false,"type":"string"},"services.dhcpd6.machines.*.ipAddress":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"description":"IP address of the machine.\n","example":"192.168.1.10","loc":["services","dhcpd6","machines","*","ipAddress"],"readOnly":false,"type":"string"},"services.dhcpd6.stateDir":{"declarations":["nixos/modules/services/networking/dhcpd.nix"],"default":"/var/lib/dhcp6","description":"State directory for the DHCP server.\n","loc":["services","dhcpd6","stateDir"],"readOnly":false,"type":"path"},"services.dictd.DBs":{"declarations":["nixos/modules/services/misc/dictd.nix"],"default":"with pkgs.dictdDBs; [ wiktionary wordnet ]","description":"List of databases to make available.","example":{"_type":"literalExample","text":"[ pkgs.dictdDBs.nld2eng ]"},"loc":["services","dictd","DBs"],"readOnly":false,"type":"list of packages"},"services.dictd.enable":{"declarations":["nixos/modules/services/misc/dictd.nix"],"default":false,"description":"Whether to enable the DICT.org dictionary server.\n","loc":["services","dictd","enable"],"readOnly":false,"type":"boolean"},"services.diod.allsquash":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":true,"description":"Remap all users to \"nobody\". The attaching user need not be present in the\npassword file.\n","loc":["services","diod","allsquash"],"readOnly":false,"type":"boolean"},"services.diod.authRequired":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":false,"description":"Allow clients to connect without authentication, i.e. without a valid MUNGE credential.\n","loc":["services","diod","authRequired"],"readOnly":false,"type":"boolean"},"services.diod.enable":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":false,"description":"Whether to enable the diod 9P file server.","loc":["services","diod","enable"],"readOnly":false,"type":"boolean"},"services.diod.exportall":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":true,"description":"Export all file systems listed in /proc/mounts. If new file systems are mounted\nafter diod has started, they will become immediately mountable. If there is a\nduplicate entry for a file system in the exports list, any options listed in\nthe exports entry will apply.\n","loc":["services","diod","exportall"],"readOnly":false,"type":"boolean"},"services.diod.exportopts":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":[],"description":"Establish a default set of export options. These are overridden, not appended\nto, by opts attributes in an \"exports\" entry.\n","loc":["services","diod","exportopts"],"readOnly":false,"type":"list of strings"},"services.diod.exports":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":[],"description":"List the file systems that clients will be allowed to mount. All paths should\nbe fully qualified. The exports table can include two types of element:\na string element (as above),\nor an alternate table element form { path=\"/path\", opts=\"ro\" }.\nIn the alternate form, the (optional) opts attribute is a comma-separated list\nof export options. The two table element forms can be mixed in the exports\ntable. Note that although diod will not traverse file system boundaries for a\ngiven mount due to inode uniqueness constraints, subdirectories of a file\nsystem can be separately exported.\n","loc":["services","diod","exports"],"readOnly":false,"type":"list of strings"},"services.diod.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":"","description":"Extra configuration options for diod.conf.","loc":["services","diod","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.diod.listen":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":["0.0.0.0:564"],"description":"[ \"IP:PORT\" [,\"IP:PORT\",...] ]\nList the interfaces and ports that diod should listen on.\n","loc":["services","diod","listen"],"readOnly":false,"type":"list of strings"},"services.diod.logdest":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":"syslog:daemon:err","description":"Set the destination for logging.\nThe value has the form of \"syslog:facility:level\" or \"filename\".\n","loc":["services","diod","logdest"],"readOnly":false,"type":"string"},"services.diod.nwthreads":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":16,"description":"Sets the (fixed) number of worker threads created to handle 9P\nrequests for a unique aname.\n","loc":["services","diod","nwthreads"],"readOnly":false,"type":"signed integer"},"services.diod.squashuser":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":"nobody","description":"Change the squash user. The squash user must be present in the password file.\n","loc":["services","diod","squashuser"],"readOnly":false,"type":"string"},"services.diod.statfsPassthru":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":false,"description":"This option configures statfs to return the host file system's type\nrather than V9FS_MAGIC.\n","loc":["services","diod","statfsPassthru"],"readOnly":false,"type":"boolean"},"services.diod.userdb":{"declarations":["nixos/modules/services/network-filesystems/diod.nix"],"default":false,"description":"This option disables password/group lookups. It allows any uid to attach and\nassumes gid=uid, and supplementary groups contain only the primary gid.\n","loc":["services","diod","userdb"],"readOnly":false,"type":"boolean"},"services.disnix.enable":{"declarations":["nixos/modules/services/misc/disnix.nix"],"default":false,"description":"Whether to enable Disnix","loc":["services","disnix","enable"],"readOnly":false,"type":"unspecified"},"services.disnix.enableMultiUser":{"declarations":["nixos/modules/services/misc/disnix.nix"],"default":true,"description":"Whether to support multi-user mode by enabling the Disnix D-Bus service","loc":["services","disnix","enableMultiUser"],"readOnly":false,"type":"boolean"},"services.disnix.package":{"declarations":["nixos/modules/services/misc/disnix.nix"],"default":"pkgs.disnix","description":"The Disnix package","loc":["services","disnix","package"],"readOnly":false,"type":"path"},"services.disnix.useWebServiceInterface":{"declarations":["nixos/modules/services/misc/disnix.nix"],"default":false,"description":"Whether to enable the DisnixWebService interface running on Apache Tomcat","loc":["services","disnix","useWebServiceInterface"],"readOnly":false,"type":"unspecified"},"services.dkimproxy-out.domains":{"declarations":["nixos/modules/services/mail/dkimproxy-out.nix"],"description":"List of domains DKIMproxy can sign for.","example":["example.org","example.com"],"loc":["services","dkimproxy-out","domains"],"readOnly":false,"type":"list of strings"},"services.dkimproxy-out.enable":{"declarations":["nixos/modules/services/mail/dkimproxy-out.nix"],"default":false,"description":"Whether to enable dkimproxy_out.\n\nNote that a key will be auto-generated, and can be found in\n/var/lib/dkimproxy-out.\n","loc":["services","dkimproxy-out","enable"],"readOnly":false,"type":"boolean"},"services.dkimproxy-out.keySize":{"declarations":["nixos/modules/services/mail/dkimproxy-out.nix"],"default":2048,"description":"Size of the RSA key to use to sign outgoing emails. Note that the\nmaximum mandatorily verified as per RFC6376 is 2048.\n","loc":["services","dkimproxy-out","keySize"],"readOnly":false,"type":"signed integer"},"services.dkimproxy-out.listen":{"declarations":["nixos/modules/services/mail/dkimproxy-out.nix"],"description":"Address:port DKIMproxy should listen on.","example":"127.0.0.1:10027","loc":["services","dkimproxy-out","listen"],"readOnly":false,"type":"string"},"services.dkimproxy-out.relay":{"declarations":["nixos/modules/services/mail/dkimproxy-out.nix"],"description":"Address:port DKIMproxy should forward mail to.","example":"127.0.0.1:10028","loc":["services","dkimproxy-out","relay"],"readOnly":false,"type":"string"},"services.dkimproxy-out.selector":{"declarations":["nixos/modules/services/mail/dkimproxy-out.nix"],"description":"The selector to use for DKIM key identification.\n\nFor example, if 'selector1' is used here, then for each domain\n'example.org' given in `domain`, 'selector1._domainkey.example.org'\nshould contain the TXT record indicating the public key is the one\nin /var/lib/dkimproxy-out/public.key: \"v=DKIM1; t=s; p=[THE PUBLIC KEY]\".\n","example":"selector1","loc":["services","dkimproxy-out","selector"],"readOnly":false,"type":"string"},"services.dleyna-renderer.enable":{"declarations":["nixos/modules/services/desktops/dleyna-renderer.nix"],"default":false,"description":"Whether to enable dleyna-renderer service, a DBus service\nfor handling DLNA renderers.\n","loc":["services","dleyna-renderer","enable"],"readOnly":false,"type":"boolean"},"services.dleyna-server.enable":{"declarations":["nixos/modules/services/desktops/dleyna-server.nix"],"default":false,"description":"Whether to enable dleyna-server service, a DBus service\nfor handling DLNA servers.\n","loc":["services","dleyna-server","enable"],"readOnly":false,"type":"boolean"},"services.dnscache.clientIps":{"declarations":["nixos/modules/services/networking/dnscache.nix"],"default":["127.0.0.1"],"description":"Client IP addresses (or prefixes) from which to accept connections.","example":["192.168","172.23.75.82"],"loc":["services","dnscache","clientIps"],"readOnly":false,"type":"list of strings"},"services.dnscache.domainServers":{"declarations":["nixos/modules/services/networking/dnscache.nix"],"default":{},"description":"Table of {hostname: server} pairs to use as authoritative servers for hosts (and subhosts).\nIf entry for @ is not specified predefined list of root servers is used.\n","example":{"@":["8.8.8.8","8.8.4.4"],"example.com":["192.168.100.100"]},"loc":["services","dnscache","domainServers"],"readOnly":false,"type":"attribute set of list of stringss"},"services.dnscache.enable":{"declarations":["nixos/modules/services/networking/dnscache.nix"],"default":false,"description":"Whether to run the dnscache caching dns server.","loc":["services","dnscache","enable"],"readOnly":false,"type":"boolean"},"services.dnscache.forwardOnly":{"declarations":["nixos/modules/services/networking/dnscache.nix"],"default":false,"description":"Whether to treat root servers (for @) as caching\nservers, requesting addresses the same way a client does. This is\nneeded if you want to use e.g. Google DNS as your upstream DNS.\n","loc":["services","dnscache","forwardOnly"],"readOnly":false,"type":"boolean"},"services.dnscache.ip":{"declarations":["nixos/modules/services/networking/dnscache.nix"],"default":"0.0.0.0","description":"IP address on which to listen for connections.","loc":["services","dnscache","ip"],"readOnly":false,"type":"string"},"services.dnschain.api.hostname":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":"0.0.0.0","description":"The hostname (or IP address) the DNSChain API server will bind to.\n","loc":["services","dnschain","api","hostname"],"readOnly":false,"type":"string"},"services.dnschain.api.port":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":8080,"description":"The port the DNSChain API server (HTTP) will bind to.\n","loc":["services","dnschain","api","port"],"readOnly":false,"type":"signed integer"},"services.dnschain.api.tlsPort":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":4433,"description":"The port the DNSChain API server (HTTPS) will bind to.\n","loc":["services","dnschain","api","tlsPort"],"readOnly":false,"type":"signed integer"},"services.dnschain.dns.address":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":"127.0.0.1","description":"The IP address the DNSChain resolver will bind to.\nLeave this unchanged if you do not wish to directly expose the resolver.\n","loc":["services","dnschain","dns","address"],"readOnly":false,"type":"string"},"services.dnschain.dns.externalAddress":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":"127.0.0.1","description":"The IP address used by clients to reach the resolver and the value of\nthe <literal>namecoin.dns</literal> record. Set this in case the bind address\nis not the actual IP address (e.g. the machine is behind a NAT).\n","loc":["services","dnschain","dns","externalAddress"],"readOnly":false,"type":"string"},"services.dnschain.dns.port":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":5333,"description":"The port the DNSChain resolver will bind to.\n","loc":["services","dnschain","dns","port"],"readOnly":false,"type":"signed integer"},"services.dnschain.enable":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":false,"description":"Whether to enable DNSChain, a blockchain based DNS + HTTP server.\nTo resolve .bit domains set <literal>services.namecoind.enable = true;</literal>\nand an RPC username/password.\n.","example":true,"loc":["services","dnschain","enable"],"readOnly":false,"type":"boolean"},"services.dnschain.extraConfig":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":"","description":"Additional options that will be appended to the configuration file.\n","example":"[log]\nlevel = debug\n","loc":["services","dnschain","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dnscrypt-proxy.customResolver":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"default":null,"description":"Use an unlisted resolver (e.g., a private DNSCrypt provider). For\nadvanced users only. If specified, this option takes precedence.\n","loc":["services","dnscrypt-proxy","customResolver"],"readOnly":false,"type":"null or submodule"},"services.dnscrypt-proxy.customResolver.address":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"description":"IP address","example":"208.67.220.220","loc":["services","dnscrypt-proxy","customResolver","address"],"readOnly":false,"type":"string"},"services.dnscrypt-proxy.customResolver.key":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"description":"Public key","example":"B735:1140:206F:225D:3E2B:D822:D7FD:691E:A1C3:3CC8:D666:8D0C:BE04:BFAB:CA43:FB79","loc":["services","dnscrypt-proxy","customResolver","key"],"readOnly":false,"type":"string"},"services.dnscrypt-proxy.customResolver.name":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"description":"Fully qualified domain name","example":"2.dnscrypt-cert.example.com","loc":["services","dnscrypt-proxy","customResolver","name"],"readOnly":false,"type":"string"},"services.dnscrypt-proxy.customResolver.port":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"default":443,"description":"Port","loc":["services","dnscrypt-proxy","customResolver","port"],"readOnly":false,"type":"signed integer"},"services.dnscrypt-proxy.enable":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"default":false,"description":"Whether to enable the DNSCrypt client proxy","loc":["services","dnscrypt-proxy","enable"],"readOnly":false,"type":"boolean"},"services.dnscrypt-proxy.extraArgs":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"default":[],"description":"Additional command-line arguments passed verbatim to the daemon.\nSee <citerefentry><refentrytitle>dnscrypt-proxy</refentrytitle>\n<manvolnum>8</manvolnum></citerefentry> for details.\n","example":["-X libdcplugin_example_cache.so,--min-ttl=60"],"loc":["services","dnscrypt-proxy","extraArgs"],"readOnly":false,"type":"list of strings"},"services.dnscrypt-proxy.localAddress":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"default":"127.0.0.1","description":"Listen for DNS queries to relay on this address. The only reason to\nchange this from its default value is to proxy queries on behalf\nof other machines (typically on the local network).\n","loc":["services","dnscrypt-proxy","localAddress"],"readOnly":false,"type":"string"},"services.dnscrypt-proxy.localPort":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"default":53,"description":"Listen for DNS queries to relay on this port. The default value\nassumes that the DNSCrypt proxy should relay DNS queries directly.\nWhen running as a forwarder for another DNS client, set this option\nto a different value; otherwise leave the default.\n","loc":["services","dnscrypt-proxy","localPort"],"readOnly":false,"type":"signed integer"},"services.dnscrypt-proxy.resolverName":{"declarations":["nixos/modules/services/networking/dnscrypt-proxy.nix"],"default":"random","description":"The name of the DNSCrypt resolver to use, taken from\n<filename>/var/lib/dnscrypt-proxy/dnscrypt-resolvers.csv</filename>.  The default is to\npick a random non-logging resolver that supports DNSSEC.\n","example":"dnscrypt.eu-nl","loc":["services","dnscrypt-proxy","resolverName"],"readOnly":false,"type":"null or string"},"services.dnscrypt-wrapper.address":{"declarations":["nixos/modules/services/networking/dnscrypt-wrapper.nix"],"default":"127.0.0.1","description":"The DNSCrypt wrapper will bind to this IP address.\n","loc":["services","dnscrypt-wrapper","address"],"readOnly":false,"type":"string"},"services.dnscrypt-wrapper.enable":{"declarations":["nixos/modules/services/networking/dnscrypt-wrapper.nix"],"default":false,"description":"Whether to enable DNSCrypt wrapper.","example":true,"loc":["services","dnscrypt-wrapper","enable"],"readOnly":false,"type":"boolean"},"services.dnscrypt-wrapper.keys.checkInterval":{"declarations":["nixos/modules/services/networking/dnscrypt-wrapper.nix"],"default":1440,"description":"The time interval (in minutes) between key expiration checks.\n","loc":["services","dnscrypt-wrapper","keys","checkInterval"],"readOnly":false,"type":"signed integer"},"services.dnscrypt-wrapper.keys.expiration":{"declarations":["nixos/modules/services/networking/dnscrypt-wrapper.nix"],"default":30,"description":"The duration (in days) of the time-limited secret key.\nThis will be automatically rotated before expiration.\n","loc":["services","dnscrypt-wrapper","keys","expiration"],"readOnly":false,"type":"signed integer"},"services.dnscrypt-wrapper.port":{"declarations":["nixos/modules/services/networking/dnscrypt-wrapper.nix"],"default":5353,"description":"The DNSCrypt wrapper will listen for DNS queries on this port.\n","loc":["services","dnscrypt-wrapper","port"],"readOnly":false,"type":"signed integer"},"services.dnscrypt-wrapper.providerName":{"declarations":["nixos/modules/services/networking/dnscrypt-wrapper.nix"],"default":"2.dnscrypt-cert.nixos","description":"The name that will be given to this DNSCrypt resolver.\nNote: the resolver name must start with <literal>2.dnscrypt-cert.</literal>.\n","example":"2.dnscrypt-cert.myresolver","loc":["services","dnscrypt-wrapper","providerName"],"readOnly":false,"type":"string"},"services.dnscrypt-wrapper.upstream.address":{"declarations":["nixos/modules/services/networking/dnscrypt-wrapper.nix"],"default":"127.0.0.1","description":"The IP address of the upstream DNS server DNSCrypt will \"wrap\".\n","loc":["services","dnscrypt-wrapper","upstream","address"],"readOnly":false,"type":"string"},"services.dnscrypt-wrapper.upstream.port":{"declarations":["nixos/modules/services/networking/dnscrypt-wrapper.nix"],"default":53,"description":"The port of the upstream DNS server DNSCrypt will \"wrap\".\n","loc":["services","dnscrypt-wrapper","upstream","port"],"readOnly":false,"type":"signed integer"},"services.dnsdist.enable":{"declarations":["nixos/modules/services/networking/dnsdist.nix"],"default":false,"description":"Whether to enable dnsdist domain name server.","example":true,"loc":["services","dnsdist","enable"],"readOnly":false,"type":"boolean"},"services.dnsdist.extraConfig":{"declarations":["nixos/modules/services/networking/dnsdist.nix"],"default":"","description":"Extra lines to be added verbatim to dnsdist.conf.\n","loc":["services","dnsdist","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dnsdist.listenAddress":{"declarations":["nixos/modules/services/networking/dnsdist.nix"],"default":"0.0.0.0","description":"Listen IP Address","loc":["services","dnsdist","listenAddress"],"readOnly":false,"type":"string"},"services.dnsdist.listenPort":{"declarations":["nixos/modules/services/networking/dnsdist.nix"],"default":53,"description":"Listen port","loc":["services","dnsdist","listenPort"],"readOnly":false,"type":"signed integer"},"services.dnsmasq.alwaysKeepRunning":{"declarations":["nixos/modules/services/networking/dnsmasq.nix"],"default":false,"description":"If enabled, systemd will always respawn dnsmasq even if shut down manually. The default, disabled, will only restart it on error.\n","loc":["services","dnsmasq","alwaysKeepRunning"],"readOnly":false,"type":"boolean"},"services.dnsmasq.enable":{"declarations":["nixos/modules/services/networking/dnsmasq.nix"],"default":false,"description":"Whether to run dnsmasq.\n","loc":["services","dnsmasq","enable"],"readOnly":false,"type":"boolean"},"services.dnsmasq.extraConfig":{"declarations":["nixos/modules/services/networking/dnsmasq.nix"],"default":"","description":"Extra configuration directives that should be added to\n<literal>dnsmasq.conf</literal>.\n","loc":["services","dnsmasq","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dnsmasq.resolveDNSChainQueries":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":false,"description":"Resolve <literal>.bit</literal> top-level domains using DNSChain and namecoin.\n","loc":["services","dnsmasq","resolveDNSChainQueries"],"readOnly":false,"type":"boolean"},"services.dnsmasq.resolveLocalQueries":{"declarations":["nixos/modules/services/networking/dnsmasq.nix"],"default":true,"description":"Whether dnsmasq should resolve local queries (i.e. add 127.0.0.1 to\n/etc/resolv.conf).\n","loc":["services","dnsmasq","resolveLocalQueries"],"readOnly":false,"type":"boolean"},"services.dnsmasq.servers":{"declarations":["nixos/modules/services/networking/dnsmasq.nix"],"default":[],"description":"The DNS servers which dnsmasq should query.\n","example":["8.8.8.8","8.8.4.4"],"loc":["services","dnsmasq","servers"],"readOnly":false,"type":"list of strings"},"services.dockerRegistry.enable":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":false,"description":"Whether to enable Docker Registry.","example":true,"loc":["services","dockerRegistry","enable"],"readOnly":false,"type":"boolean"},"services.dockerRegistry.enableDelete":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":false,"description":"Enable delete for manifests and blobs.","loc":["services","dockerRegistry","enableDelete"],"readOnly":false,"type":"boolean"},"services.dockerRegistry.enableGarbageCollect":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":false,"description":"Whether to enable garbage collect.","example":true,"loc":["services","dockerRegistry","enableGarbageCollect"],"readOnly":false,"type":"boolean"},"services.dockerRegistry.enableRedisCache":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":false,"description":"Whether to enable redis as blob cache.","example":true,"loc":["services","dockerRegistry","enableRedisCache"],"readOnly":false,"type":"boolean"},"services.dockerRegistry.extraConfig":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":{},"description":"Docker extra registry configuration via environment variables.\n","loc":["services","dockerRegistry","extraConfig"],"readOnly":false,"type":"attribute set"},"services.dockerRegistry.garbageCollectDates":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":"daily","description":"Specification (in the format described by\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>) of the time at\nwhich the garbage collect will occur.\n","loc":["services","dockerRegistry","garbageCollectDates"],"readOnly":false,"type":"string"},"services.dockerRegistry.listenAddress":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":"127.0.0.1","description":"Docker registry host or ip to bind to.","loc":["services","dockerRegistry","listenAddress"],"readOnly":false,"type":"string"},"services.dockerRegistry.port":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":5000,"description":"Docker registry port to bind to.","loc":["services","dockerRegistry","port"],"readOnly":false,"type":"signed integer"},"services.dockerRegistry.redisPassword":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":"","description":"Set redis password.","loc":["services","dockerRegistry","redisPassword"],"readOnly":false,"type":"string"},"services.dockerRegistry.redisUrl":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":"localhost:6379","description":"Set redis host and port.","loc":["services","dockerRegistry","redisUrl"],"readOnly":false,"type":"string"},"services.dockerRegistry.storagePath":{"declarations":["nixos/modules/services/misc/docker-registry.nix"],"default":"/var/lib/docker-registry","description":"Docker registry storage path.","loc":["services","dockerRegistry","storagePath"],"readOnly":false,"type":"path"},"services.dovecot2.configFile":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":null,"description":"Config file used for the whole dovecot configuration.","loc":["services","dovecot2","configFile"],"readOnly":false,"type":"null or string"},"services.dovecot2.createMailUser":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":true,"description":"Whether to automatically create the user\n        given in <option>services.dovecot.user</option> and the group\n        given in <option>services.dovecot.group</option>.","loc":["services","dovecot2","createMailUser"],"readOnly":false,"type":"boolean"},"services.dovecot2.enable":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":false,"description":"Whether to enable Dovecot 2.x POP3/IMAP server.","example":true,"loc":["services","dovecot2","enable"],"readOnly":false,"type":"boolean"},"services.dovecot2.enableImap":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":true,"description":"Start the IMAP listener (when Dovecot is enabled).","loc":["services","dovecot2","enableImap"],"readOnly":false,"type":"boolean"},"services.dovecot2.enableLmtp":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":false,"description":"Start the LMTP listener (when Dovecot is enabled).","loc":["services","dovecot2","enableLmtp"],"readOnly":false,"type":"boolean"},"services.dovecot2.enablePAM":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":true,"description":"Whether to create a own Dovecot PAM service and configure PAM user logins.","loc":["services","dovecot2","enablePAM"],"readOnly":false,"type":"boolean"},"services.dovecot2.enablePop3":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":false,"description":"Start the POP3 listener (when Dovecot is enabled).","loc":["services","dovecot2","enablePop3"],"readOnly":false,"type":"boolean"},"services.dovecot2.enableQuota":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":false,"description":"Whether to enable the dovecot quota service.","example":true,"loc":["services","dovecot2","enableQuota"],"readOnly":false,"type":"boolean"},"services.dovecot2.extraConfig":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":"","description":"Additional entries to put verbatim into Dovecot's config file.","example":"mail_debug = yes","loc":["services","dovecot2","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dovecot2.group":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":"dovecot2","description":"Dovecot group name.","loc":["services","dovecot2","group"],"readOnly":false,"type":"string"},"services.dovecot2.mailGroup":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":null,"description":"Default group to store mail for virtual users.","loc":["services","dovecot2","mailGroup"],"readOnly":false,"type":"null or string"},"services.dovecot2.mailLocation":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":"maildir:/var/spool/mail/%u","description":"Location that dovecot will use for mail folders. Dovecot mail_location option.\n","example":"maildir:~/mail:INBOX=/var/spool/mail/%u","loc":["services","dovecot2","mailLocation"],"readOnly":false,"type":"string"},"services.dovecot2.mailUser":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":null,"description":"Default user to store mail for virtual users.","loc":["services","dovecot2","mailUser"],"readOnly":false,"type":"null or string"},"services.dovecot2.mailboxes":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":[],"description":"Configure mailboxes and auto create or subscribe them.","example":[{"auto":"create","name":"Spam","specialUse":"Junk"}],"loc":["services","dovecot2","mailboxes"],"readOnly":false,"type":"list of submodules"},"services.dovecot2.mailboxes.*.auto":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":"no","description":"Whether to automatically create or create and subscribe to the mailbox or not.","example":"subscribe","loc":["services","dovecot2","mailboxes","*","auto"],"readOnly":false,"type":"one of \"no\", \"create\", \"subscribe\""},"services.dovecot2.mailboxes.*.name":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"description":"The name of the mailbox.","example":"Spam","loc":["services","dovecot2","mailboxes","*","name"],"readOnly":false,"type":"string matching the pattern [^\"]+"},"services.dovecot2.mailboxes.*.specialUse":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":null,"description":"Null if no special use flag is set. Other than that every use flag mentioned in the RFC is valid.","example":"Junk","loc":["services","dovecot2","mailboxes","*","specialUse"],"readOnly":false,"type":"null or one of \"All\", \"Archive\", \"Drafts\", \"Flagged\", \"Junk\", \"Sent\", \"Trash\""},"services.dovecot2.modules":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":[],"description":"Symlinks the contents of lib/dovecot of every given package into\n/etc/dovecot/modules. This will make the given modules available\nif a dovecot package with the module_dir patch applied is being used.\n","example":{"_type":"literalExample","text":"[ pkgs.dovecot_pigeonhole ]"},"loc":["services","dovecot2","modules"],"readOnly":false,"type":"list of packages"},"services.dovecot2.protocols":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":[],"description":"Additional listeners to start when Dovecot is enabled.","loc":["services","dovecot2","protocols"],"readOnly":false,"type":"list of strings"},"services.dovecot2.quotaGlobalPerUser":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":"100G","description":"Quota limit for the user in bytes. Supports suffixes b, k, M, G, T and %.","example":"10G","loc":["services","dovecot2","quotaGlobalPerUser"],"readOnly":false,"type":"string"},"services.dovecot2.quotaPort":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":"12340","description":"The Port the dovecot quota service binds to.\nIf using postfix, add check_policy_service inet:localhost:12340 to your smtpd_recipient_restrictions in your postfix config.\n","loc":["services","dovecot2","quotaPort"],"readOnly":false,"type":"string"},"services.dovecot2.showPAMFailure":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":false,"description":"Show the PAM failure message on authentication error (useful for OTPW).","loc":["services","dovecot2","showPAMFailure"],"readOnly":false,"type":"boolean"},"services.dovecot2.sieveScripts":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":{},"description":"Sieve scripts to be executed. Key is a sequence, e.g. 'before2', 'after' etc.","loc":["services","dovecot2","sieveScripts"],"readOnly":false,"type":"attribute set of paths"},"services.dovecot2.sslCACert":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":null,"description":"Path to the server's CA certificate key.","loc":["services","dovecot2","sslCACert"],"readOnly":false,"type":"null or string"},"services.dovecot2.sslServerCert":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":null,"description":"Path to the server's public key.","loc":["services","dovecot2","sslServerCert"],"readOnly":false,"type":"null or string"},"services.dovecot2.sslServerKey":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":null,"description":"Path to the server's private key.","loc":["services","dovecot2","sslServerKey"],"readOnly":false,"type":"null or string"},"services.dovecot2.user":{"declarations":["nixos/modules/services/mail/dovecot.nix"],"default":"dovecot2","description":"Dovecot user name.","loc":["services","dovecot2","user"],"readOnly":false,"type":"string"},"services.drbd.config":{"declarations":["nixos/modules/services/network-filesystems/drbd.nix"],"default":"","description":"Contents of the <filename>drbd.conf</filename> configuration file.\n","loc":["services","drbd","config"],"readOnly":false,"type":"Concatenated string"},"services.drbd.enable":{"declarations":["nixos/modules/services/network-filesystems/drbd.nix"],"default":false,"description":"Whether to enable support for DRBD, the Distributed Replicated\nBlock Device.\n","loc":["services","drbd","enable"],"readOnly":false,"type":"boolean"},"services.dspam.domainSocket":{"declarations":["nixos/modules/services/mail/dspam.nix"],"default":"/run/dspam/dspam.sock","description":"Path to local domain socket which is used for communication with the daemon. Set to null to disable UNIX socket.","loc":["services","dspam","domainSocket"],"readOnly":false,"type":"null or path"},"services.dspam.enable":{"declarations":["nixos/modules/services/mail/dspam.nix"],"default":false,"description":"Whether to enable the dspam spam filter.","loc":["services","dspam","enable"],"readOnly":false,"type":"boolean"},"services.dspam.extraConfig":{"declarations":["nixos/modules/services/mail/dspam.nix"],"default":"","description":"Additional dspam configuration.","loc":["services","dspam","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.dspam.group":{"declarations":["nixos/modules/services/mail/dspam.nix"],"default":"dspam","description":"Group for the dspam daemon.","loc":["services","dspam","group"],"readOnly":false,"type":"string"},"services.dspam.maintenanceInterval":{"declarations":["nixos/modules/services/mail/dspam.nix"],"default":null,"description":"If set, maintenance script will be run at specified (in systemd.timer format) interval","loc":["services","dspam","maintenanceInterval"],"readOnly":false,"type":"null or string"},"services.dspam.storageDriver":{"declarations":["nixos/modules/services/mail/dspam.nix"],"default":"hash","description":"Storage driver backend to use for dspam.","loc":["services","dspam","storageDriver"],"readOnly":false,"type":"string"},"services.dspam.user":{"declarations":["nixos/modules/services/mail/dspam.nix"],"default":"dspam","description":"User for the dspam daemon.","loc":["services","dspam","user"],"readOnly":false,"type":"string"},"services.duplicati.enable":{"declarations":["nixos/modules/services/backup/duplicati.nix"],"default":false,"description":"Whether to enable Duplicati.","example":true,"loc":["services","duplicati","enable"],"readOnly":false,"type":"boolean"},"services.duplicati.interface":{"declarations":["nixos/modules/services/backup/duplicati.nix"],"default":"lo","description":"Listening interface for the web UI\nSet it to \"any\" to listen on all available interfaces\n","loc":["services","duplicati","interface"],"readOnly":false,"type":"string"},"services.duplicati.port":{"declarations":["nixos/modules/services/backup/duplicati.nix"],"default":8200,"description":"Port serving the web interface\n","loc":["services","duplicati","port"],"readOnly":false,"type":"signed integer"},"services.earlyoom.enable":{"declarations":["nixos/modules/services/system/earlyoom.nix"],"default":false,"description":"Enable early out of memory killing.\n","loc":["services","earlyoom","enable"],"readOnly":false,"type":"boolean"},"services.earlyoom.enableDebugInfo":{"declarations":["nixos/modules/services/system/earlyoom.nix"],"default":false,"description":"Enable debugging messages.\n","loc":["services","earlyoom","enableDebugInfo"],"readOnly":false,"type":"boolean"},"services.earlyoom.freeMemThreshold":{"declarations":["nixos/modules/services/system/earlyoom.nix"],"default":10,"description":"Minimum of availabe memory (in percent).\nIf the free memory falls below this threshold and the analog is true for\n<option>services.earlyoom.freeSwapThreshold</option>\nthe killing begins.\n","loc":["services","earlyoom","freeMemThreshold"],"readOnly":false,"type":"signed integer"},"services.earlyoom.freeSwapThreshold":{"declarations":["nixos/modules/services/system/earlyoom.nix"],"default":10,"description":"Minimum of availabe swap space (in percent).\nIf the available swap space falls below this threshold and the analog\nis true for <option>services.earlyoom.freeMemThreshold</option>\nthe killing begins.\n","loc":["services","earlyoom","freeSwapThreshold"],"readOnly":false,"type":"signed integer"},"services.earlyoom.ignoreOOMScoreAdjust":{"declarations":["nixos/modules/services/system/earlyoom.nix"],"default":false,"description":"Ignore oom_score_adjust values of processes.\nUser-space implementation only.\n","loc":["services","earlyoom","ignoreOOMScoreAdjust"],"readOnly":false,"type":"boolean"},"services.earlyoom.useKernelOOMKiller":{"declarations":["nixos/modules/services/system/earlyoom.nix"],"default":false,"description":"Use kernel OOM killer instead of own user-space implementation.\n","loc":["services","earlyoom","useKernelOOMKiller"],"readOnly":false,"type":"boolean"},"services.ecs-agent.enable":{"declarations":["nixos/modules/virtualisation/ecs-agent.nix"],"default":false,"description":"Whether to enable Amazon ECS agent.","example":true,"loc":["services","ecs-agent","enable"],"readOnly":false,"type":"boolean"},"services.ecs-agent.extra-environment":{"declarations":["nixos/modules/virtualisation/ecs-agent.nix"],"default":{},"description":"The environment the ECS agent should run with. See the ECS agent documentation for keys that work here.","loc":["services","ecs-agent","extra-environment"],"readOnly":false,"type":"attribute set of strings"},"services.ecs-agent.package":{"declarations":["nixos/modules/virtualisation/ecs-agent.nix"],"default":"pkgs.ecs-agent","description":"The ECS agent package to use","loc":["services","ecs-agent","package"],"readOnly":false,"type":"path"},"services.ejabberd.configFile":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":null,"description":"Configuration file for ejabberd in YAML format","loc":["services","ejabberd","configFile"],"readOnly":false,"type":"null or path"},"services.ejabberd.ctlConfig":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":"","description":"Configuration of ejabberdctl","loc":["services","ejabberd","ctlConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.ejabberd.enable":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":false,"description":"Whether to enable ejabberd server","loc":["services","ejabberd","enable"],"readOnly":false,"type":"boolean"},"services.ejabberd.group":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":"ejabberd","description":"Group under which ejabberd is ran","loc":["services","ejabberd","group"],"readOnly":false,"type":"string"},"services.ejabberd.imagemagick":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":false,"description":"Add ImageMagick to server's path; allows for image thumbnailing","loc":["services","ejabberd","imagemagick"],"readOnly":false,"type":"boolean"},"services.ejabberd.loadDumps":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":[],"description":"Configuration dumps that should be loaded on the first startup","example":{"_type":"literalExample","text":"[ ./myejabberd.dump ]"},"loc":["services","ejabberd","loadDumps"],"readOnly":false,"type":"list of paths"},"services.ejabberd.logsDir":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":"/var/log/ejabberd","description":"Location of the logfile directory of ejabberd","loc":["services","ejabberd","logsDir"],"readOnly":false,"type":"path"},"services.ejabberd.package":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":"pkgs.ejabberd","description":"ejabberd server package to use","loc":["services","ejabberd","package"],"readOnly":false,"type":"package"},"services.ejabberd.spoolDir":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":"/var/lib/ejabberd","description":"Location of the spooldir of ejabberd","loc":["services","ejabberd","spoolDir"],"readOnly":false,"type":"path"},"services.ejabberd.user":{"declarations":["nixos/modules/services/networking/ejabberd.nix"],"default":"ejabberd","description":"User under which ejabberd is ran","loc":["services","ejabberd","user"],"readOnly":false,"type":"string"},"services.elasticsearch-curator.actionYAML":{"declarations":["nixos/modules/services/search/elasticsearch-curator.nix"],"description":"curator action.yaml file contents, alternatively use curator-cli which takes a simple action command","example":"---\nactions:\n  1:\n    action: delete_indices\n    description: >-\n      Delete indices older than 45 days (based on index name), for logstash-\n      prefixed indices. Ignore the error if the filter does not result in an\n      actionable list of indices (ignore_empty_list) and exit cleanly.\n    options:\n      ignore_empty_list: True\n      disable_action: False\n    filters:\n    - filtertype: pattern\n      kind: prefix\n      value: logstash-\n    - filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 45\n","loc":["services","elasticsearch-curator","actionYAML"],"readOnly":false,"type":"unspecified"},"services.elasticsearch-curator.enable":{"declarations":["nixos/modules/services/search/elasticsearch-curator.nix"],"default":false,"description":"Whether to enable elasticsearch curator.","example":true,"loc":["services","elasticsearch-curator","enable"],"readOnly":false,"type":"boolean"},"services.elasticsearch-curator.hosts":{"declarations":["nixos/modules/services/search/elasticsearch-curator.nix"],"default":["localhost"],"description":"a list of elasticsearch hosts to connect to","loc":["services","elasticsearch-curator","hosts"],"readOnly":false,"type":"list of strings"},"services.elasticsearch-curator.interval":{"declarations":["nixos/modules/services/search/elasticsearch-curator.nix"],"default":"hourly","description":"The frequency to run curator, a systemd.time such as 'hourly'","loc":["services","elasticsearch-curator","interval"],"readOnly":false,"type":"string"},"services.elasticsearch-curator.port":{"declarations":["nixos/modules/services/search/elasticsearch-curator.nix"],"default":9200,"description":"the port that elasticsearch is listening on","loc":["services","elasticsearch-curator","port"],"readOnly":false,"type":"signed integer"},"services.elasticsearch.cluster_name":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":"elasticsearch","description":"Elasticsearch name that identifies your cluster for auto-discovery.","loc":["services","elasticsearch","cluster_name"],"readOnly":false,"type":"string"},"services.elasticsearch.dataDir":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":"/var/lib/elasticsearch","description":"Data directory for elasticsearch.\n","loc":["services","elasticsearch","dataDir"],"readOnly":false,"type":"path"},"services.elasticsearch.enable":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":false,"description":"Whether to enable elasticsearch.","loc":["services","elasticsearch","enable"],"readOnly":false,"type":"boolean"},"services.elasticsearch.extraCmdLineOptions":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":[],"description":"Extra command line options for the elasticsearch launcher.","loc":["services","elasticsearch","extraCmdLineOptions"],"readOnly":false,"type":"list of strings"},"services.elasticsearch.extraConf":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":"","description":"Extra configuration for elasticsearch.","example":"node.name: \"elasticsearch\"\nnode.master: true\nnode.data: false\n","loc":["services","elasticsearch","extraConf"],"readOnly":false,"type":"string"},"services.elasticsearch.extraJavaOptions":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":[],"description":"Extra command line options for Java.","example":["-Djava.net.preferIPv4Stack=true"],"loc":["services","elasticsearch","extraJavaOptions"],"readOnly":false,"type":"list of strings"},"services.elasticsearch.listenAddress":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":"127.0.0.1","description":"Elasticsearch listen address.","loc":["services","elasticsearch","listenAddress"],"readOnly":false,"type":"string"},"services.elasticsearch.logging":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":"logger.action.name = org.elasticsearch.action\nlogger.action.level = info\n\nappender.console.type = Console\nappender.console.name = console\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\n\nrootLogger.level = info\nrootLogger.appenderRef.console.ref = console\n","description":"Elasticsearch logging configuration.","loc":["services","elasticsearch","logging"],"readOnly":false,"type":"string"},"services.elasticsearch.package":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":"pkgs.elasticsearch","description":"Elasticsearch package to use.","loc":["services","elasticsearch","package"],"readOnly":false,"type":"package"},"services.elasticsearch.plugins":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":[],"description":"Extra elasticsearch plugins","loc":["services","elasticsearch","plugins"],"readOnly":false,"type":"list of packages"},"services.elasticsearch.port":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":9200,"description":"Elasticsearch port to listen for HTTP traffic.","loc":["services","elasticsearch","port"],"readOnly":false,"type":"signed integer"},"services.elasticsearch.tcp_port":{"declarations":["nixos/modules/services/search/elasticsearch.nix"],"default":9300,"description":"Elasticsearch port for the node to node communication.","loc":["services","elasticsearch","tcp_port"],"readOnly":false,"type":"signed integer"},"services.emacs.defaultEditor":{"declarations":["nixos/modules/services/editors/emacs.nix"],"default":false,"description":"When enabled, configures emacsclient to be the default editor\nusing the EDITOR environment variable.\n","loc":["services","emacs","defaultEditor"],"readOnly":false,"type":"boolean"},"services.emacs.enable":{"declarations":["nixos/modules/services/editors/emacs.nix"],"default":false,"description":"Whether to enable a user service for the Emacs daemon. Use <literal>emacsclient</literal> to connect to the\ndaemon. If <literal>true</literal>, <varname>services.emacs.install</varname> is\nconsidered <literal>true</literal>, whatever its value.\n","loc":["services","emacs","enable"],"readOnly":false,"type":"boolean"},"services.emacs.install":{"declarations":["nixos/modules/services/editors/emacs.nix"],"default":false,"description":"Whether to install a user service for the Emacs daemon. Once\nthe service is started, use emacsclient to connect to the\ndaemon.\n\nThe service must be manually started for each user with\n\"systemctl --user start emacs\" or globally through\n<varname>services.emacs.enable</varname>.\n","loc":["services","emacs","install"],"readOnly":false,"type":"boolean"},"services.emacs.package":{"declarations":["nixos/modules/services/editors/emacs.nix"],"default":"pkgs.emacs","description":"emacs derivation to use.\n","loc":["services","emacs","package"],"readOnly":false,"type":"package"},"services.emby.dataDir":{"declarations":["nixos/modules/services/misc/emby.nix"],"default":"/var/lib/emby/ProgramData-Server","description":"Location where Emby stores its data.","loc":["services","emby","dataDir"],"readOnly":false,"type":"path"},"services.emby.enable":{"declarations":["nixos/modules/services/misc/emby.nix"],"default":false,"description":"Whether to enable Emby Media Server.","example":true,"loc":["services","emby","enable"],"readOnly":false,"type":"boolean"},"services.emby.group":{"declarations":["nixos/modules/services/misc/emby.nix"],"default":"emby","description":"Group under which emby runs.","loc":["services","emby","group"],"readOnly":false,"type":"string"},"services.emby.user":{"declarations":["nixos/modules/services/misc/emby.nix"],"default":"emby","description":"User account under which Emby runs.","loc":["services","emby","user"],"readOnly":false,"type":"string"},"services.epmd.enable":{"declarations":["nixos/modules/services/networking/epmd.nix"],"default":false,"description":"Whether to enable socket activation for Erlang Port Mapper Daemon (epmd),\nwhich acts as a name server on all hosts involved in distributed\nErlang computations.\n","loc":["services","epmd","enable"],"readOnly":false,"type":"boolean"},"services.epmd.package":{"declarations":["nixos/modules/services/networking/epmd.nix"],"default":"erlang-20.3.8.9","description":"The Erlang package to use to get epmd binary. That way you can re-use\nan Erlang runtime that is already installed for other purposes.\n","loc":["services","epmd","package"],"readOnly":false,"type":"package"},"services.errbot.instances":{"declarations":["nixos/modules/services/misc/errbot.nix"],"default":{},"description":"Errbot instance configs","loc":["services","errbot","instances"],"readOnly":false,"type":"attribute set of submodules"},"services.errbot.instances.<name>.admins":{"declarations":["nixos/modules/services/misc/errbot.nix"],"default":[],"description":"List of identifiers of errbot admins.","loc":["services","errbot","instances","<name>","admins"],"readOnly":false,"type":"list of strings"},"services.errbot.instances.<name>.backend":{"declarations":["nixos/modules/services/misc/errbot.nix"],"default":"XMPP","description":"Errbot backend name.","loc":["services","errbot","instances","<name>","backend"],"readOnly":false,"type":"string"},"services.errbot.instances.<name>.dataDir":{"declarations":["nixos/modules/services/misc/errbot.nix"],"default":null,"description":"Data directory for errbot instance.","loc":["services","errbot","instances","<name>","dataDir"],"readOnly":false,"type":"null or path"},"services.errbot.instances.<name>.extraConfig":{"declarations":["nixos/modules/services/misc/errbot.nix"],"default":"","description":"String to be appended to the config verbatim","loc":["services","errbot","instances","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.errbot.instances.<name>.identity":{"declarations":["nixos/modules/services/misc/errbot.nix"],"description":"Errbot identity configuration","loc":["services","errbot","instances","<name>","identity"],"readOnly":false,"type":"attribute set"},"services.errbot.instances.<name>.logLevel":{"declarations":["nixos/modules/services/misc/errbot.nix"],"default":"INFO","description":"Errbot log level","loc":["services","errbot","instances","<name>","logLevel"],"readOnly":false,"type":"string"},"services.errbot.instances.<name>.plugins":{"declarations":["nixos/modules/services/misc/errbot.nix"],"default":[],"description":"List of errbot plugin derivations.","loc":["services","errbot","instances","<name>","plugins"],"readOnly":false,"type":"list of packages"},"services.etcd.advertiseClientUrls":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":["http://127.0.0.1:2379"],"description":"Etcd list of this member's client URLs to advertise to the rest of the cluster.","loc":["services","etcd","advertiseClientUrls"],"readOnly":false,"type":"list of strings"},"services.etcd.certFile":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":null,"description":"Cert file to use for clients","loc":["services","etcd","certFile"],"readOnly":false,"type":"null or path"},"services.etcd.clientCertAuth":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":false,"description":"Whether to use certs for client authentication","loc":["services","etcd","clientCertAuth"],"readOnly":false,"type":"boolean"},"services.etcd.dataDir":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":"/var/lib/etcd","description":"Etcd data directory.","loc":["services","etcd","dataDir"],"readOnly":false,"type":"path"},"services.etcd.discovery":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":"","description":"Etcd discovery url","loc":["services","etcd","discovery"],"readOnly":false,"type":"string"},"services.etcd.enable":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":false,"description":"Whether to enable etcd.","loc":["services","etcd","enable"],"readOnly":false,"type":"boolean"},"services.etcd.extraConf":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":{},"description":"Etcd extra configuration. See\n<link xlink:href='https://github.com/coreos/etcd/blob/master/Documentation/op-guide/configuration.md#configuration-flags' />\n","example":{"_type":"literalExample","text":"{\n  \"CORS\" = \"*\";\n  \"NAME\" = \"default-name\";\n  \"MAX_RESULT_BUFFER\" = \"1024\";\n  \"MAX_CLUSTER_SIZE\" = \"9\";\n  \"MAX_RETRY_ATTEMPTS\" = \"3\";\n}\n"},"loc":["services","etcd","extraConf"],"readOnly":false,"type":"attribute set of strings"},"services.etcd.initialAdvertisePeerUrls":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":["http://127.0.0.1:2380"],"description":"Etcd list of this member's peer URLs to advertise to rest of the cluster.","loc":["services","etcd","initialAdvertisePeerUrls"],"readOnly":false,"type":"list of strings"},"services.etcd.initialCluster":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":["nixos=http://127.0.0.1:2380"],"description":"Etcd initial cluster configuration for bootstrapping.","loc":["services","etcd","initialCluster"],"readOnly":false,"type":"list of strings"},"services.etcd.initialClusterState":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":"new","description":"Etcd initial cluster configuration for bootstrapping.","loc":["services","etcd","initialClusterState"],"readOnly":false,"type":"one of \"new\", \"existing\""},"services.etcd.initialClusterToken":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":"etcd-cluster","description":"Etcd initial cluster token for etcd cluster during bootstrap.","loc":["services","etcd","initialClusterToken"],"readOnly":false,"type":"string"},"services.etcd.keyFile":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":null,"description":"Key file to use for clients","loc":["services","etcd","keyFile"],"readOnly":false,"type":"null or path"},"services.etcd.listenClientUrls":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":["http://127.0.0.1:2379"],"description":"Etcd list of URLs to listen on for client traffic.","loc":["services","etcd","listenClientUrls"],"readOnly":false,"type":"list of strings"},"services.etcd.listenPeerUrls":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":["http://127.0.0.1:2380"],"description":"Etcd list of URLs to listen on for peer traffic.","loc":["services","etcd","listenPeerUrls"],"readOnly":false,"type":"list of strings"},"services.etcd.name":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":"nixos","description":"Etcd unique node name.","loc":["services","etcd","name"],"readOnly":false,"type":"string"},"services.etcd.peerCertFile":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":null,"description":"Cert file to use for peer to peer communication","loc":["services","etcd","peerCertFile"],"readOnly":false,"type":"null or path"},"services.etcd.peerClientCertAuth":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":false,"description":"Whether to check all incoming peer requests from the cluster for valid client certificates signed by the supplied CA","loc":["services","etcd","peerClientCertAuth"],"readOnly":false,"type":"boolean"},"services.etcd.peerKeyFile":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":null,"description":"Key file to use for peer to peer communication","loc":["services","etcd","peerKeyFile"],"readOnly":false,"type":"null or path"},"services.etcd.peerTrustedCaFile":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":null,"description":"Certificate authority file to use for peer to peer communication","loc":["services","etcd","peerTrustedCaFile"],"readOnly":false,"type":"null or path"},"services.etcd.trustedCaFile":{"declarations":["nixos/modules/services/misc/etcd.nix"],"default":null,"description":"Certificate authority file to use for clients","loc":["services","etcd","trustedCaFile"],"readOnly":false,"type":"null or path"},"services.exhibitor.autoManageInstances":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":false,"description":"Automatically manage ZooKeeper instances in the ensemble\n","loc":["services","exhibitor","autoManageInstances"],"readOnly":false,"type":"boolean"},"services.exhibitor.baseDir":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"/var/exhibitor","description":"Baseline directory for exhibitor runtime config.\n","loc":["services","exhibitor","baseDir"],"readOnly":false,"type":"string"},"services.exhibitor.configCheckMs":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":30000,"description":"Period (ms) to check for shared config updates.\n","loc":["services","exhibitor","configCheckMs"],"readOnly":false,"type":"signed integer"},"services.exhibitor.configType":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"description":"Which configuration type you want to use. Additional config will be\nrequired depending on which type you are using.\n","loc":["services","exhibitor","configType"],"readOnly":false,"type":"one of \"file\", \"s3\", \"zookeeper\", \"none\""},"services.exhibitor.enable":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":false,"description":"\n          Whether to enable the exhibitor server.\n        ","loc":["services","exhibitor","enable"],"readOnly":false,"type":"boolean"},"services.exhibitor.extraConf":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"","description":"Extra Exhibitor configuration to put in the ZooKeeper config file.\n","loc":["services","exhibitor","extraConf"],"readOnly":false,"type":"string"},"services.exhibitor.fileSystemBackup":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":false,"description":"Enables file system backup of ZooKeeper log files\n","loc":["services","exhibitor","fileSystemBackup"],"readOnly":false,"type":"boolean"},"services.exhibitor.fsConfigDir":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"description":"Directory to store Exhibitor properties (cannot be used with s3config).\nExhibitor uses file system locks so you can specify a shared location\nso as to enable complete ensemble management.\n","loc":["services","exhibitor","fsConfigDir"],"readOnly":false,"type":"path"},"services.exhibitor.fsConfigLockPrefix":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"exhibitor-lock-","description":"A prefix for a locking mechanism used in conjunction with fsconfigdir\n","loc":["services","exhibitor","fsConfigLockPrefix"],"readOnly":false,"type":"string"},"services.exhibitor.fsConfigName":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"exhibitor.properties","description":"The name of the file to store config in\n","loc":["services","exhibitor","fsConfigName"],"readOnly":false,"type":"string"},"services.exhibitor.headingText":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":null,"description":"Extra text to display in UI header\n","loc":["services","exhibitor","headingText"],"readOnly":false,"type":"null or string"},"services.exhibitor.hostname":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":null,"description":"Hostname to use and advertise\n","loc":["services","exhibitor","hostname"],"readOnly":false,"type":"null or string"},"services.exhibitor.jqueryStyle":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"red","description":"Styling used for the JQuery-based UI.\n","loc":["services","exhibitor","jqueryStyle"],"readOnly":false,"type":"one of \"red\", \"black\", \"custom\""},"services.exhibitor.logLines":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":1000,"description":"Max lines of logging to keep in memory for display.\n","loc":["services","exhibitor","logLines"],"readOnly":false,"type":"signed integer"},"services.exhibitor.nodeModification":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":true,"description":"Whether the Explorer UI will allow nodes to be modified (use with caution).\n","loc":["services","exhibitor","nodeModification"],"readOnly":false,"type":"boolean"},"services.exhibitor.port":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":8080,"description":"The port for exhibitor to listen on and communicate with other exhibitors.\n","loc":["services","exhibitor","port"],"readOnly":false,"type":"signed integer"},"services.exhibitor.s3Backup":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":false,"description":"Whether to enable backups to S3\n","loc":["services","exhibitor","s3Backup"],"readOnly":false,"type":"boolean"},"services.exhibitor.s3Config.bucketName":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"description":"Bucket name to store config\n","loc":["services","exhibitor","s3Config","bucketName"],"readOnly":false,"type":"string"},"services.exhibitor.s3Config.configPrefix":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"exhibitor-","description":"When using AWS S3 shared config files, the prefix to use for values such as locks\n","loc":["services","exhibitor","s3Config","configPrefix"],"readOnly":false,"type":"string"},"services.exhibitor.s3Config.objectKey":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"description":"S3 key name to store the config\n","loc":["services","exhibitor","s3Config","objectKey"],"readOnly":false,"type":"string"},"services.exhibitor.s3Credentials":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":null,"description":"Optional credentials to use for s3backup or s3config. Argument is the path\nto an AWS credential properties file with two properties:\ncom.netflix.exhibitor.s3.access-key-id and com.netflix.exhibitor.s3.access-secret-key\n","loc":["services","exhibitor","s3Credentials"],"readOnly":false,"type":"null or path"},"services.exhibitor.s3Region":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":null,"description":"Optional region for S3 calls\n","loc":["services","exhibitor","s3Region"],"readOnly":false,"type":"null or string"},"services.exhibitor.servo":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":false,"description":"ZooKeeper will be queried once a minute for its state via the 'mntr' four\nletter word (this requires ZooKeeper 3.4.x+). Servo will be used to publish\nthis data via JMX.\n","loc":["services","exhibitor","servo"],"readOnly":false,"type":"boolean"},"services.exhibitor.timeout":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":30000,"description":"Connection timeout (ms) for ZK connections.\n","loc":["services","exhibitor","timeout"],"readOnly":false,"type":"signed integer"},"services.exhibitor.zkCleanupPeriod":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":0,"description":"How often (in milliseconds) to run the Zookeeper log cleanup task.\n","loc":["services","exhibitor","zkCleanupPeriod"],"readOnly":false,"type":"signed integer"},"services.exhibitor.zkClientPort":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":2181,"description":"Zookeeper client port\n","loc":["services","exhibitor","zkClientPort"],"readOnly":false,"type":"signed integer"},"services.exhibitor.zkConfigConnect":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"description":"The initial connection string for ZooKeeper shared config storage\n","example":["host1:2181","host2:2181"],"loc":["services","exhibitor","zkConfigConnect"],"readOnly":false,"type":"list of strings"},"services.exhibitor.zkConfigExhibitorPath":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"/","description":"If the ZooKeeper shared config is also running Exhibitor, the URI path for the REST call\n","loc":["services","exhibitor","zkConfigExhibitorPath"],"readOnly":false,"type":"Concatenated string"},"services.exhibitor.zkConfigExhibitorPort":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"description":"If the ZooKeeper shared config is also running Exhibitor, the port that\nExhibitor is listening on. IMPORTANT: if this value is not set it implies\nthat Exhibitor is not being used on the ZooKeeper shared config.\n","loc":["services","exhibitor","zkConfigExhibitorPort"],"readOnly":false,"type":"null or signed integer"},"services.exhibitor.zkConfigPollMs":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":10000,"description":"The period in ms to check for changes in the config ensemble\n","loc":["services","exhibitor","zkConfigPollMs"],"readOnly":false,"type":"signed integer"},"services.exhibitor.zkConfigRetry.retryQuantity":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":3,"description":"Retries connecting to the ZooKeeper config\n","loc":["services","exhibitor","zkConfigRetry","retryQuantity"],"readOnly":false,"type":"signed integer"},"services.exhibitor.zkConfigRetry.sleepMs":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":1000,"description":"Retry sleep time connecting to the ZooKeeper config\n","loc":["services","exhibitor","zkConfigRetry","sleepMs"],"readOnly":false,"type":"signed integer"},"services.exhibitor.zkConfigZPath":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"description":"The base ZPath that Exhibitor should use\n","example":"/exhibitor/config","loc":["services","exhibitor","zkConfigZPath"],"readOnly":false,"type":"string"},"services.exhibitor.zkConnectPort":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":2888,"description":"The port to use for followers to talk to each other.\n","loc":["services","exhibitor","zkConnectPort"],"readOnly":false,"type":"signed integer"},"services.exhibitor.zkDataDir":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"/var/exhibitor/zkData","description":"The Zookeeper data directory\n","loc":["services","exhibitor","zkDataDir"],"readOnly":false,"type":"string"},"services.exhibitor.zkElectionPort":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":3888,"description":"The port for Zookeepers to use for leader election.\n","loc":["services","exhibitor","zkElectionPort"],"readOnly":false,"type":"signed integer"},"services.exhibitor.zkExtraCfg":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"initLimit=5&syncLimit=2&tickTime=2000","description":"Extra options to pass into Zookeeper\n","loc":["services","exhibitor","zkExtraCfg"],"readOnly":false,"type":"string"},"services.exhibitor.zkLogDir":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":"/var/exhibitor/zkLogs","description":"The Zookeeper logs directory\n","loc":["services","exhibitor","zkLogDir"],"readOnly":false,"type":"path"},"services.exhibitor.zkServersSpec":{"declarations":["nixos/modules/services/misc/exhibitor.nix"],"default":[],"description":"Zookeeper server spec for all servers in the ensemble.\n","example":["S:1:zk1.example.com","S:2:zk2.example.com","S:3:zk3.example.com","O:4:zk-observer.example.com"],"loc":["services","exhibitor","zkServersSpec"],"readOnly":false,"type":"list of strings"},"services.exim.config":{"declarations":["nixos/modules/services/mail/exim.nix"],"default":"","description":"Verbatim Exim configuration.  This should not contain exim_user,\nexim_group, exim_path, or spool_directory.\n","loc":["services","exim","config"],"readOnly":false,"type":"Concatenated string"},"services.exim.enable":{"declarations":["nixos/modules/services/mail/exim.nix"],"default":false,"description":"Whether to enable the Exim mail transfer agent.","loc":["services","exim","enable"],"readOnly":false,"type":"boolean"},"services.exim.group":{"declarations":["nixos/modules/services/mail/exim.nix"],"default":"exim","description":"Group to use when no root privileges are required.\n","loc":["services","exim","group"],"readOnly":false,"type":"Concatenated string"},"services.exim.package":{"declarations":["nixos/modules/services/mail/exim.nix"],"default":"pkgs.exim","description":"The Exim derivation to use.\nThis can be used to enable features such as LDAP or PAM support.\n","loc":["services","exim","package"],"readOnly":false,"type":"package"},"services.exim.spoolDir":{"declarations":["nixos/modules/services/mail/exim.nix"],"default":"/var/spool/exim","description":"Location of the spool directory of exim.\n","loc":["services","exim","spoolDir"],"readOnly":false,"type":"Concatenated string"},"services.exim.user":{"declarations":["nixos/modules/services/mail/exim.nix"],"default":"exim","description":"User to use when no root privileges are required.\nIn particular, this applies when receiving messages and when doing\nremote deliveries.  (Local deliveries run as various non-root users,\ntypically as the owner of a local mailbox.) Specifying this value\nas root is not supported.\n","loc":["services","exim","user"],"readOnly":false,"type":"Concatenated string"},"services.factorio.autosave-interval":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":null,"description":"Autosave interval in minutes.\n","example":10,"loc":["services","factorio","autosave-interval"],"readOnly":false,"type":"null or signed integer"},"services.factorio.configFile":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":"configFile","description":"The server's configuration file.\n\nThe default file generated by this module contains lines essential to\nthe server's operation. Use its contents as a basis for any\ncustomizations.\n","loc":["services","factorio","configFile"],"readOnly":false,"type":"path"},"services.factorio.description":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":"","description":"Description of the game that will appear in the listing.\n","loc":["services","factorio","description"],"readOnly":false,"type":"null or Concatenated string"},"services.factorio.enable":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":false,"description":"Whether to enable Factorio.","example":true,"loc":["services","factorio","enable"],"readOnly":false,"type":"boolean"},"services.factorio.game-name":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":"Factorio Game","description":"Name of the game as it will appear in the game listing.\n","loc":["services","factorio","game-name"],"readOnly":false,"type":"null or Concatenated string"},"services.factorio.game-password":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":null,"description":"Game password.\n","loc":["services","factorio","game-password"],"readOnly":false,"type":"null or Concatenated string"},"services.factorio.lan":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":false,"description":"Game will be broadcast on LAN.\n","loc":["services","factorio","lan"],"readOnly":false,"type":"boolean"},"services.factorio.mods":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":[],"description":"Mods the server should install and activate.\n\nThe derivations in this list must \"build\" the mod by simply copying\nthe .zip, named correctly, into the output directory. Eventually,\nthere will be a way to pull in the most up-to-date list of\nderivations via nixos-channel. Until then, this is for experts only.\n","loc":["services","factorio","mods"],"readOnly":false,"type":"list of packages"},"services.factorio.password":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":null,"description":"Your factorio.com login credentials. Required for games with visibility public.\n","loc":["services","factorio","password"],"readOnly":false,"type":"null or Concatenated string"},"services.factorio.port":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":34197,"description":"The port to which the service should bind.\n\nThis option will also open up the UDP port in the firewall configuration.\n","loc":["services","factorio","port"],"readOnly":false,"type":"signed integer"},"services.factorio.public":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":false,"description":"Game will be published on the official Factorio matching server.\n","loc":["services","factorio","public"],"readOnly":false,"type":"boolean"},"services.factorio.requireUserVerification":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":true,"description":"When set to true, the server will only allow clients that have a valid factorio.com account.\n","loc":["services","factorio","requireUserVerification"],"readOnly":false,"type":"boolean"},"services.factorio.saveName":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":"default","description":"The name of the savegame that will be used by the server.\n\nWhen not present in /var/lib/factorio/saves, a new map with default\nsettings will be generated before starting the service.\n","loc":["services","factorio","saveName"],"readOnly":false,"type":"Concatenated string"},"services.factorio.stateDir":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":"/var/lib/factorio","description":"The server's data directory.\n\nThe configuration and map will be stored here.\n","loc":["services","factorio","stateDir"],"readOnly":false,"type":"path"},"services.factorio.token":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":null,"description":"Authentication token. May be used instead of 'password' above.\n","loc":["services","factorio","token"],"readOnly":false,"type":"null or Concatenated string"},"services.factorio.username":{"declarations":["nixos/modules/services/games/factorio.nix"],"default":null,"description":"Your factorio.com login credentials. Required for games with visibility public.\n","loc":["services","factorio","username"],"readOnly":false,"type":"null or Concatenated string"},"services.fail2ban.daemonConfig":{"declarations":["nixos/modules/services/security/fail2ban.nix"],"default":"[Definition]\nloglevel  = INFO\nlogtarget = SYSLOG\nsocket    = /run/fail2ban/fail2ban.sock\npidfile   = /run/fail2ban/fail2ban.pid\n","description":"The contents of Fail2ban's main configuration file.  It's\ngenerally not necessary to change it.\n","loc":["services","fail2ban","daemonConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.fail2ban.enable":{"declarations":["nixos/modules/services/security/fail2ban.nix"],"default":false,"description":"Whether to enable the fail2ban service.","loc":["services","fail2ban","enable"],"readOnly":false,"type":"boolean"},"services.fail2ban.jails":{"declarations":["nixos/modules/services/security/fail2ban.nix"],"default":{},"description":"The configuration of each Fail2ban “jail”.  A jail\nconsists of an action (such as blocking a port using\n<command>iptables</command>) that is triggered when a\nfilter applied to a log file triggers more than a certain\nnumber of times in a certain time period.  Actions are\ndefined in <filename>/etc/fail2ban/action.d</filename>,\nwhile filters are defined in\n<filename>/etc/fail2ban/filter.d</filename>.\n","example":{"_type":"literalExample","text":"{ apache-nohome-iptables = ''\n    # Block an IP address if it accesses a non-existent\n    # home directory more than 5 times in 10 minutes,\n    # since that indicates that it's scanning.\n    filter   = apache-nohome\n    action   = iptables-multiport[name=HTTP, port=\"http,https\"]\n    logpath  = /var/log/httpd/error_log*\n    findtime = 600\n    bantime  = 600\n    maxretry = 5\n  '';\n}\n"},"loc":["services","fail2ban","jails"],"readOnly":false,"type":"attribute set of strings concatenated with \"\\n\"s"},"services.fakeroute.enable":{"declarations":["nixos/modules/services/networking/fakeroute.nix"],"default":false,"description":"Whether to enable the fakeroute service.\n","loc":["services","fakeroute","enable"],"readOnly":false,"type":"boolean"},"services.fakeroute.route":{"declarations":["nixos/modules/services/networking/fakeroute.nix"],"default":[],"description":"Fake route that will appear after the real\none to any host running a traceroute.\n","example":["216.102.187.130","4.0.1.122","198.116.142.34","63.199.8.242"],"loc":["services","fakeroute","route"],"readOnly":false,"type":"list of strings"},"services.fcgiwrap.enable":{"declarations":["nixos/modules/services/web-servers/fcgiwrap.nix"],"default":false,"description":"Whether to enable fcgiwrap, a server for running CGI applications over FastCGI.","loc":["services","fcgiwrap","enable"],"readOnly":false,"type":"boolean"},"services.fcgiwrap.group":{"declarations":["nixos/modules/services/web-servers/fcgiwrap.nix"],"default":null,"description":"Group permissions for the socket.","loc":["services","fcgiwrap","group"],"readOnly":false,"type":"null or string"},"services.fcgiwrap.preforkProcesses":{"declarations":["nixos/modules/services/web-servers/fcgiwrap.nix"],"default":1,"description":"Number of processes to prefork.","loc":["services","fcgiwrap","preforkProcesses"],"readOnly":false,"type":"signed integer"},"services.fcgiwrap.socketAddress":{"declarations":["nixos/modules/services/web-servers/fcgiwrap.nix"],"default":"/run/fcgiwrap.sock","description":"Socket address. In case of a UNIX socket, this should be its filesystem path.","example":"1.2.3.4:5678","loc":["services","fcgiwrap","socketAddress"],"readOnly":false,"type":"string"},"services.fcgiwrap.socketType":{"declarations":["nixos/modules/services/web-servers/fcgiwrap.nix"],"default":"unix","description":"Socket type: 'unix', 'tcp' or 'tcp6'.","loc":["services","fcgiwrap","socketType"],"readOnly":false,"type":"one of \"unix\", \"tcp\", \"tcp6\""},"services.fcgiwrap.user":{"declarations":["nixos/modules/services/web-servers/fcgiwrap.nix"],"default":null,"description":"User permissions for the socket.","loc":["services","fcgiwrap","user"],"readOnly":false,"type":"null or string"},"services.fcron.allow":{"declarations":["nixos/modules/services/scheduling/fcron.nix"],"default":["all"],"description":"Users allowed to use fcrontab and fcrondyn (one name per\nline, <literal>all</literal> for everyone).\n","loc":["services","fcron","allow"],"readOnly":false,"type":"list of strings"},"services.fcron.deny":{"declarations":["nixos/modules/services/scheduling/fcron.nix"],"default":[],"description":"Users forbidden from using fcron.","loc":["services","fcron","deny"],"readOnly":false,"type":"list of strings"},"services.fcron.enable":{"declarations":["nixos/modules/services/scheduling/fcron.nix"],"default":false,"description":"Whether to enable the <command>fcron</command> daemon.","loc":["services","fcron","enable"],"readOnly":false,"type":"boolean"},"services.fcron.maxSerialJobs":{"declarations":["nixos/modules/services/scheduling/fcron.nix"],"default":1,"description":"Maximum number of serial jobs which can run simultaneously.","loc":["services","fcron","maxSerialJobs"],"readOnly":false,"type":"signed integer"},"services.fcron.queuelen":{"declarations":["nixos/modules/services/scheduling/fcron.nix"],"default":null,"description":"Number of jobs the serial queue and the lavg queue can contain.","loc":["services","fcron","queuelen"],"readOnly":false,"type":"null or signed integer"},"services.fcron.systab":{"declarations":["nixos/modules/services/scheduling/fcron.nix"],"default":"","description":"The \"system\" crontab contents.","loc":["services","fcron","systab"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.felix.bundles":{"declarations":["nixos/modules/services/misc/felix.nix"],"default":"[ pkgs.felix_remoteshell ]","description":"List of bundles that should be activated on startup","loc":["services","felix","bundles"],"readOnly":false,"type":"list of packages"},"services.felix.enable":{"declarations":["nixos/modules/services/misc/felix.nix"],"default":false,"description":"Whether to enable the Apache Felix OSGi service","loc":["services","felix","enable"],"readOnly":false,"type":"unspecified"},"services.felix.group":{"declarations":["nixos/modules/services/misc/felix.nix"],"default":"osgi","description":"Group account under which Apache Felix runs.","loc":["services","felix","group"],"readOnly":false,"type":"unspecified"},"services.felix.user":{"declarations":["nixos/modules/services/misc/felix.nix"],"default":"osgi","description":"User account under which Apache Felix runs.","loc":["services","felix","user"],"readOnly":false,"type":"unspecified"},"services.ferm.config":{"declarations":["nixos/modules/services/networking/ferm.nix"],"default":"empty firewall, allows any traffic","description":"Verbatim ferm.conf configuration.","loc":["services","ferm","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.ferm.enable":{"declarations":["nixos/modules/services/networking/ferm.nix"],"default":false,"description":"Whether to enable Ferm Firewall.\n*Warning*: Enabling this service WILL disable the existing NixOS\nfirewall! Default firewall rules provided by packages are not\nconsidered at the moment.\n","loc":["services","ferm","enable"],"readOnly":false,"type":"boolean"},"services.ferm.package":{"declarations":["nixos/modules/services/networking/ferm.nix"],"default":"pkgs.ferm","description":"The ferm package.","loc":["services","ferm","package"],"readOnly":false,"type":"package"},"services.firebird.baseDir":{"declarations":["nixos/modules/services/databases/firebird.nix"],"default":"/var/db/firebird","description":"Location containing data/ and system/ directories.\ndata/ stores the databases, system/ stores the password database security2.fdb.\n","loc":["services","firebird","baseDir"],"readOnly":false,"type":"unspecified"},"services.firebird.enable":{"declarations":["nixos/modules/services/databases/firebird.nix"],"default":false,"description":"Whether to enable the Firebird super server.\n","loc":["services","firebird","enable"],"readOnly":false,"type":"unspecified"},"services.firebird.package":{"declarations":["nixos/modules/services/databases/firebird.nix"],"default":"pkgs.firebirdSuper","description":"Which firebird derivation to use.\n","loc":["services","firebird","package"],"readOnly":false,"type":"package"},"services.firebird.port":{"declarations":["nixos/modules/services/databases/firebird.nix"],"default":"3050","description":"Port Firebird uses.\n","loc":["services","firebird","port"],"readOnly":false,"type":"unspecified"},"services.firebird.user":{"declarations":["nixos/modules/services/databases/firebird.nix"],"default":"firebird","description":"User account under which firebird runs.\n","loc":["services","firebird","user"],"readOnly":false,"type":"unspecified"},"services.firefox.syncserver.allowNewUsers":{"declarations":["nixos/modules/services/networking/firefox/sync-server.nix"],"default":true,"description":"Whether to allow new-user signups on the server. Only request by\nexisting accounts will be honored.\n","loc":["services","firefox","syncserver","allowNewUsers"],"readOnly":false,"type":"boolean"},"services.firefox.syncserver.enable":{"declarations":["nixos/modules/services/networking/firefox/sync-server.nix"],"default":false,"description":"Whether to enable a Firefox Sync Server, this give the opportunity to\nFirefox users to store all synchronized data on their own server. To use this\nserver, Firefox users should visit the <option>about:config</option>, and\nreplicate the following change\n\n<screen>\nservices.sync.tokenServerURI: http://localhost:5000/token/1.0/sync/1.5\n</screen>\n\nwhere <option>http://localhost:5000/</option> corresponds to the\npublic url of the server.\n","loc":["services","firefox","syncserver","enable"],"readOnly":false,"type":"boolean"},"services.firefox.syncserver.listen.address":{"declarations":["nixos/modules/services/networking/firefox/sync-server.nix"],"default":"127.0.0.1","description":"Address on which the sync server listen to.\n","example":"0.0.0.0","loc":["services","firefox","syncserver","listen","address"],"readOnly":false,"type":"string"},"services.firefox.syncserver.listen.port":{"declarations":["nixos/modules/services/networking/firefox/sync-server.nix"],"default":5000,"description":"Port on which the sync server listen to.\n","loc":["services","firefox","syncserver","listen","port"],"readOnly":false,"type":"signed integer"},"services.firefox.syncserver.privateConfig":{"declarations":["nixos/modules/services/networking/firefox/sync-server.nix"],"default":"/etc/firefox/syncserver-secret.ini","description":"The private config file is used to extend the generated config with confidential\ninformation, such as the <option>syncserver.sqlUri</option> setting if it contains a\npassword, and the <option>syncserver.secret</option> setting is used by the server to\ngenerate cryptographically-signed authentication tokens.\n\nIf this file does not exists, then it is created with a generated\n<option>syncserver.secret</option> settings.\n","loc":["services","firefox","syncserver","privateConfig"],"readOnly":false,"type":"string"},"services.firefox.syncserver.publicUrl":{"declarations":["nixos/modules/services/networking/firefox/sync-server.nix"],"default":"http://localhost:5000/","description":"Public URL with which firefox users can use to access the sync server.\n","example":"http://sync.example.com/","loc":["services","firefox","syncserver","publicUrl"],"readOnly":false,"type":"string"},"services.firefox.syncserver.sqlUri":{"declarations":["nixos/modules/services/networking/firefox/sync-server.nix"],"default":"sqlite:////var/db/firefox-sync-server/firefox-sync-server.db","description":"The location of the database. This URL is composed of\n<option>dialect[+driver]://user:password@host/dbname[?key=value..]</option>,\nwhere <option>dialect</option> is a database name such as\n<option>mysql</option>, <option>oracle</option>, <option>postgresql</option>,\netc., and <option>driver</option> the name of a DBAPI, such as\n<option>psycopg2</option>, <option>pyodbc</option>, <option>cx_oracle</option>,\netc. The <link\nxlink:href=\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html#database-urls\">\nSQLAlchemy documentation</link> provides more examples and describe the syntax of\nthe expected URL.\n","example":"postgresql://scott:tiger@localhost/test","loc":["services","firefox","syncserver","sqlUri"],"readOnly":false,"type":"string"},"services.fireqos.config":{"declarations":["nixos/modules/services/networking/fireqos.nix"],"default":"","description":"The FireQOS configuration goes here.\n","example":"interface wlp3s0 world-in input rate 10mbit ethernet\n  class web commit 50kbit\n    match tcp ports 80,443\n\ninterface wlp3s0 world-out input rate 10mbit ethernet\n  class web commit 50kbit\n    match tcp ports 80,443\n","loc":["services","fireqos","config"],"readOnly":false,"type":"string"},"services.fireqos.enable":{"declarations":["nixos/modules/services/networking/fireqos.nix"],"default":false,"description":"If enabled, FireQOS will be launched with the specified\nconfiguration given in `config`.\n","loc":["services","fireqos","enable"],"readOnly":false,"type":"boolean"},"services.flannel.backend":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":{"Type":"vxlan"},"description":"Type of backend to use and specific configurations for that backend.","loc":["services","flannel","backend"],"readOnly":false,"type":"attribute set"},"services.flannel.enable":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":false,"description":"Whether to enable flannel.","example":true,"loc":["services","flannel","enable"],"readOnly":false,"type":"boolean"},"services.flannel.etcd.caFile":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":null,"description":"Etcd certificate authority file","loc":["services","flannel","etcd","caFile"],"readOnly":false,"type":"null or path"},"services.flannel.etcd.certFile":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":null,"description":"Etcd cert file","loc":["services","flannel","etcd","certFile"],"readOnly":false,"type":"null or path"},"services.flannel.etcd.endpoints":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":["http://127.0.0.1:2379"],"description":"Etcd endpoints","loc":["services","flannel","etcd","endpoints"],"readOnly":false,"type":"list of strings"},"services.flannel.etcd.keyFile":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":null,"description":"Etcd key file","loc":["services","flannel","etcd","keyFile"],"readOnly":false,"type":"null or path"},"services.flannel.etcd.prefix":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":"/coreos.com/network","description":"Etcd key prefix","loc":["services","flannel","etcd","prefix"],"readOnly":false,"type":"string"},"services.flannel.iface":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":null,"description":"Interface to use (IP or name) for inter-host communication.\nDefaults to the interface for the default route on the machine.\n","loc":["services","flannel","iface"],"readOnly":false,"type":"null or string"},"services.flannel.network":{"declarations":["nixos/modules/services/networking/flannel.nix"],"description":" IPv4 network in CIDR format to use for the entire flannel network.","loc":["services","flannel","network"],"readOnly":false,"type":"string"},"services.flannel.package":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":"pkgs.flannel.bin","description":"Package to use for flannel","loc":["services","flannel","package"],"readOnly":false,"type":"package"},"services.flannel.publicIp":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":null,"description":"IP accessible by other nodes for inter-host communication.\nDefaults to the IP of the interface being used for communication.\n","loc":["services","flannel","publicIp"],"readOnly":false,"type":"null or string"},"services.flannel.subnetLen":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":24,"description":"The size of the subnet allocated to each host. Defaults to 24 (i.e. /24)\nunless the Network was configured to be smaller than a /24 in which case\nit is one less than the network.\n","loc":["services","flannel","subnetLen"],"readOnly":false,"type":"signed integer"},"services.flannel.subnetMax":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":null,"description":"The end of IP range which the subnet allocation should start with.\nDefaults to the last subnet of Network.\n","loc":["services","flannel","subnetMax"],"readOnly":false,"type":"null or string"},"services.flannel.subnetMin":{"declarations":["nixos/modules/services/networking/flannel.nix"],"default":null,"description":"The beginning of IP range which the subnet allocation should start with.\nDefaults to the first subnet of Network.\n","loc":["services","flannel","subnetMin"],"readOnly":false,"type":"null or string"},"services.flashpolicyd.enable":{"declarations":["nixos/modules/services/networking/flashpolicyd.nix"],"default":false,"description":"Whether to enable the Flash Policy server.  This is\nnecessary if you want Flash applications to make\nconnections to your server.\n","loc":["services","flashpolicyd","enable"],"readOnly":false,"type":"unspecified"},"services.flashpolicyd.policy":{"declarations":["nixos/modules/services/networking/flashpolicyd.nix"],"default":"<?xml version=\"1.0\"?>\n<!DOCTYPE cross-domain-policy SYSTEM \"/xml/dtds/cross-domain-policy.dtd\">\n<cross-domain-policy> \n  <site-control permitted-cross-domain-policies=\"master-only\"/>\n  <allow-access-from domain=\"*\" to-ports=\"*\" />\n</cross-domain-policy>\n","description":"The policy to be served.  The default is to allow connections from any domain to any port.","loc":["services","flashpolicyd","policy"],"readOnly":false,"type":"unspecified"},"services.flatpak.enable":{"declarations":["nixos/modules/services/desktops/flatpak.nix"],"default":false,"description":"Whether to enable flatpak.","example":true,"loc":["services","flatpak","enable"],"readOnly":false,"type":"boolean"},"services.flatpak.extraPortals":{"declarations":["nixos/modules/services/desktops/flatpak.nix"],"default":[],"description":"List of additional portals to add to path. Portals allow interaction\nwith system, like choosing files or taking screenshots. At minimum,\na desktop portal implementation should be listed. GNOME already\nadds <package>xdg-desktop-portal-gtk</package>; for KDE, there\nis <package>xdg-desktop-portal-kde</package>. Other desktop\nenvironments will probably want to do the same.\n","loc":["services","flatpak","extraPortals"],"readOnly":false,"type":"list of packages"},"services.flexget.config":{"declarations":["nixos/modules/services/torrent/flexget.nix"],"default":"","description":"The YAML configuration for FlexGet.","loc":["services","flexget","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.flexget.enable":{"declarations":["nixos/modules/services/torrent/flexget.nix"],"default":false,"description":"Whether to enable Run FlexGet Daemon.","example":true,"loc":["services","flexget","enable"],"readOnly":false,"type":"boolean"},"services.flexget.homeDir":{"declarations":["nixos/modules/services/torrent/flexget.nix"],"default":"/var/lib/deluge","description":"Where files live.","example":"/home/flexget","loc":["services","flexget","homeDir"],"readOnly":false,"type":"path"},"services.flexget.interval":{"declarations":["nixos/modules/services/torrent/flexget.nix"],"default":"10m","description":"When to perform a <command>flexget</command> run. See <command>man 7 systemd.time</command> for the format.","example":"1h","loc":["services","flexget","interval"],"readOnly":false,"type":"Concatenated string"},"services.flexget.systemScheduler":{"declarations":["nixos/modules/services/torrent/flexget.nix"],"default":true,"description":"When true, execute the runs via the flexget-runner.timer. If false, you have to specify the settings yourself in the YML file.","example":"false","loc":["services","flexget","systemScheduler"],"readOnly":false,"type":"boolean"},"services.flexget.user":{"declarations":["nixos/modules/services/torrent/flexget.nix"],"default":"deluge","description":"The user under which to run flexget.","example":"some_user","loc":["services","flexget","user"],"readOnly":false,"type":"Concatenated string"},"services.fluentd.config":{"declarations":["nixos/modules/services/logging/fluentd.nix"],"default":"","description":"Fluentd config.","loc":["services","fluentd","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.fluentd.enable":{"declarations":["nixos/modules/services/logging/fluentd.nix"],"default":false,"description":"Whether to enable fluentd.","loc":["services","fluentd","enable"],"readOnly":false,"type":"boolean"},"services.fluentd.package":{"declarations":["nixos/modules/services/logging/fluentd.nix"],"default":"pkgs.fluentd","description":"The fluentd package to use.","loc":["services","fluentd","package"],"readOnly":false,"type":"path"},"services.fluentd.plugins":{"declarations":["nixos/modules/services/logging/fluentd.nix"],"default":[],"description":"A list of plugin paths to pass into fluentd. It will make plugins defined in ruby files\nthere available in your config.\n","loc":["services","fluentd","plugins"],"readOnly":false,"type":"list of paths"},"services.foldingAtHome.config":{"declarations":["nixos/modules/services/misc/folding-at-home.nix"],"default":"","description":"Extra configuration. Contents will be added verbatim to the\nconfiguration file.\n","loc":["services","foldingAtHome","config"],"readOnly":false,"type":"unspecified"},"services.foldingAtHome.enable":{"declarations":["nixos/modules/services/misc/folding-at-home.nix"],"default":false,"description":"Whether to enable the Folding@Home to use idle CPU time.\n","loc":["services","foldingAtHome","enable"],"readOnly":false,"type":"unspecified"},"services.foldingAtHome.nickname":{"declarations":["nixos/modules/services/misc/folding-at-home.nix"],"default":"Anonymous","description":"A unique handle for statistics.\n","loc":["services","foldingAtHome","nickname"],"readOnly":false,"type":"unspecified"},"services.foundationdb.backupProcesses":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":1,"description":"Number of backup_agent processes to run for snapshots.","loc":["services","foundationdb","backupProcesses"],"readOnly":false,"type":"signed integer"},"services.foundationdb.class":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":null,"description":"Process class","loc":["services","foundationdb","class"],"readOnly":false,"type":"null or one of \"storage\", \"transaction\", \"stateless\""},"services.foundationdb.dataDir":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"/var/lib/foundationdb","description":"Data directory. All cluster data will be put under here.","loc":["services","foundationdb","dataDir"],"readOnly":false,"type":"path"},"services.foundationdb.enable":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":false,"description":"Whether to enable FoundationDB Server.","example":true,"loc":["services","foundationdb","enable"],"readOnly":false,"type":"boolean"},"services.foundationdb.extraReadWritePaths":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":[],"description":"An extra set of filesystem paths that FoundationDB can read to\nand write from. By default, FoundationDB runs under a heavily\nnamespaced systemd environment without write access to most of\nthe filesystem outside of its data and log directories. By\nadding paths to this list, the set of writeable paths will be\nexpanded. This is useful for allowing e.g. backups to local files,\nwhich must be performed on behalf of the foundationdb service.\n","loc":["services","foundationdb","extraReadWritePaths"],"readOnly":false,"type":"list of paths"},"services.foundationdb.group":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"foundationdb","description":"Group account under which FoundationDB runs.","loc":["services","foundationdb","group"],"readOnly":false,"type":"string"},"services.foundationdb.listenAddress":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"public","description":"Publicly visible IP address of the process. Port is determined by process ID","loc":["services","foundationdb","listenAddress"],"readOnly":false,"type":"string"},"services.foundationdb.listenPortStart":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":4500,"description":"Starting port number for database listening sockets. Every FDB process binds to a\nsubsequent port, to this number reflects the start of the overall range. e.g. having\n8 server processes will use all ports between 4500 and 4507.\n","loc":["services","foundationdb","listenPortStart"],"readOnly":false,"type":"signed integer"},"services.foundationdb.locality":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":{"dataHall":null,"datacenterId":null,"machineId":null,"zoneId":null},"description":"FoundationDB locality settings.\n","loc":["services","foundationdb","locality"],"readOnly":false,"type":"submodule"},"services.foundationdb.locality.dataHall":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":null,"description":"Data hall identifier key. All processes physically located in a\ndata hall should share the id. If you are depending on data\nhall based replication this must be set on all processes.\n","loc":["services","foundationdb","locality","dataHall"],"readOnly":false,"type":"null or string"},"services.foundationdb.locality.datacenterId":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":null,"description":"Data center identifier key. All processes physically located in a\ndata center should share the id. If you are depending on data\ncenter based replication this must be set on all processes.\n","loc":["services","foundationdb","locality","datacenterId"],"readOnly":false,"type":"null or string"},"services.foundationdb.locality.machineId":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":null,"description":"Machine identifier key. All processes on a machine should share a\nunique id. By default, processes on a machine determine a unique id to share.\nThis does not generally need to be set.\n","loc":["services","foundationdb","locality","machineId"],"readOnly":false,"type":"null or string"},"services.foundationdb.locality.zoneId":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":null,"description":"Zone identifier key. Processes that share a zone id are\nconsidered non-unique for the purposes of data replication.\nIf unset, defaults to machine id.\n","loc":["services","foundationdb","locality","zoneId"],"readOnly":false,"type":"null or string"},"services.foundationdb.logDir":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"/var/log/foundationdb","description":"Log directory.","loc":["services","foundationdb","logDir"],"readOnly":false,"type":"path"},"services.foundationdb.logSize":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"10MiB","description":"Roll over to a new log file after the current log file\nreaches the specified size.\n","loc":["services","foundationdb","logSize"],"readOnly":false,"type":"Concatenated string"},"services.foundationdb.maxLogSize":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"100MiB","description":"Delete the oldest log file when the total size of all log\nfiles exceeds the specified size. If set to 0, old log files\nwill not be deleted.\n","loc":["services","foundationdb","maxLogSize"],"readOnly":false,"type":"Concatenated string"},"services.foundationdb.memory":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"8GiB","description":"Maximum memory used by the process. The default value is\n<literal>8GiB</literal>. When specified without a unit,\n<literal>MiB</literal> is assumed. This parameter does not\nchange the memory allocation of the program. Rather, it sets\na hard limit beyond which the process will kill itself and\nbe restarted. The default value of <literal>8GiB</literal>\nis double the intended memory usage in the default\nconfiguration (providing an emergency buffer to deal with\nmemory leaks or similar problems). It is not recommended to\ndecrease the value of this parameter below its default\nvalue. It may be increased if you wish to allocate a very\nlarge amount of storage engine memory or cache. In\nparticular, when the <literal>storageMemory</literal>\nparameter is increased, the <literal>memory</literal>\nparameter should be increased by an equal amount.\n","loc":["services","foundationdb","memory"],"readOnly":false,"type":"Concatenated string"},"services.foundationdb.openFirewall":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":false,"description":"Open the firewall ports corresponding to FoundationDB processes and coordinators\nusing <option>config.networking.firewall.*</option>.\n","loc":["services","foundationdb","openFirewall"],"readOnly":false,"type":"boolean"},"services.foundationdb.package":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"description":"The FoundationDB package to use for this server. This must be specified by the user\nin order to ensure migrations and upgrades are controlled appropriately.\n","loc":["services","foundationdb","package"],"readOnly":false,"type":"package"},"services.foundationdb.pidfile":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"/run/foundationdb.pid","description":"Path to pidfile for fdbmonitor.","loc":["services","foundationdb","pidfile"],"readOnly":false,"type":"path"},"services.foundationdb.publicAddress":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"auto","description":"Publicly visible IP address of the process. Port is determined by process ID","loc":["services","foundationdb","publicAddress"],"readOnly":false,"type":"string"},"services.foundationdb.restartDelay":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":10,"description":"Number of seconds to wait before restarting servers.","loc":["services","foundationdb","restartDelay"],"readOnly":false,"type":"signed integer"},"services.foundationdb.serverProcesses":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":1,"description":"Number of fdbserver processes to run.","loc":["services","foundationdb","serverProcesses"],"readOnly":false,"type":"signed integer"},"services.foundationdb.storageMemory":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"1GiB","description":"Maximum memory used for data storage. The default value is\n<literal>1GiB</literal>. When specified without a unit,\n<literal>MB</literal> is assumed. Clusters using the memory\nstorage engine will be restricted to using this amount of\nmemory per process for purposes of data storage. Memory\noverhead associated with storing the data is counted against\nthis total. If you increase the\n<literal>storageMemory</literal>, you should also increase\nthe <literal>memory</literal> parameter by the same amount.\n","loc":["services","foundationdb","storageMemory"],"readOnly":false,"type":"Concatenated string"},"services.foundationdb.tls":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":null,"description":"FoundationDB Transport Security Layer (TLS) settings.\n","loc":["services","foundationdb","tls"],"readOnly":false,"type":"null or submodule"},"services.foundationdb.tls.allowedPeers":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"Check.Valid=1,Check.Unexpired=1","description":"\t      \"Peer verification string\". This may be used to adjust which TLS\n              client certificates a server will accept, as a form of user\n              authorization; for example, it may only accept TLS clients who\n              offer a certificate abiding by some locality or organization name.\n\n              For more information, please see the FoundationDB documentation.\n","loc":["services","foundationdb","tls","allowedPeers"],"readOnly":false,"type":"string"},"services.foundationdb.tls.certificate":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"description":"Path to the TLS certificate file. This certificate will\nbe offered to, and may be verified by, clients.\n","loc":["services","foundationdb","tls","certificate"],"readOnly":false,"type":"string"},"services.foundationdb.tls.key":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"description":"Private key file for the certificate.","loc":["services","foundationdb","tls","key"],"readOnly":false,"type":"string"},"services.foundationdb.user":{"declarations":["nixos/modules/services/databases/foundationdb.nix"],"default":"foundationdb","description":"User account under which FoundationDB runs.","loc":["services","foundationdb","user"],"readOnly":false,"type":"string"},"services.fourStore.database":{"declarations":["nixos/modules/services/databases/4store.nix"],"default":"","description":"RDF database name. If it doesn't exist, it will be created. Databases are stored in /var/lib/4store.","loc":["services","fourStore","database"],"readOnly":false,"type":"unspecified"},"services.fourStore.enable":{"declarations":["nixos/modules/services/databases/4store.nix"],"default":false,"description":"Whether to enable 4Store RDF database server.","loc":["services","fourStore","enable"],"readOnly":false,"type":"unspecified"},"services.fourStore.options":{"declarations":["nixos/modules/services/databases/4store.nix"],"default":"","description":"Extra CLI options to pass to 4Store.","loc":["services","fourStore","options"],"readOnly":false,"type":"unspecified"},"services.fourStoreEndpoint.database":{"declarations":["nixos/modules/services/databases/4store-endpoint.nix"],"default":"","description":"RDF database name to expose via the endpoint. Defaults to local 4Store database name.","loc":["services","fourStoreEndpoint","database"],"readOnly":false,"type":"unspecified"},"services.fourStoreEndpoint.enable":{"declarations":["nixos/modules/services/databases/4store-endpoint.nix"],"default":false,"description":"Whether to enable 4Store SPARQL endpoint.","loc":["services","fourStoreEndpoint","enable"],"readOnly":false,"type":"unspecified"},"services.fourStoreEndpoint.listenAddress":{"declarations":["nixos/modules/services/databases/4store-endpoint.nix"],"default":null,"description":"IP address to listen on.","loc":["services","fourStoreEndpoint","listenAddress"],"readOnly":false,"type":"unspecified"},"services.fourStoreEndpoint.options":{"declarations":["nixos/modules/services/databases/4store-endpoint.nix"],"default":"","description":"Extra CLI options to pass to 4Store's 4s-httpd process.","loc":["services","fourStoreEndpoint","options"],"readOnly":false,"type":"unspecified"},"services.fourStoreEndpoint.port":{"declarations":["nixos/modules/services/databases/4store-endpoint.nix"],"default":8080,"description":"port to listen on.","loc":["services","fourStoreEndpoint","port"],"readOnly":false,"type":"unspecified"},"services.fprintd.enable":{"declarations":["nixos/modules/services/security/fprintd.nix"],"default":false,"description":"Whether to enable fprintd daemon and PAM module for fingerprint readers handling.\n","loc":["services","fprintd","enable"],"readOnly":false,"type":"boolean"},"services.fprot.updater.enable":{"declarations":["nixos/modules/services/security/fprot.nix"],"default":false,"description":"Whether to enable automatic F-Prot virus definitions database updates.\n","loc":["services","fprot","updater","enable"],"readOnly":false,"type":"unspecified"},"services.fprot.updater.frequency":{"declarations":["nixos/modules/services/security/fprot.nix"],"default":30,"description":"Update virus definitions every X minutes.\n","loc":["services","fprot","updater","frequency"],"readOnly":false,"type":"unspecified"},"services.fprot.updater.licenseKeyfile":{"declarations":["nixos/modules/services/security/fprot.nix"],"description":"License keyfile. Defaults to the one supplied with installation package.\n","loc":["services","fprot","updater","licenseKeyfile"],"readOnly":false,"type":"unspecified"},"services.fprot.updater.productData":{"declarations":["nixos/modules/services/security/fprot.nix"],"description":"product.data file. Defaults to the one supplied with installation package.\n","loc":["services","fprot","updater","productData"],"readOnly":false,"type":"unspecified"},"services.frab.database":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":{"adapter":"sqlite3","database":"/var/lib/frab/db.sqlite3","pool":5,"timeout":5000},"description":"Rails database configuration for Frab as Nix attribute set.\n","example":{"adapter":"postgresql","database":"frab","encoding":"utf8","host":"localhost","password":"supersecret","pool":5,"username":"frabuser"},"loc":["services","frab","database"],"readOnly":false,"type":"attribute set"},"services.frab.enable":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":false,"description":"Enable the frab service.\n","loc":["services","frab","enable"],"readOnly":false,"type":"boolean"},"services.frab.extraEnvironment":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":{},"description":"Additional environment variables to set for frab for further\nconfiguration. See the frab documentation for more information.\n","example":{"EXCEPTION_EMAIL":"frab-owner@example.com","FRAB_CURRENCY_FORMAT":"%n%u","FRAB_CURRENCY_UNIT":"€","SMTP_ADDRESS":"localhost","SMTP_AUTHENTICATION":"1","SMTP_DOMAIN":"localdomain","SMTP_NOTLS":"1","SMTP_PASSWORD":"toor","SMTP_PORT":"587","SMTP_USER_NAME":"root"},"loc":["services","frab","extraEnvironment"],"readOnly":false,"type":"attribute set"},"services.frab.fromEmail":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":"frab@localhost","description":"Email address used by frab.\n","loc":["services","frab","fromEmail"],"readOnly":false,"type":"string"},"services.frab.group":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":"frab","description":"Group to run frab.\n","loc":["services","frab","group"],"readOnly":false,"type":"string"},"services.frab.host":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"description":"Hostname under which this frab instance can be reached.\n","example":"frab.example.com","loc":["services","frab","host"],"readOnly":false,"type":"string"},"services.frab.listenAddress":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":"localhost","description":"Address or hostname frab should listen on.\n","loc":["services","frab","listenAddress"],"readOnly":false,"type":"string"},"services.frab.listenPort":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":3000,"description":"Port frab should listen on.\n","loc":["services","frab","listenPort"],"readOnly":false,"type":"signed integer"},"services.frab.protocol":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":"https","description":"Either http or https, depending on how your Frab instance\nwill be exposed to the public.\n","example":"http","loc":["services","frab","protocol"],"readOnly":false,"type":"string"},"services.frab.secretKeyBase":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"description":"Your secret key is used for verifying the integrity of signed cookies.\nIf you change this key, all old signed cookies will become invalid!\n\nMake sure the secret is at least 30 characters and all random,\nno regular words or you'll be exposed to dictionary attacks.\n","loc":["services","frab","secretKeyBase"],"readOnly":false,"type":"string"},"services.frab.statePath":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":"/var/lib/frab","description":"Directory where frab keeps its state.\n","loc":["services","frab","statePath"],"readOnly":false,"type":"string"},"services.frab.user":{"declarations":["nixos/modules/services/web-apps/frab.nix"],"default":"frab","description":"User to run frab.\n","loc":["services","frab","user"],"readOnly":false,"type":"string"},"services.fractalart.enable":{"declarations":["nixos/modules/services/x11/fractalart.nix"],"default":false,"description":"Enable FractalArt for generating colorful wallpapers on login","example":true,"loc":["services","fractalart","enable"],"readOnly":false,"type":"boolean"},"services.fractalart.height":{"declarations":["nixos/modules/services/x11/fractalart.nix"],"default":null,"description":"Screen height","example":1080,"loc":["services","fractalart","height"],"readOnly":false,"type":"null or signed integer"},"services.fractalart.width":{"declarations":["nixos/modules/services/x11/fractalart.nix"],"default":null,"description":"Screen width","example":1920,"loc":["services","fractalart","width"],"readOnly":false,"type":"null or signed integer"},"services.freefall.devices":{"declarations":["nixos/modules/services/hardware/freefall.nix"],"default":["/dev/sda"],"description":"Device paths to all internal spinning hard drives.\n","loc":["services","freefall","devices"],"readOnly":false,"type":"list of Concatenated strings"},"services.freefall.enable":{"declarations":["nixos/modules/services/hardware/freefall.nix"],"default":false,"description":"Whether to protect HP/Dell laptop hard drives (not SSDs) in free fall.\n","loc":["services","freefall","enable"],"readOnly":false,"type":"boolean"},"services.freefall.package":{"declarations":["nixos/modules/services/hardware/freefall.nix"],"default":"pkgs.freefall","description":"freefall derivation to use.\n","loc":["services","freefall","package"],"readOnly":false,"type":"package"},"services.freenet.enable":{"declarations":["nixos/modules/services/networking/freenet.nix"],"default":false,"description":"Enable the Freenet daemon","loc":["services","freenet","enable"],"readOnly":false,"type":"boolean"},"services.freenet.nice":{"declarations":["nixos/modules/services/networking/freenet.nix"],"default":10,"description":"Set the nice level for the Freenet daemon","loc":["services","freenet","nice"],"readOnly":false,"type":"signed integer"},"services.freeradius.configDir":{"declarations":["nixos/modules/services/networking/freeradius.nix"],"default":"/etc/raddb","description":"The path of the freeradius server configuration directory.\n","loc":["services","freeradius","configDir"],"readOnly":false,"type":"path"},"services.freeradius.enable":{"declarations":["nixos/modules/services/networking/freeradius.nix"],"default":false,"description":"Whether to enable the freeradius server.","example":true,"loc":["services","freeradius","enable"],"readOnly":false,"type":"boolean"},"services.fstrim.enable":{"declarations":["nixos/modules/services/misc/fstrim.nix"],"default":false,"description":"Whether to enable periodic SSD TRIM of mounted partitions in background.","example":true,"loc":["services","fstrim","enable"],"readOnly":false,"type":"boolean"},"services.fstrim.interval":{"declarations":["nixos/modules/services/misc/fstrim.nix"],"default":"weekly","description":"How often we run fstrim. For most desktop and server systems\na sufficient trimming frequency is once a week.\n\nThe format is described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","loc":["services","fstrim","interval"],"readOnly":false,"type":"Concatenated string"},"services.fusionInventory.enable":{"declarations":["nixos/modules/services/monitoring/fusion-inventory.nix"],"default":false,"description":"Whether to enable Fusion Inventory Agent.","example":true,"loc":["services","fusionInventory","enable"],"readOnly":false,"type":"boolean"},"services.fusionInventory.extraConfig":{"declarations":["nixos/modules/services/monitoring/fusion-inventory.nix"],"default":"","description":"Configuration that is injected verbatim into the configuration file.\n","loc":["services","fusionInventory","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.fusionInventory.servers":{"declarations":["nixos/modules/services/monitoring/fusion-inventory.nix"],"description":"The urls of the OCS/GLPI servers to connect to.\n","loc":["services","fusionInventory","servers"],"readOnly":false,"type":"list of strings"},"services.fwupd.blacklistDevices":{"declarations":["nixos/modules/services/hardware/fwupd.nix"],"default":[],"description":"Allow blacklisting specific devices by their GUID\n","example":["2082b5e0-7a64-478a-b1b2-e3404fab6dad"],"loc":["services","fwupd","blacklistDevices"],"readOnly":false,"type":"list of Concatenated strings"},"services.fwupd.blacklistPlugins":{"declarations":["nixos/modules/services/hardware/fwupd.nix"],"default":[],"description":"Allow blacklisting specific plugins\n","example":["udev"],"loc":["services","fwupd","blacklistPlugins"],"readOnly":false,"type":"list of Concatenated strings"},"services.fwupd.enable":{"declarations":["nixos/modules/services/hardware/fwupd.nix"],"default":false,"description":"Whether to enable fwupd, a DBus service that allows\napplications to update firmware.\n","loc":["services","fwupd","enable"],"readOnly":false,"type":"boolean"},"services.fwupd.extraTrustedKeys":{"declarations":["nixos/modules/services/hardware/fwupd.nix"],"default":[],"description":"Installing a public key allows firmware signed with a matching private key to be recognized as trusted, which may require less authentication to install than for untrusted files. By default trusted firmware can be upgraded (but not downgraded) without the user or administrator password. Only very few keys are installed by default.\n","example":{"_type":"literalExample","text":"[ /etc/nixos/fwupd/myfirmware.pem ]"},"loc":["services","fwupd","extraTrustedKeys"],"readOnly":false,"type":"list of paths"},"services.gale.domain":{"declarations":["nixos/modules/services/networking/gale.nix"],"default":"","description":"Domain name for the Gale system.","loc":["services","gale","domain"],"readOnly":false,"type":"string"},"services.gale.enable":{"declarations":["nixos/modules/services/networking/gale.nix"],"default":false,"description":"Whether to enable the Gale messaging daemon.","example":true,"loc":["services","gale","enable"],"readOnly":false,"type":"boolean"},"services.gale.extraConfig":{"declarations":["nixos/modules/services/networking/gale.nix"],"default":"","description":"Additional text to be added to <filename>/etc/gale/conf</filename>.\n","loc":["services","gale","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.gale.group":{"declarations":["nixos/modules/services/networking/gale.nix"],"default":"gale","description":"Group name for the Gale daemon.","loc":["services","gale","group"],"readOnly":false,"type":"string"},"services.gale.keyPath":{"declarations":["nixos/modules/services/networking/gale.nix"],"default":null,"description":"Directory containing the key pair for this Gale domain.  The expected\nfilename will be taken from the domain option with \".gpri\" and \".gpub\"\nappended.\n","loc":["services","gale","keyPath"],"readOnly":false,"type":"null or path"},"services.gale.setuidWrapper":{"declarations":["nixos/modules/services/networking/gale.nix"],"default":null,"description":"Configuration for the Gale gksign setuid wrapper.","loc":["services","gale","setuidWrapper"],"readOnly":false,"type":"unspecified"},"services.gale.user":{"declarations":["nixos/modules/services/networking/gale.nix"],"default":"gale","description":"Username for the Gale daemon.","loc":["services","gale","user"],"readOnly":false,"type":"string"},"services.gammu-smsd.backend.files.errorSMSPath":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"/var/spool/sms/error/","description":"Where SMSes with error in transmission is placed","loc":["services","gammu-smsd","backend","files","errorSMSPath"],"readOnly":false,"type":"path"},"services.gammu-smsd.backend.files.inboxPath":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"/var/spool/sms/inbox/","description":"Where the received SMSes are stored","loc":["services","gammu-smsd","backend","files","inboxPath"],"readOnly":false,"type":"path"},"services.gammu-smsd.backend.files.outboxPath":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"/var/spool/sms/outbox/","description":"Where SMSes to be sent should be placed","loc":["services","gammu-smsd","backend","files","outboxPath"],"readOnly":false,"type":"path"},"services.gammu-smsd.backend.files.sentSMSPath":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"/var/spool/sms/sent/","description":"Where the transmitted SMSes are placed","loc":["services","gammu-smsd","backend","files","sentSMSPath"],"readOnly":false,"type":"path"},"services.gammu-smsd.backend.service":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"null","description":"Service to use to store sms data.","loc":["services","gammu-smsd","backend","service"],"readOnly":false,"type":"one of \"null\", \"files\", \"sql\""},"services.gammu-smsd.backend.sql.database":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":null,"description":"Database name to store sms data","loc":["services","gammu-smsd","backend","sql","database"],"readOnly":false,"type":"string"},"services.gammu-smsd.backend.sql.driver":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"description":"DB driver to use","loc":["services","gammu-smsd","backend","sql","driver"],"readOnly":false,"type":"one of \"native_mysql\", \"native_pgsql\", \"odbc\", \"dbi\""},"services.gammu-smsd.backend.sql.host":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"localhost","description":"Database server address","loc":["services","gammu-smsd","backend","sql","host"],"readOnly":false,"type":"string"},"services.gammu-smsd.backend.sql.password":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":null,"description":"User password used for connetion to the database","loc":["services","gammu-smsd","backend","sql","password"],"readOnly":false,"type":"null or string"},"services.gammu-smsd.backend.sql.sqlDialect":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":null,"description":"SQL dialect to use (odbc driver only)","loc":["services","gammu-smsd","backend","sql","sqlDialect"],"readOnly":false,"type":"null or string"},"services.gammu-smsd.backend.sql.user":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":null,"description":"User name used for connection to the database","loc":["services","gammu-smsd","backend","sql","user"],"readOnly":false,"type":"null or string"},"services.gammu-smsd.device.connection":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"at","description":"Protocol which will be used to talk to the phone","loc":["services","gammu-smsd","device","connection"],"readOnly":false,"type":"string"},"services.gammu-smsd.device.group":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"root","description":"Owner group of the device","example":"dialout","loc":["services","gammu-smsd","device","group"],"readOnly":false,"type":"string"},"services.gammu-smsd.device.path":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"description":"Device node or address of the phone","example":"/dev/ttyUSB2","loc":["services","gammu-smsd","device","path"],"readOnly":false,"type":"path"},"services.gammu-smsd.device.pin":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":null,"description":"PIN code for the simcard","loc":["services","gammu-smsd","device","pin"],"readOnly":false,"type":"null or string"},"services.gammu-smsd.device.synchronizeTime":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":true,"description":"Whether to set time from computer to the phone during starting connection","loc":["services","gammu-smsd","device","synchronizeTime"],"readOnly":false,"type":"boolean"},"services.gammu-smsd.enable":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":false,"description":"Whether to enable gammu-smsd daemon.","example":true,"loc":["services","gammu-smsd","enable"],"readOnly":false,"type":"boolean"},"services.gammu-smsd.extraConfig.gammu":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"","description":"Extra config lines to be added into [gammu] section","loc":["services","gammu-smsd","extraConfig","gammu"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.gammu-smsd.extraConfig.smsd":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"","description":"Extra config lines to be added into [smsd] section","loc":["services","gammu-smsd","extraConfig","smsd"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.gammu-smsd.log.file":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"syslog","description":"Path to file where information about communication will be stored","loc":["services","gammu-smsd","log","file"],"readOnly":false,"type":"string"},"services.gammu-smsd.log.format":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"errors","description":"Determines what will be logged to the LogFile","loc":["services","gammu-smsd","log","format"],"readOnly":false,"type":"one of \"nothing\", \"text\", \"textall\", \"textalldate\", \"errors\", \"errorsdate\", \"binary\""},"services.gammu-smsd.user":{"declarations":["nixos/modules/services/misc/gammu-smsd.nix"],"default":"smsd","description":"User that has access to the device","loc":["services","gammu-smsd","user"],"readOnly":false,"type":"string"},"services.gateone.enable":{"declarations":["nixos/modules/services/networking/gateone.nix"],"default":false,"description":"Whether to enable GateOne server.","example":true,"loc":["services","gateone","enable"],"readOnly":false,"type":"boolean"},"services.gateone.pidDir":{"declarations":["nixos/modules/services/networking/gateone.nix"],"default":"/run/gateone","description":"Path of pid files for GateOne.","loc":["services","gateone","pidDir"],"readOnly":false,"type":"path"},"services.gateone.settingsDir":{"declarations":["nixos/modules/services/networking/gateone.nix"],"default":"/var/lib/gateone","description":"Path of configuration files for GateOne.","loc":["services","gateone","settingsDir"],"readOnly":false,"type":"path"},"services.gdomap.enable":{"declarations":["nixos/modules/services/networking/gdomap.nix"],"default":false,"description":"Whether to enable GNUstep Distributed Objects name server.","example":true,"loc":["services","gdomap","enable"],"readOnly":false,"type":"boolean"},"services.geoclue2.enable":{"declarations":["nixos/modules/services/desktops/geoclue2.nix"],"default":false,"description":"Whether to enable GeoClue 2 daemon, a DBus service\nthat provides location information for accessing.\n","loc":["services","geoclue2","enable"],"readOnly":false,"type":"boolean"},"services.geoclue2.enableDemoAgent":{"declarations":["nixos/modules/services/desktops/geoclue2.nix"],"default":true,"description":"Whether to use the GeoClue demo agent. This should be\noverridden by desktop environments that provide their own\nagent.\n","loc":["services","geoclue2","enableDemoAgent"],"readOnly":false,"type":"boolean"},"services.geoip-updater.databaseDir":{"declarations":["nixos/modules/services/misc/geoip-updater.nix"],"default":"/var/lib/geoip-databases","description":"Directory that will contain GeoIP databases.\n","loc":["services","geoip-updater","databaseDir"],"readOnly":false,"type":"path"},"services.geoip-updater.databases":{"declarations":["nixos/modules/services/misc/geoip-updater.nix"],"default":["GeoLiteCountry/GeoIP.dat.gz","GeoIPv6.dat.gz","GeoLiteCity.dat.xz","GeoLiteCityv6-beta/GeoLiteCityv6.dat.gz","asnum/GeoIPASNum.dat.gz","asnum/GeoIPASNumv6.dat.gz","GeoLite2-Country.mmdb.gz","GeoLite2-City.mmdb.gz"],"description":"Which GeoIP databases to update. The full URL is https://geolite.maxmind.com/download/geoip/database/ +\n<literal>the_database</literal>.\n","loc":["services","geoip-updater","databases"],"readOnly":false,"type":"list of strings"},"services.geoip-updater.enable":{"declarations":["nixos/modules/services/misc/geoip-updater.nix"],"default":false,"description":"Whether to enable periodic downloading of GeoIP databases from\nmaxmind.com. You might want to enable this if you, for instance, use\nntopng or Wireshark.\n","loc":["services","geoip-updater","enable"],"readOnly":false,"type":"boolean"},"services.geoip-updater.interval":{"declarations":["nixos/modules/services/misc/geoip-updater.nix"],"default":"weekly","description":"Update the GeoIP databases at this time / interval.\nThe format is described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\nTo prevent load spikes on maxmind.com, the timer interval is\nrandomized by an additional delay of 3600\nseconds. Setting a shorter interval than this is not recommended.\n","loc":["services","geoip-updater","interval"],"readOnly":false,"type":"string"},"services.gitDaemon.basePath":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":"","description":"Remap all the path requests as relative to the given path. For example,\nif you set base-path to /srv/git, then if you later try to pull\ngit://example.com/hello.git, Git daemon will interpret the path as /srv/git/hello.git.\n","example":"/srv/git/","loc":["services","gitDaemon","basePath"],"readOnly":false,"type":"string"},"services.gitDaemon.enable":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":false,"description":"Enable Git daemon, which allows public hosting of git repositories\nwithout any access controls. This is mostly intended for read-only access.\n\nYou can allow write access by setting daemon.receivepack configuration\nitem of the repository to true. This is solely meant for a closed LAN setting\nwhere everybody is friendly.\n\nIf you need any access controls, use something else.\n","loc":["services","gitDaemon","enable"],"readOnly":false,"type":"boolean"},"services.gitDaemon.exportAll":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":false,"description":"Publish all directories that look like Git repositories (have the objects\nand refs subdirectories), even if they do not have the git-daemon-export-ok file.\n\nIf disabled, you need to touch .git/git-daemon-export-ok in each repository\nyou want the daemon to publish.\n\nWarning: enabling this without a repository whitelist or basePath\npublishes every git repository you have.\n","loc":["services","gitDaemon","exportAll"],"readOnly":false,"type":"boolean"},"services.gitDaemon.group":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":"git","description":"Group under which Git daemon would be running.","loc":["services","gitDaemon","group"],"readOnly":false,"type":"string"},"services.gitDaemon.listenAddress":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":"","description":"Listen on a specific IP address or hostname.","example":"example.com","loc":["services","gitDaemon","listenAddress"],"readOnly":false,"type":"string"},"services.gitDaemon.options":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":"","description":"Extra configuration options to be passed to Git daemon.","loc":["services","gitDaemon","options"],"readOnly":false,"type":"string"},"services.gitDaemon.port":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":9418,"description":"Port to listen on.","loc":["services","gitDaemon","port"],"readOnly":false,"type":"signed integer"},"services.gitDaemon.repositories":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":[],"description":"A whitelist of paths of git repositories, or directories containing repositories\nall of which would be published. Paths must not end in \"/\".\n\nWarning: leaving this empty and enabling exportAll publishes all\nrepositories in your filesystem or basePath if specified.\n","example":["/srv/git","/home/user/git/repo2"],"loc":["services","gitDaemon","repositories"],"readOnly":false,"type":"list of strings"},"services.gitDaemon.user":{"declarations":["nixos/modules/services/networking/git-daemon.nix"],"default":"git","description":"User under which Git daemon would be running.","loc":["services","gitDaemon","user"],"readOnly":false,"type":"string"},"services.gitea.appName":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"gitea: Gitea Service","description":"Application name.","loc":["services","gitea","appName"],"readOnly":false,"type":"string"},"services.gitea.cookieSecure":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":false,"description":"Marks session cookies as \"secure\" as a hint for browsers to only send\nthem via HTTPS. This option is recommend, if gitea is being served over HTTPS.\n","loc":["services","gitea","cookieSecure"],"readOnly":false,"type":"boolean"},"services.gitea.database.createDatabase":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":true,"description":"Whether to create a local postgresql database automatically.\nThis only applies if database type \"postgres\" is selected.\n","loc":["services","gitea","database","createDatabase"],"readOnly":false,"type":"boolean"},"services.gitea.database.host":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"127.0.0.1","description":"Database host address.","loc":["services","gitea","database","host"],"readOnly":false,"type":"string"},"services.gitea.database.name":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"gitea","description":"Database name.","loc":["services","gitea","database","name"],"readOnly":false,"type":"string"},"services.gitea.database.password":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"","description":"The password corresponding to <option>database.user</option>.\nWarning: this is stored in cleartext in the Nix store!\nUse <option>database.passwordFile</option> instead.\n","loc":["services","gitea","database","password"],"readOnly":false,"type":"string"},"services.gitea.database.passwordFile":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":null,"description":"A file containing the password corresponding to\n<option>database.user</option>.\n","example":"/run/keys/gitea-dbpassword","loc":["services","gitea","database","passwordFile"],"readOnly":false,"type":"null or path"},"services.gitea.database.path":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"/var/lib/gitea/data/gitea.db","description":"Path to the sqlite3 database file.","loc":["services","gitea","database","path"],"readOnly":false,"type":"string"},"services.gitea.database.port":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":3306,"description":"Database host port.","loc":["services","gitea","database","port"],"readOnly":false,"type":"signed integer"},"services.gitea.database.type":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"sqlite3","description":"Database engine to use.","example":"mysql","loc":["services","gitea","database","type"],"readOnly":false,"type":"one of \"sqlite3\", \"mysql\", \"postgres\""},"services.gitea.database.user":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"gitea","description":"Database user.","loc":["services","gitea","database","user"],"readOnly":false,"type":"string"},"services.gitea.domain":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"localhost","description":"Domain name of your server.","loc":["services","gitea","domain"],"readOnly":false,"type":"string"},"services.gitea.dump.enable":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":false,"description":"Enable a timer that runs gitea dump to generate backup-files of the\ncurrent gitea database and repositories.\n","loc":["services","gitea","dump","enable"],"readOnly":false,"type":"boolean"},"services.gitea.dump.interval":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"04:31","description":"Run a gitea dump at this interval. Runs by default at 04:31 every day.\n\nThe format is described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","example":"hourly","loc":["services","gitea","dump","interval"],"readOnly":false,"type":"string"},"services.gitea.enable":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":false,"description":"Enable Gitea Service.","loc":["services","gitea","enable"],"readOnly":false,"type":"boolean"},"services.gitea.extraConfig":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"","description":"Configuration lines appended to the generated gitea configuration file.","loc":["services","gitea","extraConfig"],"readOnly":false,"type":"string"},"services.gitea.httpAddress":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"0.0.0.0","description":"HTTP listen address.","loc":["services","gitea","httpAddress"],"readOnly":false,"type":"string"},"services.gitea.httpPort":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":3000,"description":"HTTP listen port.","loc":["services","gitea","httpPort"],"readOnly":false,"type":"signed integer"},"services.gitea.log.level":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"Trace","description":"General log level.","loc":["services","gitea","log","level"],"readOnly":false,"type":"one of \"Trace\", \"Debug\", \"Info\", \"Warn\", \"Error\", \"Critical\""},"services.gitea.log.rootPath":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"/var/lib/gitea/log","description":"Root path for log files.","loc":["services","gitea","log","rootPath"],"readOnly":false,"type":"string"},"services.gitea.package":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"pkgs.gitea","description":"gitea derivation to use","loc":["services","gitea","package"],"readOnly":false,"type":"package"},"services.gitea.repositoryRoot":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"/var/lib/gitea/repositories","description":"Path to the git repositories.","loc":["services","gitea","repositoryRoot"],"readOnly":false,"type":"string"},"services.gitea.rootUrl":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"http://localhost:3000/","description":"Full public URL of gitea server.","loc":["services","gitea","rootUrl"],"readOnly":false,"type":"string"},"services.gitea.stateDir":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"/var/lib/gitea","description":"gitea data directory.","loc":["services","gitea","stateDir"],"readOnly":false,"type":"string"},"services.gitea.staticRootPath":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"${pkgs.gitea.data}","description":"Upper level of template and static files path.","example":"/var/lib/gitea/data","loc":["services","gitea","staticRootPath"],"readOnly":false,"type":"string"},"services.gitea.useWizard":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":false,"description":"Do not generate a configuration and use gitea' installation wizard instead. The first registered user will be administrator.","loc":["services","gitea","useWizard"],"readOnly":false,"type":"boolean"},"services.gitea.user":{"declarations":["nixos/modules/services/misc/gitea.nix"],"default":"gitea","description":"User account under which gitea runs.","loc":["services","gitea","user"],"readOnly":false,"type":"string"},"services.gitlab-runner.configFile":{"declarations":["nixos/modules/services/continuous-integration/gitlab-runner.nix"],"default":null,"description":"Configuration file for gitlab-runner.\nUse this option in favor of configOptions to avoid placing CI tokens in the nix store.\n\n<option>configFile</option> takes precedence over <option>configOptions</option>.\n\nWarning: Not using <option>configFile</option> will potentially result in secrets\nleaking into the WORLD-READABLE nix store.\n","loc":["services","gitlab-runner","configFile"],"readOnly":false,"type":"null or path"},"services.gitlab-runner.configOptions":{"declarations":["nixos/modules/services/continuous-integration/gitlab-runner.nix"],"description":"Configuration for gitlab-runner\n<option>configFile</option> will take precedence over this option.\n\nWarning: all Configuration, especially CI token, will be stored in a\nWORLD-READABLE file in the Nix Store.\n\nIf you want to protect your CI token use <option>configFile</option> instead.\n","example":{"concurrent":2,"runners":[{"builds_dir":"","docker":{"cache_dir":"","disable_cache":true,"host":"","image":"nixos/nix:1.11","privileged":true},"executor":"docker","name":"docker-nix-1.11","token":"TOKEN","url":"https://CI/"}]},"loc":["services","gitlab-runner","configOptions"],"readOnly":false,"type":"attribute set"},"services.gitlab-runner.enable":{"declarations":["nixos/modules/services/continuous-integration/gitlab-runner.nix"],"default":false,"description":"Whether to enable Gitlab Runner.","example":true,"loc":["services","gitlab-runner","enable"],"readOnly":false,"type":"boolean"},"services.gitlab-runner.gracefulTermination":{"declarations":["nixos/modules/services/continuous-integration/gitlab-runner.nix"],"default":false,"description":"Finish all remaining jobs before stopping, restarting or reconfiguring.\nIf not set gitlab-runner will stop immediatly without waiting for jobs to finish,\nwhich will lead to failed builds.\n","loc":["services","gitlab-runner","gracefulTermination"],"readOnly":false,"type":"boolean"},"services.gitlab-runner.gracefulTimeout":{"declarations":["nixos/modules/services/continuous-integration/gitlab-runner.nix"],"default":"infinity","description":"Time to wait until a graceful shutdown is turned into a forceful one.","example":"5min 20s","loc":["services","gitlab-runner","gracefulTimeout"],"readOnly":false,"type":"string"},"services.gitlab-runner.package":{"declarations":["nixos/modules/services/continuous-integration/gitlab-runner.nix"],"default":"pkgs.gitlab-runner","description":"Gitlab Runner package to use","example":{"_type":"literalExample","text":"pkgs.gitlab-runner_1_11"},"loc":["services","gitlab-runner","package"],"readOnly":false,"type":"package"},"services.gitlab-runner.packages":{"declarations":["nixos/modules/services/continuous-integration/gitlab-runner.nix"],"default":"[ pkgs.bash pkgs.docker-machine ]","description":"Packages to add to PATH for the gitlab-runner process.\n","loc":["services","gitlab-runner","packages"],"readOnly":false,"type":"list of packages"},"services.gitlab-runner.workDir":{"declarations":["nixos/modules/services/continuous-integration/gitlab-runner.nix"],"default":"/var/lib/gitlab-runner","description":"The working directory used","loc":["services","gitlab-runner","workDir"],"readOnly":false,"type":"path"},"services.gitlab.backupPath":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"/var/gitlab/state/backup","description":"Gitlab path for backups.","loc":["services","gitlab","backupPath"],"readOnly":false,"type":"string"},"services.gitlab.databaseHost":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"127.0.0.1","description":"Gitlab database hostname.","loc":["services","gitlab","databaseHost"],"readOnly":false,"type":"string"},"services.gitlab.databaseName":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"gitlab","description":"Gitlab database name.","loc":["services","gitlab","databaseName"],"readOnly":false,"type":"string"},"services.gitlab.databasePassword":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"description":"Gitlab database user password.","loc":["services","gitlab","databasePassword"],"readOnly":false,"type":"string"},"services.gitlab.databaseUsername":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"gitlab","description":"Gitlab database user.","loc":["services","gitlab","databaseUsername"],"readOnly":false,"type":"string"},"services.gitlab.enable":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":false,"description":"Enable the gitlab service.\n","loc":["services","gitlab","enable"],"readOnly":false,"type":"boolean"},"services.gitlab.extraConfig":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":{},"description":"Extra options to be merged into config/gitlab.yml as nix\nattribute set.\n","example":{"gitlab":{"default_projects_features":{"builds":false}}},"loc":["services","gitlab","extraConfig"],"readOnly":false,"type":"attribute set"},"services.gitlab.group":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"gitlab","description":"Group to run gitlab and all related services.","loc":["services","gitlab","group"],"readOnly":false,"type":"string"},"services.gitlab.host":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"nixos","description":"Gitlab host name. Used e.g. for copy-paste URLs.","loc":["services","gitlab","host"],"readOnly":false,"type":"string"},"services.gitlab.https":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":false,"description":"Whether gitlab prints URLs with https as scheme.","loc":["services","gitlab","https"],"readOnly":false,"type":"boolean"},"services.gitlab.initialRootEmail":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"admin@local.host","description":"Initial email address of the root account if this is a new install.\n","loc":["services","gitlab","initialRootEmail"],"readOnly":false,"type":"string"},"services.gitlab.initialRootPassword":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"UseNixOS!","description":"Initial password of the root account if this is a new install.\n","loc":["services","gitlab","initialRootPassword"],"readOnly":false,"type":"string"},"services.gitlab.packages.gitaly":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"pkgs.gitaly","description":"Reference to the gitaly package","loc":["services","gitlab","packages","gitaly"],"readOnly":false,"type":"package"},"services.gitlab.packages.gitlab":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"pkgs.gitlab","description":"Reference to the gitlab package","example":"pkgs.gitlab-ee","loc":["services","gitlab","packages","gitlab"],"readOnly":false,"type":"package"},"services.gitlab.packages.gitlab-shell":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"pkgs.gitlab-shell","description":"Reference to the gitlab-shell package","loc":["services","gitlab","packages","gitlab-shell"],"readOnly":false,"type":"package"},"services.gitlab.packages.gitlab-workhorse":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"pkgs.gitlab-workhorse","description":"Reference to the gitlab-workhorse package","loc":["services","gitlab","packages","gitlab-workhorse"],"readOnly":false,"type":"package"},"services.gitlab.port":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":8080,"description":"Gitlab server port for copy-paste URLs, e.g. 80 or 443 if you're\nservice over https.\n","loc":["services","gitlab","port"],"readOnly":false,"type":"signed integer"},"services.gitlab.secrets.db":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"description":"The secret is used to encrypt variables in the DB. If\nyou change or lose this key you will be unable to access variables\nstored in database.\n\nMake sure the secret is at least 30 characters and all random,\nno regular words or you'll be exposed to dictionary attacks.\n","loc":["services","gitlab","secrets","db"],"readOnly":false,"type":"string"},"services.gitlab.secrets.jws":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"description":"The secret is used to encrypt session keys. If you change or lose\nthis key, users will be disconnected.\n\nMake sure the secret is an RSA private key in PEM format. You can\ngenerate one with\n\nopenssl genrsa 2048\n","loc":["services","gitlab","secrets","jws"],"readOnly":false,"type":"string"},"services.gitlab.secrets.otp":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"description":"The secret is used to encrypt secrets for OTP tokens. If\nyou change or lose this key, users which have 2FA enabled for login\nwon't be able to login anymore.\n\nMake sure the secret is at least 30 characters and all random,\nno regular words or you'll be exposed to dictionary attacks.\n","loc":["services","gitlab","secrets","otp"],"readOnly":false,"type":"string"},"services.gitlab.secrets.secret":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"description":"The secret is used to encrypt variables in the DB. If\nyou change or lose this key you will be unable to access variables\nstored in database.\n\nMake sure the secret is at least 30 characters and all random,\nno regular words or you'll be exposed to dictionary attacks.\n","loc":["services","gitlab","secrets","secret"],"readOnly":false,"type":"string"},"services.gitlab.smtp.address":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"localhost","description":"Address of the SMTP server for Gitlab.","loc":["services","gitlab","smtp","address"],"readOnly":false,"type":"string"},"services.gitlab.smtp.authentication":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":null,"description":"Authentitcation type to use, see http://api.rubyonrails.org/classes/ActionMailer/Base.html","loc":["services","gitlab","smtp","authentication"],"readOnly":false,"type":"null or string"},"services.gitlab.smtp.domain":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"localhost","description":"HELO domain to use for outgoing mail.","loc":["services","gitlab","smtp","domain"],"readOnly":false,"type":"string"},"services.gitlab.smtp.enable":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":false,"description":"Enable gitlab mail delivery over SMTP.","loc":["services","gitlab","smtp","enable"],"readOnly":false,"type":"boolean"},"services.gitlab.smtp.enableStartTLSAuto":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":true,"description":"Whether to try to use StartTLS.","loc":["services","gitlab","smtp","enableStartTLSAuto"],"readOnly":false,"type":"boolean"},"services.gitlab.smtp.opensslVerifyMode":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"peer","description":"How OpenSSL checks the certificate, see http://api.rubyonrails.org/classes/ActionMailer/Base.html","loc":["services","gitlab","smtp","opensslVerifyMode"],"readOnly":false,"type":"string"},"services.gitlab.smtp.password":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":null,"description":"Password of the SMTP server for Gitlab.","loc":["services","gitlab","smtp","password"],"readOnly":false,"type":"null or string"},"services.gitlab.smtp.port":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":465,"description":"Port of the SMTP server for Gitlab.","loc":["services","gitlab","smtp","port"],"readOnly":false,"type":"signed integer"},"services.gitlab.smtp.username":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":null,"description":"Username of the SMTP server for Gitlab.","loc":["services","gitlab","smtp","username"],"readOnly":false,"type":"null or string"},"services.gitlab.statePath":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"/var/gitlab/state","description":"Gitlab state directory, logs are stored here.","loc":["services","gitlab","statePath"],"readOnly":false,"type":"string"},"services.gitlab.user":{"declarations":["nixos/modules/services/misc/gitlab.nix"],"default":"gitlab","description":"User to run gitlab and all related services.","loc":["services","gitlab","user"],"readOnly":false,"type":"string"},"services.gitolite.adminPubkey":{"declarations":["nixos/modules/services/misc/gitolite.nix"],"description":"Initial administrative public key for Gitolite. This should\nbe an SSH Public Key. Note that this key will only be used\nonce, upon the first initialization of the Gitolite user.\nThe key string cannot have any line breaks in it.\n","loc":["services","gitolite","adminPubkey"],"readOnly":false,"type":"string"},"services.gitolite.commonHooks":{"declarations":["nixos/modules/services/misc/gitolite.nix"],"default":[],"description":"A list of custom git hooks that get copied to <literal>~/.gitolite/hooks/common</literal>.\n","loc":["services","gitolite","commonHooks"],"readOnly":false,"type":"list of paths"},"services.gitolite.dataDir":{"declarations":["nixos/modules/services/misc/gitolite.nix"],"default":"/var/lib/gitolite","description":"Gitolite home directory (used to store all the repositories).\n","loc":["services","gitolite","dataDir"],"readOnly":false,"type":"string"},"services.gitolite.enable":{"declarations":["nixos/modules/services/misc/gitolite.nix"],"default":false,"description":"Enable gitolite management under the\n<literal>gitolite</literal> user. After\nswitching to a configuration with Gitolite enabled, you can\nthen run <literal>git clone\ngitolite@host:gitolite-admin.git</literal> to manage it further.\n","loc":["services","gitolite","enable"],"readOnly":false,"type":"boolean"},"services.gitolite.enableGitAnnex":{"declarations":["nixos/modules/services/misc/gitolite.nix"],"default":false,"description":"Enable git-annex support. Uses the <literal>extraGitoliteRc</literal> option\nto apply the necessary configuration.\n","loc":["services","gitolite","enableGitAnnex"],"readOnly":false,"type":"boolean"},"services.gitolite.extraGitoliteRc":{"declarations":["nixos/modules/services/misc/gitolite.nix"],"default":"","description":"Extra configuration to append to the default <literal>~/.gitolite.rc</literal>.\n\nThis should be Perl code that modifies the <literal>%RC</literal>\nconfiguration variable. The default <literal>~/.gitolite.rc</literal>\ncontent is generated by invoking <literal>gitolite print-default-rc</literal>,\nand extra configuration from this option is appended to it. The result\nis placed to Nix store, and the <literal>~/.gitolite.rc</literal> file\nbecomes a symlink to it.\n\nIf you already have a customized (or otherwise changed)\n<literal>~/.gitolite.rc</literal> file, NixOS will refuse to replace\nit with a symlink, and the `gitolite-init` initialization service\nwill fail. In this situation, in order to use this option, you\nwill need to take any customizations you may have in\n<literal>~/.gitolite.rc</literal>, convert them to appropriate Perl\nstatements, add them to this option, and remove the file.\n\nSee also the <literal>enableGitAnnex</literal> option.\n","example":{"_type":"literalExample","text":"$RC{UMASK} = 0027;\n$RC{SITE_INFO} = 'This is our private repository host';\npush( @{$RC{ENABLE}}, 'Kindergarten' ); # enable the command/feature\n@{$RC{ENABLE}} = grep { $_ ne 'desc' } @{$RC{ENABLE}}; # disable the command/feature\n"},"loc":["services","gitolite","extraGitoliteRc"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.gitolite.group":{"declarations":["nixos/modules/services/misc/gitolite.nix"],"default":"gitolite","description":"Primary group of the Gitolite user account.\n","loc":["services","gitolite","group"],"readOnly":false,"type":"string"},"services.gitolite.user":{"declarations":["nixos/modules/services/misc/gitolite.nix"],"default":"gitolite","description":"Gitolite user account. This is the username of the gitolite endpoint.\n","loc":["services","gitolite","user"],"readOnly":false,"type":"string"},"services.gitweb.extraConfig":{"declarations":["nixos/modules/services/misc/gitweb.nix"],"default":"","description":"Verbatim configuration text appended to the generated gitweb.conf file.\n","example":"$feature{'highlight'}{'default'} = [1];\n$feature{'ctags'}{'default'} = [1];\n$feature{'avatar'}{'default'} = ['gravatar'];\n","loc":["services","gitweb","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.gitweb.gitwebTheme":{"declarations":["nixos/modules/services/misc/gitweb.nix"],"default":false,"description":"Use an alternative theme for gitweb, strongly inspired by GitHub.\n","loc":["services","gitweb","gitwebTheme"],"readOnly":false,"type":"boolean"},"services.gitweb.projectroot":{"declarations":["nixos/modules/services/misc/gitweb.nix"],"default":"/srv/git","description":"Path to git projects (bare repositories) that should be served by\ngitweb. Must not end with a slash.\n","loc":["services","gitweb","projectroot"],"readOnly":false,"type":"path"},"services.glusterfs.enable":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":false,"description":"Whether to enable GlusterFS Daemon.","example":true,"loc":["services","glusterfs","enable"],"readOnly":false,"type":"boolean"},"services.glusterfs.enableGlustereventsd":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":true,"description":"Whether to enable the GlusterFS Events Daemon","loc":["services","glusterfs","enableGlustereventsd"],"readOnly":false,"type":"boolean"},"services.glusterfs.extraFlags":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":[],"description":"Extra flags passed to the GlusterFS daemon","loc":["services","glusterfs","extraFlags"],"readOnly":false,"type":"list of strings"},"services.glusterfs.killMode":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":"control-group","description":"The systemd KillMode to use for glusterd.\n\nglusterd spawns other daemons like gsyncd.\nIf you want these to stop when glusterd is stopped (e.g. to ensure\nthat NixOS config changes are reflected even for these sub-daemons),\nset this to 'control-group'.\nIf however you want running volume processes (glusterfsd) and thus\ngluster mounts not be interrupted when glusterd is restarted\n(for example, when you want to restart them manually at a later time),\nset this to 'process'.\n","loc":["services","glusterfs","killMode"],"readOnly":false,"type":"one of \"control-group\", \"process\", \"mixed\", \"none\""},"services.glusterfs.logLevel":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":"INFO","description":"Log level used by the GlusterFS daemon","loc":["services","glusterfs","logLevel"],"readOnly":false,"type":"one of \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\", \"TRACE\", \"NONE\""},"services.glusterfs.stopKillTimeout":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":"5s","description":"The systemd TimeoutStopSec to use.\n\nAfter this time after having been asked to shut down, glusterd\n(and depending on the killMode setting also its child processes)\nare killed by systemd.\n\nThe default is set low because GlusterFS (as of 3.10) is known to\nnot tell its children (like gsyncd) to terminate at all.\n","loc":["services","glusterfs","stopKillTimeout"],"readOnly":false,"type":"string"},"services.glusterfs.tlsSettings":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":null,"description":"Make the server communicate via TLS.\nThis means it will only connect to other gluster\nservers having certificates signed by the same CA.\n\nEnabling this will create a file <filename>/var/lib/glusterd/secure-access</filename>.\nDisabling will delete this file again.\n\nSee also: https://gluster.readthedocs.io/en/latest/Administrator%20Guide/SSL/\n","loc":["services","glusterfs","tlsSettings"],"readOnly":false,"type":"null or submodule"},"services.glusterfs.tlsSettings.caCert":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":null,"description":"Path certificate authority used to sign the cluster certificates.","loc":["services","glusterfs","tlsSettings","caCert"],"readOnly":false,"type":"path"},"services.glusterfs.tlsSettings.tlsKeyPath":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":null,"description":"Path to the private key used for TLS.","loc":["services","glusterfs","tlsSettings","tlsKeyPath"],"readOnly":false,"type":"string"},"services.glusterfs.tlsSettings.tlsPem":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":null,"description":"Path to the certificate used for TLS.","loc":["services","glusterfs","tlsSettings","tlsPem"],"readOnly":false,"type":"path"},"services.glusterfs.useRpcbind":{"declarations":["nixos/modules/services/network-filesystems/glusterfs.nix"],"default":true,"description":"Enable use of rpcbind. This is required for Gluster's NFS functionality.\n\nYou may want to turn it off to reduce the attack surface for DDoS reflection attacks.\n\nSee https://davelozier.com/glusterfs-and-rpcbind-portmap-ddos-reflection-attacks/\nand https://bugzilla.redhat.com/show_bug.cgi?id=1426842 for details.\n","loc":["services","glusterfs","useRpcbind"],"readOnly":false,"type":"boolean"},"services.gnome3.at-spi2-core.enable":{"declarations":["nixos/modules/services/desktops/gnome3/at-spi2-core.nix"],"default":false,"description":"Whether to enable at-spi2-core, a service for the Assistive Technologies\navailable on the GNOME platform.\n","loc":["services","gnome3","at-spi2-core","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.chrome-gnome-shell.enable":{"declarations":["nixos/modules/services/desktops/gnome3/chrome-gnome-shell.nix"],"default":false,"description":"Whether to enable Chrome GNOME Shell native host connector, a DBus service\nallowing to install GNOME Shell extensions from a web browser.\n.","example":true,"loc":["services","gnome3","chrome-gnome-shell","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.evolution-data-server.enable":{"declarations":["nixos/modules/services/desktops/gnome3/evolution-data-server.nix"],"default":false,"description":"Whether to enable Evolution Data Server, a collection of services for \nstoring addressbooks and calendars.\n","loc":["services","gnome3","evolution-data-server","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gnome-disks.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gnome-disks.nix"],"default":false,"description":"Whether to enable GNOME Disks daemon, a service designed to\nbe a UDisks2 graphical front-end.\n","loc":["services","gnome3","gnome-disks","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gnome-documents.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gnome-documents.nix"],"default":false,"description":"Whether to enable GNOME Documents services, a document\nmanager application for GNOME.\n","loc":["services","gnome3","gnome-documents","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gnome-keyring.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gnome-keyring.nix"],"default":false,"description":"Whether to enable GNOME Keyring daemon, a service designed to\ntake care of the user's security credentials,\nsuch as user names and passwords.\n","loc":["services","gnome3","gnome-keyring","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gnome-online-accounts.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gnome-online-accounts.nix"],"default":false,"description":"Whether to enable GNOME Online Accounts daemon, a service that provides\na single sign-on framework for the GNOME desktop.\n","loc":["services","gnome3","gnome-online-accounts","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gnome-online-miners.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gnome-online-miners.nix"],"default":false,"description":"Whether to enable GNOME Online Miners, a service that\ncrawls through your online content.\n","loc":["services","gnome3","gnome-online-miners","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gnome-terminal-server.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gnome-terminal-server.nix"],"default":false,"description":"Whether to enable GNOME Terminal server service,\nneeded for gnome-terminal.\n","loc":["services","gnome3","gnome-terminal-server","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gnome-user-share.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gnome-user-share.nix"],"default":false,"description":"Whether to enable GNOME User Share, a service that exports the\ncontents of the Public folder in your home directory on the local network.\n","loc":["services","gnome3","gnome-user-share","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gpaste.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gpaste.nix"],"default":false,"description":"Whether to enable GPaste, a clipboard manager.\n","loc":["services","gnome3","gpaste","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.gvfs.enable":{"declarations":["nixos/modules/services/desktops/gnome3/gvfs.nix"],"default":false,"description":"Whether to enable gvfs backends, userspace virtual filesystem used\nby GNOME components via D-Bus.\n","loc":["services","gnome3","gvfs","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.rygel.enable":{"declarations":["nixos/modules/services/desktops/gnome3/rygel.nix"],"default":false,"description":"Whether to enable Rygel UPnP Mediaserver.\n\nYou will need to also allow UPnP connections in firewall, see the following <link xlink:href=\"https://github.com/NixOS/nixpkgs/pull/45045#issuecomment-416030795\">comment</link>.\n","loc":["services","gnome3","rygel","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.seahorse.enable":{"declarations":["nixos/modules/services/desktops/gnome3/seahorse.nix"],"default":false,"description":"Whether to enable Seahorse search provider for the GNOME Shell activity search.\n","loc":["services","gnome3","seahorse","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.sushi.enable":{"declarations":["nixos/modules/services/desktops/gnome3/sushi.nix"],"default":false,"description":"Whether to enable Sushi, a quick previewer for nautilus.\n","loc":["services","gnome3","sushi","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.tracker-miners.enable":{"declarations":["nixos/modules/services/desktops/gnome3/tracker-miners.nix"],"default":false,"description":"Whether to enable Tracker miners, indexing services for Tracker\nsearch engine and metadata storage system.\n","loc":["services","gnome3","tracker-miners","enable"],"readOnly":false,"type":"boolean"},"services.gnome3.tracker.enable":{"declarations":["nixos/modules/services/desktops/gnome3/tracker.nix"],"default":false,"description":"Whether to enable Tracker services, a search engine,\nsearch tool and metadata storage system.\n","loc":["services","gnome3","tracker","enable"],"readOnly":false,"type":"boolean"},"services.gnunet.enable":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":false,"description":"Whether to run the GNUnet daemon.  GNUnet is GNU's anonymous\npeer-to-peer communication and file sharing framework.\n","loc":["services","gnunet","enable"],"readOnly":false,"type":"unspecified"},"services.gnunet.extraOptions":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":"","description":"Additional options that will be copied verbatim in `gnunet.conf'.\nSee `gnunet.conf(5)' for details.\n","loc":["services","gnunet","extraOptions"],"readOnly":false,"type":"unspecified"},"services.gnunet.fileSharing.quota":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":1024,"description":"Maximum file system usage (in MiB) for file sharing.\n","loc":["services","gnunet","fileSharing","quota"],"readOnly":false,"type":"unspecified"},"services.gnunet.load.hardNetUpBandwidth":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":0,"description":"Hard bandwidth limit (in bits per second) when uploading\ndata.\n","loc":["services","gnunet","load","hardNetUpBandwidth"],"readOnly":false,"type":"unspecified"},"services.gnunet.load.maxNetDownBandwidth":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":50000,"description":"Maximum bandwidth usage (in bits per second) for GNUnet\nwhen downloading data.\n","loc":["services","gnunet","load","maxNetDownBandwidth"],"readOnly":false,"type":"unspecified"},"services.gnunet.load.maxNetUpBandwidth":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":50000,"description":"Maximum bandwidth usage (in bits per second) for GNUnet\nwhen downloading data.\n","loc":["services","gnunet","load","maxNetUpBandwidth"],"readOnly":false,"type":"unspecified"},"services.gnunet.package":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":"pkgs.gnunet","description":"Overridable attribute of the gnunet package to use.","example":{"_type":"literalExample","text":"pkgs.gnunet_git"},"loc":["services","gnunet","package"],"readOnly":false,"type":"package"},"services.gnunet.tcp.port":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":2086,"description":"The TCP port for use by GNUnet.\n","loc":["services","gnunet","tcp","port"],"readOnly":false,"type":"unspecified"},"services.gnunet.udp.port":{"declarations":["nixos/modules/services/networking/gnunet.nix"],"default":2086,"description":"The UDP port for use by GNUnet.\n","loc":["services","gnunet","udp","port"],"readOnly":false,"type":"unspecified"},"services.gocd-agent.agentConfig":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":"","description":"Agent registration configuration.\n","example":"agent.auto.register.resources=ant,java\nagent.auto.register.environments=QA,Performance\nagent.auto.register.hostname=Agent01\n","loc":["services","gocd-agent","agentConfig"],"readOnly":false,"type":"string"},"services.gocd-agent.enable":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":false,"description":"Whether to enable gocd-agent.","example":true,"loc":["services","gocd-agent","enable"],"readOnly":false,"type":"boolean"},"services.gocd-agent.environment":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":{},"description":"Additional environment variables to be passed to the Go.CD agent process.\nAs a base environment, Go.CD agent receives NIX_PATH from\n<option>environment.sessionVariables</option>, NIX_REMOTE is set to\n\"daemon\".\n","loc":["services","gocd-agent","environment"],"readOnly":false,"type":"attribute set of strings"},"services.gocd-agent.extraGroups":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":[],"description":"List of extra groups that the \"gocd-agent\" user should be a part of.\n","example":["wheel","docker"],"loc":["services","gocd-agent","extraGroups"],"readOnly":false,"type":"list of strings"},"services.gocd-agent.extraOptions":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":[],"description":"Specifies additional command line arguments to pass to Go.CD agent\njava process.  Example contains debug and gcLog arguments.\n","example":["-X debug","-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5006","-verbose:gc","-Xloggc:go-agent-gc.log","-XX:+PrintGCTimeStamps","-XX:+PrintTenuringDistribution","-XX:+PrintGCDetails","-XX:+PrintGC"],"loc":["services","gocd-agent","extraOptions"],"readOnly":false,"type":"unspecified"},"services.gocd-agent.goServer":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":"https://127.0.0.1:8154/go","description":"URL of the GoCD Server to attach the Go.CD Agent to.\n","loc":["services","gocd-agent","goServer"],"readOnly":false,"type":"string"},"services.gocd-agent.group":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":"gocd-agent","description":"If the default user \"gocd-agent\" is configured then this is the primary\ngroup of that user.\n","loc":["services","gocd-agent","group"],"readOnly":false,"type":"string"},"services.gocd-agent.initialJavaHeapSize":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":"128m","description":"Specifies the initial java heap memory size for the Go.CD agent java process.\n","loc":["services","gocd-agent","initialJavaHeapSize"],"readOnly":false,"type":"string"},"services.gocd-agent.maxJavaHeapMemory":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":"256m","description":"Specifies the java maximum heap memory size for the Go.CD agent java process.\n","loc":["services","gocd-agent","maxJavaHeapMemory"],"readOnly":false,"type":"string"},"services.gocd-agent.packages":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":"[ pkgs.stdenv pkgs.jre pkgs.git config.programs.ssh.package pkgs.nix ]","description":"Packages to add to PATH for the Go.CD agent process.\n","loc":["services","gocd-agent","packages"],"readOnly":false,"type":"list of packages"},"services.gocd-agent.startupOptions":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":["-Xms128m","-Xmx256m","-Djava.io.tmpdir=/tmp","-Dcruise.console.publish.interval=10","-Djava.security.egd=file:/dev/./urandom"],"description":"Specifies startup command line arguments to pass to Go.CD agent\njava process.\n","loc":["services","gocd-agent","startupOptions"],"readOnly":false,"type":"unspecified"},"services.gocd-agent.user":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":"gocd-agent","description":"User the Go.CD agent should execute under.\n","loc":["services","gocd-agent","user"],"readOnly":false,"type":"string"},"services.gocd-agent.workDir":{"declarations":["nixos/modules/services/continuous-integration/gocd-agent/default.nix"],"default":"/var/lib/go-agent","description":"Specifies the working directory in which the Go.CD agent java archive resides.\n","loc":["services","gocd-agent","workDir"],"readOnly":false,"type":"string"},"services.gocd-server.enable":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":false,"description":"Whether to enable gocd-server.","example":true,"loc":["services","gocd-server","enable"],"readOnly":false,"type":"boolean"},"services.gocd-server.environment":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":{},"description":"Additional environment variables to be passed to the gocd-server process.\nAs a base environment, gocd-server receives NIX_PATH from\n<option>environment.sessionVariables</option>, NIX_REMOTE is set to\n\"daemon\".\n","loc":["services","gocd-server","environment"],"readOnly":false,"type":"attribute set of strings"},"services.gocd-server.extraGroups":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":[],"description":"List of extra groups that the \"gocd-server\" user should be a part of.\n","example":["wheel","docker"],"loc":["services","gocd-server","extraGroups"],"readOnly":false,"type":"unspecified"},"services.gocd-server.extraOptions":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":[],"description":"Specifies additional command line arguments to pass to Go.CD server's\njava process.  Example contains debug and gcLog arguments.\n","example":["-X debug","-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005","-verbose:gc","-Xloggc:go-server-gc.log","-XX:+PrintGCTimeStamps","-XX:+PrintTenuringDistribution","-XX:+PrintGCDetails","-XX:+PrintGC"],"loc":["services","gocd-server","extraOptions"],"readOnly":false,"type":"unspecified"},"services.gocd-server.group":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":"gocd-server","description":"If the default user \"gocd-server\" is configured then this is the primary group of that user.\n","loc":["services","gocd-server","group"],"readOnly":false,"type":"string"},"services.gocd-server.initialJavaHeapSize":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":"512m","description":"Specifies the initial java heap memory size for the Go.CD server's java process.\n","loc":["services","gocd-server","initialJavaHeapSize"],"readOnly":false,"type":"string"},"services.gocd-server.listenAddress":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":"0.0.0.0","description":"Specifies the bind address on which the Go.CD server HTTP interface listens.\n","example":"localhost","loc":["services","gocd-server","listenAddress"],"readOnly":false,"type":"string"},"services.gocd-server.maxJavaHeapMemory":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":"1024m","description":"Specifies the java maximum heap memory size for the Go.CD server's java process.\n","loc":["services","gocd-server","maxJavaHeapMemory"],"readOnly":false,"type":"string"},"services.gocd-server.packages":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":"[ pkgs.stdenv pkgs.jre pkgs.git config.programs.ssh.package pkgs.nix ]","description":"Packages to add to PATH for the Go.CD server's process.\n","loc":["services","gocd-server","packages"],"readOnly":false,"type":"list of packages"},"services.gocd-server.port":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":8153,"description":"Specifies port number on which the Go.CD server HTTP interface listens.\n","loc":["services","gocd-server","port"],"readOnly":false,"type":"signed integer"},"services.gocd-server.sslPort":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":8154,"description":"Specifies port number on which the Go.CD server HTTPS interface listens.\n","loc":["services","gocd-server","sslPort"],"readOnly":false,"type":"signed integer"},"services.gocd-server.startupOptions":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":["-Xms512m","-Xmx1024m","-Dcruise.listen.host=0.0.0.0","-Duser.language=en","-Djruby.rack.request.size.threshold.bytes=30000000","-Duser.country=US","-Dcruise.config.dir=/var/lib/go-server/conf","-Dcruise.config.file=/var/lib/go-server/conf/cruise-config.xml","-Dcruise.server.port=8153","-Dcruise.server.ssl.port=8154"],"description":"Specifies startup command line arguments to pass to Go.CD server\njava process.\n","loc":["services","gocd-server","startupOptions"],"readOnly":false,"type":"unspecified"},"services.gocd-server.user":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":"gocd-server","description":"User the Go.CD server should execute under.\n","loc":["services","gocd-server","user"],"readOnly":false,"type":"string"},"services.gocd-server.workDir":{"declarations":["nixos/modules/services/continuous-integration/gocd-server/default.nix"],"default":"/var/lib/go-server","description":"Specifies the working directory in which the Go.CD server java archive resides.\n","loc":["services","gocd-server","workDir"],"readOnly":false,"type":"string"},"services.gogoclient.autorun":{"declarations":["nixos/modules/services/networking/gogoclient.nix"],"default":true,"description":"Whether to automatically start the tunnel.\n","loc":["services","gogoclient","autorun"],"readOnly":false,"type":"unspecified"},"services.gogoclient.enable":{"declarations":["nixos/modules/services/networking/gogoclient.nix"],"default":false,"description":"Enable the gogoCLIENT IPv6 tunnel.\n","loc":["services","gogoclient","enable"],"readOnly":false,"type":"boolean"},"services.gogoclient.password":{"declarations":["nixos/modules/services/networking/gogoclient.nix"],"default":"","description":"Path to a file (as a string), containing your gogoNET password, if any.\n","loc":["services","gogoclient","password"],"readOnly":false,"type":"Concatenated string"},"services.gogoclient.server":{"declarations":["nixos/modules/services/networking/gogoclient.nix"],"default":"anonymous.freenet6.net","description":"The Gateway6 server to be used.","example":"broker.freenet6.net","loc":["services","gogoclient","server"],"readOnly":false,"type":"unspecified"},"services.gogoclient.username":{"declarations":["nixos/modules/services/networking/gogoclient.nix"],"default":"","description":"Your Gateway6 login name, if any.\n","loc":["services","gogoclient","username"],"readOnly":false,"type":"unspecified"},"services.gogs.appName":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"Gogs: Go Git Service","description":"Application name.","loc":["services","gogs","appName"],"readOnly":false,"type":"string"},"services.gogs.cookieSecure":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":false,"description":"Marks session cookies as \"secure\" as a hint for browsers to only send\nthem via HTTPS. This option is recommend, if Gogs is being served over HTTPS.\n","loc":["services","gogs","cookieSecure"],"readOnly":false,"type":"boolean"},"services.gogs.database.host":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"127.0.0.1","description":"Database host address.","loc":["services","gogs","database","host"],"readOnly":false,"type":"string"},"services.gogs.database.name":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"gogs","description":"Database name.","loc":["services","gogs","database","name"],"readOnly":false,"type":"string"},"services.gogs.database.password":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"","description":"The password corresponding to <option>database.user</option>.\nWarning: this is stored in cleartext in the Nix store!\nUse <option>database.passwordFile</option> instead.\n","loc":["services","gogs","database","password"],"readOnly":false,"type":"string"},"services.gogs.database.passwordFile":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":null,"description":"A file containing the password corresponding to\n<option>database.user</option>.\n","example":"/run/keys/gogs-dbpassword","loc":["services","gogs","database","passwordFile"],"readOnly":false,"type":"null or path"},"services.gogs.database.path":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"/var/lib/gogs/data/gogs.db","description":"Path to the sqlite3 database file.","loc":["services","gogs","database","path"],"readOnly":false,"type":"string"},"services.gogs.database.port":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":3306,"description":"Database host port.","loc":["services","gogs","database","port"],"readOnly":false,"type":"signed integer"},"services.gogs.database.type":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"sqlite3","description":"Database engine to use.","example":"mysql","loc":["services","gogs","database","type"],"readOnly":false,"type":"one of \"sqlite3\", \"mysql\", \"postgres\""},"services.gogs.database.user":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"gogs","description":"Database user.","loc":["services","gogs","database","user"],"readOnly":false,"type":"string"},"services.gogs.domain":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"localhost","description":"Domain name of your server.","loc":["services","gogs","domain"],"readOnly":false,"type":"string"},"services.gogs.enable":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":false,"description":"Enable Go Git Service.","loc":["services","gogs","enable"],"readOnly":false,"type":"boolean"},"services.gogs.extraConfig":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"","description":"Configuration lines appended to the generated Gogs configuration file.","loc":["services","gogs","extraConfig"],"readOnly":false,"type":"string"},"services.gogs.group":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"gogs","description":"Group account under which Gogs runs.","loc":["services","gogs","group"],"readOnly":false,"type":"string"},"services.gogs.httpAddress":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"0.0.0.0","description":"HTTP listen address.","loc":["services","gogs","httpAddress"],"readOnly":false,"type":"string"},"services.gogs.httpPort":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":3000,"description":"HTTP listen port.","loc":["services","gogs","httpPort"],"readOnly":false,"type":"signed integer"},"services.gogs.repositoryRoot":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"/var/lib/gogs/repositories","description":"Path to the git repositories.","loc":["services","gogs","repositoryRoot"],"readOnly":false,"type":"string"},"services.gogs.rootUrl":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"http://localhost:3000/","description":"Full public URL of Gogs server.","loc":["services","gogs","rootUrl"],"readOnly":false,"type":"string"},"services.gogs.stateDir":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"/var/lib/gogs","description":"Gogs data directory.","loc":["services","gogs","stateDir"],"readOnly":false,"type":"string"},"services.gogs.staticRootPath":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"${pkgs.gogs.data}","description":"Upper level of template and static files path.","example":"/var/lib/gogs/data","loc":["services","gogs","staticRootPath"],"readOnly":false,"type":"string"},"services.gogs.useWizard":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":false,"description":"Do not generate a configuration and use Gogs' installation wizard instead. The first registered user will be administrator.","loc":["services","gogs","useWizard"],"readOnly":false,"type":"boolean"},"services.gogs.user":{"declarations":["nixos/modules/services/misc/gogs.nix"],"default":"gogs","description":"User account under which Gogs runs.","loc":["services","gogs","user"],"readOnly":false,"type":"string"},"services.gollum.address":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":"0.0.0.0","description":"IP address on which the web server will listen.","loc":["services","gollum","address"],"readOnly":false,"type":"string"},"services.gollum.allowUploads":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":null,"description":"Enable uploads of external files","loc":["services","gollum","allowUploads"],"readOnly":false,"type":"null or one of \"dir\", \"page\""},"services.gollum.branch":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":"master","description":"Git branch to serve","example":"develop","loc":["services","gollum","branch"],"readOnly":false,"type":"string"},"services.gollum.emoji":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":false,"description":"Parse and interpret emoji tags","loc":["services","gollum","emoji"],"readOnly":false,"type":"boolean"},"services.gollum.enable":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":false,"description":"Enable the Gollum service.","loc":["services","gollum","enable"],"readOnly":false,"type":"boolean"},"services.gollum.extraConfig":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":"","description":"Content of the configuration file","loc":["services","gollum","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.gollum.mathjax":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":false,"description":"Enable support for math rendering using MathJax","loc":["services","gollum","mathjax"],"readOnly":false,"type":"boolean"},"services.gollum.port":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":4567,"description":"Port on which the web server will run.","loc":["services","gollum","port"],"readOnly":false,"type":"signed integer"},"services.gollum.stateDir":{"declarations":["nixos/modules/services/misc/gollum.nix"],"default":"/var/lib/gollum","description":"Specifies the path of the repository directory. If it does not exist, Gollum will create it on startup.","loc":["services","gollum","stateDir"],"readOnly":false,"type":"path"},"services.gpm.enable":{"declarations":["nixos/modules/services/ttys/gpm.nix"],"default":false,"description":"Whether to enable GPM, the General Purpose Mouse daemon,\nwhich enables mouse support in virtual consoles.\n","loc":["services","gpm","enable"],"readOnly":false,"type":"boolean"},"services.gpm.protocol":{"declarations":["nixos/modules/services/ttys/gpm.nix"],"default":"ps/2","description":"Mouse protocol to use.","loc":["services","gpm","protocol"],"readOnly":false,"type":"string"},"services.gpsd.debugLevel":{"declarations":["nixos/modules/services/misc/gpsd.nix"],"default":0,"description":"The debugging level.\n","loc":["services","gpsd","debugLevel"],"readOnly":false,"type":"signed integer"},"services.gpsd.device":{"declarations":["nixos/modules/services/misc/gpsd.nix"],"default":"/dev/ttyUSB0","description":"A device may be a local serial device for GPS input, or a URL of the form:\n     <literal>[{dgpsip|ntrip}://][user:passwd@]host[:port][/stream]</literal>\nin which case it specifies an input source for DGPS or ntrip data.\n","loc":["services","gpsd","device"],"readOnly":false,"type":"string"},"services.gpsd.enable":{"declarations":["nixos/modules/services/misc/gpsd.nix"],"default":false,"description":"Whether to enable `gpsd', a GPS service daemon.\n","loc":["services","gpsd","enable"],"readOnly":false,"type":"boolean"},"services.gpsd.nowait":{"declarations":["nixos/modules/services/misc/gpsd.nix"],"default":false,"description":"don't wait for client connects to poll GPS\n","loc":["services","gpsd","nowait"],"readOnly":false,"type":"boolean"},"services.gpsd.port":{"declarations":["nixos/modules/services/misc/gpsd.nix"],"default":2947,"description":"The port where to listen for TCP connections.\n","loc":["services","gpsd","port"],"readOnly":false,"type":"signed integer"},"services.gpsd.readonly":{"declarations":["nixos/modules/services/misc/gpsd.nix"],"default":true,"description":"Whether to enable the broken-device-safety, otherwise\nknown as read-only mode.  Some popular bluetooth and USB\nreceivers lock up or become totally inaccessible when\nprobed or reconfigured.  This switch prevents gpsd from\nwriting to a receiver.  This means that gpsd cannot\nconfigure the receiver for optimal performance, but it\nalso means that gpsd cannot break the receiver.  A better\nsolution would be for Bluetooth to not be so fragile.  A\nplatform independent method to identify\nserial-over-Bluetooth devices would also be nice.\n","loc":["services","gpsd","readonly"],"readOnly":false,"type":"boolean"},"services.grafana.addr":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"127.0.0.1","description":"Listening address.","loc":["services","grafana","addr"],"readOnly":false,"type":"string"},"services.grafana.analytics.reporting.enable":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":true,"description":"Whether to allow anonymous usage reporting to stats.grafana.net","loc":["services","grafana","analytics","reporting","enable"],"readOnly":false,"type":"boolean"},"services.grafana.auth.anonymous.enable":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":false,"description":"Whether to allow anonymous access","loc":["services","grafana","auth","anonymous","enable"],"readOnly":false,"type":"boolean"},"services.grafana.auth.anonymous.org_name":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"Main Org.","description":"Which organization to allow anonymous access to","loc":["services","grafana","auth","anonymous","org_name"],"readOnly":false,"type":"string"},"services.grafana.auth.anonymous.org_role":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"Viewer","description":"Which role anonymous users have in the organization","loc":["services","grafana","auth","anonymous","org_role"],"readOnly":false,"type":"string"},"services.grafana.certFile":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"","description":"Cert file for ssl.","loc":["services","grafana","certFile"],"readOnly":false,"type":"string"},"services.grafana.certKey":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"","description":"Cert key for ssl.","loc":["services","grafana","certKey"],"readOnly":false,"type":"string"},"services.grafana.dataDir":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"/var/lib/grafana","description":"Data directory.","loc":["services","grafana","dataDir"],"readOnly":false,"type":"path"},"services.grafana.database.connMaxLifetime":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":14400,"description":"Sets the maximum amount of time (in seconds) a connection may be reused.\nFor MySQL this setting should be shorter than the `wait_timeout' variable.\n","loc":["services","grafana","database","connMaxLifetime"],"readOnly":false,"type":"signed integer"},"services.grafana.database.host":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"127.0.0.1:3306","description":"Database host.","loc":["services","grafana","database","host"],"readOnly":false,"type":"string"},"services.grafana.database.name":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"grafana","description":"Database name.","loc":["services","grafana","database","name"],"readOnly":false,"type":"string"},"services.grafana.database.password":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"","description":"Database password.","loc":["services","grafana","database","password"],"readOnly":false,"type":"string"},"services.grafana.database.path":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"/var/lib/grafana/data/grafana.db","description":"Database path.","loc":["services","grafana","database","path"],"readOnly":false,"type":"path"},"services.grafana.database.type":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"sqlite3","description":"Database type.","loc":["services","grafana","database","type"],"readOnly":false,"type":"one of \"mysql\", \"sqlite3\", \"postgres\""},"services.grafana.database.user":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"root","description":"Database user.","loc":["services","grafana","database","user"],"readOnly":false,"type":"string"},"services.grafana.domain":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"localhost","description":"The public facing domain name used to access grafana from a browser.","loc":["services","grafana","domain"],"readOnly":false,"type":"string"},"services.grafana.enable":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":false,"description":"Whether to enable grafana.","example":true,"loc":["services","grafana","enable"],"readOnly":false,"type":"boolean"},"services.grafana.extraOptions":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":{},"description":"Extra configuration options passed as env variables as specified in\n<link xlink:href=\"http://docs.grafana.org/installation/configuration/\">documentation</link>,\nbut without GF_ prefix\n","loc":["services","grafana","extraOptions"],"readOnly":false,"type":"attribute set of string or paths"},"services.grafana.package":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"pkgs.grafana","description":"Package to use.","loc":["services","grafana","package"],"readOnly":false,"type":"package"},"services.grafana.port":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":3000,"description":"Listening port.","loc":["services","grafana","port"],"readOnly":false,"type":"signed integer"},"services.grafana.protocol":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"http","description":"Which protocol to listen.","loc":["services","grafana","protocol"],"readOnly":false,"type":"one of \"http\", \"https\", \"socket\""},"services.grafana.rootUrl":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"%(protocol)s://%(domain)s:%(http_port)s/","description":"Full public facing url.","loc":["services","grafana","rootUrl"],"readOnly":false,"type":"string"},"services.grafana.security.adminPassword":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"admin","description":"Default admin password.","loc":["services","grafana","security","adminPassword"],"readOnly":false,"type":"string"},"services.grafana.security.adminUser":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"admin","description":"Default admin username.","loc":["services","grafana","security","adminUser"],"readOnly":false,"type":"string"},"services.grafana.security.secretKey":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"SW2YcwTIb9zpOOhoPsMm","description":"Secret key used for signing.","loc":["services","grafana","security","secretKey"],"readOnly":false,"type":"string"},"services.grafana.staticRootPath":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"${pkgs.grafana}/share/grafana/public","description":"Root path for static assets.","loc":["services","grafana","staticRootPath"],"readOnly":false,"type":"string"},"services.grafana.users.allowOrgCreate":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":false,"description":"Whether user is allowed to create organizations.","loc":["services","grafana","users","allowOrgCreate"],"readOnly":false,"type":"boolean"},"services.grafana.users.allowSignUp":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":false,"description":"Disable user signup / registration","loc":["services","grafana","users","allowSignUp"],"readOnly":false,"type":"boolean"},"services.grafana.users.autoAssignOrg":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":true,"description":"Whether to automatically assign new users to default org.","loc":["services","grafana","users","autoAssignOrg"],"readOnly":false,"type":"boolean"},"services.grafana.users.autoAssignOrgRole":{"declarations":["nixos/modules/services/monitoring/grafana.nix"],"default":"Viewer","description":"Default role new users will be auto assigned.","loc":["services","grafana","users","autoAssignOrgRole"],"readOnly":false,"type":"one of \"Viewer\", \"Editor\""},"services.graphite.api.enable":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":false,"description":"Whether to enable graphite api. Graphite api is lightweight alternative\nto graphite web, with api and without dashboard. It's advised to use\ngrafana as alternative dashboard and influxdb as alternative to\ngraphite carbon.\n\nFor more information visit\n<link xlink:href=\"http://graphite-api.readthedocs.org/en/latest/\"/>\n","loc":["services","graphite","api","enable"],"readOnly":false,"type":"boolean"},"services.graphite.api.extraConfig":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"whisper:\n  directories:\n      - /var/db/graphite/whisper\n","description":"Extra configuration for graphite api.","example":"allowed_origins:\n  - dashboard.example.com\ncheat_times: true\ninfluxdb:\n  host: localhost\n  port: 8086\n  user: influxdb\n  pass: influxdb\n  db: metrics\ncache:\n  CACHE_TYPE: 'filesystem'\n  CACHE_DIR: '/tmp/graphite-api-cache'\n","loc":["services","graphite","api","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.graphite.api.finders":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":[],"description":"List of finder plugins to load.","example":{"_type":"literalExample","text":"[ pkgs.python27Packages.influxgraph ]"},"loc":["services","graphite","api","finders"],"readOnly":false,"type":"list of packages"},"services.graphite.api.functions":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":["graphite_api.functions.SeriesFunctions","graphite_api.functions.PieFunctions"],"description":"List of functions to load.","loc":["services","graphite","api","functions"],"readOnly":false,"type":"list of strings"},"services.graphite.api.listenAddress":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"127.0.0.1","description":"Graphite web service listen address.","loc":["services","graphite","api","listenAddress"],"readOnly":false,"type":"string"},"services.graphite.api.package":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"pkgs.python27Packages.graphite_api","description":"Package to use for graphite api.","loc":["services","graphite","api","package"],"readOnly":false,"type":"package"},"services.graphite.api.port":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":8080,"description":"Graphite api service port.","loc":["services","graphite","api","port"],"readOnly":false,"type":"signed integer"},"services.graphite.beacon.config":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":{},"description":"Graphite beacon configuration.","loc":["services","graphite","beacon","config"],"readOnly":false,"type":"attribute set"},"services.graphite.beacon.enable":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":false,"description":"Whether to enable graphite beacon.","example":true,"loc":["services","graphite","beacon","enable"],"readOnly":false,"type":"boolean"},"services.graphite.carbon.aggregationRules":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":null,"description":"Defines if and how received metrics will be aggregated.","example":"<env>.applications.<app>.all.requests (60) = sum <env>.applications.<app>.*.requests\n<env>.applications.<app>.all.latency (60) = avg <env>.applications.<app>.*.latency\n","loc":["services","graphite","carbon","aggregationRules"],"readOnly":false,"type":"null or Concatenated string"},"services.graphite.carbon.blacklist":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":null,"description":"Any metrics received which match one of the experssions will be dropped.","example":"^some.noisy.metric.prefix..*","loc":["services","graphite","carbon","blacklist"],"readOnly":false,"type":"null or Concatenated string"},"services.graphite.carbon.config":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"[cache]\n# Listen on localhost by default for security reasons\nUDP_RECEIVER_INTERFACE = 127.0.0.1\nPICKLE_RECEIVER_INTERFACE = 127.0.0.1\nLINE_RECEIVER_INTERFACE = 127.0.0.1\nCACHE_QUERY_INTERFACE = 127.0.0.1\n# Do not log every update\nLOG_UPDATES = False\nLOG_CACHE_HITS = False\n","description":"Content of carbon configuration file.","loc":["services","graphite","carbon","config"],"readOnly":false,"type":"string"},"services.graphite.carbon.enableAggregator":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":false,"description":"Whether to enable carbon aggregator, the carbon buffering service.","loc":["services","graphite","carbon","enableAggregator"],"readOnly":false,"type":"boolean"},"services.graphite.carbon.enableCache":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":false,"description":"Whether to enable carbon cache, the graphite storage daemon.","loc":["services","graphite","carbon","enableCache"],"readOnly":false,"type":"boolean"},"services.graphite.carbon.enableRelay":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":false,"description":"Whether to enable carbon relay, the carbon replication and sharding service.","loc":["services","graphite","carbon","enableRelay"],"readOnly":false,"type":"boolean"},"services.graphite.carbon.relayRules":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":null,"description":"Relay rules are used to send certain metrics to a certain backend.","example":"[example]\npattern = ^mydata\\.foo\\..+\nservers = 10.1.2.3, 10.1.2.4:2004, myserver.mydomain.com\n","loc":["services","graphite","carbon","relayRules"],"readOnly":false,"type":"null or Concatenated string"},"services.graphite.carbon.rewriteRules":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":null,"description":"Regular expression patterns that can be used to rewrite metric names\nin a search and replace fashion.\n","example":"[post]\n_sum$ =\n_avg$ =\n","loc":["services","graphite","carbon","rewriteRules"],"readOnly":false,"type":"null or Concatenated string"},"services.graphite.carbon.storageAggregation":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":null,"description":"Defines how to aggregate data to lower-precision retentions.","example":"[all_min]\npattern = \\.min$\nxFilesFactor = 0.1\naggregationMethod = min\n","loc":["services","graphite","carbon","storageAggregation"],"readOnly":false,"type":"null or Concatenated string"},"services.graphite.carbon.storageSchemas":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"","description":"Defines retention rates for storing metrics.","example":"[apache_busyWorkers]\npattern = ^servers\\.www.*\\.workers\\.busyWorkers$\nretentions = 15s:7d,1m:21d,15m:5y\n","loc":["services","graphite","carbon","storageSchemas"],"readOnly":false,"type":"null or Concatenated string"},"services.graphite.carbon.whitelist":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":null,"description":"Only metrics received which match one of the experssions will be persisted.","example":".*","loc":["services","graphite","carbon","whitelist"],"readOnly":false,"type":"null or Concatenated string"},"services.graphite.dataDir":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"/var/db/graphite","description":"Data directory for graphite.\n","loc":["services","graphite","dataDir"],"readOnly":false,"type":"path"},"services.graphite.pager.alerts":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"alerts:\n  - target: constantLine(100)\n    warning: 90\n    critical: 200\n    name: Test\n","description":"Alerts configuration for graphite-pager.","example":"pushbullet_key: pushbullet_api_key\nalerts:\n  - target: stats.seatgeek.app.deal_quality.venue_info_cache.hit\n    warning: .5\n    critical: 1\n    name: Deal quality venue cache hits\n","loc":["services","graphite","pager","alerts"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.graphite.pager.enable":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":false,"description":"Whether to enable graphite-pager service. For more information visit\n<link xlink:href=\"https://github.com/seatgeek/graphite-pager\"/>\n","loc":["services","graphite","pager","enable"],"readOnly":false,"type":"boolean"},"services.graphite.pager.graphiteUrl":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"http://127.0.0.1:8080","description":"URL to your graphite service.","loc":["services","graphite","pager","graphiteUrl"],"readOnly":false,"type":"string"},"services.graphite.pager.redisUrl":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"redis://localhost:6379/","description":"Redis connection string.","loc":["services","graphite","pager","redisUrl"],"readOnly":false,"type":"string"},"services.graphite.seyren.enable":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":false,"description":"Whether to enable seyren service.","loc":["services","graphite","seyren","enable"],"readOnly":false,"type":"boolean"},"services.graphite.seyren.extraConfig":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":{},"description":"Extra seyren configuration. See\n<link xlink:href='https://github.com/scobal/seyren#config' />\n","example":{"_type":"literalExample","text":"{\n  GRAPHITE_USERNAME = \"user\";\n  GRAPHITE_PASSWORD = \"pass\";\n}\n"},"loc":["services","graphite","seyren","extraConfig"],"readOnly":false,"type":"attribute set of strings"},"services.graphite.seyren.graphiteUrl":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"http://127.0.0.1:8080","description":"Host where graphite service runs.","loc":["services","graphite","seyren","graphiteUrl"],"readOnly":false,"type":"string"},"services.graphite.seyren.mongoUrl":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"mongodb://127.0.0.1:27017/seyren","description":"Mongodb connection string.","loc":["services","graphite","seyren","mongoUrl"],"readOnly":false,"type":"string"},"services.graphite.seyren.port":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":8081,"description":"Seyren listening port.","loc":["services","graphite","seyren","port"],"readOnly":false,"type":"signed integer"},"services.graphite.seyren.seyrenUrl":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"http://localhost:8081/","description":"Host where seyren is accessible.","loc":["services","graphite","seyren","seyrenUrl"],"readOnly":false,"type":"string"},"services.graphite.web.enable":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":false,"description":"Whether to enable graphite web frontend.","loc":["services","graphite","web","enable"],"readOnly":false,"type":"boolean"},"services.graphite.web.extraConfig":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"","description":"Graphite webapp settings. See:\n<link xlink:href=\"http://graphite.readthedocs.io/en/latest/config-local-settings.html\"/>\n","loc":["services","graphite","web","extraConfig"],"readOnly":false,"type":"string"},"services.graphite.web.listenAddress":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":"127.0.0.1","description":"Graphite web frontend listen address.","loc":["services","graphite","web","listenAddress"],"readOnly":false,"type":"string"},"services.graphite.web.port":{"declarations":["nixos/modules/services/monitoring/graphite.nix"],"default":8080,"description":"Graphite web frontend port.","loc":["services","graphite","web","port"],"readOnly":false,"type":"signed integer"},"services.graylog.elasticsearchHosts":{"declarations":["nixos/modules/services/logging/graylog.nix"],"description":"List of valid URIs of the http ports of your elastic nodes. If one or more of your elasticsearch hosts require authentication, include the credentials in each node URI that requires authentication","example":{"_type":"literalExample","text":"[ \"http://node1:9200\" \"http://user:password@node2:19200\" ]"},"loc":["services","graylog","elasticsearchHosts"],"readOnly":false,"type":"list of strings"},"services.graylog.enable":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":false,"description":"Whether to enable Graylog.","example":true,"loc":["services","graylog","enable"],"readOnly":false,"type":"boolean"},"services.graylog.extraConfig":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":"","description":"Any other configuration options you might want to add","loc":["services","graylog","extraConfig"],"readOnly":false,"type":"string"},"services.graylog.isMaster":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":true,"description":"Whether this is the master instance of your Graylog cluster","loc":["services","graylog","isMaster"],"readOnly":false,"type":"boolean"},"services.graylog.messageJournalDir":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":"/var/lib/graylog/data/journal","description":"The directory which will be used to store the message journal. The directory must be exclusively used by Graylog and must not contain any other files than the ones created by Graylog itself","loc":["services","graylog","messageJournalDir"],"readOnly":false,"type":"string"},"services.graylog.mongodbUri":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":"mongodb://localhost/graylog","description":"MongoDB connection string. See http://docs.mongodb.org/manual/reference/connection-string/ for details","loc":["services","graylog","mongodbUri"],"readOnly":false,"type":"string"},"services.graylog.nodeIdFile":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":"/var/lib/graylog/server/node-id","description":"Path of the file containing the graylog node-id","loc":["services","graylog","nodeIdFile"],"readOnly":false,"type":"string"},"services.graylog.package":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":"pkgs.graylog","description":"Graylog package to use.","example":{"_type":"literalExample","text":"pkgs.graylog"},"loc":["services","graylog","package"],"readOnly":false,"type":"package"},"services.graylog.passwordSecret":{"declarations":["nixos/modules/services/logging/graylog.nix"],"description":"You MUST set a secret to secure/pepper the stored user passwords here. Use at least 64 characters.\nGenerate one by using for example: pwgen -N 1 -s 96\n","loc":["services","graylog","passwordSecret"],"readOnly":false,"type":"string"},"services.graylog.plugins":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":[],"description":"Extra graylog plugins","loc":["services","graylog","plugins"],"readOnly":false,"type":"list of packages"},"services.graylog.rootPasswordSha2":{"declarations":["nixos/modules/services/logging/graylog.nix"],"description":"You MUST specify a hash password for the root user (which you only need to initially set up the\nsystem and in case you lose connectivity to your authentication backend)\nThis password cannot be changed using the API or via the web interface. If you need to change it,\nmodify it here.\nCreate one by using for example: echo -n yourpassword | shasum -a 256\nand use the resulting hash value as string for the option\n","example":"e3c652f0ba0b4801205814f8b6bc49672c4c74e25b497770bb89b22cdeb4e952","loc":["services","graylog","rootPasswordSha2"],"readOnly":false,"type":"string"},"services.graylog.rootUsername":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":"admin","description":"Name of the default administrator user","loc":["services","graylog","rootUsername"],"readOnly":false,"type":"string"},"services.graylog.user":{"declarations":["nixos/modules/services/logging/graylog.nix"],"default":"graylog","description":"User account under which graylog runs","example":{"_type":"literalExample","text":"graylog"},"loc":["services","graylog","user"],"readOnly":false,"type":"string"},"services.gvpe.configFile":{"declarations":["nixos/modules/services/networking/gvpe.nix"],"default":null,"description":"GVPE config file, if already present\n","example":"/root/my-gvpe-conf","loc":["services","gvpe","configFile"],"readOnly":false,"type":"unspecified"},"services.gvpe.configText":{"declarations":["nixos/modules/services/networking/gvpe.nix"],"default":null,"description":"GVPE config contents\n","example":"tcp-port = 655\nudp-port = 655\nmtu = 1480\nifname = vpn0\n\nnode = alpha\nhostname = alpha.example.org\nconnect = always\nenable-udp = true\nenable-tcp = true\non alpha if-up = if-up-0\non alpha pid-file = /var/gvpe/gvpe.pid\n","loc":["services","gvpe","configText"],"readOnly":false,"type":"unspecified"},"services.gvpe.customIFSetup":{"declarations":["nixos/modules/services/networking/gvpe.nix"],"default":"","description":"Additional commands to apply in ifup script\n","loc":["services","gvpe","customIFSetup"],"readOnly":false,"type":"unspecified"},"services.gvpe.enable":{"declarations":["nixos/modules/services/networking/gvpe.nix"],"default":false,"description":"Whether to run gvpe\n","loc":["services","gvpe","enable"],"readOnly":false,"type":"unspecified"},"services.gvpe.ipAddress":{"declarations":["nixos/modules/services/networking/gvpe.nix"],"default":null,"description":"IP address to assign to GVPE interface\n","loc":["services","gvpe","ipAddress"],"readOnly":false,"type":"unspecified"},"services.gvpe.nodename":{"declarations":["nixos/modules/services/networking/gvpe.nix"],"default":null,"description":"GVPE node name\n","loc":["services","gvpe","nodename"],"readOnly":false,"type":"unspecified"},"services.gvpe.subnet":{"declarations":["nixos/modules/services/networking/gvpe.nix"],"default":null,"description":"IP subnet assigned to GVPE network\n","example":"10.0.0.0/8","loc":["services","gvpe","subnet"],"readOnly":false,"type":"unspecified"},"services.hadoop.coreSite":{"declarations":["nixos/modules/services/cluster/hadoop/default.nix"],"default":{},"description":"Hadoop core-site.xml definition","example":{"fs.defaultFS":"hdfs://localhost"},"loc":["services","hadoop","coreSite"],"readOnly":false,"type":"unspecified"},"services.hadoop.hdfs.datanode.enabled":{"declarations":["nixos/modules/services/cluster/hadoop/hdfs.nix"],"default":false,"description":"Whether to run the Hadoop YARN DataNode\n","loc":["services","hadoop","hdfs","datanode","enabled"],"readOnly":false,"type":"boolean"},"services.hadoop.hdfs.namenode.enabled":{"declarations":["nixos/modules/services/cluster/hadoop/hdfs.nix"],"default":false,"description":"Whether to run the Hadoop YARN NameNode\n","loc":["services","hadoop","hdfs","namenode","enabled"],"readOnly":false,"type":"boolean"},"services.hadoop.hdfsSite":{"declarations":["nixos/modules/services/cluster/hadoop/default.nix"],"default":{},"description":"Hadoop hdfs-site.xml definition","example":{"dfs.nameservices":"namenode1"},"loc":["services","hadoop","hdfsSite"],"readOnly":false,"type":"unspecified"},"services.hadoop.mapredSite":{"declarations":["nixos/modules/services/cluster/hadoop/default.nix"],"default":{},"description":"Hadoop mapred-site.xml definition","example":{"mapreduce.map.cpu.vcores":"1"},"loc":["services","hadoop","mapredSite"],"readOnly":false,"type":"unspecified"},"services.hadoop.package":{"declarations":["nixos/modules/services/cluster/hadoop/default.nix"],"default":"pkgs.hadoop","description":"","example":{"_type":"literalExample","text":"pkgs.hadoop"},"loc":["services","hadoop","package"],"readOnly":false,"type":"package"},"services.hadoop.yarn.nodemanager.enabled":{"declarations":["nixos/modules/services/cluster/hadoop/yarn.nix"],"default":false,"description":"Whether to run the Hadoop YARN NodeManager\n","loc":["services","hadoop","yarn","nodemanager","enabled"],"readOnly":false,"type":"boolean"},"services.hadoop.yarn.resourcemanager.enabled":{"declarations":["nixos/modules/services/cluster/hadoop/yarn.nix"],"default":false,"description":"Whether to run the Hadoop YARN ResourceManager\n","loc":["services","hadoop","yarn","resourcemanager","enabled"],"readOnly":false,"type":"boolean"},"services.hadoop.yarnSite":{"declarations":["nixos/modules/services/cluster/hadoop/default.nix"],"default":{},"description":"Hadoop yarn-site.xml definition","example":{"yarn.resourcemanager.ha.id":"resourcemanager1"},"loc":["services","hadoop","yarnSite"],"readOnly":false,"type":"unspecified"},"services.hail.enable":{"declarations":["nixos/modules/services/continuous-integration/hail.nix"],"default":false,"description":"Enables the Hail Auto Update Service. Hail can automatically deploy artifacts\nbuilt by a Hydra Continous Integration server. A common use case is to provide\ncontinous deployment for single services or a full NixOS configuration.","loc":["services","hail","enable"],"readOnly":false,"type":"boolean"},"services.hail.hydraJobUri":{"declarations":["nixos/modules/services/continuous-integration/hail.nix"],"description":"The URI of the Hydra Job.","loc":["services","hail","hydraJobUri"],"readOnly":false,"type":"string"},"services.hail.netrc":{"declarations":["nixos/modules/services/continuous-integration/hail.nix"],"default":null,"description":"The netrc file to use when fetching data from Hydra.","loc":["services","hail","netrc"],"readOnly":false,"type":"null or path"},"services.hail.package":{"declarations":["nixos/modules/services/continuous-integration/hail.nix"],"default":"pkgs.haskellPackages.hail","description":"Hail package to use.","loc":["services","hail","package"],"readOnly":false,"type":"package"},"services.hail.profile":{"declarations":["nixos/modules/services/continuous-integration/hail.nix"],"default":"hail-profile","description":"The name of the Nix profile used by Hail.","loc":["services","hail","profile"],"readOnly":false,"type":"string"},"services.haka.configFile":{"declarations":["nixos/modules/services/security/haka.nix"],"default":"empty.lua","description":"Specify which configuration file Haka uses.\nIt can be absolute path or a path relative to the sample directory of\nthe haka git repo.\n","example":"/srv/haka/myfilter.lua","loc":["services","haka","configFile"],"readOnly":false,"type":"Concatenated string"},"services.haka.dump.enable":{"declarations":["nixos/modules/services/security/haka.nix"],"default":false,"description":"Whether to enable dump.","example":true,"loc":["services","haka","dump","enable"],"readOnly":false,"type":"boolean"},"services.haka.dump.input":{"declarations":["nixos/modules/services/security/haka.nix"],"default":"/tmp/input.pcap","description":"Path to file where incoming packets are dumped","example":"/path/to/file.pcap","loc":["services","haka","dump","input"],"readOnly":false,"type":"path"},"services.haka.dump.output":{"declarations":["nixos/modules/services/security/haka.nix"],"default":"/tmp/output.pcap","description":"Path to file where outgoing packets are dumped","example":"/path/to/file.pcap","loc":["services","haka","dump","output"],"readOnly":false,"type":"path"},"services.haka.enable":{"declarations":["nixos/modules/services/security/haka.nix"],"default":false,"description":"Whether to enable Haka.","example":true,"loc":["services","haka","enable"],"readOnly":false,"type":"boolean"},"services.haka.interfaces":{"declarations":["nixos/modules/services/security/haka.nix"],"default":["eth0"],"description":"Specify which interface(s) Haka listens to.\nUse 'any' to listen to all interfaces.\n","example":["any"],"loc":["services","haka","interfaces"],"readOnly":false,"type":"list of Concatenated strings"},"services.haka.nfqueue":{"declarations":["nixos/modules/services/security/haka.nix"],"default":false,"description":"Whether to enable nfqueue.","example":true,"loc":["services","haka","nfqueue"],"readOnly":false,"type":"boolean"},"services.haka.package":{"declarations":["nixos/modules/services/security/haka.nix"],"default":"pkgs.haka","description":"\n          Which Haka derivation to use.\n        ","loc":["services","haka","package"],"readOnly":false,"type":"package"},"services.haka.pcap":{"declarations":["nixos/modules/services/security/haka.nix"],"default":true,"description":"Whether to enable pcap","loc":["services","haka","pcap"],"readOnly":false,"type":"boolean"},"services.haka.threads":{"declarations":["nixos/modules/services/security/haka.nix"],"default":0,"description":"The number of threads that will be used.\nAll system threads are used by default.\n","example":4,"loc":["services","haka","threads"],"readOnly":false,"type":"signed integer"},"services.hans.clients":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":{},"description":"Each attribute of this option defines a systemd service that\nruns hans. Many or none may be defined.\nThe name of each service is\n<literal>hans-<replaceable>name</replaceable></literal>\nwhere <replaceable>name</replaceable> is the name of the\ncorresponding attribute name.\n","example":{"_type":"literalExample","text":"{\n  foo = {\n    server = \"192.0.2.1\";\n    extraConfig = \"-v\";\n  }\n}\n"},"loc":["services","hans","clients"],"readOnly":false,"type":"attribute set of submodules"},"services.hans.clients.<name>.extraConfig":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":"","description":"Additional command line parameters","example":"-v","loc":["services","hans","clients","<name>","extraConfig"],"readOnly":false,"type":"string"},"services.hans.clients.<name>.passwordFile":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":"","description":"File that containts password","loc":["services","hans","clients","<name>","passwordFile"],"readOnly":false,"type":"string"},"services.hans.clients.<name>.server":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":"","description":"IP address of server running hans","example":"192.0.2.1","loc":["services","hans","clients","<name>","server"],"readOnly":false,"type":"string"},"services.hans.server.enable":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":false,"description":"enable hans server","loc":["services","hans","server","enable"],"readOnly":false,"type":"boolean"},"services.hans.server.extraConfig":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":"","description":"Additional command line parameters","example":"-v","loc":["services","hans","server","extraConfig"],"readOnly":false,"type":"string"},"services.hans.server.ip":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":"","description":"The assigned ip range","example":"198.51.100.0","loc":["services","hans","server","ip"],"readOnly":false,"type":"string"},"services.hans.server.passwordFile":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":"","description":"File that containts password","loc":["services","hans","server","passwordFile"],"readOnly":false,"type":"string"},"services.hans.server.respondToSystemPings":{"declarations":["nixos/modules/services/networking/hans.nix"],"default":false,"description":"Force hans respond to ordinary pings","loc":["services","hans","server","respondToSystemPings"],"readOnly":false,"type":"boolean"},"services.haproxy.config":{"declarations":["nixos/modules/services/networking/haproxy.nix"],"default":null,"description":"Contents of the HAProxy configuration file,\n<filename>haproxy.conf</filename>.\n","loc":["services","haproxy","config"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.haproxy.enable":{"declarations":["nixos/modules/services/networking/haproxy.nix"],"default":false,"description":"Whether to enable HAProxy, the reliable, high performance TCP/HTTP\nload balancer.\n","loc":["services","haproxy","enable"],"readOnly":false,"type":"boolean"},"services.hardware.lcd.client.enable":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":false,"description":"Enable the LCD panel client (LCDproc)","loc":["services","hardware","lcd","client","enable"],"readOnly":false,"type":"boolean"},"services.hardware.lcd.client.extraConfig":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":"","description":"Additional configuration added verbatim to the client config.","loc":["services","hardware","lcd","client","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.hardware.lcd.client.restartForever":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":true,"description":"Try restarting the client forever.","loc":["services","hardware","lcd","client","restartForever"],"readOnly":false,"type":"boolean"},"services.hardware.lcd.server.enable":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":false,"description":"Enable the LCD panel server (LCDd)","loc":["services","hardware","lcd","server","enable"],"readOnly":false,"type":"boolean"},"services.hardware.lcd.server.extraConfig":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":"","description":"Additional configuration added verbatim to the server config.","loc":["services","hardware","lcd","server","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.hardware.lcd.server.openPorts":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":false,"description":"Open the ports in the firewall","loc":["services","hardware","lcd","server","openPorts"],"readOnly":false,"type":"boolean"},"services.hardware.lcd.server.usbGroup":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":"dialout","description":"The group to use for settings permissions. This group must exist or you will have to create it.","loc":["services","hardware","lcd","server","usbGroup"],"readOnly":false,"type":"string"},"services.hardware.lcd.server.usbPermissions":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":false,"description":"Set group-write permissions on a USB device.\n</para>\n<para>\nA USB connected LCD panel will most likely require having its\npermissions modified for lcdd to write to it. Enabling this option\nsets group-write permissions on the device identified by\n<option>services.hardware.lcd.usbVid</option> and\n<option>services.hardware.lcd.usbPid</option>. In order to find the\nvalues, you can run the <command>lsusb</command> command. Example\noutput:\n</para>\n<para>\n<literal>\nBus 005 Device 002: ID 0403:c630 Future Technology Devices International, Ltd lcd2usb interface\n</literal>\n</para>\n<para>\nIn this case the vendor id is 0403 and the product id is c630.\n","loc":["services","hardware","lcd","server","usbPermissions"],"readOnly":false,"type":"boolean"},"services.hardware.lcd.server.usbPid":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":"","description":"The product ID of the USB device to claim.","loc":["services","hardware","lcd","server","usbPid"],"readOnly":false,"type":"string"},"services.hardware.lcd.server.usbVid":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":"","description":"The vendor ID of the USB device to claim.","loc":["services","hardware","lcd","server","usbVid"],"readOnly":false,"type":"string"},"services.hardware.lcd.serverHost":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":"localhost","description":"Host on which LCDd is listening.","loc":["services","hardware","lcd","serverHost"],"readOnly":false,"type":"string"},"services.hardware.lcd.serverPort":{"declarations":["nixos/modules/services/hardware/lcd.nix"],"default":13666,"description":"Port on which LCDd is listening.","loc":["services","hardware","lcd","serverPort"],"readOnly":false,"type":"signed integer"},"services.hardware.pommed.configFile":{"declarations":["nixos/modules/services/hardware/pommed.nix"],"default":null,"description":"The path to the <filename>pommed.conf</filename> file. Leave\nto null to use the default config file\n(<filename>/etc/pommed.conf.mactel</filename>). See the\nfiles <filename>/etc/pommed.conf.mactel</filename> and\n<filename>/etc/pommed.conf.pmac</filename> for examples to\nbuild on.\n","loc":["services","hardware","pommed","configFile"],"readOnly":false,"type":"null or path"},"services.hardware.pommed.enable":{"declarations":["nixos/modules/services/hardware/pommed.nix"],"default":false,"description":"Whether to use the pommed tool to handle Apple laptop\nkeyboard hotkeys.\n","loc":["services","hardware","pommed","enable"],"readOnly":false,"type":"boolean"},"services.haveged.enable":{"declarations":["nixos/modules/services/security/haveged.nix"],"default":false,"description":"Whether to enable to haveged entropy daemon, which refills \n/dev/random when low.\n","loc":["services","haveged","enable"],"readOnly":false,"type":"boolean"},"services.haveged.refill_threshold":{"declarations":["nixos/modules/services/security/haveged.nix"],"default":1024,"description":"The number of bits of available entropy beneath which\nhaveged should refill the entropy pool.\n","loc":["services","haveged","refill_threshold"],"readOnly":false,"type":"signed integer"},"services.hbase.dataDir":{"declarations":["nixos/modules/services/databases/hbase.nix"],"default":"/var/lib/hbase","description":"Specifies location of HBase database files. This location should be\nwritable and readable for the user the HBase service runs as\n(hbase by default).\n","loc":["services","hbase","dataDir"],"readOnly":false,"type":"path"},"services.hbase.enable":{"declarations":["nixos/modules/services/databases/hbase.nix"],"default":false,"description":"Whether to run HBase.\n","loc":["services","hbase","enable"],"readOnly":false,"type":"boolean"},"services.hbase.group":{"declarations":["nixos/modules/services/databases/hbase.nix"],"default":"hbase","description":"Group account under which HBase runs.\n","loc":["services","hbase","group"],"readOnly":false,"type":"Concatenated string"},"services.hbase.logDir":{"declarations":["nixos/modules/services/databases/hbase.nix"],"default":"/var/log/hbase","description":"Specifies the location of HBase log files.\n","loc":["services","hbase","logDir"],"readOnly":false,"type":"path"},"services.hbase.package":{"declarations":["nixos/modules/services/databases/hbase.nix"],"default":"pkgs.hbase","description":"HBase package to use.\n","example":{"_type":"literalExample","text":"pkgs.hbase"},"loc":["services","hbase","package"],"readOnly":false,"type":"package"},"services.hbase.user":{"declarations":["nixos/modules/services/databases/hbase.nix"],"default":"hbase","description":"User account under which HBase runs.\n","loc":["services","hbase","user"],"readOnly":false,"type":"Concatenated string"},"services.hdapsd.enable":{"declarations":["nixos/modules/services/monitoring/hdaps.nix"],"default":false,"description":"Whether to enable Hard Drive Active Protection System Daemon,\ndevices are detected and managed automatically by udev and systemd\n.","example":true,"loc":["services","hdapsd","enable"],"readOnly":false,"type":"boolean"},"services.heapster.enable":{"declarations":["nixos/modules/services/monitoring/heapster.nix"],"default":false,"description":"Whether to enable heapster monitoring","loc":["services","heapster","enable"],"readOnly":false,"type":"boolean"},"services.heapster.extraOpts":{"declarations":["nixos/modules/services/monitoring/heapster.nix"],"default":"","description":"Heapster extra options","loc":["services","heapster","extraOpts"],"readOnly":false,"type":"Concatenated string"},"services.heapster.package":{"declarations":["nixos/modules/services/monitoring/heapster.nix"],"default":"pkgs.heapster","description":"Package to use by heapster","loc":["services","heapster","package"],"readOnly":false,"type":"package"},"services.heapster.sink":{"declarations":["nixos/modules/services/monitoring/heapster.nix"],"description":"Heapster metic sink","example":"influxdb:http://localhost:8086","loc":["services","heapster","sink"],"readOnly":false,"type":"Concatenated string"},"services.heapster.source":{"declarations":["nixos/modules/services/monitoring/heapster.nix"],"description":"Heapster metric source","example":"kubernetes:https://kubernetes.default","loc":["services","heapster","source"],"readOnly":false,"type":"Concatenated string"},"services.heartbeat.enable":{"declarations":["nixos/modules/services/logging/heartbeat.nix"],"default":false,"description":"Whether to enable heartbeat.","example":true,"loc":["services","heartbeat","enable"],"readOnly":false,"type":"boolean"},"services.heartbeat.extraConfig":{"declarations":["nixos/modules/services/logging/heartbeat.nix"],"default":"heartbeat.monitors:\n- type: http\n  urls: [\"http://localhost:9200\"]\n  schedule: '@every 10s'\n","description":"Any other configuration options you want to add","loc":["services","heartbeat","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.heartbeat.name":{"declarations":["nixos/modules/services/logging/heartbeat.nix"],"default":"heartbeat","description":"Name of the beat","loc":["services","heartbeat","name"],"readOnly":false,"type":"string"},"services.heartbeat.stateDir":{"declarations":["nixos/modules/services/logging/heartbeat.nix"],"default":"/var/lib/heartbeat","description":"The state directory. heartbeat's own logs and other data are stored here.","loc":["services","heartbeat","stateDir"],"readOnly":false,"type":"string"},"services.heartbeat.tags":{"declarations":["nixos/modules/services/logging/heartbeat.nix"],"default":[],"description":"Tags to place on the shipped log messages","loc":["services","heartbeat","tags"],"readOnly":false,"type":"list of strings"},"services.heyefi.cardMacaddress":{"declarations":["nixos/modules/services/networking/heyefi.nix"],"default":"","description":"An Eye-Fi card MAC address.\n","loc":["services","heyefi","cardMacaddress"],"readOnly":false,"type":"unspecified"},"services.heyefi.enable":{"declarations":["nixos/modules/services/networking/heyefi.nix"],"default":false,"description":"Whether to enable heyefi.","example":true,"loc":["services","heyefi","enable"],"readOnly":false,"type":"boolean"},"services.heyefi.uploadDir":{"declarations":["nixos/modules/services/networking/heyefi.nix"],"description":"The directory to upload the files to.\n","example":"/home/username/pictures","loc":["services","heyefi","uploadDir"],"readOnly":false,"type":"unspecified"},"services.heyefi.uploadKey":{"declarations":["nixos/modules/services/networking/heyefi.nix"],"default":"","description":"An Eye-Fi card's upload key.\n","loc":["services","heyefi","uploadKey"],"readOnly":false,"type":"unspecified"},"services.heyefi.user":{"declarations":["nixos/modules/services/networking/heyefi.nix"],"default":"root","description":"heyefi will be run under this user (user must exist,\nthis can be your user name).\n","loc":["services","heyefi","user"],"readOnly":false,"type":"unspecified"},"services.hitch.backend":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"description":"The host and port Hitch connects to when receiving\na connection in the form [HOST]:PORT\n","loc":["services","hitch","backend"],"readOnly":false,"type":"string"},"services.hitch.ciphers":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"default":"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH","description":"The list of ciphers to use","loc":["services","hitch","ciphers"],"readOnly":false,"type":"string"},"services.hitch.enable":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"default":false,"description":"Whether to enable Hitch Server.","example":true,"loc":["services","hitch","enable"],"readOnly":false,"type":"boolean"},"services.hitch.extraConfig":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"default":"","description":"Additional configuration lines","loc":["services","hitch","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.hitch.frontend":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"default":"[127.0.0.1]:443","description":"          The port and interface of the listen endpoint in the\n+         form [HOST]:PORT[+CERT].\n","loc":["services","hitch","frontend"],"readOnly":false,"type":"string or list of strings"},"services.hitch.group":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"default":"hitch","description":"The group to run as","loc":["services","hitch","group"],"readOnly":false,"type":"string"},"services.hitch.ocsp-stapling.enabled":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"default":true,"description":"Whether to enable OCSP Stapling","loc":["services","hitch","ocsp-stapling","enabled"],"readOnly":false,"type":"boolean"},"services.hitch.pem-files":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"default":[],"description":"PEM files to use","loc":["services","hitch","pem-files"],"readOnly":false,"type":"list of paths"},"services.hitch.user":{"declarations":["nixos/modules/services/web-servers/hitch/default.nix"],"default":"hitch","description":"The user to run as","loc":["services","hitch","user"],"readOnly":false,"type":"string"},"services.hologram-agent.dialAddress":{"declarations":["nixos/modules/services/security/hologram-agent.nix"],"default":"localhost:3100","description":"Hologram server and port.","loc":["services","hologram-agent","dialAddress"],"readOnly":false,"type":"string"},"services.hologram-agent.enable":{"declarations":["nixos/modules/services/security/hologram-agent.nix"],"default":false,"description":"Whether to enable the Hologram agent for AWS instance credentials","loc":["services","hologram-agent","enable"],"readOnly":false,"type":"boolean"},"services.hologram-agent.httpPort":{"declarations":["nixos/modules/services/security/hologram-agent.nix"],"default":"80","description":"Port for metadata service to listen on.","loc":["services","hologram-agent","httpPort"],"readOnly":false,"type":"string"},"services.hologram-server.awsAccount":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"description":"AWS account number","loc":["services","hologram-server","awsAccount"],"readOnly":false,"type":"string"},"services.hologram-server.awsDefaultRole":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"description":"AWS default role","loc":["services","hologram-server","awsDefaultRole"],"readOnly":false,"type":"string"},"services.hologram-server.cacheTimeoutSeconds":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":3600,"description":"How often (in seconds) to refresh the LDAP cache","loc":["services","hologram-server","cacheTimeoutSeconds"],"readOnly":false,"type":"signed integer"},"services.hologram-server.enable":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":false,"description":"Whether to enable the Hologram server for AWS instance credentials","loc":["services","hologram-server","enable"],"readOnly":false,"type":"boolean"},"services.hologram-server.enableLdapRoles":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":false,"description":"Whether to assign user roles based on the user's LDAP group memberships","loc":["services","hologram-server","enableLdapRoles"],"readOnly":false,"type":"boolean"},"services.hologram-server.groupClassAttr":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":"groupOfNames","description":"The objectclass attribute to search for groups when enableLdapRoles is true","loc":["services","hologram-server","groupClassAttr"],"readOnly":false,"type":"string"},"services.hologram-server.ldapBaseDN":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"description":"The base DN for your Hologram users","loc":["services","hologram-server","ldapBaseDN"],"readOnly":false,"type":"string"},"services.hologram-server.ldapBindDN":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"description":"DN of account to use to query the LDAP server","loc":["services","hologram-server","ldapBindDN"],"readOnly":false,"type":"string"},"services.hologram-server.ldapBindPassword":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"description":"Password of account to use to query the LDAP server","loc":["services","hologram-server","ldapBindPassword"],"readOnly":false,"type":"string"},"services.hologram-server.ldapHost":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"description":"Address of the LDAP server to use","loc":["services","hologram-server","ldapHost"],"readOnly":false,"type":"string"},"services.hologram-server.ldapInsecure":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":false,"description":"Whether to connect to LDAP over SSL or not","loc":["services","hologram-server","ldapInsecure"],"readOnly":false,"type":"boolean"},"services.hologram-server.ldapUserAttr":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":"cn","description":"The LDAP attribute for usernames","loc":["services","hologram-server","ldapUserAttr"],"readOnly":false,"type":"string"},"services.hologram-server.listenAddress":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":"0.0.0.0:3100","description":"Address and port to listen on","loc":["services","hologram-server","listenAddress"],"readOnly":false,"type":"string"},"services.hologram-server.roleAttr":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":"businessCategory","description":"Which LDAP group attribute to search for authorized role ARNs","loc":["services","hologram-server","roleAttr"],"readOnly":false,"type":"string"},"services.hologram-server.statsAddress":{"declarations":["nixos/modules/services/security/hologram-server.nix"],"default":"","description":"Address of statsd server","loc":["services","hologram-server","statsAddress"],"readOnly":false,"type":"string"},"services.home-assistant.applyDefaultConfig":{"declarations":["nixos/modules/services/misc/home-assistant.nix"],"default":true,"description":"Setting this option enables a few configuration options for HA based on NixOS configuration (such as time zone) to avoid having to manually specify configuration we already have.\n</para>\n<para>\nCurrently one side effect of enabling this is that the <literal>http</literal> component will be enabled.\n</para>\n<para>\nThis only takes effect if <literal>config != null</literal> in order to ensure that a manually managed <filename>configuration.yaml</filename> is not overwritten.\n","loc":["services","home-assistant","applyDefaultConfig"],"readOnly":false,"type":"boolean"},"services.home-assistant.autoExtraComponents":{"declarations":["nixos/modules/services/misc/home-assistant.nix"],"default":true,"description":"If set to <literal>true</literal>, the components used in <literal>config</literal>\nare set as the specified package's <literal>extraComponents</literal>.\nThis in turn adds all packaged dependencies to the derivation.\nYou might still see import errors in your log.\nIn this case, you will need to package the necessary dependencies yourself\nor ask for someone else to package them.\nIf a dependency is packaged but not automatically added to this list,\nyou might need to specify it in <literal>extraPackages</literal>.\n","loc":["services","home-assistant","autoExtraComponents"],"readOnly":false,"type":"boolean"},"services.home-assistant.config":{"declarations":["nixos/modules/services/misc/home-assistant.nix"],"default":null,"description":"Your <filename>configuration.yaml</filename> as a Nix attribute set.\nBeware that setting this option will delete your previous <filename>configuration.yaml</filename>.\n","example":{"_type":"literalExample","text":"{\n  homeassistant = {\n    name = \"Home\";\n    time_zone = \"UTC\";\n  };\n  frontend = { };\n  http = { };\n  feedreader.urls = [ \"https://nixos.org/blogs.xml\" ];\n}\n"},"loc":["services","home-assistant","config"],"readOnly":false,"type":"null or attribute set"},"services.home-assistant.configDir":{"declarations":["nixos/modules/services/misc/home-assistant.nix"],"default":"/var/lib/hass","description":"The config directory, where your <filename>configuration.yaml</filename> is located.","loc":["services","home-assistant","configDir"],"readOnly":false,"type":"path"},"services.home-assistant.enable":{"declarations":["nixos/modules/services/misc/home-assistant.nix"],"default":false,"description":"Whether to enable Home Assistant.","example":true,"loc":["services","home-assistant","enable"],"readOnly":false,"type":"boolean"},"services.home-assistant.openFirewall":{"declarations":["nixos/modules/services/misc/home-assistant.nix"],"default":false,"description":"Whether to open the firewall for the specified port.","loc":["services","home-assistant","openFirewall"],"readOnly":false,"type":"boolean"},"services.home-assistant.package":{"declarations":["nixos/modules/services/misc/home-assistant.nix"],"default":"pkgs.home-assistant","description":"Home Assistant package to use.\nOverride <literal>extraPackages</literal> or <literal>extraComponents</literal> in order to add additional dependencies.\nIf you specify <option>config</option> and do not set <option>autoExtraComponents</option>\nto <literal>false</literal>, overriding <literal>extraComponents</literal> will have no effect.\n","example":{"_type":"literalExample","text":"pkgs.home-assistant.override {\n  extraPackages = ps: with ps; [ colorlog ];\n}\n"},"loc":["services","home-assistant","package"],"readOnly":false,"type":"package"},"services.home-assistant.port":{"declarations":["nixos/modules/services/misc/home-assistant.nix"],"default":8123,"description":"The port on which to listen.","loc":["services","home-assistant","port"],"readOnly":false,"type":"signed integer"},"services.hoogle.enable":{"declarations":["nixos/modules/services/development/hoogle.nix"],"default":false,"description":"Whether to enable Haskell documentation server.","example":true,"loc":["services","hoogle","enable"],"readOnly":false,"type":"boolean"},"services.hoogle.haskellPackages":{"declarations":["nixos/modules/services/development/hoogle.nix"],"default":"pkgs.haskellPackages","description":"Which haskell package set to use.","loc":["services","hoogle","haskellPackages"],"readOnly":false,"type":"unspecified"},"services.hoogle.home":{"declarations":["nixos/modules/services/development/hoogle.nix"],"default":"https://hoogle.haskell.org","description":"Url for hoogle logo","loc":["services","hoogle","home"],"readOnly":false,"type":"string"},"services.hoogle.packages":{"declarations":["nixos/modules/services/development/hoogle.nix"],"default":"hp: []","description":"The Haskell packages to generate documentation for.\n\nThe option value is a function that takes the package set specified in\nthe <varname>haskellPackages</varname> option as its sole parameter and\nreturns a list of packages.\n","example":"hp: with hp; [ text lens ]","loc":["services","hoogle","packages"],"readOnly":false,"type":"unspecified"},"services.hoogle.port":{"declarations":["nixos/modules/services/development/hoogle.nix"],"default":8080,"description":"Port number Hoogle will be listening to.\n","loc":["services","hoogle","port"],"readOnly":false,"type":"signed integer"},"services.hostapd.channel":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":7,"description":"Channel number (IEEE 802.11)\nPlease note that some drivers do not use this value from\n<command>hostapd</command> and the channel will need to be configured\nseparately with <command>iwconfig</command>.\n","example":11,"loc":["services","hostapd","channel"],"readOnly":false,"type":"signed integer"},"services.hostapd.driver":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":"nl80211","description":"Which driver <command>hostapd</command> will use.\nMost applications will probably use the default.\n","example":"hostapd","loc":["services","hostapd","driver"],"readOnly":false,"type":"Concatenated string"},"services.hostapd.enable":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":false,"description":"Enable putting a wireless interface into infrastructure mode,\nallowing other wireless devices to associate with the wireless\ninterface and do wireless networking. A simple access point will\n<option>enable hostapd.wpa</option>,\n<option>hostapd.wpaPassphrase</option>, and\n<option>hostapd.ssid</option>, as well as DHCP on the wireless\ninterface to provide IP addresses to the associated stations, and\nNAT (from the wireless interface to an upstream interface).\n","loc":["services","hostapd","enable"],"readOnly":false,"type":"unspecified"},"services.hostapd.extraConfig":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":"","description":"Extra configuration options to put in hostapd.conf.","example":"auth_algo=0\nieee80211n=1\nht_capab=[HT40-][SHORT-GI-40][DSSS_CCK-40]\n","loc":["services","hostapd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.hostapd.group":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":"wheel","description":"Members of this group can control <command>hostapd</command>.\n","example":"network","loc":["services","hostapd","group"],"readOnly":false,"type":"Concatenated string"},"services.hostapd.hwMode":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":"g","description":"Operation mode.\n(a = IEEE 802.11a, b = IEEE 802.11b, g = IEEE 802.11g).\n","loc":["services","hostapd","hwMode"],"readOnly":false,"type":"one of \"a\", \"b\", \"g\""},"services.hostapd.interface":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":"","description":"The interfaces <command>hostapd</command> will use.\n","example":"wlp2s0","loc":["services","hostapd","interface"],"readOnly":false,"type":"unspecified"},"services.hostapd.ssid":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":"nixos","description":"SSID to be used in IEEE 802.11 management frames.","example":"mySpecialSSID","loc":["services","hostapd","ssid"],"readOnly":false,"type":"Concatenated string"},"services.hostapd.wpa":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":true,"description":"Enable WPA (IEEE 802.11i/D3.0) to authenticate with the access point.\n","loc":["services","hostapd","wpa"],"readOnly":false,"type":"unspecified"},"services.hostapd.wpaPassphrase":{"declarations":["nixos/modules/services/networking/hostapd.nix"],"default":"my_sekret","description":"WPA-PSK (pre-shared-key) passphrase. Clients will need this\npassphrase to associate with this access point.\nWarning: This passphrase will get put into a world-readable file in\nthe Nix store!\n","example":"any_64_char_string","loc":["services","hostapd","wpaPassphrase"],"readOnly":false,"type":"Concatenated string"},"services.hound.config":{"declarations":["nixos/modules/services/search/hound.nix"],"description":"The full configuration of the Hound daemon. Note the dbpath\nshould be an absolute path to a writable location on disk.\n","example":"{\n   \"max-concurrent-indexers\" : 2,\n   \"dbpath\" : \"${services.hound.home}/data\",\n   \"repos\" : {\n      \"nixpkgs\": {\n         \"url\" : \"https://www.github.com/NixOS/nixpkgs.git\"\n      }\n   }\n}\n","loc":["services","hound","config"],"readOnly":false,"type":"string"},"services.hound.enable":{"declarations":["nixos/modules/services/search/hound.nix"],"default":false,"description":"Whether to enable the hound code search daemon.\n","loc":["services","hound","enable"],"readOnly":false,"type":"boolean"},"services.hound.extraGroups":{"declarations":["nixos/modules/services/search/hound.nix"],"default":[],"description":"List of extra groups that the \"hound\" user should be a part of.\n","example":["dialout"],"loc":["services","hound","extraGroups"],"readOnly":false,"type":"list of strings"},"services.hound.group":{"declarations":["nixos/modules/services/search/hound.nix"],"default":"hound","description":"Group the hound daemon should execute under.\n","loc":["services","hound","group"],"readOnly":false,"type":"string"},"services.hound.home":{"declarations":["nixos/modules/services/search/hound.nix"],"default":"/var/lib/hound","description":"The path to use as hound's $HOME. If the default user\n\"hound\" is configured then this is the home of the \"hound\"\nuser.\n","loc":["services","hound","home"],"readOnly":false,"type":"path"},"services.hound.listen":{"declarations":["nixos/modules/services/search/hound.nix"],"default":"0.0.0.0:6080","description":"Listen on this IP:port / :port\n","example":"127.0.0.1:6080 or just :6080","loc":["services","hound","listen"],"readOnly":false,"type":"string"},"services.hound.package":{"declarations":["nixos/modules/services/search/hound.nix"],"default":"pkgs.hound","description":"Package for running hound.\n","loc":["services","hound","package"],"readOnly":false,"type":"package"},"services.hound.user":{"declarations":["nixos/modules/services/search/hound.nix"],"default":"hound","description":"User the hound daemon should execute under.\n","loc":["services","hound","user"],"readOnly":false,"type":"string"},"services.htpdate.enable":{"declarations":["nixos/modules/services/networking/htpdate.nix"],"default":false,"description":"Enable htpdate daemon.\n","loc":["services","htpdate","enable"],"readOnly":false,"type":"boolean"},"services.htpdate.extraOptions":{"declarations":["nixos/modules/services/networking/htpdate.nix"],"default":"","description":"Additional command line arguments to pass to htpdate.\n","loc":["services","htpdate","extraOptions"],"readOnly":false,"type":"string"},"services.htpdate.proxy":{"declarations":["nixos/modules/services/networking/htpdate.nix"],"default":"","description":"HTTP proxy used for requests.\n","example":"127.0.0.1:8118","loc":["services","htpdate","proxy"],"readOnly":false,"type":"string"},"services.htpdate.servers":{"declarations":["nixos/modules/services/networking/htpdate.nix"],"default":["www.google.com"],"description":"HTTP servers to use for time synchronization.\n","loc":["services","htpdate","servers"],"readOnly":false,"type":"list of strings"},"services.httpd.adminAddr":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"description":"E-mail address of the server administrator.","example":"admin@example.org","loc":["services","httpd","adminAddr"],"readOnly":false,"type":"null or string"},"services.httpd.configFile":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"confFile","description":"Override the configuration file used by Apache. By default,\nNixOS generates one automatically.\n","example":{"_type":"literalExample","text":"pkgs.writeText \"httpd.conf\" \"# my custom config file ...\""},"loc":["services","httpd","configFile"],"readOnly":false,"type":"path"},"services.httpd.documentRoot":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"The path of Apache's document root directory.  If left undefined,\nan empty directory in the Nix store will be used as root.\n","example":"/data/webserver/docs","loc":["services","httpd","documentRoot"],"readOnly":false,"type":"null or path"},"services.httpd.enable":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"Whether to enable the Apache HTTP Server.","loc":["services","httpd","enable"],"readOnly":false,"type":"boolean"},"services.httpd.enableMellon":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"Whether to enable the mod_auth_mellon module.","loc":["services","httpd","enableMellon"],"readOnly":false,"type":"boolean"},"services.httpd.enablePHP":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"Whether to enable the PHP module.","loc":["services","httpd","enablePHP"],"readOnly":false,"type":"boolean"},"services.httpd.enablePerl":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"Whether to enable the Perl module (mod_perl).","loc":["services","httpd","enablePerl"],"readOnly":false,"type":"boolean"},"services.httpd.enableSSL":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"Whether to enable SSL (https) support.","loc":["services","httpd","enableSSL"],"readOnly":false,"type":"boolean"},"services.httpd.enableUserDir":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"Whether to enable serving <filename>~/public_html</filename> as\n<literal>/~<replaceable>username</replaceable></literal>.\n","loc":["services","httpd","enableUserDir"],"readOnly":false,"type":"boolean"},"services.httpd.extraConfig":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"","description":"These lines go to httpd.conf verbatim. They will go after\ndirectories and directory aliases defined by default.\n","example":"<Directory /home>\n  Options FollowSymlinks\n  AllowOverride All\n</Directory>\n","loc":["services","httpd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.httpd.extraModules":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"Additional Apache modules to be used.  These can be\nspecified as a string in the case of modules distributed\nwith Apache, or as an attribute set specifying the\n<varname>name</varname> and <varname>path</varname> of the\nmodule.\n","example":{"_type":"literalExample","text":"[ \"proxy_connect\" { name = \"php5\"; path = \"${pkgs.php}/modules/libphp5.so\"; } ]"},"loc":["services","httpd","extraModules"],"readOnly":false,"type":"list of unspecifieds"},"services.httpd.extraSubservices":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"Extra subservices to enable in the webserver.","loc":["services","httpd","extraSubservices"],"readOnly":false,"type":"list of unspecifieds"},"services.httpd.globalRedirect":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"If set, all requests for this host are redirected permanently to\nthe given URL.\n","example":"http://newserver.example.org/","loc":["services","httpd","globalRedirect"],"readOnly":false,"type":"null or string"},"services.httpd.group":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"wwwrun","description":"Group under which httpd runs.  The account is created\nautomatically if it doesn't exist.\n","loc":["services","httpd","group"],"readOnly":false,"type":"string"},"services.httpd.hostName":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"localhost","description":"Canonical hostname for the server.","loc":["services","httpd","hostName"],"readOnly":false,"type":"string"},"services.httpd.listen":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"List of { /* ip: \"*\"; */ port = 80;} to listen on\n","loc":["services","httpd","listen"],"readOnly":false,"type":"list of submodules"},"services.httpd.listen.*.ip":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"*","description":"Ip to listen on. 0.0.0.0 for ipv4 only, * for all.","loc":["services","httpd","listen","*","ip"],"readOnly":false,"type":"Concatenated string"},"services.httpd.listen.*.port":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"description":"port to listen on","loc":["services","httpd","listen","*","port"],"readOnly":false,"type":"signed integer"},"services.httpd.logDir":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"/var/log/httpd","description":"Directory for Apache's log files.  It is created automatically.\n","loc":["services","httpd","logDir"],"readOnly":false,"type":"path"},"services.httpd.logFormat":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"common","description":"Log format for Apache's log files. Possible values are: combined, common, referer, agent.\n","example":"combined","loc":["services","httpd","logFormat"],"readOnly":false,"type":"string"},"services.httpd.logPerVirtualHost":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"If enabled, each virtual host gets its own\n<filename>access_log</filename> and\n<filename>error_log</filename>, namely suffixed by the\n<option>hostName</option> of the virtual host.\n","loc":["services","httpd","logPerVirtualHost"],"readOnly":false,"type":"boolean"},"services.httpd.maxClients":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":150,"description":"Maximum number of httpd processes (prefork)","example":8,"loc":["services","httpd","maxClients"],"readOnly":false,"type":"signed integer"},"services.httpd.maxRequestsPerChild":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":0,"description":"Maximum number of httpd requests answered per httpd child (prefork), 0 means unlimited","example":500,"loc":["services","httpd","maxRequestsPerChild"],"readOnly":false,"type":"signed integer"},"services.httpd.multiProcessingModule":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"prefork","description":"Multi-processing module to be used by Apache.  Available\nmodules are <literal>prefork</literal> (the default;\nhandles each request in a separate child process),\n<literal>worker</literal> (hybrid approach that starts a\nnumber of child processes each running a number of\nthreads) and <literal>event</literal> (a recent variant of\n<literal>worker</literal> that handles persistent\nconnections more efficiently).\n","example":"worker","loc":["services","httpd","multiProcessingModule"],"readOnly":false,"type":"string"},"services.httpd.package":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"pkgs.apacheHttpd","description":"Overridable attribute of the Apache HTTP Server package to use.\n","loc":["services","httpd","package"],"readOnly":false,"type":"package"},"services.httpd.phpOptions":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"","description":"Options appended to the PHP configuration file <filename>php.ini</filename>.","example":"date.timezone = \"CET\"\n","loc":["services","httpd","phpOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.httpd.phpPackage":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"pkgs.php","description":"Overridable attribute of the PHP package to use.\n","loc":["services","httpd","phpPackage"],"readOnly":false,"type":"package"},"services.httpd.port":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":0,"description":"Port for the server. Option will be removed, use <option>listen</option> instead.\n","loc":["services","httpd","port"],"readOnly":false,"type":"signed integer"},"services.httpd.robotsEntries":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"","description":"Specification of pages to be ignored by web crawlers. See <link\nxlink:href='http://www.robotstxt.org/'/> for details.\n","example":"Disallow: /foo/","loc":["services","httpd","robotsEntries"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.httpd.servedDirs":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"This option provides a simple way to serve static directories.\n","example":[{"dir":"/home/eelco/Dev/nix-homepage","urlPath":"/nix"}],"loc":["services","httpd","servedDirs"],"readOnly":false,"type":"list of attribute sets"},"services.httpd.servedFiles":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"This option provides a simple way to serve individual, static files.\n","example":[{"file":"/home/eelco/some-file.png","urlPath":"/foo/bar.png"}],"loc":["services","httpd","servedFiles"],"readOnly":false,"type":"list of attribute sets"},"services.httpd.serverAliases":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"Additional names of virtual hosts served by this virtual host configuration.\n","example":["www.example.org","www.example.org:8080","example.org"],"loc":["services","httpd","serverAliases"],"readOnly":false,"type":"list of strings"},"services.httpd.sslServerCert":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"Path to server SSL certificate.","example":"/var/host.cert","loc":["services","httpd","sslServerCert"],"readOnly":false,"type":"null or path"},"services.httpd.sslServerChain":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"Path to server SSL chain file.","example":"/var/ca.pem","loc":["services","httpd","sslServerChain"],"readOnly":false,"type":"null or path"},"services.httpd.sslServerKey":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"description":"Path to server SSL certificate key.","example":"/var/host.key","loc":["services","httpd","sslServerKey"],"readOnly":false,"type":"path"},"services.httpd.stateDir":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"/run/httpd","description":"Directory for Apache's transient runtime state (such as PID\nfiles).  It is created automatically.  Note that the default,\n<filename>/run/httpd</filename>, is deleted at boot time.\n","loc":["services","httpd","stateDir"],"readOnly":false,"type":"path"},"services.httpd.user":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"wwwrun","description":"User account under which httpd runs.  The account is created\nautomatically if it doesn't exist.\n","loc":["services","httpd","user"],"readOnly":false,"type":"string"},"services.httpd.virtualHosts":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"Specification of the virtual hosts served by Apache.  Each\nelement should be an attribute set specifying the\nconfiguration of the virtual host.  The available options\nare the non-global options permissible for the main host.\n","example":[{"documentRoot":"/data/webroot-foo","hostName":"foo"},{"documentRoot":"/data/webroot-bar","hostName":"bar"}],"loc":["services","httpd","virtualHosts"],"readOnly":false,"type":"list of submodules"},"services.httpd.virtualHosts.*.adminAddr":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"E-mail address of the server administrator.","example":"admin@example.org","loc":["services","httpd","virtualHosts","*","adminAddr"],"readOnly":false,"type":"null or string"},"services.httpd.virtualHosts.*.documentRoot":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"The path of Apache's document root directory.  If left undefined,\nan empty directory in the Nix store will be used as root.\n","example":"/data/webserver/docs","loc":["services","httpd","virtualHosts","*","documentRoot"],"readOnly":false,"type":"null or path"},"services.httpd.virtualHosts.*.enableSSL":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"Whether to enable SSL (https) support.","loc":["services","httpd","virtualHosts","*","enableSSL"],"readOnly":false,"type":"boolean"},"services.httpd.virtualHosts.*.enableUserDir":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":false,"description":"Whether to enable serving <filename>~/public_html</filename> as\n<literal>/~<replaceable>username</replaceable></literal>.\n","loc":["services","httpd","virtualHosts","*","enableUserDir"],"readOnly":false,"type":"boolean"},"services.httpd.virtualHosts.*.extraConfig":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"","description":"These lines go to httpd.conf verbatim. They will go after\ndirectories and directory aliases defined by default.\n","example":"<Directory /home>\n  Options FollowSymlinks\n  AllowOverride All\n</Directory>\n","loc":["services","httpd","virtualHosts","*","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.httpd.virtualHosts.*.extraSubservices":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"Extra subservices to enable in the webserver.","loc":["services","httpd","virtualHosts","*","extraSubservices"],"readOnly":false,"type":"list of unspecifieds"},"services.httpd.virtualHosts.*.globalRedirect":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"If set, all requests for this host are redirected permanently to\nthe given URL.\n","example":"http://newserver.example.org/","loc":["services","httpd","virtualHosts","*","globalRedirect"],"readOnly":false,"type":"null or string"},"services.httpd.virtualHosts.*.hostName":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"localhost","description":"Canonical hostname for the server.","loc":["services","httpd","virtualHosts","*","hostName"],"readOnly":false,"type":"string"},"services.httpd.virtualHosts.*.listen":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"List of { /* ip: \"*\"; */ port = 80;} to listen on\n","loc":["services","httpd","virtualHosts","*","listen"],"readOnly":false,"type":"list of submodules"},"services.httpd.virtualHosts.*.listen.*.ip":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"*","description":"Ip to listen on. 0.0.0.0 for ipv4 only, * for all.","loc":["services","httpd","virtualHosts","*","listen","*","ip"],"readOnly":false,"type":"Concatenated string"},"services.httpd.virtualHosts.*.listen.*.port":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"description":"port to listen on","loc":["services","httpd","virtualHosts","*","listen","*","port"],"readOnly":false,"type":"signed integer"},"services.httpd.virtualHosts.*.logFormat":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"common","description":"Log format for Apache's log files. Possible values are: combined, common, referer, agent.\n","example":"combined","loc":["services","httpd","virtualHosts","*","logFormat"],"readOnly":false,"type":"string"},"services.httpd.virtualHosts.*.port":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":0,"description":"Port for the server. Option will be removed, use <option>listen</option> instead.\n","loc":["services","httpd","virtualHosts","*","port"],"readOnly":false,"type":"signed integer"},"services.httpd.virtualHosts.*.robotsEntries":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":"","description":"Specification of pages to be ignored by web crawlers. See <link\nxlink:href='http://www.robotstxt.org/'/> for details.\n","example":"Disallow: /foo/","loc":["services","httpd","virtualHosts","*","robotsEntries"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.httpd.virtualHosts.*.servedDirs":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"This option provides a simple way to serve static directories.\n","example":[{"dir":"/home/eelco/Dev/nix-homepage","urlPath":"/nix"}],"loc":["services","httpd","virtualHosts","*","servedDirs"],"readOnly":false,"type":"list of attribute sets"},"services.httpd.virtualHosts.*.servedFiles":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"This option provides a simple way to serve individual, static files.\n","example":[{"file":"/home/eelco/some-file.png","urlPath":"/foo/bar.png"}],"loc":["services","httpd","virtualHosts","*","servedFiles"],"readOnly":false,"type":"list of attribute sets"},"services.httpd.virtualHosts.*.serverAliases":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":[],"description":"Additional names of virtual hosts served by this virtual host configuration.\n","example":["www.example.org","www.example.org:8080","example.org"],"loc":["services","httpd","virtualHosts","*","serverAliases"],"readOnly":false,"type":"list of strings"},"services.httpd.virtualHosts.*.sslServerCert":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"Path to server SSL certificate.","example":"/var/host.cert","loc":["services","httpd","virtualHosts","*","sslServerCert"],"readOnly":false,"type":"null or path"},"services.httpd.virtualHosts.*.sslServerChain":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"default":null,"description":"Path to server SSL chain file.","example":"/var/ca.pem","loc":["services","httpd","virtualHosts","*","sslServerChain"],"readOnly":false,"type":"null or path"},"services.httpd.virtualHosts.*.sslServerKey":{"declarations":["nixos/modules/services/web-servers/apache-httpd/default.nix"],"description":"Path to server SSL certificate key.","example":"/var/host.key","loc":["services","httpd","virtualHosts","*","sslServerKey"],"readOnly":false,"type":"path"},"services.hydra.buildMachinesFiles":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":["/etc/nix/machines"],"description":"List of files containing build machines.","example":["/etc/nix/machines","/var/lib/hydra/provisioner/machines"],"loc":["services","hydra","buildMachinesFiles"],"readOnly":false,"type":"list of paths"},"services.hydra.dbi":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":"dbi:Pg:dbname=hydra;user=hydra;","description":"The DBI string for Hydra database connection.\n","example":"dbi:Pg:dbname=hydra;host=postgres.example.org;user=foo;","loc":["services","hydra","dbi"],"readOnly":false,"type":"string"},"services.hydra.debugServer":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":false,"description":"Whether to run the server in debug mode.","loc":["services","hydra","debugServer"],"readOnly":false,"type":"boolean"},"services.hydra.enable":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":false,"description":"Whether to run Hydra services.\n","loc":["services","hydra","enable"],"readOnly":false,"type":"boolean"},"services.hydra.extraConfig":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"description":"Extra lines for the Hydra configuration.","loc":["services","hydra","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.hydra.extraEnv":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":{},"description":"Extra environment variables for Hydra.","loc":["services","hydra","extraEnv"],"readOnly":false,"type":"attribute set of strings"},"services.hydra.gcRootsDir":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":"/nix/var/nix/gcroots/hydra","description":"Directory that holds Hydra garbage collector roots.","loc":["services","hydra","gcRootsDir"],"readOnly":false,"type":"path"},"services.hydra.hydraURL":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"description":"The base URL for the Hydra webserver instance. Used for links in emails.\n","loc":["services","hydra","hydraURL"],"readOnly":false,"type":"string"},"services.hydra.listenHost":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":"*","description":"The hostname or address to listen on or <literal>*</literal> to listen\non all interfaces.\n","example":"localhost","loc":["services","hydra","listenHost"],"readOnly":false,"type":"string"},"services.hydra.logo":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":null,"description":"Path to a file containing the logo of your Hydra instance.\n","loc":["services","hydra","logo"],"readOnly":false,"type":"null or path"},"services.hydra.minimumDiskFree":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":0,"description":"Threshold of minimum disk space (GiB) to determine if the queue runner should run or not.\n","loc":["services","hydra","minimumDiskFree"],"readOnly":false,"type":"signed integer"},"services.hydra.minimumDiskFreeEvaluator":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":0,"description":"Threshold of minimum disk space (GiB) to determine if the evaluator should run or not.\n","loc":["services","hydra","minimumDiskFreeEvaluator"],"readOnly":false,"type":"signed integer"},"services.hydra.notificationSender":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"description":"Sender email address used for email notifications.\n","loc":["services","hydra","notificationSender"],"readOnly":false,"type":"string"},"services.hydra.package":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":"pkgs.hydra","description":"The Hydra package.","loc":["services","hydra","package"],"readOnly":false,"type":"path"},"services.hydra.port":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":3000,"description":"TCP port the web server should listen to.\n","loc":["services","hydra","port"],"readOnly":false,"type":"signed integer"},"services.hydra.smtpHost":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":null,"description":"Hostname of the SMTP server to use to send email.\n","example":["localhost"],"loc":["services","hydra","smtpHost"],"readOnly":false,"type":"null or string"},"services.hydra.tracker":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":"","description":"Piece of HTML that is included on all pages.\n","loc":["services","hydra","tracker"],"readOnly":false,"type":"string"},"services.hydra.useSubstitutes":{"declarations":["nixos/modules/services/continuous-integration/hydra/default.nix"],"default":false,"description":"Whether to use binary caches for downloading store paths. Note that\nbinary substitutions trigger (a potentially large number of) additional\nHTTP requests that slow down the queue monitor thread significantly.\nAlso, this Hydra instance will serve those downloaded store paths to\nits users with its own signature attached as if it had built them\nitself, so don't enable this feature unless your active binary caches\nare absolute trustworthy.\n","loc":["services","hydra","useSubstitutes"],"readOnly":false,"type":"boolean"},"services.hydron.dataDir":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":"/var/lib/hydron","description":"Location where hydron runs and stores data.","example":"/home/okina/hydron","loc":["services","hydron","dataDir"],"readOnly":false,"type":"path"},"services.hydron.enable":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":false,"description":"Whether to enable hydron.","example":true,"loc":["services","hydron","enable"],"readOnly":false,"type":"boolean"},"services.hydron.fetchTags":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":true,"description":"Fetch tags for imported images and webm from gelbooru.","loc":["services","hydron","fetchTags"],"readOnly":false,"type":"boolean"},"services.hydron.importPaths":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":[],"description":"Paths that hydron will recursively import.","example":["/home/okina/Pictures"],"loc":["services","hydron","importPaths"],"readOnly":false,"type":"list of paths"},"services.hydron.interval":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":"weekly","description":"How often we run hydron import and possibly fetch tags. Runs by default every week.\n\nThe format is described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","example":"06:00","loc":["services","hydron","interval"],"readOnly":false,"type":"string"},"services.hydron.listenAddress":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":null,"description":"Listen on a specific IP address and port.","example":"127.0.0.1:8010","loc":["services","hydron","listenAddress"],"readOnly":false,"type":"null or string"},"services.hydron.password":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":"hydron","description":"Password for the hydron database.","example":"dumbpass","loc":["services","hydron","password"],"readOnly":false,"type":"string"},"services.hydron.passwordFile":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":"/run/keys/hydron-password-file","description":"Password file for the hydron database.","example":"/home/okina/hydron/keys/pass","loc":["services","hydron","passwordFile"],"readOnly":false,"type":"path"},"services.hydron.postgresArgs":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"description":"Postgresql connection arguments.","example":"{\n  \"driver\": \"postgres\",\n  \"connection\": \"user=hydron password=dumbpass dbname=hydron sslmode=disable\"\n}\n","loc":["services","hydron","postgresArgs"],"readOnly":false,"type":"string"},"services.hydron.postgresArgsFile":{"declarations":["nixos/modules/services/web-servers/hydron.nix"],"default":"/run/keys/hydron-postgres-args","description":"Postgresql connection arguments file.","example":"/home/okina/hydron/keys/postgres","loc":["services","hydron","postgresArgsFile"],"readOnly":false,"type":"path"},"services.hylafax.areaCode":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":null,"description":"Area code for server and all modems.","example":"30","loc":["services","hylafax","areaCode"],"readOnly":false,"type":"null or string"},"services.hylafax.autostart":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":true,"description":"Autostart the HylaFAX queue manager at system start.\nIf this is <literal>false</literal>, the queue manager\nwill still be started if there are pending\njobs or if a user tries to connect to it.\n","example":false,"loc":["services","hylafax","autostart"],"readOnly":false,"type":"boolean"},"services.hylafax.commonModemConfig":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"description":"Attribute set of default values for\nmodem config files <filename>etc/config.*</filename>.\nValues can be either strings or integers\n(which will be added to the config file verbatimly)\nor lists thereof\n(which will be translated to multiple\nlines with the same configuration key).\nBoolean values are translated to \"Yes\" or \"No\".\nThe default contains some reasonable\nconfiguration to yield an operational system.\n\nThink twice before changing\npaths of fax-processing scripts.\n","example":{"InternationalPrefix":"00","LongDistancePrefix":"0"},"loc":["services","hylafax","commonModemConfig"],"readOnly":false,"type":"attribute set of list of string or signed integer convertible to it or boolean convertible to its or string or signed integer convertible to it or boolean convertible to it convertible to its"},"services.hylafax.countryCode":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":null,"description":"Country code for server and all modems.","example":"49","loc":["services","hylafax","countryCode"],"readOnly":false,"type":"null or string"},"services.hylafax.enable":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":false,"description":"Whether to enable HylaFAX server.","example":true,"loc":["services","hylafax","enable"],"readOnly":false,"type":"boolean"},"services.hylafax.faxcron.enable.frequency":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":null,"description":"Purge old files from the spooling area with\n<filename>faxcron</filename> with the given frequency\n(see systemd.time(7)).\n","example":"daily","loc":["services","hylafax","faxcron","enable","frequency"],"readOnly":false,"type":"null or string"},"services.hylafax.faxcron.enable.spoolInit":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":false,"description":"Whether to enable Purge old files from the spooling area with\n<filename>faxcron</filename>\neach time the spooling area is initialized.\n.","example":true,"loc":["services","hylafax","faxcron","enable","spoolInit"],"readOnly":false,"type":"boolean"},"services.hylafax.faxcron.infoDays":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":30,"description":"Set the expiration time for data in the\nremote machine information directory in days.\n","loc":["services","hylafax","faxcron","infoDays"],"readOnly":false,"type":"signed integer"},"services.hylafax.faxcron.logDays":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":30,"description":"Set the expiration time for\nsession trace log files in days.\n","loc":["services","hylafax","faxcron","logDays"],"readOnly":false,"type":"signed integer"},"services.hylafax.faxcron.rcvDays":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":7,"description":"Set the expiration time for files in\nthe received facsimile queue in days.\n","loc":["services","hylafax","faxcron","rcvDays"],"readOnly":false,"type":"signed integer"},"services.hylafax.faxqConfig":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"description":"Attribute set of lines for the global\nfaxq config file <filename>etc/config</filename>.\nValues can be either strings or integers\n(which will be added to the config file verbatimly)\nor lists thereof\n(which will be translated to multiple\nlines with the same configuration key).\nBoolean values are translated to \"Yes\" or \"No\".\nThe default contains some reasonable\nconfiguration to yield an operational system.\n\n","example":{"InternationalPrefix":"00","LongDistancePrefix":"0"},"loc":["services","hylafax","faxqConfig"],"readOnly":false,"type":"attribute set of list of string or signed integer convertible to it or boolean convertible to its or string or signed integer convertible to it or boolean convertible to it convertible to its"},"services.hylafax.faxqclean.archiving":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":"as-flagged","description":"Enable or suppress job archiving:\n<literal>never</literal> disables job archiving,\n<literal>as-flagged</literal> archives jobs that\nhave been flagged for archiving by sendfax,\n<literal>always</literal> forces archiving of all jobs.\nSee also sendfax(1) and faxqclean(8).\n","example":"always","loc":["services","hylafax","faxqclean","archiving"],"readOnly":false,"type":"one of \"never\", \"as-flagged\", \"always\""},"services.hylafax.faxqclean.docqMinutes":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":60,"description":"Set the document\nage threshold (in minutes) that controls how long\nunreferenced files may reside in the docq directory.\n","example":{"_type":"literalExample","text":"24*60"},"loc":["services","hylafax","faxqclean","docqMinutes"],"readOnly":false,"type":"signed integer"},"services.hylafax.faxqclean.doneqMinutes":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":15,"description":"Set the job\nage threshold (in minutes) that controls how long\njobs may reside in the doneq directory.\n","example":{"_type":"literalExample","text":"24*60"},"loc":["services","hylafax","faxqclean","doneqMinutes"],"readOnly":false,"type":"signed integer"},"services.hylafax.faxqclean.enable.frequency":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":null,"description":"Purge old files from the spooling area with\n<filename>faxcron</filename> with the given frequency\n(see systemd.time(7)).\n","example":"daily","loc":["services","hylafax","faxqclean","enable","frequency"],"readOnly":false,"type":"null or string"},"services.hylafax.faxqclean.enable.spoolInit":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":false,"description":"Whether to enable Purge old files from the spooling area with\n<filename>faxqclean</filename>\neach time the spooling area is initialized.\n.","example":true,"loc":["services","hylafax","faxqclean","enable","spoolInit"],"readOnly":false,"type":"boolean"},"services.hylafax.hfaxdConfig":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"description":"Attribute set of lines for the global\nhfaxd config file <filename>etc/hfaxd.conf</filename>.\nValues can be either strings or integers\n(which will be added to the config file verbatimly)\nor lists thereof\n(which will be translated to multiple\nlines with the same configuration key).\nBoolean values are translated to \"Yes\" or \"No\".\nThe default contains some reasonable\nconfiguration to yield an operational system.\n\n","example":{"RecvqProtection":"0400"},"loc":["services","hylafax","hfaxdConfig"],"readOnly":false,"type":"attribute set of list of string or signed integer convertible to it or boolean convertible to its or string or signed integer convertible to it or boolean convertible to it convertible to its"},"services.hylafax.internationalPrefix":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":null,"description":"International prefix for server and all modems.","example":"00","loc":["services","hylafax","internationalPrefix"],"readOnly":false,"type":"null or string"},"services.hylafax.longDistancePrefix":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":null,"description":"Long distance prefix for server and all modems.","example":"0","loc":["services","hylafax","longDistancePrefix"],"readOnly":false,"type":"null or string"},"services.hylafax.modems":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":{},"description":"Description of installed modems.\nAt least on modem must be defined\nto enable the HylaFAX server.\n","example":{"ttyS1":{"config":{"FAXNumber":"123456","LocalIdentifier":"Smith"},"type":"cirrus"}},"loc":["services","hylafax","modems"],"readOnly":false,"type":"list or attribute set of submodules"},"services.hylafax.modems.<name?>.config":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"description":"Attribute set of values for the given modem.\nValues can be either strings or integers\n(which will be added to the config file verbatimly)\nor lists thereof\n(which will be translated to multiple\nlines with the same configuration key).\nBoolean values are translated to \"Yes\" or \"No\".\nThe default contains some reasonable\nconfiguration to yield an operational system.\n\nOptions defined here override options in\n<option>commonModemConfig</option> for this modem.\n","example":{"AreaCode":"49","FAXNumber":"123456","LocalCode":"30","LocalIdentifier":"LostInBerlin"},"loc":["services","hylafax","modems","<name?>","config"],"readOnly":false,"type":"attribute set of list of string or signed integer convertible to it or boolean convertible to its or string or signed integer convertible to it or boolean convertible to it convertible to its"},"services.hylafax.modems.<name?>.name":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"description":"Name of modem device,\nwill be searched for in <filename>/dev</filename>.\n","example":"ttyS1","loc":["services","hylafax","modems","<name?>","name"],"readOnly":false,"type":"string"},"services.hylafax.modems.<name?>.type":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"description":"Name of modem configuration file,\nwill be searched for in <filename>config</filename>\nin the spooling area directory.\n","example":"cirrus","loc":["services","hylafax","modems","<name?>","type"],"readOnly":false,"type":"string"},"services.hylafax.sendmailPath":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"description":"Path to <filename>sendmail</filename> program.\nThe default uses the local sendmail wrapper\n(see <option>config.services.mail.sendmailSetuidWrapper</option>),\notherwise the <filename>false</filename>\nbinary to cause an error if used.\n","example":{"_type":"literalExample","text":"''${pkgs.postfix}/bin/sendmail"},"loc":["services","hylafax","sendmailPath"],"readOnly":false,"type":"path"},"services.hylafax.spoolAreaPath":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":"/var/spool/fax","description":"The spooling area will be created/maintained\nat the location given here.\n","loc":["services","hylafax","spoolAreaPath"],"readOnly":false,"type":"path"},"services.hylafax.spoolExtraInit":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":"","description":"Additional shell code that is executed within the\nspooling area directory right after its setup.\n","example":"chmod 0755 .  # everyone may read my faxes","loc":["services","hylafax","spoolExtraInit"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.hylafax.userAccessFile":{"declarations":["nixos/modules/services/networking/hylafax/options.nix"],"default":"/etc/hosts.hfaxd","description":"The <filename>hosts.hfaxd</filename>\nfile entry in the spooling area\nwill be symlinked to the location given here.\nThis file must exist and be\nreadable only by the <literal>uucp</literal> user.\nSee hosts.hfaxd(5) for details.\nThis configuration permits access for all users:\n<literal>\n  environment.etc.\"hosts.hfaxd\" = {\n    mode = \"0600\";\n    user = \"uucp\";\n    text = \".*\";\n  };\n</literal>\nNote that host-based access can be controlled with\n<option>config.systemd.sockets.hylafax-hfaxd.listenStreams</option>;\nby default, only 127.0.0.1 is permitted to connect.\n","loc":["services","hylafax","userAccessFile"],"readOnly":false,"type":"path"},"services.i2p.enable":{"declarations":["nixos/modules/services/networking/i2p.nix"],"default":false,"description":"Whether to enable I2P router.","example":true,"loc":["services","i2p","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Your external IP or hostname.\n","loc":["services","i2pd","address"],"readOnly":false,"type":"null or string"},"services.i2pd.addressbook.defaulturl":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"http://joajgazyztfssty4w2on5oaqksz6tqoxbduy553y34mf4byv6gpq.b32.i2p/export/alive-hosts.txt","description":"AddressBook subscription URL for initial setup\n","loc":["services","i2pd","addressbook","defaulturl"],"readOnly":false,"type":"string"},"services.i2pd.addressbook.subscriptions":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":["http://inr.i2p/export/alive-hosts.txt","http://i2p-projekt.i2p/hosts.txt","http://stats.i2p/cgi-bin/newhosts.txt"],"description":"AddressBook subscription URLs\n","loc":["services","i2pd","addressbook","subscriptions"],"readOnly":false,"type":"list of strings"},"services.i2pd.bandwidth":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Set a router bandwidth limit integer in KBps.\nIf not set, <command>i2pd</command> defaults to 32KBps.\n","loc":["services","i2pd","bandwidth"],"readOnly":false,"type":"null or signed integer"},"services.i2pd.dataDir":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Alternative path to storage of i2pd data (RI, keys, peer profiles, ...)\n","loc":["services","i2pd","dataDir"],"readOnly":false,"type":"null or string"},"services.i2pd.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Enables I2Pd as a running service upon activation.\nPlease read http://i2pd.readthedocs.io/en/latest/ for further\nconfiguration help.\n","example":true,"loc":["services","i2pd","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.enableIPv4":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":true,"description":"Whether to enable IPv4 connectivity.","example":true,"loc":["services","i2pd","enableIPv4"],"readOnly":false,"type":"boolean"},"services.i2pd.enableIPv6":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable IPv6 connectivity.","example":true,"loc":["services","i2pd","enableIPv6"],"readOnly":false,"type":"boolean"},"services.i2pd.exploratory.inbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for exploratory tunnels.","loc":["services","i2pd","exploratory","inbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.exploratory.inbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous exploratory tunnels.","loc":["services","i2pd","exploratory","inbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.exploratory.outbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for exploratory tunnels.","loc":["services","i2pd","exploratory","outbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.exploratory.outbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous exploratory tunnels.","loc":["services","i2pd","exploratory","outbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.family":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Specify a family the router belongs to.\n","loc":["services","i2pd","family"],"readOnly":false,"type":"null or string"},"services.i2pd.floodfill":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"If the router is declared to be unreachable and needs introduction nodes.\n","example":true,"loc":["services","i2pd","floodfill"],"readOnly":false,"type":"boolean"},"services.i2pd.ifname":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Network interface to bind to.\n","loc":["services","i2pd","ifname"],"readOnly":false,"type":"null or string"},"services.i2pd.ifname4":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"IPv4 interface to bind to.\n","loc":["services","i2pd","ifname4"],"readOnly":false,"type":"null or string"},"services.i2pd.ifname6":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"IPv6 interface to bind to.\n","loc":["services","i2pd","ifname6"],"readOnly":false,"type":"null or string"},"services.i2pd.inTunnels":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":{},"description":"Serve something on I2P network at port and delegate requests to address inPort.\n","loc":["services","i2pd","inTunnels"],"readOnly":false,"type":"list or attribute set of submodules"},"services.i2pd.inTunnels.<name?>.accessList":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":[],"description":"I2P nodes that are allowed to connect to this service.","loc":["services","i2pd","inTunnels","<name?>","accessList"],"readOnly":false,"type":"list of strings"},"services.i2pd.inTunnels.<name?>.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for ‹name› endpoint.","loc":["services","i2pd","inTunnels","<name?>","address"],"readOnly":false,"type":"string"},"services.i2pd.inTunnels.<name?>.crypto.tagsToSend":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":40,"description":"Number of ElGamal/AES tags to send.","loc":["services","i2pd","inTunnels","<name?>","crypto","tagsToSend"],"readOnly":false,"type":"signed integer"},"services.i2pd.inTunnels.<name?>.destination":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"description":"Remote endpoint, I2P hostname or b32.i2p address.","loc":["services","i2pd","inTunnels","<name?>","destination"],"readOnly":false,"type":"string"},"services.i2pd.inTunnels.<name?>.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable ‹name›.","example":true,"loc":["services","i2pd","inTunnels","<name?>","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.inTunnels.<name?>.inPort":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":0,"description":"Service port. Default to the tunnel's listen port.","loc":["services","i2pd","inTunnels","<name?>","inPort"],"readOnly":false,"type":"signed integer"},"services.i2pd.inTunnels.<name?>.inbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for ‹name› tunnels.","loc":["services","i2pd","inTunnels","<name?>","inbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.inTunnels.<name?>.inbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous ‹name› tunnels.","loc":["services","i2pd","inTunnels","<name?>","inbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.inTunnels.<name?>.keys":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"‹name›-keys.dat","description":"Keyset used for tunnel identity.","loc":["services","i2pd","inTunnels","<name?>","keys"],"readOnly":false,"type":"string"},"services.i2pd.inTunnels.<name?>.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"‹name›","description":"The endpoint name.","loc":["services","i2pd","inTunnels","<name?>","name"],"readOnly":false,"type":"string"},"services.i2pd.inTunnels.<name?>.outbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for ‹name› tunnels.","loc":["services","i2pd","inTunnels","<name?>","outbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.inTunnels.<name?>.outbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous ‹name› tunnels.","loc":["services","i2pd","inTunnels","<name?>","outbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.inTunnels.<name?>.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":0,"description":"Bind port for ‹name› endoint.","loc":["services","i2pd","inTunnels","<name?>","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.limits.coreSize":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":0,"description":"Maximum size of corefile in Kb (0 - use system limit).\n","loc":["services","i2pd","limits","coreSize"],"readOnly":false,"type":"signed integer"},"services.i2pd.limits.ntcpHard":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":0,"description":"Maximum number of active transit sessions.\n","loc":["services","i2pd","limits","ntcpHard"],"readOnly":false,"type":"signed integer"},"services.i2pd.limits.ntcpSoft":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":0,"description":"Threshold to start probabalistic backoff with ntcp sessions (default: use system limit).\n","loc":["services","i2pd","limits","ntcpSoft"],"readOnly":false,"type":"signed integer"},"services.i2pd.limits.ntcpThreads":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":1,"description":"Maximum number of threads used by NTCP DH worker.\n","loc":["services","i2pd","limits","ntcpThreads"],"readOnly":false,"type":"signed integer"},"services.i2pd.limits.openFiles":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":0,"description":"Maximum number of open files (0 - use system default).\n","loc":["services","i2pd","limits","openFiles"],"readOnly":false,"type":"signed integer"},"services.i2pd.limits.transittunnels":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":2500,"description":"Maximum number of active transit sessions.\n","loc":["services","i2pd","limits","transittunnels"],"readOnly":false,"type":"signed integer"},"services.i2pd.logCLFTime":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable Full CLF-formatted date and time to log.","example":true,"loc":["services","i2pd","logCLFTime"],"readOnly":false,"type":"boolean"},"services.i2pd.logLevel":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"error","description":"The log level. <command>i2pd</command> defaults to \"info\"\nbut that generates copious amounts of log messages.\n\nWe default to \"error\" which is similar to the default log\nlevel of <command>tor</command>.\n","loc":["services","i2pd","logLevel"],"readOnly":false,"type":"one of \"debug\", \"info\", \"warn\", \"error\""},"services.i2pd.nat":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":true,"description":"Whether to enable NAT bypass.","example":true,"loc":["services","i2pd","nat"],"readOnly":false,"type":"boolean"},"services.i2pd.netid":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":2,"description":"I2P overlay netid.\n","loc":["services","i2pd","netid"],"readOnly":false,"type":"signed integer"},"services.i2pd.notransit":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Tells the router to not accept transit tunnels during startup.\n","example":true,"loc":["services","i2pd","notransit"],"readOnly":false,"type":"boolean"},"services.i2pd.ntcp":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":true,"description":"Whether to enable ntcp.","example":true,"loc":["services","i2pd","ntcp"],"readOnly":false,"type":"boolean"},"services.i2pd.ntcp2.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":true,"description":"Whether to enable NTCP2..","example":true,"loc":["services","i2pd","ntcp2","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.ntcp2.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":0,"description":"Port to listen for incoming NTCP2 connections (0=auto).\n","loc":["services","i2pd","ntcp2","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.ntcp2.published":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable NTCP2 publication..","example":true,"loc":["services","i2pd","ntcp2","published"],"readOnly":false,"type":"boolean"},"services.i2pd.ntcpProxy":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Proxy URL for NTCP transport.\n","loc":["services","i2pd","ntcpProxy"],"readOnly":false,"type":"null or string"},"services.i2pd.outTunnels":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":{},"description":"Connect to someone as a client and establish a local accept endpoint\n","loc":["services","i2pd","outTunnels"],"readOnly":false,"type":"list or attribute set of submodules"},"services.i2pd.outTunnels.<name?>.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for ‹name› endpoint.","loc":["services","i2pd","outTunnels","<name?>","address"],"readOnly":false,"type":"string"},"services.i2pd.outTunnels.<name?>.crypto.tagsToSend":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":40,"description":"Number of ElGamal/AES tags to send.","loc":["services","i2pd","outTunnels","<name?>","crypto","tagsToSend"],"readOnly":false,"type":"signed integer"},"services.i2pd.outTunnels.<name?>.destination":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"description":"Remote endpoint, I2P hostname or b32.i2p address.","loc":["services","i2pd","outTunnels","<name?>","destination"],"readOnly":false,"type":"string"},"services.i2pd.outTunnels.<name?>.destinationPort":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Connect to particular port at destination.","loc":["services","i2pd","outTunnels","<name?>","destinationPort"],"readOnly":false,"type":"null or signed integer"},"services.i2pd.outTunnels.<name?>.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable ‹name›.","example":true,"loc":["services","i2pd","outTunnels","<name?>","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.outTunnels.<name?>.inbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for ‹name› tunnels.","loc":["services","i2pd","outTunnels","<name?>","inbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.outTunnels.<name?>.inbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous ‹name› tunnels.","loc":["services","i2pd","outTunnels","<name?>","inbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.outTunnels.<name?>.keys":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"‹name›-keys.dat","description":"Keyset used for tunnel identity.","loc":["services","i2pd","outTunnels","<name?>","keys"],"readOnly":false,"type":"string"},"services.i2pd.outTunnels.<name?>.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"‹name›","description":"The endpoint name.","loc":["services","i2pd","outTunnels","<name?>","name"],"readOnly":false,"type":"string"},"services.i2pd.outTunnels.<name?>.outbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for ‹name› tunnels.","loc":["services","i2pd","outTunnels","<name?>","outbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.outTunnels.<name?>.outbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous ‹name› tunnels.","loc":["services","i2pd","outTunnels","<name?>","outbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.outTunnels.<name?>.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":0,"description":"Bind port for ‹name› endoint.","loc":["services","i2pd","outTunnels","<name?>","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"I2P listen port. If no one is given the router will pick between 9111 and 30777.\n","loc":["services","i2pd","port"],"readOnly":false,"type":"null or signed integer"},"services.i2pd.precomputation.elgamal":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":true,"description":"Whenever to use precomputated tables for ElGamal.\n<command>i2pd</command> defaults to <literal>false</literal>\nto save 64M of memory (and looses some performance).\n\nWe default to <literal>true</literal> as that is what most\nusers want anyway.\n","example":true,"loc":["services","i2pd","precomputation","elgamal"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.bob.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for bob endpoint.","loc":["services","i2pd","proto","bob","address"],"readOnly":false,"type":"string"},"services.i2pd.proto.bob.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable bob.","example":true,"loc":["services","i2pd","proto","bob","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.bob.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"bob","description":"The endpoint name.","loc":["services","i2pd","proto","bob","name"],"readOnly":false,"type":"string"},"services.i2pd.proto.bob.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":2827,"description":"Bind port for bob endoint.","loc":["services","i2pd","proto","bob","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.http.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for http endpoint.","loc":["services","i2pd","proto","http","address"],"readOnly":false,"type":"string"},"services.i2pd.proto.http.auth":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable Webconsole authentication.","example":true,"loc":["services","i2pd","proto","http","auth"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.http.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable http.","example":true,"loc":["services","i2pd","proto","http","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.http.hostname":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Expected hostname for WebUI.\n","loc":["services","i2pd","proto","http","hostname"],"readOnly":false,"type":"null or string"},"services.i2pd.proto.http.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"http","description":"The endpoint name.","loc":["services","i2pd","proto","http","name"],"readOnly":false,"type":"string"},"services.i2pd.proto.http.pass":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"i2pd","description":"Password for webconsole access.\n","loc":["services","i2pd","proto","http","pass"],"readOnly":false,"type":"string"},"services.i2pd.proto.http.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":7070,"description":"Bind port for http endoint.","loc":["services","i2pd","proto","http","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.http.strictHeaders":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Enable strict host checking on WebUI.\n","loc":["services","i2pd","proto","http","strictHeaders"],"readOnly":false,"type":"null or boolean"},"services.i2pd.proto.http.user":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"i2pd","description":"Username for webconsole access\n","loc":["services","i2pd","proto","http","user"],"readOnly":false,"type":"string"},"services.i2pd.proto.httpProxy.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for httpproxy endpoint.","loc":["services","i2pd","proto","httpProxy","address"],"readOnly":false,"type":"string"},"services.i2pd.proto.httpProxy.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable httpproxy.","example":true,"loc":["services","i2pd","proto","httpProxy","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.httpProxy.inbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for httpproxy tunnels.","loc":["services","i2pd","proto","httpProxy","inbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.httpProxy.inbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous httpproxy tunnels.","loc":["services","i2pd","proto","httpProxy","inbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.httpProxy.keys":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"httpproxy-keys.dat","description":"File to persist HTTPPROXY keys.\n","loc":["services","i2pd","proto","httpProxy","keys"],"readOnly":false,"type":"null or string"},"services.i2pd.proto.httpProxy.latency.max":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Max latency for tunnels.","loc":["services","i2pd","proto","httpProxy","latency","max"],"readOnly":false,"type":"null or signed integer"},"services.i2pd.proto.httpProxy.latency.min":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Min latency for tunnels.","loc":["services","i2pd","proto","httpProxy","latency","min"],"readOnly":false,"type":"null or signed integer"},"services.i2pd.proto.httpProxy.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"httpproxy","description":"The endpoint name.","loc":["services","i2pd","proto","httpProxy","name"],"readOnly":false,"type":"string"},"services.i2pd.proto.httpProxy.outbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for httpproxy tunnels.","loc":["services","i2pd","proto","httpProxy","outbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.httpProxy.outbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous httpproxy tunnels.","loc":["services","i2pd","proto","httpProxy","outbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.httpProxy.outproxy":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Upstream outproxy bind address.","loc":["services","i2pd","proto","httpProxy","outproxy"],"readOnly":false,"type":"null or string"},"services.i2pd.proto.httpProxy.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":4444,"description":"Bind port for httpproxy endoint.","loc":["services","i2pd","proto","httpProxy","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.i2cp.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for i2cp endpoint.","loc":["services","i2pd","proto","i2cp","address"],"readOnly":false,"type":"string"},"services.i2pd.proto.i2cp.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable i2cp.","example":true,"loc":["services","i2pd","proto","i2cp","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.i2cp.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"i2cp","description":"The endpoint name.","loc":["services","i2pd","proto","i2cp","name"],"readOnly":false,"type":"string"},"services.i2pd.proto.i2cp.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":7654,"description":"Bind port for i2cp endoint.","loc":["services","i2pd","proto","i2cp","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.i2pControl.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for i2pcontrol endpoint.","loc":["services","i2pd","proto","i2pControl","address"],"readOnly":false,"type":"string"},"services.i2pd.proto.i2pControl.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable i2pcontrol.","example":true,"loc":["services","i2pd","proto","i2pControl","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.i2pControl.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"i2pcontrol","description":"The endpoint name.","loc":["services","i2pd","proto","i2pControl","name"],"readOnly":false,"type":"string"},"services.i2pd.proto.i2pControl.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":7650,"description":"Bind port for i2pcontrol endoint.","loc":["services","i2pd","proto","i2pControl","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.sam.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for sam endpoint.","loc":["services","i2pd","proto","sam","address"],"readOnly":false,"type":"string"},"services.i2pd.proto.sam.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable sam.","example":true,"loc":["services","i2pd","proto","sam","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.sam.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"sam","description":"The endpoint name.","loc":["services","i2pd","proto","sam","name"],"readOnly":false,"type":"string"},"services.i2pd.proto.sam.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":7656,"description":"Bind port for sam endoint.","loc":["services","i2pd","proto","sam","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.socksProxy.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for socksproxy endpoint.","loc":["services","i2pd","proto","socksProxy","address"],"readOnly":false,"type":"string"},"services.i2pd.proto.socksProxy.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable socksproxy.","example":true,"loc":["services","i2pd","proto","socksProxy","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.socksProxy.inbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for socksproxy tunnels.","loc":["services","i2pd","proto","socksProxy","inbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.socksProxy.inbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous socksproxy tunnels.","loc":["services","i2pd","proto","socksProxy","inbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.socksProxy.keys":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"socksproxy-keys.dat","description":"File to persist SOCKSPROXY keys.\n","loc":["services","i2pd","proto","socksProxy","keys"],"readOnly":false,"type":"null or string"},"services.i2pd.proto.socksProxy.latency.max":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Max latency for tunnels.","loc":["services","i2pd","proto","socksProxy","latency","max"],"readOnly":false,"type":"null or signed integer"},"services.i2pd.proto.socksProxy.latency.min":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Min latency for tunnels.","loc":["services","i2pd","proto","socksProxy","latency","min"],"readOnly":false,"type":"null or signed integer"},"services.i2pd.proto.socksProxy.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"socksproxy","description":"The endpoint name.","loc":["services","i2pd","proto","socksProxy","name"],"readOnly":false,"type":"string"},"services.i2pd.proto.socksProxy.outbound.length":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":3,"description":"Guaranteed minimum hops for socksproxy tunnels.","loc":["services","i2pd","proto","socksProxy","outbound","length"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.socksProxy.outbound.quantity":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":5,"description":"Number of simultaneous socksproxy tunnels.","loc":["services","i2pd","proto","socksProxy","outbound","quantity"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.socksProxy.outproxy":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Upstream outproxy bind address.","loc":["services","i2pd","proto","socksProxy","outproxy"],"readOnly":false,"type":"string"},"services.i2pd.proto.socksProxy.outproxyEnable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable SOCKS outproxy.","example":true,"loc":["services","i2pd","proto","socksProxy","outproxyEnable"],"readOnly":false,"type":"boolean"},"services.i2pd.proto.socksProxy.outproxyPort":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":4444,"description":"Upstream outproxy bind port.","loc":["services","i2pd","proto","socksProxy","outproxyPort"],"readOnly":false,"type":"signed integer"},"services.i2pd.proto.socksProxy.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":4447,"description":"Bind port for socksproxy endoint.","loc":["services","i2pd","proto","socksProxy","port"],"readOnly":false,"type":"signed integer"},"services.i2pd.reseed.file":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Full path to SU3 file to reseed from.\n","loc":["services","i2pd","reseed","file"],"readOnly":false,"type":"null or string"},"services.i2pd.reseed.floodfill":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Path to router info of floodfill to reseed from.\n","loc":["services","i2pd","reseed","floodfill"],"readOnly":false,"type":"null or string"},"services.i2pd.reseed.proxy":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"URL for reseed proxy, supports http/socks.\n","loc":["services","i2pd","reseed","proxy"],"readOnly":false,"type":"null or string"},"services.i2pd.reseed.urls":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":[],"description":"Reseed URLs.\n","loc":["services","i2pd","reseed","urls"],"readOnly":false,"type":"list of strings"},"services.i2pd.reseed.verify":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable SU3 signature verification.","example":true,"loc":["services","i2pd","reseed","verify"],"readOnly":false,"type":"boolean"},"services.i2pd.reseed.zipfile":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Path to local .zip file to reseed from.\n","loc":["services","i2pd","reseed","zipfile"],"readOnly":false,"type":"null or string"},"services.i2pd.share":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":100,"description":"Limit of transit traffic from max bandwidth in percents.\n","loc":["services","i2pd","share"],"readOnly":false,"type":"signed integer"},"services.i2pd.ssu":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":true,"description":"Whether to enable ssu.","example":true,"loc":["services","i2pd","ssu"],"readOnly":false,"type":"boolean"},"services.i2pd.trust.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable Explicit trust options.","example":true,"loc":["services","i2pd","trust","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.trust.family":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":null,"description":"Router Familiy to trust for first hops.\n","loc":["services","i2pd","trust","family"],"readOnly":false,"type":"null or string"},"services.i2pd.trust.hidden":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable Router concealment..","example":true,"loc":["services","i2pd","trust","hidden"],"readOnly":false,"type":"boolean"},"services.i2pd.trust.routers":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":[],"description":"Only connect to the listed routers.\n","loc":["services","i2pd","trust","routers"],"readOnly":false,"type":"list of strings"},"services.i2pd.upnp.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable UPnP service discovery.","example":true,"loc":["services","i2pd","upnp","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.upnp.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"I2Pd","description":"Name i2pd appears in UPnP forwardings list.\n","loc":["services","i2pd","upnp","name"],"readOnly":false,"type":"string"},"services.i2pd.websocket.address":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"127.0.0.1","description":"Bind address for websockets endpoint.","loc":["services","i2pd","websocket","address"],"readOnly":false,"type":"string"},"services.i2pd.websocket.enable":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":false,"description":"Whether to enable websockets.","example":true,"loc":["services","i2pd","websocket","enable"],"readOnly":false,"type":"boolean"},"services.i2pd.websocket.name":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":"websockets","description":"The endpoint name.","loc":["services","i2pd","websocket","name"],"readOnly":false,"type":"string"},"services.i2pd.websocket.port":{"declarations":["nixos/modules/services/networking/i2pd.nix"],"default":7666,"description":"Bind port for websockets endoint.","loc":["services","i2pd","websocket","port"],"readOnly":false,"type":"signed integer"},"services.icecast.admin.password":{"declarations":["nixos/modules/services/audio/icecast.nix"],"description":"Password used for all administration functions.","loc":["services","icecast","admin","password"],"readOnly":false,"type":"string"},"services.icecast.admin.user":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":"admin","description":"Username used for all administration functions.","loc":["services","icecast","admin","user"],"readOnly":false,"type":"string"},"services.icecast.enable":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":false,"description":"Whether to enable Icecast server.","example":true,"loc":["services","icecast","enable"],"readOnly":false,"type":"boolean"},"services.icecast.extraConf":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":"","description":"icecast.xml content.","loc":["services","icecast","extraConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.icecast.group":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":"nogroup","description":"Group privileges for the server.","loc":["services","icecast","group"],"readOnly":false,"type":"string"},"services.icecast.hostname":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":null,"description":"DNS name or IP address that will be used for the stream directory lookups or possibily the playlist generation if a Host header is not provided.","loc":["services","icecast","hostname"],"readOnly":false,"type":"string"},"services.icecast.listen.address":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":"::","description":"Address Icecast will listen on.","loc":["services","icecast","listen","address"],"readOnly":false,"type":"string"},"services.icecast.listen.port":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":8000,"description":"TCP port that will be used to accept client connections.","loc":["services","icecast","listen","port"],"readOnly":false,"type":"signed integer"},"services.icecast.logDir":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":"/var/log/icecast","description":"Base directory used for logging.","loc":["services","icecast","logDir"],"readOnly":false,"type":"path"},"services.icecast.user":{"declarations":["nixos/modules/services/audio/icecast.nix"],"default":"nobody","description":"User privileges for the server.","loc":["services","icecast","user"],"readOnly":false,"type":"string"},"services.ihaskell.enable":{"declarations":["nixos/modules/services/misc/ihaskell.nix"],"default":false,"description":"Autostart an IHaskell notebook service.","loc":["services","ihaskell","enable"],"readOnly":false,"type":"unspecified"},"services.ihaskell.extraPackages":{"declarations":["nixos/modules/services/misc/ihaskell.nix"],"default":"<function>","description":"Extra packages available to ghc when running ihaskell. The\nvalue must be a function which receives the attrset defined\nin <varname>haskellPackages</varname> as the sole argument.\n","example":{"_type":"literalExample","text":"haskellPackages: [\n  haskellPackages.wreq\n  haskellPackages.lens\n]\n"},"loc":["services","ihaskell","extraPackages"],"readOnly":false,"type":"unspecified"},"services.illum.enable":{"declarations":["nixos/modules/services/hardware/illum.nix"],"default":false,"description":"Enable illum, a daemon for controlling screen brightness with brightness buttons.\n","loc":["services","illum","enable"],"readOnly":false,"type":"boolean"},"services.incron.allow":{"declarations":["nixos/modules/services/monitoring/incron.nix"],"default":null,"description":"Users allowed to use incrontab.\n\nIf empty then no user will be allowed to have their own incrontab.\nIf <literal>null</literal> then will defer to <option>deny</option>.\nIf both <option>allow</option> and <option>deny</option> are null\nthen all users will be allowed to have their own incrontab.\n","loc":["services","incron","allow"],"readOnly":false,"type":"null or list of strings"},"services.incron.deny":{"declarations":["nixos/modules/services/monitoring/incron.nix"],"default":null,"description":"Users forbidden from using incrontab.","loc":["services","incron","deny"],"readOnly":false,"type":"null or list of strings"},"services.incron.enable":{"declarations":["nixos/modules/services/monitoring/incron.nix"],"default":false,"description":"Whether to enable the incron daemon.\n\nNote that commands run under incrontab only support common Nix profiles for the <envar>PATH</envar> provided variable.\n","loc":["services","incron","enable"],"readOnly":false,"type":"boolean"},"services.incron.extraPackages":{"declarations":["nixos/modules/services/monitoring/incron.nix"],"default":[],"description":"Extra packages available to the system incrontab.","example":{"_type":"literalExample","text":"[ pkgs.rsync ]"},"loc":["services","incron","extraPackages"],"readOnly":false,"type":"list of packages"},"services.incron.systab":{"declarations":["nixos/modules/services/monitoring/incron.nix"],"default":"","description":"The system incrontab contents.","example":"/var/mail IN_CLOSE_WRITE abc $@/$#\n/tmp IN_ALL_EVENTS efg $@/$# $&\n","loc":["services","incron","systab"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.infinoted.certificateChain":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":null,"description":"Chain of CA-certificates to which our `certificateFile` is relative.\nOptional for TLS.\n","loc":["services","infinoted","certificateChain"],"readOnly":false,"type":"null or path"},"services.infinoted.certificateFile":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":null,"description":"Server certificate to use for TLS\n","loc":["services","infinoted","certificateFile"],"readOnly":false,"type":"null or path"},"services.infinoted.enable":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":false,"description":"Whether to enable infinoted.","example":true,"loc":["services","infinoted","enable"],"readOnly":false,"type":"boolean"},"services.infinoted.extraConfig":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":"[autosave]\ninterval=10\n","description":"Additional configuration to append to infinoted.conf\n","loc":["services","infinoted","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.infinoted.group":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":"infinoted","description":"What to call the primary group of the dedicated user under which infinoted is run\n","loc":["services","infinoted","group"],"readOnly":false,"type":"string"},"services.infinoted.keyFile":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":null,"description":"Private key to use for TLS\n","loc":["services","infinoted","keyFile"],"readOnly":false,"type":"null or path"},"services.infinoted.package":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":"pkgs.libinfinity","description":"Package providing infinoted\n","loc":["services","infinoted","package"],"readOnly":false,"type":"package"},"services.infinoted.passwordFile":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":null,"description":"File to read server-wide password from\n","loc":["services","infinoted","passwordFile"],"readOnly":false,"type":"null or path"},"services.infinoted.plugins":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":["note-text","note-chat","logging","autosave"],"description":"Plugins to enable\n","loc":["services","infinoted","plugins"],"readOnly":false,"type":"list of strings"},"services.infinoted.port":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":6523,"description":"Port to listen on\n","loc":["services","infinoted","port"],"readOnly":false,"type":"signed integer"},"services.infinoted.rootDirectory":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":"/var/lib/infinoted/documents/","description":"Root of the directory structure to serve\n","loc":["services","infinoted","rootDirectory"],"readOnly":false,"type":"path"},"services.infinoted.securityPolicy":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":"require-tls","description":"How strictly to enforce clients connection with TLS.\n","loc":["services","infinoted","securityPolicy"],"readOnly":false,"type":"one of \"no-tls\", \"allow-tls\", \"require-tls\""},"services.infinoted.user":{"declarations":["nixos/modules/services/editors/infinoted.nix"],"default":"infinoted","description":"What to call the dedicated user under which infinoted is run\n","loc":["services","infinoted","user"],"readOnly":false,"type":"string"},"services.influxdb.dataDir":{"declarations":["nixos/modules/services/databases/influxdb.nix"],"default":"/var/db/influxdb","description":"Data directory for influxd data files.","loc":["services","influxdb","dataDir"],"readOnly":false,"type":"path"},"services.influxdb.enable":{"declarations":["nixos/modules/services/databases/influxdb.nix"],"default":false,"description":"Whether to enable the influxdb server","loc":["services","influxdb","enable"],"readOnly":false,"type":"boolean"},"services.influxdb.extraConfig":{"declarations":["nixos/modules/services/databases/influxdb.nix"],"default":{},"description":"Extra configuration options for influxdb","loc":["services","influxdb","extraConfig"],"readOnly":false,"type":"attribute set"},"services.influxdb.group":{"declarations":["nixos/modules/services/databases/influxdb.nix"],"default":"influxdb","description":"Group under which influxdb runs","loc":["services","influxdb","group"],"readOnly":false,"type":"Concatenated string"},"services.influxdb.package":{"declarations":["nixos/modules/services/databases/influxdb.nix"],"default":"pkgs.influxdb","description":"Which influxdb derivation to use","loc":["services","influxdb","package"],"readOnly":false,"type":"package"},"services.influxdb.user":{"declarations":["nixos/modules/services/databases/influxdb.nix"],"default":"influxdb","description":"User account under which influxdb runs","loc":["services","influxdb","user"],"readOnly":false,"type":"Concatenated string"},"services.interception-tools.enable":{"declarations":["nixos/modules/services/hardware/interception-tools.nix"],"default":false,"description":"Whether to enable the interception tools service.","loc":["services","interception-tools","enable"],"readOnly":false,"type":"boolean"},"services.interception-tools.plugins":{"declarations":["nixos/modules/services/hardware/interception-tools.nix"],"default":["interception-tools-caps2esc-0.1.0"],"description":"A list of interception tools plugins that will be made available to use\ninside the udevmon configuration.\n","loc":["services","interception-tools","plugins"],"readOnly":false,"type":"list of packages"},"services.interception-tools.udevmonConfig":{"declarations":["nixos/modules/services/hardware/interception-tools.nix"],"default":"- JOB: \"intercept -g $DEVNODE | caps2esc | uinput -d $DEVNODE\"\n  DEVICE:\n    EVENTS:\n      EV_KEY: [KEY_CAPSLOCK, KEY_ESC]\n","description":"String of udevmon YAML configuration, or path to a udevmon YAML\nconfiguration file.\n","example":"- JOB: \"intercept -g $DEVNODE | y2z | x2y | uinput -d $DEVNODE\"\n  DEVICE:\n    EVENTS:\n      EV_KEY: [KEY_X, KEY_Y]\n","loc":["services","interception-tools","udevmonConfig"],"readOnly":false,"type":"string or path"},"services.iodine.clients":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":{},"description":"Each attribute of this option defines a systemd service that\nruns iodine. Many or none may be defined.\nThe name of each service is\n<literal>iodine-<replaceable>name</replaceable></literal>\nwhere <replaceable>name</replaceable> is the name of the\ncorresponding attribute name.\n","example":{"_type":"literalExample","text":"{\n  foo = {\n    server = \"tunnel.mdomain.com\";\n    relay = \"8.8.8.8\";\n    extraConfig = \"-v\";\n  }\n}\n"},"loc":["services","iodine","clients"],"readOnly":false,"type":"attribute set of submodules"},"services.iodine.clients.<name>.extraConfig":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":"","description":"Additional command line parameters","example":"-l 192.168.1.10 -p 23","loc":["services","iodine","clients","<name>","extraConfig"],"readOnly":false,"type":"string"},"services.iodine.clients.<name>.passwordFile":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":"","description":"File that containts password","loc":["services","iodine","clients","<name>","passwordFile"],"readOnly":false,"type":"string"},"services.iodine.clients.<name>.relay":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":"","description":"DNS server to use as a intermediate relay to the iodined server","example":"8.8.8.8","loc":["services","iodine","clients","<name>","relay"],"readOnly":false,"type":"string"},"services.iodine.clients.<name>.server":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":"","description":"Domain or Subdomain of server running iodined","example":"tunnel.mydomain.com","loc":["services","iodine","clients","<name>","server"],"readOnly":false,"type":"string"},"services.iodine.server.domain":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":"","description":"Domain or subdomain of which nameservers point to us","example":"tunnel.mydomain.com","loc":["services","iodine","server","domain"],"readOnly":false,"type":"string"},"services.iodine.server.enable":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":false,"description":"enable iodined server","loc":["services","iodine","server","enable"],"readOnly":false,"type":"boolean"},"services.iodine.server.extraConfig":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":"","description":"Additional command line parameters","example":"-l 192.168.1.10 -p 23","loc":["services","iodine","server","extraConfig"],"readOnly":false,"type":"string"},"services.iodine.server.ip":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":"","description":"The assigned ip address or ip range","example":"172.16.10.1/24","loc":["services","iodine","server","ip"],"readOnly":false,"type":"string"},"services.iodine.server.passwordFile":{"declarations":["nixos/modules/services/networking/iodine.nix"],"default":"","description":"File that containts password","loc":["services","iodine","server","passwordFile"],"readOnly":false,"type":"string"},"services.iperf3.affinity":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":null,"description":"CPU affinity for the process.","loc":["services","iperf3","affinity"],"readOnly":false,"type":"null or unsigned integer, meaning >=0"},"services.iperf3.authorizedUsersFile":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":null,"description":"Path to the configuration file containing authorized users credentials to run iperf tests.","loc":["services","iperf3","authorizedUsersFile"],"readOnly":false,"type":"null or path"},"services.iperf3.bind":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":null,"description":"Bind to the specific interface associated with the given address.","loc":["services","iperf3","bind"],"readOnly":false,"type":"null or string"},"services.iperf3.debug":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":false,"description":"Emit debugging output.","loc":["services","iperf3","debug"],"readOnly":false,"type":"boolean"},"services.iperf3.enable":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":false,"description":"Whether to enable iperf3 network throughput testing server.","example":true,"loc":["services","iperf3","enable"],"readOnly":false,"type":"boolean"},"services.iperf3.extraFlags":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":[],"description":"Extra flags to pass to iperf3(1).","loc":["services","iperf3","extraFlags"],"readOnly":false,"type":"list of strings"},"services.iperf3.forceFlush":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":false,"description":"Force flushing output at every interval.","loc":["services","iperf3","forceFlush"],"readOnly":false,"type":"boolean"},"services.iperf3.port":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":5201,"description":"Server port to listen on for iperf3 client requsts.","loc":["services","iperf3","port"],"readOnly":false,"type":"16 bit unsigned integer; between 0 and 65535 (both inclusive)"},"services.iperf3.rsaPrivateKey":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":null,"description":"Path to the RSA private key (not password-protected) used to decrypt authentication credentials from the client.","loc":["services","iperf3","rsaPrivateKey"],"readOnly":false,"type":"null or path"},"services.iperf3.verbose":{"declarations":["nixos/modules/services/networking/iperf3.nix"],"default":false,"description":"Give more detailed output.","loc":["services","iperf3","verbose"],"readOnly":false,"type":"boolean"},"services.ipfs.apiAddress":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":"/ip4/127.0.0.1/tcp/5001","description":"Where IPFS exposes its API to","loc":["services","ipfs","apiAddress"],"readOnly":false,"type":"string"},"services.ipfs.autoMount":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":false,"description":"Whether IPFS should try to mount /ipfs and /ipns at startup.","loc":["services","ipfs","autoMount"],"readOnly":false,"type":"boolean"},"services.ipfs.dataDir":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":"/var/lib/ipfs","description":"The data dir for IPFS","loc":["services","ipfs","dataDir"],"readOnly":false,"type":"string"},"services.ipfs.defaultMode":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":"online","description":"systemd service that is enabled by default","loc":["services","ipfs","defaultMode"],"readOnly":false,"type":"one of \"online\", \"offline\", \"norouting\""},"services.ipfs.emptyRepo":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":false,"description":"If set to true, the repo won't be initialized with help files","loc":["services","ipfs","emptyRepo"],"readOnly":false,"type":"boolean"},"services.ipfs.enable":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":false,"description":"Whether to enable Interplanetary File System.","example":true,"loc":["services","ipfs","enable"],"readOnly":false,"type":"boolean"},"services.ipfs.enableGC":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":false,"description":"Whether to enable automatic garbage collection","loc":["services","ipfs","enableGC"],"readOnly":false,"type":"boolean"},"services.ipfs.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":{},"description":"Attrset of daemon configuration to set using <command>ipfs config</command>, every time the daemon starts.\nThese are applied last, so may override configuration set by other options in this module.\nKeep in mind that this configuration is stateful; i.e., unsetting anything in here does not reset the value to the default!\n","example":{"Bootstrap":["/ip4/128.199.219.111/tcp/4001/ipfs/QmSoLSafTMBsPKadTEgaXctDQVcqN88CNLHXMkTNwMKPnu","/ip4/162.243.248.213/tcp/4001/ipfs/QmSoLueR4xBeUbY9WZ9xGUUxunbKWcrNFTDAadQJmocnWm"],"Datastore":{"StorageMax":"100GB"},"Discovery":{"MDNS":{"Enabled":false}},"Swarm":{"AddrFilters":null}},"loc":["services","ipfs","extraConfig"],"readOnly":false,"type":"attribute set"},"services.ipfs.extraFlags":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":[],"description":"Extra flags passed to the IPFS daemon","loc":["services","ipfs","extraFlags"],"readOnly":false,"type":"list of strings"},"services.ipfs.gatewayAddress":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":"/ip4/127.0.0.1/tcp/8080","description":"Where the IPFS Gateway can be reached","loc":["services","ipfs","gatewayAddress"],"readOnly":false,"type":"string"},"services.ipfs.group":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":"ipfs","description":"Group under which the IPFS daemon runs","loc":["services","ipfs","group"],"readOnly":false,"type":"string"},"services.ipfs.ipfsMountDir":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":"/ipfs","description":"Where to mount the IPFS namespace to","loc":["services","ipfs","ipfsMountDir"],"readOnly":false,"type":"string"},"services.ipfs.ipnsMountDir":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":"/ipns","description":"Where to mount the IPNS namespace to","loc":["services","ipfs","ipnsMountDir"],"readOnly":false,"type":"string"},"services.ipfs.localDiscovery":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":true,"description":"Whether to enable local discovery for the ipfs daemon.\n          This will allow ipfs to scan ports on your local network. Some hosting services will ban you if you do this.\n","loc":["services","ipfs","localDiscovery"],"readOnly":false,"type":"boolean"},"services.ipfs.serviceFdlimit":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":null,"description":"The fdlimit for the IPFS systemd unit or <literal>null</literal> to have the daemon attempt to manage it","example":65536,"loc":["services","ipfs","serviceFdlimit"],"readOnly":false,"type":"null or signed integer"},"services.ipfs.swarmAddress":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":["/ip4/0.0.0.0/tcp/4001","/ip6/::/tcp/4001"],"description":"Where IPFS listens for incoming p2p connections","loc":["services","ipfs","swarmAddress"],"readOnly":false,"type":"list of strings"},"services.ipfs.user":{"declarations":["nixos/modules/services/network-filesystems/ipfs.nix"],"default":"ipfs","description":"User under which the IPFS daemon runs","loc":["services","ipfs","user"],"readOnly":false,"type":"string"},"services.ircdHybrid.adminEmail":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":"<bit-bucket@example.com>","description":"\n          IRCD server administrator e-mail.\n        ","example":"<name@domain.tld>","loc":["services","ircdHybrid","adminEmail"],"readOnly":false,"type":"unspecified"},"services.ircdHybrid.certificate":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":null,"description":"\n          IRCD server SSL certificate. There are some limitations - read manual.\n        ","example":{"_type":"literalExample","text":"/root/certificates/irc.pem"},"loc":["services","ircdHybrid","certificate"],"readOnly":false,"type":"unspecified"},"services.ircdHybrid.description":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":"Hybrid-7 IRC server.","description":"\n          IRCD server description.\n        ","loc":["services","ircdHybrid","description"],"readOnly":false,"type":"unspecified"},"services.ircdHybrid.enable":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":false,"description":"\n          Enable IRCD.\n        ","loc":["services","ircdHybrid","enable"],"readOnly":false,"type":"unspecified"},"services.ircdHybrid.extraIPs":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":[],"description":"\n          Extra IP's to bind.\n        ","example":["127.0.0.1"],"loc":["services","ircdHybrid","extraIPs"],"readOnly":false,"type":"unspecified"},"services.ircdHybrid.extraPort":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":"7117","description":"\n          Extra port to avoid filtering.\n        ","loc":["services","ircdHybrid","extraPort"],"readOnly":false,"type":"unspecified"},"services.ircdHybrid.rsaKey":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":null,"description":"\n          IRCD server RSA key.\n        ","example":{"_type":"literalExample","text":"/root/certificates/irc.key"},"loc":["services","ircdHybrid","rsaKey"],"readOnly":false,"type":"unspecified"},"services.ircdHybrid.serverName":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":"hades.arpa","description":"\n          IRCD server name.\n        ","loc":["services","ircdHybrid","serverName"],"readOnly":false,"type":"unspecified"},"services.ircdHybrid.sid":{"declarations":["nixos/modules/services/networking/ircd-hybrid/default.nix"],"default":"0NL","description":"\n          IRCD server unique ID in a net of servers.\n        ","loc":["services","ircdHybrid","sid"],"readOnly":false,"type":"unspecified"},"services.irkerd.enable":{"declarations":["nixos/modules/services/misc/irkerd.nix"],"default":false,"description":"Whether to enable irker, an IRC notification daemon.","loc":["services","irkerd","enable"],"readOnly":false,"type":"boolean"},"services.irkerd.listenAddress":{"declarations":["nixos/modules/services/misc/irkerd.nix"],"default":"localhost","description":"Specifies the bind address on which the irker daemon listens.\nThe default is localhost.\n\nIrker authors strongly warn about the risks of running this on\na publicly accessible interface, so change this with caution.\n","example":"0.0.0.0","loc":["services","irkerd","listenAddress"],"readOnly":false,"type":"string"},"services.irkerd.nick":{"declarations":["nixos/modules/services/misc/irkerd.nix"],"default":"irker","description":"Nick to use for irker","loc":["services","irkerd","nick"],"readOnly":false,"type":"string"},"services.irkerd.openPorts":{"declarations":["nixos/modules/services/misc/irkerd.nix"],"default":false,"description":"Open ports in the firewall for irkerd","loc":["services","irkerd","openPorts"],"readOnly":false,"type":"boolean"},"services.irqbalance.enable":{"declarations":["nixos/modules/services/hardware/irqbalance.nix"],"default":false,"description":"Whether to enable irqbalance daemon.","example":true,"loc":["services","irqbalance","enable"],"readOnly":false,"type":"boolean"},"services.jackett.enable":{"declarations":["nixos/modules/services/misc/jackett.nix"],"default":false,"description":"Whether to enable Jackett.","example":true,"loc":["services","jackett","enable"],"readOnly":false,"type":"boolean"},"services.jboss.deployDir":{"declarations":["nixos/modules/services/web-servers/jboss/default.nix"],"default":"/nix/var/nix/profiles/default/server/default/deploy/","description":"Location of the deployment files","loc":["services","jboss","deployDir"],"readOnly":false,"type":"unspecified"},"services.jboss.enable":{"declarations":["nixos/modules/services/web-servers/jboss/default.nix"],"default":false,"description":"Whether to enable JBoss. WARNING : this package is outdated and is known to have vulnerabilities.","loc":["services","jboss","enable"],"readOnly":false,"type":"unspecified"},"services.jboss.libUrl":{"declarations":["nixos/modules/services/web-servers/jboss/default.nix"],"default":"file:///nix/var/nix/profiles/default/server/default/lib","description":"Location where the shared library JARs are stored","loc":["services","jboss","libUrl"],"readOnly":false,"type":"unspecified"},"services.jboss.logDir":{"declarations":["nixos/modules/services/web-servers/jboss/default.nix"],"default":"/var/log/jboss","description":"Location of the logfile directory of JBoss","loc":["services","jboss","logDir"],"readOnly":false,"type":"unspecified"},"services.jboss.serverDir":{"declarations":["nixos/modules/services/web-servers/jboss/default.nix"],"default":"/var/jboss/server","description":"Location of the server instance files","loc":["services","jboss","serverDir"],"readOnly":false,"type":"unspecified"},"services.jboss.tempDir":{"declarations":["nixos/modules/services/web-servers/jboss/default.nix"],"default":"/tmp","description":"Location where JBoss stores its temp files","loc":["services","jboss","tempDir"],"readOnly":false,"type":"unspecified"},"services.jboss.useJK":{"declarations":["nixos/modules/services/web-servers/jboss/default.nix"],"default":false,"description":"Whether to use to connector to the Apache HTTP server","loc":["services","jboss","useJK"],"readOnly":false,"type":"unspecified"},"services.jboss.user":{"declarations":["nixos/modules/services/web-servers/jboss/default.nix"],"default":"nobody","description":"User account under which jboss runs.","loc":["services","jboss","user"],"readOnly":false,"type":"unspecified"},"services.jenkins.enable":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":false,"description":"Whether to enable the jenkins continuous integration server.\n","loc":["services","jenkins","enable"],"readOnly":false,"type":"boolean"},"services.jenkins.environment":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":{},"description":"Additional environment variables to be passed to the jenkins process.\nAs a base environment, jenkins receives NIX_PATH from\n<option>environment.sessionVariables</option>, NIX_REMOTE is set to\n\"daemon\" and JENKINS_HOME is set to the value of\n<option>services.jenkins.home</option>.\nThis option has precedence and can be used to override those\nmentioned variables.\n","loc":["services","jenkins","environment"],"readOnly":false,"type":"attribute set of strings"},"services.jenkins.extraGroups":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":[],"description":"List of extra groups that the \"jenkins\" user should be a part of.\n","example":["wheel","dialout"],"loc":["services","jenkins","extraGroups"],"readOnly":false,"type":"list of strings"},"services.jenkins.extraJavaOptions":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":[],"description":"Additional command line arguments to pass to the Java run time (as opposed to Jenkins).\n","example":["-Xmx80m"],"loc":["services","jenkins","extraJavaOptions"],"readOnly":false,"type":"list of strings"},"services.jenkins.extraOptions":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":[],"description":"Additional command line arguments to pass to Jenkins.\n","example":["--debug=9"],"loc":["services","jenkins","extraOptions"],"readOnly":false,"type":"list of strings"},"services.jenkins.group":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":"jenkins","description":"If the default user \"jenkins\" is configured then this is the primary\ngroup of that user.\n","loc":["services","jenkins","group"],"readOnly":false,"type":"string"},"services.jenkins.home":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":"/var/lib/jenkins","description":"The path to use as JENKINS_HOME. If the default user \"jenkins\" is configured then\nthis is the home of the \"jenkins\" user.\n","loc":["services","jenkins","home"],"readOnly":false,"type":"path"},"services.jenkins.jobBuilder.accessToken":{"declarations":["nixos/modules/services/continuous-integration/jenkins/job-builder.nix"],"default":"","description":"User token in Jenkins used to reload config.\n","loc":["services","jenkins","jobBuilder","accessToken"],"readOnly":false,"type":"string"},"services.jenkins.jobBuilder.accessUser":{"declarations":["nixos/modules/services/continuous-integration/jenkins/job-builder.nix"],"default":"","description":"User id in Jenkins used to reload config.\n","loc":["services","jenkins","jobBuilder","accessUser"],"readOnly":false,"type":"string"},"services.jenkins.jobBuilder.enable":{"declarations":["nixos/modules/services/continuous-integration/jenkins/job-builder.nix"],"default":false,"description":"Whether or not to enable the Jenkins Job Builder (JJB) service. It\nallows defining jobs for Jenkins in a declarative manner.\n\nJobs managed through the Jenkins WebUI (or by other means) are left\nunchanged.\n\nNote that it really is declarative configuration; if you remove a\npreviously defined job, the corresponding job directory will be\ndeleted.\n\nPlease see the Jenkins Job Builder documentation for more info:\n<link xlink:href=\"http://docs.openstack.org/infra/jenkins-job-builder/\">\nhttp://docs.openstack.org/infra/jenkins-job-builder/</link>\n","loc":["services","jenkins","jobBuilder","enable"],"readOnly":false,"type":"boolean"},"services.jenkins.jobBuilder.jsonJobs":{"declarations":["nixos/modules/services/continuous-integration/jenkins/job-builder.nix"],"default":[],"description":"Job descriptions for Jenkins Job Builder in JSON format.\n","example":{"_type":"literalExample","text":"[\n  ''\n    [ { \"job\":\n        { \"name\": \"jenkins-job-test-2\",\n          \"builders\": [ \"shell\": \"echo 'Hello world!'\" ]\n        }\n      }\n    ]\n  ''\n]\n"},"loc":["services","jenkins","jobBuilder","jsonJobs"],"readOnly":false,"type":"list of strings"},"services.jenkins.jobBuilder.nixJobs":{"declarations":["nixos/modules/services/continuous-integration/jenkins/job-builder.nix"],"default":[],"description":"Job descriptions for Jenkins Job Builder in Nix format.\n\nThis is a trivial wrapper around jsonJobs, using builtins.toJSON\nbehind the scene.\n","example":{"_type":"literalExample","text":"[ { job =\n    { name = \"jenkins-job-test-3\";\n      builders = [\n        { shell = \"echo 'Hello world!'\"; }\n      ];\n    };\n  }\n]\n"},"loc":["services","jenkins","jobBuilder","nixJobs"],"readOnly":false,"type":"list of attribute sets"},"services.jenkins.jobBuilder.yamlJobs":{"declarations":["nixos/modules/services/continuous-integration/jenkins/job-builder.nix"],"default":"","description":"Job descriptions for Jenkins Job Builder in YAML format.\n","example":"- job:\n    name: jenkins-job-test-1\n    builders:\n      - shell: echo 'Hello world!'\n","loc":["services","jenkins","jobBuilder","yamlJobs"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.jenkins.listenAddress":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":"0.0.0.0","description":"Specifies the bind address on which the jenkins HTTP interface listens.\nThe default is the wildcard address.\n","example":"localhost","loc":["services","jenkins","listenAddress"],"readOnly":false,"type":"string"},"services.jenkins.package":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":"pkgs.jenkins","description":"Jenkins package to use.","loc":["services","jenkins","package"],"readOnly":false,"type":"package"},"services.jenkins.packages":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":"[ pkgs.stdenv pkgs.git pkgs.jdk config.programs.ssh.package pkgs.nix ]","description":"Packages to add to PATH for the jenkins process.\n","loc":["services","jenkins","packages"],"readOnly":false,"type":"list of packages"},"services.jenkins.plugins":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":null,"description":"A set of plugins to activate. Note that this will completely\nremove and replace any previously installed plugins. If you\nhave manually-installed plugins that you want to keep while\nusing this module, set this option to\n<literal>null</literal>. You can generate this set with a\ntool such as <literal>jenkinsPlugins2nix</literal>.\n","example":{"_type":"literalExample","text":"import path/to/jenkinsPlugins2nix-generated-plugins.nix { inherit (pkgs) fetchurl stdenv; }\n"},"loc":["services","jenkins","plugins"],"readOnly":false,"type":"null or attribute set of packages"},"services.jenkins.port":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":8080,"description":"Specifies port number on which the jenkins HTTP interface listens.\nThe default is 8080.\n","loc":["services","jenkins","port"],"readOnly":false,"type":"signed integer"},"services.jenkins.prefix":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":"","description":"Specifies a urlPrefix to use with jenkins.\nIf the example /jenkins is given, the jenkins server will be\naccessible using localhost:8080/jenkins.\n","example":"/jenkins","loc":["services","jenkins","prefix"],"readOnly":false,"type":"string"},"services.jenkins.user":{"declarations":["nixos/modules/services/continuous-integration/jenkins/default.nix"],"default":"jenkins","description":"User the jenkins server should execute under.\n","loc":["services","jenkins","user"],"readOnly":false,"type":"string"},"services.jenkinsSlave.enable":{"declarations":["nixos/modules/services/continuous-integration/jenkins/slave.nix"],"default":false,"description":"If true the system will be configured to work as a jenkins slave.\nIf the system is also configured to work as a jenkins master then this has no effect.\nIn progress: Currently only assures the jenkins user is configured.\n","loc":["services","jenkinsSlave","enable"],"readOnly":false,"type":"boolean"},"services.jenkinsSlave.group":{"declarations":["nixos/modules/services/continuous-integration/jenkins/slave.nix"],"default":"jenkins","description":"If the default slave agent user \"jenkins\" is configured then this is\nthe primary group of that user.\n","loc":["services","jenkinsSlave","group"],"readOnly":false,"type":"string"},"services.jenkinsSlave.home":{"declarations":["nixos/modules/services/continuous-integration/jenkins/slave.nix"],"default":"/var/lib/jenkins","description":"The path to use as JENKINS_HOME. If the default user \"jenkins\" is configured then\nthis is the home of the \"jenkins\" user.\n","loc":["services","jenkinsSlave","home"],"readOnly":false,"type":"path"},"services.jenkinsSlave.user":{"declarations":["nixos/modules/services/continuous-integration/jenkins/slave.nix"],"default":"jenkins","description":"User the jenkins slave agent should execute under.\n","loc":["services","jenkinsSlave","user"],"readOnly":false,"type":"string"},"services.jira.catalinaOptions":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":[],"description":"Java options to pass to catalina/tomcat.","example":["-Xms1024m","-Xmx2048m"],"loc":["services","jira","catalinaOptions"],"readOnly":false,"type":"list of strings"},"services.jira.enable":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":false,"description":"Whether to enable Atlassian JIRA service.","example":true,"loc":["services","jira","enable"],"readOnly":false,"type":"boolean"},"services.jira.group":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":"jira","description":"Group which runs JIRA.","loc":["services","jira","group"],"readOnly":false,"type":"string"},"services.jira.home":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":"/var/lib/jira","description":"Home directory of the JIRA instance.","loc":["services","jira","home"],"readOnly":false,"type":"string"},"services.jira.jrePackage":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":"pkgs.oraclejre8","description":"Note that Atlassian only support the Oracle JRE (JRASERVER-46152).","loc":["services","jira","jrePackage"],"readOnly":false,"type":"package"},"services.jira.listenAddress":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":"127.0.0.1","description":"Address to listen on.","loc":["services","jira","listenAddress"],"readOnly":false,"type":"string"},"services.jira.listenPort":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":8091,"description":"Port to listen on.","loc":["services","jira","listenPort"],"readOnly":false,"type":"signed integer"},"services.jira.proxy.enable":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":false,"description":"Whether to enable reverse proxy support.","example":true,"loc":["services","jira","proxy","enable"],"readOnly":false,"type":"boolean"},"services.jira.proxy.name":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"description":"Virtual hostname at the proxy","example":"jira.example.com","loc":["services","jira","proxy","name"],"readOnly":false,"type":"string"},"services.jira.proxy.port":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":443,"description":"Port used at the proxy","example":80,"loc":["services","jira","proxy","port"],"readOnly":false,"type":"signed integer"},"services.jira.proxy.scheme":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":"https","description":"Protocol used at the proxy.","example":"http","loc":["services","jira","proxy","scheme"],"readOnly":false,"type":"string"},"services.jira.proxy.secure":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":true,"description":"Whether the connections to the proxy should be considered secure.","loc":["services","jira","proxy","secure"],"readOnly":false,"type":"boolean"},"services.jira.sso.applicationName":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"description":"Exact name of this JIRA instance in Crowd","example":"jira","loc":["services","jira","sso","applicationName"],"readOnly":false,"type":"string"},"services.jira.sso.applicationPassword":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"description":"Application password of this JIRA instance in Crowd","loc":["services","jira","sso","applicationPassword"],"readOnly":false,"type":"string"},"services.jira.sso.crowd":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"description":"Crowd Base URL without trailing slash","example":"http://localhost:8095/crowd","loc":["services","jira","sso","crowd"],"readOnly":false,"type":"string"},"services.jira.sso.enable":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":false,"description":"Whether to enable SSO with Atlassian Crowd.","example":true,"loc":["services","jira","sso","enable"],"readOnly":false,"type":"boolean"},"services.jira.sso.validationInterval":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":2,"description":"Set to 0, if you want authentication checks to occur on each\nrequest. Otherwise set to the number of minutes between request\nto validate if the user is logged in or out of the Crowd SSO\nserver. Setting this value to 1 or higher will increase the\nperformance of Crowd's integration.\n","example":0,"loc":["services","jira","sso","validationInterval"],"readOnly":false,"type":"signed integer"},"services.jira.user":{"declarations":["nixos/modules/services/web-apps/atlassian/jira.nix"],"default":"jira","description":"User which runs JIRA.","loc":["services","jira","user"],"readOnly":false,"type":"string"},"services.journalbeat.enable":{"declarations":["nixos/modules/services/logging/journalbeat.nix"],"default":false,"description":"Whether to enable journalbeat.","example":true,"loc":["services","journalbeat","enable"],"readOnly":false,"type":"boolean"},"services.journalbeat.extraConfig":{"declarations":["nixos/modules/services/logging/journalbeat.nix"],"default":"journalbeat:\n  seek_position: cursor\n  cursor_seek_fallback: tail\n  write_cursor_state: true\n  cursor_flush_period: 5s\n  clean_field_names: true\n  convert_to_numbers: false\n  move_metadata_to_field: journal\n  default_type: journal\n","description":"Any other configuration options you want to add","loc":["services","journalbeat","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.journalbeat.name":{"declarations":["nixos/modules/services/logging/journalbeat.nix"],"default":"journalbeat","description":"Name of the beat","loc":["services","journalbeat","name"],"readOnly":false,"type":"string"},"services.journalbeat.stateDir":{"declarations":["nixos/modules/services/logging/journalbeat.nix"],"default":"/var/lib/journalbeat","description":"The state directory. Journalbeat's own logs and other data are stored here.","loc":["services","journalbeat","stateDir"],"readOnly":false,"type":"string"},"services.journalbeat.tags":{"declarations":["nixos/modules/services/logging/journalbeat.nix"],"default":[],"description":"Tags to place on the shipped log messages","loc":["services","journalbeat","tags"],"readOnly":false,"type":"list of strings"},"services.journald.console":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"If non-empty, write log messages to the specified TTY device.","loc":["services","journald","console"],"readOnly":false,"type":"string"},"services.journald.enableHttpGateway":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":false,"description":"Whether to enable the HTTP gateway to the journal.\n","loc":["services","journald","enableHttpGateway"],"readOnly":false,"type":"boolean"},"services.journald.extraConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Extra config options for systemd-journald. See man journald.conf\nfor available options.\n","example":"Storage=volatile","loc":["services","journald","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.journald.rateLimitBurst":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":1000,"description":"Configures the rate limiting burst limit (number of messages per\ninterval) that is applied to all messages generated on the system.\nThis rate limiting is applied per-service, so that two services\nwhich log do not interfere with each other's limit.\n","loc":["services","journald","rateLimitBurst"],"readOnly":false,"type":"signed integer"},"services.journald.rateLimitInterval":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"30s","description":"Configures the rate limiting interval that is applied to all\nmessages generated on the system. This rate limiting is applied\nper-service, so that two services which log do not interfere with\neach other's limit. The value may be specified in the following\nunits: s, min, h, ms, us. To turn off any kind of rate limiting,\nset either value to 0.\n","loc":["services","journald","rateLimitInterval"],"readOnly":false,"type":"string"},"services.journalwatch.accuracy":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":"10min","description":"The time window around the interval in which the journalwatch run will be scheduled.\n\nThe format is described in systemd.time(7).\n","loc":["services","journalwatch","accuracy"],"readOnly":false,"type":"string"},"services.journalwatch.enable":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":false,"description":"If enabled, periodically check the journal with journalwatch and report the results by mail.\n","loc":["services","journalwatch","enable"],"readOnly":false,"type":"boolean"},"services.journalwatch.extraConfig":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":"","description":"Extra lines to be added verbatim to the journalwatch/config configuration file.\nYou can add any commandline argument to the config, without the '--'.\nSee <literal>journalwatch --help</literal> for all arguments and their description.\n","loc":["services","journalwatch","extraConfig"],"readOnly":false,"type":"string"},"services.journalwatch.filterBlocks":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":[{"filters":"(Stopped|Stopping|Starting|Started) .*\n(Created slice|Removed slice) user-\\d*\\.slice\\.\nReceived SIGRTMIN\\+24 from PID .*\n(Reached target|Stopped target) .*\nStartup finished in \\d*ms\\.\n","match":"SYSLOG_IDENTIFIER = systemd"}],"description":"filterBlocks can be defined to blacklist journal messages which are not errors.\nEach block matches on a log entry field, and the filters in that block then are matched\nagainst all messages with a matching log entry field.\n\nAll messages whose PRIORITY is at least 6 (INFO) are processed by journalwatch.\nIf you don't specify any filterBlocks, PRIORITY is reduced to 5 (NOTICE) by default.\n\nAll regular expressions are extended Python regular expressions, for details\nsee: http://doc.pyschools.com/html/regex.html\n","example":[{"filters":"New session [a-z]?\\d+ of user \\w+\\.\nRemoved session [a-z]?\\d+\\.\n","match":"_SYSTEMD_UNIT = systemd-logind.service"},{"filters":"pam_unix\\(crond:session\\): session (opened|closed) for user \\w+\n\\(\\w+\\) CMD .*\n","match":"SYSLOG_IDENTIFIER = /(CROND|crond)/"}],"loc":["services","journalwatch","filterBlocks"],"readOnly":false,"type":"list of submodules"},"services.journalwatch.filterBlocks.*.filters":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"description":"The filters to apply on all messages which satisfy <option>match</option>.\nAny of those messages that match any specified filter will be removed from journalwatch's output.\nEach filter is an extended Python regular expression.\nYou can specify multiple filters and separate them by newlines.\nLines starting with '#' are comments. Inline-comments are not permitted.\n","example":"(Stopped|Stopping|Starting|Started) .*\n(Reached target|Stopped target) .*\n","loc":["services","journalwatch","filterBlocks","*","filters"],"readOnly":false,"type":"string"},"services.journalwatch.filterBlocks.*.match":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"description":"Syntax: <literal>field = value</literal>\nSpecifies the log entry <literal>field</literal> this block should apply to.\nIf the <literal>field</literal> of a message matches this <literal>value</literal>,\nthis patternBlock's <option>filters</option> are applied.\nIf <literal>value</literal> starts and ends with a slash, it is interpreted as\nan extended python regular expression, if not, it's an exact match.\nThe journal fields are explained in systemd.journal-fields(7).\n","example":"SYSLOG_IDENTIFIER = systemd","loc":["services","journalwatch","filterBlocks","*","match"],"readOnly":false,"type":"string"},"services.journalwatch.interval":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":"hourly","description":"How often to run journalwatch.\n\nThe format is described in systemd.time(7).\n","loc":["services","journalwatch","interval"],"readOnly":false,"type":"string"},"services.journalwatch.mailBinary":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":"/run/wrappers/bin/sendmail","description":"Sendmail-compatible binary to be used to send the messages.\n","loc":["services","journalwatch","mailBinary"],"readOnly":false,"type":"path"},"services.journalwatch.mailFrom":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":"journalwatch@nixos","description":"Mail address to send journalwatch reports from.\n","loc":["services","journalwatch","mailFrom"],"readOnly":false,"type":"string"},"services.journalwatch.mailTo":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":null,"description":"Mail address to send journalwatch reports to.\n","loc":["services","journalwatch","mailTo"],"readOnly":false,"type":"null or string"},"services.journalwatch.priority":{"declarations":["nixos/modules/services/logging/journalwatch.nix"],"default":6,"description":"Lowest priority of message to be considered.\nA value between 7 (\"debug\"), and 0 (\"emerg\"). Defaults to 6 (\"info\").\nIf you don't care about anything with \"info\" priority, you can reduce\nthis to e.g. 5 (\"notice\") to considerably reduce the amount of\nmessages without needing many <option>filterBlocks</option>.\n","loc":["services","journalwatch","priority"],"readOnly":false,"type":"signed integer"},"services.jupyter.enable":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":false,"description":"Whether to enable Jupyter development server.","example":true,"loc":["services","jupyter","enable"],"readOnly":false,"type":"boolean"},"services.jupyter.group":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":"jupyter","description":"Name of the group used to run the jupyter service.\nUse this if you want to create a group of users that are able to view the notebook directory's content.\n","example":"users","loc":["services","jupyter","group"],"readOnly":false,"type":"string"},"services.jupyter.ip":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":"localhost","description":"IP address Jupyter will be listening on.\n","loc":["services","jupyter","ip"],"readOnly":false,"type":"string"},"services.jupyter.kernels":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":null,"description":"Declarative kernel config\n\n      Kernels can be declared in any language that supports and has the required\n      dependencies to communicate with a jupyter server.\n      In python's case, it means that ipykernel package must always be included in\n      the list of packages of the targeted environment.\n      ","example":{"_type":"literalExample","text":"{\n  python3 = let\n    env = (pkgs.python3.withPackages (pythonPackages: with pythonPackages; [\n            ipykernel\n            pandas\n            scikitlearn\n          ]));\n  in {\n    displayName = \"Python 3 for machine learning\";\n    argv = [\n      \"$ {env.interpreter}\"\n      \"-m\"\n      \"ipykernel_launcher\"\n      \"-f\"\n      \"{connection_file}\"\n    ];\n    language = \"python\";\n    logo32 = \"$ {env.sitePackages}/ipykernel/resources/logo-32x32.png\";\n    logo64 = \"$ {env.sitePackages}/ipykernel/resources/logo-64x64.png\";\n  };\n}\n"},"loc":["services","jupyter","kernels"],"readOnly":false,"type":"null or attribute set of submodules"},"services.jupyter.kernels.<name>.argv":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"description":"Command and arguments to start the kernel.\n","example":["{customEnv.interpreter}","-m","ipykernel_launcher","-f","{connection_file}"],"loc":["services","jupyter","kernels","<name>","argv"],"readOnly":false,"type":"list of strings"},"services.jupyter.kernels.<name>.displayName":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":"","description":"Name that will be shown to the user.\n","example":["Python 3","Python 3 for Data Science"],"loc":["services","jupyter","kernels","<name>","displayName"],"readOnly":false,"type":"string"},"services.jupyter.kernels.<name>.language":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"description":"Language of the environment. Typically the name of the binary.\n","example":"python","loc":["services","jupyter","kernels","<name>","language"],"readOnly":false,"type":"string"},"services.jupyter.kernels.<name>.logo32":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":null,"description":"Path to 32x32 logo png.\n","example":"{env.sitePackages}/ipykernel/resources/logo-32x32.png","loc":["services","jupyter","kernels","<name>","logo32"],"readOnly":false,"type":"null or path"},"services.jupyter.kernels.<name>.logo64":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":null,"description":"Path to 64x64 logo png.\n","example":"{env.sitePackages}/ipykernel/resources/logo-64x64.png","loc":["services","jupyter","kernels","<name>","logo64"],"readOnly":false,"type":"null or path"},"services.jupyter.notebookConfig":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":"","description":"Raw jupyter config.\n","loc":["services","jupyter","notebookConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.jupyter.notebookDir":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":"~/","description":"Root directory for notebooks.\n","loc":["services","jupyter","notebookDir"],"readOnly":false,"type":"string"},"services.jupyter.password":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"description":"Password to use with notebook.\nCan be generated using:\n  In [1]: from notebook.auth import passwd\n  In [2]: passwd('test')\n  Out[2]: 'sha1:1b961dc713fb:88483270a63e57d18d43cf337e629539de1436ba'\n  NOTE: you need to keep the single quote inside the nix string.\nOr you can use a python oneliner:\n  \"open('/path/secret_file', 'r', encoding='utf8').read().strip()\"\nIt will be interpreted at the end of the notebookConfig.\n","example":["'sha1:1b961dc713fb:88483270a63e57d18d43cf337e629539de1436ba'","open('/path/secret_file', 'r', encoding='utf8').read().strip()"],"loc":["services","jupyter","password"],"readOnly":false,"type":"string"},"services.jupyter.port":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":8888,"description":"Port number Jupyter will be listening on.\n","loc":["services","jupyter","port"],"readOnly":false,"type":"signed integer"},"services.jupyter.user":{"declarations":["nixos/modules/services/development/jupyter/default.nix"],"default":"jupyter","description":"Name of the user used to run the jupyter service.\nFor security reason, jupyter should really not be run as root.\nIf not set (jupyter), the service will create a jupyter user with appropriate settings.\n","example":"aborsu","loc":["services","jupyter","user"],"readOnly":false,"type":"string"},"services.kbfs.enable":{"declarations":["nixos/modules/services/network-filesystems/kbfs.nix"],"default":false,"description":"Whether to mount the Keybase filesystem.","loc":["services","kbfs","enable"],"readOnly":false,"type":"boolean"},"services.kbfs.extraFlags":{"declarations":["nixos/modules/services/network-filesystems/kbfs.nix"],"default":[],"description":"Additional flags to pass to the Keybase filesystem on launch.\n","example":["-label kbfs","-mount-type normal"],"loc":["services","kbfs","extraFlags"],"readOnly":false,"type":"list of strings"},"services.kbfs.mountPoint":{"declarations":["nixos/modules/services/network-filesystems/kbfs.nix"],"default":"%h/keybase","description":"Mountpoint for the Keybase filesystem.","example":"/keybase","loc":["services","kbfs","mountPoint"],"readOnly":false,"type":"string"},"services.keepalived.enable":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Whether to enable Keepalived.\n","loc":["services","keepalived","enable"],"readOnly":false,"type":"boolean"},"services.keepalived.enableScriptSecurity":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Don't run scripts configured to be run as root if any part of the path is writable by a non-root user.\n","loc":["services","keepalived","enableScriptSecurity"],"readOnly":false,"type":"boolean"},"services.keepalived.extraConfig":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":"","description":"Extra lines to be added verbatim to the configuration file.\n","loc":["services","keepalived","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.keepalived.extraGlobalDefs":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":"","description":"Extra lines to be added verbatim to the 'global_defs' block of the\nconfiguration file\n","loc":["services","keepalived","extraGlobalDefs"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.keepalived.snmp.enable":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Whether to enable the builtin AgentX subagent.\n","loc":["services","keepalived","snmp","enable"],"readOnly":false,"type":"boolean"},"services.keepalived.snmp.enableChecker":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Enable SNMP handling of checker element of KEEPALIVED MIB.\n","loc":["services","keepalived","snmp","enableChecker"],"readOnly":false,"type":"boolean"},"services.keepalived.snmp.enableKeepalived":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Enable SNMP handling of vrrp element of KEEPALIVED MIB.\n","loc":["services","keepalived","snmp","enableKeepalived"],"readOnly":false,"type":"boolean"},"services.keepalived.snmp.enableRfc":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Enable SNMP handling of RFC2787 and RFC6527 VRRP MIBs.\n","loc":["services","keepalived","snmp","enableRfc"],"readOnly":false,"type":"boolean"},"services.keepalived.snmp.enableRfcV2":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Enable SNMP handling of RFC2787 VRRP MIB.\n","loc":["services","keepalived","snmp","enableRfcV2"],"readOnly":false,"type":"boolean"},"services.keepalived.snmp.enableRfcV3":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Enable SNMP handling of RFC6527 VRRP MIB.\n","loc":["services","keepalived","snmp","enableRfcV3"],"readOnly":false,"type":"boolean"},"services.keepalived.snmp.enableTraps":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Enable SNMP traps.\n","loc":["services","keepalived","snmp","enableTraps"],"readOnly":false,"type":"boolean"},"services.keepalived.snmp.socket":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":null,"description":"Socket to use for connecting to SNMP master agent. If this value is\nset to null, keepalived's default will be used, which is\nunix:/var/agentx/master, unless using a network namespace, when the\ndefault is udp:localhost:705.\n","loc":["services","keepalived","snmp","socket"],"readOnly":false,"type":"null or string"},"services.keepalived.vrrpInstances":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":{},"description":"Declarative vhost config","loc":["services","keepalived","vrrpInstances"],"readOnly":false,"type":"attribute set of submodules"},"services.keepalived.vrrpInstances.<name>.extraConfig":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":"","description":"Extra lines to be added verbatim to the vrrp_instance section.\n","loc":["services","keepalived","vrrpInstances","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.keepalived.vrrpInstances.<name>.interface":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"description":"Interface for inside_network, bound by vrrp.\n","loc":["services","keepalived","vrrpInstances","<name>","interface"],"readOnly":false,"type":"string"},"services.keepalived.vrrpInstances.<name>.noPreempt":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"VRRP will normally preempt a lower priority machine when a higher\npriority machine comes online. \"nopreempt\" allows the lower priority\nmachine to maintain the master role, even when a higher priority machine\ncomes back online. NOTE: For this to work, the initial state of this\nentry must be BACKUP.\n","loc":["services","keepalived","vrrpInstances","<name>","noPreempt"],"readOnly":false,"type":"boolean"},"services.keepalived.vrrpInstances.<name>.priority":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":100,"description":"For electing MASTER, highest priority wins. To be MASTER, make 50 more\nthan other machines.\n","loc":["services","keepalived","vrrpInstances","<name>","priority"],"readOnly":false,"type":"signed integer"},"services.keepalived.vrrpInstances.<name>.state":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":"BACKUP","description":"Initial state. As soon as the other machine(s) come up, an election will\nbe held and the machine with the highest \"priority\" will become MASTER.\nSo the entry here doesn't matter a whole lot.\n","loc":["services","keepalived","vrrpInstances","<name>","state"],"readOnly":false,"type":"one of \"MASTER\", \"BACKUP\""},"services.keepalived.vrrpInstances.<name>.trackInterfaces":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":[],"description":"List of network interfaces to monitor for health tracking.","example":["eth0","eth1"],"loc":["services","keepalived","vrrpInstances","<name>","trackInterfaces"],"readOnly":false,"type":"list of strings"},"services.keepalived.vrrpInstances.<name>.trackScripts":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":[],"description":"List of script names to invoke for health tracking.","example":["chk_cmd1","chk_cmd2"],"loc":["services","keepalived","vrrpInstances","<name>","trackScripts"],"readOnly":false,"type":"list of strings"},"services.keepalived.vrrpInstances.<name>.unicastPeers":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":[],"description":"Do not send VRRP adverts over VRRP multicast group. Instead it sends\nadverts to the following list of ip addresses using unicast design\nfashion. It can be cool to use VRRP FSM and features in a networking\nenvironment where multicast is not supported! IP Addresses specified can\nIPv4 as well as IPv6.\n","loc":["services","keepalived","vrrpInstances","<name>","unicastPeers"],"readOnly":false,"type":"list of strings"},"services.keepalived.vrrpInstances.<name>.unicastSrcIp":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":null,"description":"Default IP for binding vrrpd is the primary IP on interface. If you\nwant to hide location of vrrpd, use this IP as src_addr for unicast\nvrrp packets.\n","loc":["services","keepalived","vrrpInstances","<name>","unicastSrcIp"],"readOnly":false,"type":"null or string"},"services.keepalived.vrrpInstances.<name>.useVmac":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Use VRRP Virtual MAC.\n","loc":["services","keepalived","vrrpInstances","<name>","useVmac"],"readOnly":false,"type":"boolean"},"services.keepalived.vrrpInstances.<name>.virtualIps":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":[],"description":"Declarative vhost config","example":{"_type":"literalExample","text":"TODO: Example\n"},"loc":["services","keepalived","vrrpInstances","<name>","virtualIps"],"readOnly":false,"type":"list of submodules"},"services.keepalived.vrrpInstances.<name>.virtualIps.*.addr":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"description":"IP address, optionally with a netmask: IPADDR[/MASK]\n","loc":["services","keepalived","vrrpInstances","<name>","virtualIps","*","addr"],"readOnly":false,"type":"string"},"services.keepalived.vrrpInstances.<name>.virtualIps.*.brd":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":null,"description":"The broadcast address on the interface.\n","loc":["services","keepalived","vrrpInstances","<name>","virtualIps","*","brd"],"readOnly":false,"type":"null or string"},"services.keepalived.vrrpInstances.<name>.virtualIps.*.dev":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":null,"description":"The name of the device to add the address to.\n","loc":["services","keepalived","vrrpInstances","<name>","virtualIps","*","dev"],"readOnly":false,"type":"null or string"},"services.keepalived.vrrpInstances.<name>.virtualIps.*.label":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":null,"description":"Each address may be tagged with a label string. In order to preserve\ncompatibility with Linux-2.0 net aliases, this string must coincide with\nthe name of the device or must be prefixed with the device name followed\nby colon.\n","loc":["services","keepalived","vrrpInstances","<name>","virtualIps","*","label"],"readOnly":false,"type":"null or string"},"services.keepalived.vrrpInstances.<name>.virtualIps.*.scope":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":null,"description":"The scope of the area where this address is valid.\n","loc":["services","keepalived","vrrpInstances","<name>","virtualIps","*","scope"],"readOnly":false,"type":"null or string"},"services.keepalived.vrrpInstances.<name>.virtualRouterId":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"description":"Arbitrary unique number 0..255. Used to differentiate multiple instances\nof vrrpd running on the same NIC (and hence same socket).\n","loc":["services","keepalived","vrrpInstances","<name>","virtualRouterId"],"readOnly":false,"type":"signed integer"},"services.keepalived.vrrpInstances.<name>.vmacInterface":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":null,"description":"Name of the vmac interface to use. keepalived will come up with a name\nif you don't specify one.\n","loc":["services","keepalived","vrrpInstances","<name>","vmacInterface"],"readOnly":false,"type":"null or string"},"services.keepalived.vrrpInstances.<name>.vmacXmitBase":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":false,"description":"Send/Recv VRRP messages from base interface instead of VMAC interface.\n","loc":["services","keepalived","vrrpInstances","<name>","vmacXmitBase"],"readOnly":false,"type":"boolean"},"services.keepalived.vrrpScripts":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":{},"description":"Declarative vrrp script config","loc":["services","keepalived","vrrpScripts"],"readOnly":false,"type":"attribute set of submodules"},"services.keepalived.vrrpScripts.<name>.extraConfig":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":"","description":"Extra lines to be added verbatim to the vrrp_script section.","loc":["services","keepalived","vrrpScripts","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.keepalived.vrrpScripts.<name>.fall":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":3,"description":"Required number of failures for KO transition.","loc":["services","keepalived","vrrpScripts","<name>","fall"],"readOnly":false,"type":"signed integer"},"services.keepalived.vrrpScripts.<name>.group":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":null,"description":"Name of group to run the script under. Defaults to user group.","loc":["services","keepalived","vrrpScripts","<name>","group"],"readOnly":false,"type":"null or string"},"services.keepalived.vrrpScripts.<name>.interval":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":1,"description":"Seconds between script invocations.","loc":["services","keepalived","vrrpScripts","<name>","interval"],"readOnly":false,"type":"signed integer"},"services.keepalived.vrrpScripts.<name>.rise":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":5,"description":"Required number of successes for OK transition.","loc":["services","keepalived","vrrpScripts","<name>","rise"],"readOnly":false,"type":"signed integer"},"services.keepalived.vrrpScripts.<name>.script":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"description":"(Path of) Script command to execute followed by args, i.e. cmd [args]...","example":"${pkgs.curl} -f http://localhost:80","loc":["services","keepalived","vrrpScripts","<name>","script"],"readOnly":false,"type":"string"},"services.keepalived.vrrpScripts.<name>.timeout":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":5,"description":"Seconds after which script is considered to have failed.","loc":["services","keepalived","vrrpScripts","<name>","timeout"],"readOnly":false,"type":"signed integer"},"services.keepalived.vrrpScripts.<name>.user":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":"keepalived_script","description":"Name of user to run the script under.","loc":["services","keepalived","vrrpScripts","<name>","user"],"readOnly":false,"type":"string"},"services.keepalived.vrrpScripts.<name>.weight":{"declarations":["nixos/modules/services/networking/keepalived/default.nix"],"default":0,"description":"Following a failure, adjust the priority by this weight.","loc":["services","keepalived","vrrpScripts","<name>","weight"],"readOnly":false,"type":"signed integer"},"services.kerberos_server.enable":{"declarations":["nixos/modules/services/system/kerberos.nix"],"default":false,"description":"Enable the kerberos authentification server.\n","loc":["services","kerberos_server","enable"],"readOnly":false,"type":"unspecified"},"services.keybase.enable":{"declarations":["nixos/modules/services/networking/keybase.nix"],"default":false,"description":"Whether to start the Keybase service.","loc":["services","keybase","enable"],"readOnly":false,"type":"boolean"},"services.kibana.cert":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":null,"description":"Kibana ssl certificate.","loc":["services","kibana","cert"],"readOnly":false,"type":"null or path"},"services.kibana.dataDir":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":"/var/lib/kibana","description":"Kibana data directory","loc":["services","kibana","dataDir"],"readOnly":false,"type":"path"},"services.kibana.defaultAppId":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":"discover","description":"Elasticsearch default application id.","loc":["services","kibana","defaultAppId"],"readOnly":false,"type":"string"},"services.kibana.elasticsearch.ca":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":null,"description":"CA file to auth against elasticsearch.\n\nIt's recommended to use the <option>certificateAuthorities</option> option\nwhen using kibana-5.4 or newer.\n","loc":["services","kibana","elasticsearch","ca"],"readOnly":false,"type":"null or path"},"services.kibana.elasticsearch.cert":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":null,"description":"Certificate file to auth against elasticsearch.","loc":["services","kibana","elasticsearch","cert"],"readOnly":false,"type":"null or path"},"services.kibana.elasticsearch.certificateAuthorities":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":[],"description":"CA files to auth against elasticsearch.\n\nPlease use the <option>ca</option> option when using kibana &lt; 5.4\nbecause those old versions don't support setting multiple CA's.\n\nThis defaults to the singleton list [ca] when the <option>ca</option> option is defined.\n","loc":["services","kibana","elasticsearch","certificateAuthorities"],"readOnly":false,"type":"list of paths"},"services.kibana.elasticsearch.key":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":null,"description":"Key file to auth against elasticsearch.","loc":["services","kibana","elasticsearch","key"],"readOnly":false,"type":"null or path"},"services.kibana.elasticsearch.password":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":null,"description":"Password for elasticsearch basic auth.","loc":["services","kibana","elasticsearch","password"],"readOnly":false,"type":"null or string"},"services.kibana.elasticsearch.url":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":"http://localhost:9200","description":"Elasticsearch url","loc":["services","kibana","elasticsearch","url"],"readOnly":false,"type":"string"},"services.kibana.elasticsearch.username":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":null,"description":"Username for elasticsearch basic auth.","loc":["services","kibana","elasticsearch","username"],"readOnly":false,"type":"null or string"},"services.kibana.enable":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":false,"description":"Whether to enable enable kibana service.","example":true,"loc":["services","kibana","enable"],"readOnly":false,"type":"boolean"},"services.kibana.extraConf":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":{},"description":"Kibana extra configuration","loc":["services","kibana","extraConf"],"readOnly":false,"type":"attribute set"},"services.kibana.index":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":".kibana","description":"Elasticsearch index to use for saving kibana config.","loc":["services","kibana","index"],"readOnly":false,"type":"string"},"services.kibana.key":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":null,"description":"Kibana ssl key.","loc":["services","kibana","key"],"readOnly":false,"type":"null or path"},"services.kibana.listenAddress":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":"127.0.0.1","description":"Kibana listening host","loc":["services","kibana","listenAddress"],"readOnly":false,"type":"string"},"services.kibana.package":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":"pkgs.kibana","description":"Kibana package to use","example":"pkgs.kibana5","loc":["services","kibana","package"],"readOnly":false,"type":"package"},"services.kibana.port":{"declarations":["nixos/modules/services/search/kibana.nix"],"default":5601,"description":"Kibana listening port","loc":["services","kibana","port"],"readOnly":false,"type":"signed integer"},"services.kippo.enable":{"declarations":["nixos/modules/services/networking/kippo.nix"],"default":false,"description":"Enable the kippo honeypot ssh server.","loc":["services","kippo","enable"],"readOnly":false,"type":"boolean"},"services.kippo.extraConfig":{"declarations":["nixos/modules/services/networking/kippo.nix"],"default":"","description":"Extra verbatim configuration added to the end of kippo.cfg.","loc":["services","kippo","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.kippo.hostname":{"declarations":["nixos/modules/services/networking/kippo.nix"],"default":"nas3","description":"Hostname for kippo to present to SSH login","loc":["services","kippo","hostname"],"readOnly":false,"type":"Concatenated string"},"services.kippo.logPath":{"declarations":["nixos/modules/services/networking/kippo.nix"],"default":"/var/log/kippo","description":"Path of log files needed for operation and configuration.","loc":["services","kippo","logPath"],"readOnly":false,"type":"Concatenated string"},"services.kippo.pidPath":{"declarations":["nixos/modules/services/networking/kippo.nix"],"default":"/run/kippo","description":"Path of pid files needed for operation.","loc":["services","kippo","pidPath"],"readOnly":false,"type":"Concatenated string"},"services.kippo.port":{"declarations":["nixos/modules/services/networking/kippo.nix"],"default":2222,"description":"TCP port number for kippo to bind to.","loc":["services","kippo","port"],"readOnly":false,"type":"signed integer"},"services.kippo.varPath":{"declarations":["nixos/modules/services/networking/kippo.nix"],"default":"/var/lib/kippo","description":"Path of read/write files needed for operation and configuration.","loc":["services","kippo","varPath"],"readOnly":false,"type":"Concatenated string"},"services.klogd.enable":{"declarations":["nixos/modules/services/logging/klogd.nix"],"default":false,"description":"Whether to enable klogd, the kernel log message processing\ndaemon.  Since systemd handles logging of kernel messages on\nLinux 3.5 and later, this is only useful if you're running an\nolder kernel.\n","loc":["services","klogd","enable"],"readOnly":false,"type":"boolean"},"services.kmscon.autologinUser":{"declarations":["nixos/modules/services/ttys/kmscon.nix"],"default":null,"description":"Username of the account that will be automatically logged in at the console.\nIf unspecified, a login prompt is shown as usual.\n","loc":["services","kmscon","autologinUser"],"readOnly":false,"type":"null or string"},"services.kmscon.enable":{"declarations":["nixos/modules/services/ttys/kmscon.nix"],"default":false,"description":"Use kmscon as the virtual console instead of gettys.\nkmscon is a kms/dri-based userspace virtual terminal implementation.\nIt supports a richer feature set than the standard linux console VT,\nincluding full unicode support, and when the video card supports drm\nshould be much faster.\n","loc":["services","kmscon","enable"],"readOnly":false,"type":"boolean"},"services.kmscon.extraConfig":{"declarations":["nixos/modules/services/ttys/kmscon.nix"],"default":"","description":"Extra contents of the kmscon.conf file.","example":"font-size=14","loc":["services","kmscon","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.kmscon.extraOptions":{"declarations":["nixos/modules/services/ttys/kmscon.nix"],"default":"","description":"Extra flags to pass to kmscon.","example":"--term xterm-256color","loc":["services","kmscon","extraOptions"],"readOnly":false,"type":"strings concatenated with \" \""},"services.kmscon.hwRender":{"declarations":["nixos/modules/services/ttys/kmscon.nix"],"default":false,"description":"Whether to use 3D hardware acceleration to render the console.","loc":["services","kmscon","hwRender"],"readOnly":false,"type":"boolean"},"services.kresd.cacheDir":{"declarations":["nixos/modules/services/networking/kresd.nix"],"default":"/var/cache/kresd","description":"Directory for caches.  They are intended to survive reboots.\n","loc":["services","kresd","cacheDir"],"readOnly":false,"type":"path"},"services.kresd.enable":{"declarations":["nixos/modules/services/networking/kresd.nix"],"default":false,"description":"Whether to enable knot-resolver domain name server.\nDNSSEC validation is turned on by default.\nYou can run <literal>sudo nc -U /run/kresd/control</literal>\nand give commands interactively to kresd.\n","loc":["services","kresd","enable"],"readOnly":false,"type":"boolean"},"services.kresd.extraConfig":{"declarations":["nixos/modules/services/networking/kresd.nix"],"default":"","description":"Extra lines to be added verbatim to the generated configuration file.\n","loc":["services","kresd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.kresd.interfaces":{"declarations":["nixos/modules/services/networking/kresd.nix"],"default":["::1","127.0.0.1"],"description":"What addresses the server should listen on. (UDP+TCP 53)\n","loc":["services","kresd","interfaces"],"readOnly":false,"type":"list of strings"},"services.kresd.listenTLS":{"declarations":["nixos/modules/services/networking/kresd.nix"],"default":[],"description":"Addresses on which kresd should provide DNS over TLS (see RFC 7858).\nFor detailed syntax see ListenStream in man systemd.socket.\n","example":["198.51.100.1:853","[2001:db8::1]:853","853"],"loc":["services","kresd","listenTLS"],"readOnly":false,"type":"list of strings"},"services.kubernetes.addonManager.addons":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":{},"description":"Kubernetes addons (any kind of Kubernetes resource can be an addon).","example":{"_type":"literalExample","text":"{\n  \"my-service\" = {\n    \"apiVersion\" = \"v1\";\n    \"kind\" = \"Service\";\n    \"metadata\" = {\n      \"name\" = \"my-service\";\n      \"namespace\" = \"default\";\n    };\n    \"spec\" = { ... };\n  };\n}\n// import <nixpkgs/nixos/modules/services/cluster/kubernetes/dashboard.nix> { cfg = config.services.kubernetes; };\n"},"loc":["services","kubernetes","addonManager","addons"],"readOnly":false,"type":"attribute set of attribute set or list of attribute setss"},"services.kubernetes.addonManager.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to enable Kubernetes addon manager.","loc":["services","kubernetes","addonManager","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.addons.dashboard.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/dashboard.nix"],"default":false,"description":"Whether to enable kubernetes dashboard addon.","example":true,"loc":["services","kubernetes","addons","dashboard","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.addons.dashboard.image":{"declarations":["nixos/modules/services/cluster/kubernetes/dashboard.nix"],"default":{"finalImageTag":"v1.8.3","imageDigest":"sha256:dc4026c1b595435ef5527ca598e1e9c4343076926d7d62b365c44831395adbd0","imageName":"k8s.gcr.io/kubernetes-dashboard-amd64","sha256":"18ajcg0q1vignfjk2sm4xj4wzphfz8wah69ps8dklqfvv0164mc8"},"description":"Docker image to seed for the kubernetes dashboard container.","loc":["services","kubernetes","addons","dashboard","image"],"readOnly":false,"type":"attribute set"},"services.kubernetes.addons.dashboard.rbac":{"declarations":["nixos/modules/services/cluster/kubernetes/dashboard.nix"],"default":{},"description":"Role-based access control (RBAC) options","loc":["services","kubernetes","addons","dashboard","rbac"],"readOnly":false,"type":"submodule"},"services.kubernetes.addons.dashboard.rbac.clusterAdmin":{"declarations":["nixos/modules/services/cluster/kubernetes/dashboard.nix"],"default":false,"description":"Whether to assign cluster admin rights to the kubernetes dashboard","loc":["services","kubernetes","addons","dashboard","rbac","clusterAdmin"],"readOnly":false,"type":"boolean"},"services.kubernetes.addons.dashboard.rbac.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/dashboard.nix"],"default":true,"description":"Whether to enable role based access control is enabled for kubernetes dashboard","loc":["services","kubernetes","addons","dashboard","rbac","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.addons.dashboard.version":{"declarations":["nixos/modules/services/cluster/kubernetes/dashboard.nix"],"default":"v1.8.3","description":"Which version of the kubernetes dashboard to deploy","loc":["services","kubernetes","addons","dashboard","version"],"readOnly":false,"type":"string"},"services.kubernetes.addons.dns.clusterDomain":{"declarations":["nixos/modules/services/cluster/kubernetes/dns.nix"],"default":"cluster.local","description":"Dns cluster domain","loc":["services","kubernetes","addons","dns","clusterDomain"],"readOnly":false,"type":"string"},"services.kubernetes.addons.dns.clusterIp":{"declarations":["nixos/modules/services/cluster/kubernetes/dns.nix"],"default":"10.0.0.254","description":"Dns addon clusterIP","loc":["services","kubernetes","addons","dns","clusterIp"],"readOnly":false,"type":"string"},"services.kubernetes.addons.dns.dnsmasq-nanny":{"declarations":["nixos/modules/services/cluster/kubernetes/dns.nix"],"default":{"finalImageTag":"1.14.10","imageDigest":"sha256:bbb2a290a568125b3b996028958eb773f33b5b87a6b37bf38a28f8b62dddb3c8","imageName":"k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64","sha256":"1fihml7s2mfwgac51cbqpylkwbivc8nyhgi4vb820s83zvl8a6y1"},"description":"Docker image to seed for the kube-dns dnsmasq container.","loc":["services","kubernetes","addons","dns","dnsmasq-nanny"],"readOnly":false,"type":"attribute set"},"services.kubernetes.addons.dns.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/dns.nix"],"default":false,"description":"Whether to enable kubernetes dns addon.","example":true,"loc":["services","kubernetes","addons","dns","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.addons.dns.kube-dns":{"declarations":["nixos/modules/services/cluster/kubernetes/dns.nix"],"default":{"finalImageTag":"1.14.10","imageDigest":"sha256:b99fc3eee2a9f052f7eb4cc00f15eb12fc405fa41019baa2d6b79847ae7284a8","imageName":"k8s.gcr.io/k8s-dns-kube-dns-amd64","sha256":"0x583znk9smqn0fix7ld8sm5jgaxhqhx3fq97b1wkqm7iwhvl3pj"},"description":"Docker image to seed for the kube-dns main container.","loc":["services","kubernetes","addons","dns","kube-dns"],"readOnly":false,"type":"attribute set"},"services.kubernetes.addons.dns.sidecar":{"declarations":["nixos/modules/services/cluster/kubernetes/dns.nix"],"default":{"finalImageTag":"1.14.10","imageDigest":"sha256:4f1ab957f87b94a5ec1edc26fae50da2175461f00afecf68940c4aa079bd08a4","imageName":"k8s.gcr.io/k8s-dns-sidecar-amd64","sha256":"08l1bv5jgrhvjzpqpbinrkgvv52snc4fzyd8ya9v18ns2klyz7m0"},"description":"Docker image to seed for the kube-dns sidecar container.","loc":["services","kubernetes","addons","dns","sidecar"],"readOnly":false,"type":"attribute set"},"services.kubernetes.apiserver.advertiseAddress":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes apiserver IP address on which to advertise the apiserver\nto members of the cluster. This address must be reachable by the rest\nof the cluster.\n","loc":["services","kubernetes","apiserver","advertiseAddress"],"readOnly":false,"type":"null or string"},"services.kubernetes.apiserver.allowPrivileged":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":true,"description":"Whether to allow privileged containers on Kubernetes.","loc":["services","kubernetes","apiserver","allowPrivileged"],"readOnly":false,"type":"boolean"},"services.kubernetes.apiserver.authorizationMode":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":["RBAC","Node"],"description":"Kubernetes apiserver authorization mode (AlwaysAllow/AlwaysDeny/ABAC/Webhook/RBAC/Node). See\n<link xlink:href=\"https://kubernetes.io/docs/reference/access-authn-authz/authorization/\"/>\n","loc":["services","kubernetes","apiserver","authorizationMode"],"readOnly":false,"type":"list of one of \"AlwaysAllow\", \"AlwaysDeny\", \"ABAC\", \"Webhook\", \"RBAC\", \"Node\"s"},"services.kubernetes.apiserver.authorizationPolicy":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"Kubernetes apiserver authorization policy file. See\n<link xlink:href=\"https://kubernetes.io/docs/reference/access-authn-authz/authorization/\"/>\n","loc":["services","kubernetes","apiserver","authorizationPolicy"],"readOnly":false,"type":"list of attribute sets"},"services.kubernetes.apiserver.basicAuthFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"users","description":"Kubernetes apiserver basic authentication file. See\n<link xlink:href=\"https://kubernetes.io/docs/reference/access-authn-authz/authentication\"/>\n","loc":["services","kubernetes","apiserver","basicAuthFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.bindAddress":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"0.0.0.0","description":"The IP address on which to listen for the --secure-port port.\nThe associated interface(s) must be reachable by the rest\nof the cluster, and by CLI/web clients.\n","loc":["services","kubernetes","apiserver","bindAddress"],"readOnly":false,"type":"string"},"services.kubernetes.apiserver.clientCaFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes apiserver CA file for client auth.","loc":["services","kubernetes","apiserver","clientCaFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.disableAdmissionPlugins":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"Kubernetes admission control plugins to disable. See\n<link xlink:href=\"https://kubernetes.io/docs/admin/admission-controllers/\"/>\n","loc":["services","kubernetes","apiserver","disableAdmissionPlugins"],"readOnly":false,"type":"list of strings"},"services.kubernetes.apiserver.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to enable Kubernetes apiserver.","loc":["services","kubernetes","apiserver","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.apiserver.enableAdmissionPlugins":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":["NamespaceLifecycle","LimitRanger","ServiceAccount","ResourceQuota","DefaultStorageClass","DefaultTolerationSeconds","NodeRestriction"],"description":"Kubernetes admission control plugins to enable. See\n<link xlink:href=\"https://kubernetes.io/docs/admin/admission-controllers/\"/>\n","example":["NamespaceLifecycle","NamespaceExists","LimitRanger","SecurityContextDeny","ServiceAccount","ResourceQuota","PodSecurityPolicy","NodeRestriction","DefaultStorageClass"],"loc":["services","kubernetes","apiserver","enableAdmissionPlugins"],"readOnly":false,"type":"list of strings"},"services.kubernetes.apiserver.extraOpts":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"","description":"Kubernetes apiserver extra command line options.","loc":["services","kubernetes","apiserver","extraOpts"],"readOnly":false,"type":"string"},"services.kubernetes.apiserver.featureGates":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"List set of feature gates","loc":["services","kubernetes","apiserver","featureGates"],"readOnly":false,"type":"list of strings"},"services.kubernetes.apiserver.kubeletClientCaFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Path to a cert file for connecting to kubelet.","loc":["services","kubernetes","apiserver","kubeletClientCaFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.kubeletClientCertFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Client certificate to use for connections to kubelet.","loc":["services","kubernetes","apiserver","kubeletClientCertFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.kubeletClientKeyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Key to use for connections to kubelet.","loc":["services","kubernetes","apiserver","kubeletClientKeyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.kubeletHttps":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":true,"description":"Whether to use https for connections to kubelet.","loc":["services","kubernetes","apiserver","kubeletHttps"],"readOnly":false,"type":"boolean"},"services.kubernetes.apiserver.port":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":8080,"description":"Kubernetes apiserver listening port.","loc":["services","kubernetes","apiserver","port"],"readOnly":false,"type":"signed integer"},"services.kubernetes.apiserver.runtimeConfig":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"authentication.k8s.io/v1beta1=true","description":"Api runtime configuration. See\n<link xlink:href=\"https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/\"/>\n","example":"api/all=false,api/v1=true","loc":["services","kubernetes","apiserver","runtimeConfig"],"readOnly":false,"type":"string"},"services.kubernetes.apiserver.securePort":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":443,"description":"Kubernetes apiserver secure port.","loc":["services","kubernetes","apiserver","securePort"],"readOnly":false,"type":"signed integer"},"services.kubernetes.apiserver.serviceAccountKeyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes apiserver PEM-encoded x509 RSA private or public key file,\nused to verify ServiceAccount tokens. By default tls private key file\nis used.\n","loc":["services","kubernetes","apiserver","serviceAccountKeyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.serviceClusterIpRange":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"10.0.0.0/24","description":"A CIDR notation IP range from which to assign service cluster IPs.\nThis must not overlap with any IP ranges assigned to nodes for pods.\n","loc":["services","kubernetes","apiserver","serviceClusterIpRange"],"readOnly":false,"type":"string"},"services.kubernetes.apiserver.storageBackend":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"etcd3","description":"Kubernetes apiserver storage backend.\n","loc":["services","kubernetes","apiserver","storageBackend"],"readOnly":false,"type":"one of \"etcd2\", \"etcd3\""},"services.kubernetes.apiserver.tlsCertFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes apiserver certificate file.","loc":["services","kubernetes","apiserver","tlsCertFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.tlsKeyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes apiserver private key file.","loc":["services","kubernetes","apiserver","tlsKeyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.tokenAuthFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes apiserver token authentication file. See\n<link xlink:href=\"https://kubernetes.io/docs/reference/access-authn-authz/authentication\"/>\n","loc":["services","kubernetes","apiserver","tokenAuthFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.apiserver.webhookConfig":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes apiserver Webhook config file. It uses the kubeconfig file format.\nSee <link xlink:href=\"https://kubernetes.io/docs/reference/access-authn-authz/webhook/\"/>\n","loc":["services","kubernetes","apiserver","webhookConfig"],"readOnly":false,"type":"null or path"},"services.kubernetes.caFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Default kubernetes certificate authority","loc":["services","kubernetes","caFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.clusterCidr":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"10.1.0.0/16","description":"Kubernetes controller manager and proxy CIDR Range for Pods in cluster.","loc":["services","kubernetes","clusterCidr"],"readOnly":false,"type":"string"},"services.kubernetes.controllerManager.address":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"127.0.0.1","description":"Kubernetes controller manager listening address.","loc":["services","kubernetes","controllerManager","address"],"readOnly":false,"type":"string"},"services.kubernetes.controllerManager.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to enable Kubernetes controller manager.","loc":["services","kubernetes","controllerManager","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.controllerManager.extraOpts":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"","description":"Kubernetes controller manager extra command line options.","loc":["services","kubernetes","controllerManager","extraOpts"],"readOnly":false,"type":"string"},"services.kubernetes.controllerManager.featureGates":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"List set of feature gates","loc":["services","kubernetes","controllerManager","featureGates"],"readOnly":false,"type":"list of strings"},"services.kubernetes.controllerManager.kubeconfig.caFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes controller manager certificate authority file used to connect to kube-apiserver.","loc":["services","kubernetes","controllerManager","kubeconfig","caFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.controllerManager.kubeconfig.certFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes controller manager client certificate file used to connect to kube-apiserver.","loc":["services","kubernetes","controllerManager","kubeconfig","certFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.controllerManager.kubeconfig.keyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes controller manager client key file used to connect to kube-apiserver.","loc":["services","kubernetes","controllerManager","kubeconfig","keyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.controllerManager.kubeconfig.server":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"http://127.0.0.1:8080","description":"Kubernetes controller manager kube-apiserver server address.","loc":["services","kubernetes","controllerManager","kubeconfig","server"],"readOnly":false,"type":"string"},"services.kubernetes.controllerManager.leaderElect":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":true,"description":"Whether to start leader election before executing main loop.","loc":["services","kubernetes","controllerManager","leaderElect"],"readOnly":false,"type":"boolean"},"services.kubernetes.controllerManager.port":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":10252,"description":"Kubernetes controller manager listening port.","loc":["services","kubernetes","controllerManager","port"],"readOnly":false,"type":"signed integer"},"services.kubernetes.controllerManager.rootCaFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes controller manager certificate authority file included in\nservice account's token secret.\n","loc":["services","kubernetes","controllerManager","rootCaFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.controllerManager.serviceAccountKeyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes controller manager PEM-encoded private RSA key file used to\nsign service account tokens\n","loc":["services","kubernetes","controllerManager","serviceAccountKeyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.dataDir":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"/var/lib/kubernetes","description":"Kubernetes root directory for managing kubelet files.","loc":["services","kubernetes","dataDir"],"readOnly":false,"type":"path"},"services.kubernetes.etcd.caFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Etcd ca file.","loc":["services","kubernetes","etcd","caFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.etcd.certFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Etcd cert file.","loc":["services","kubernetes","etcd","certFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.etcd.keyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Etcd key file.","loc":["services","kubernetes","etcd","keyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.etcd.servers":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":["http://127.0.0.1:2379"],"description":"List of etcd servers. By default etcd is started, except if this option is changed.","loc":["services","kubernetes","etcd","servers"],"readOnly":false,"type":"list of strings"},"services.kubernetes.featureGates":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"List set of feature gates","loc":["services","kubernetes","featureGates"],"readOnly":false,"type":"list of strings"},"services.kubernetes.flannel.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to enable flannel networking","loc":["services","kubernetes","flannel","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.kubeconfig.caFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Default kubeconfig certificate authority file used to connect to kube-apiserver.","loc":["services","kubernetes","kubeconfig","caFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubeconfig.certFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Default kubeconfig client certificate file used to connect to kube-apiserver.","loc":["services","kubernetes","kubeconfig","certFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubeconfig.keyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Default kubeconfig client key file used to connect to kube-apiserver.","loc":["services","kubernetes","kubeconfig","keyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubeconfig.server":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"http://127.0.0.1:8080","description":"Default kubeconfig kube-apiserver server address.","loc":["services","kubernetes","kubeconfig","server"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.address":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"0.0.0.0","description":"Kubernetes kubelet info server listening address.","loc":["services","kubernetes","kubelet","address"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.allowPrivileged":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":true,"description":"Whether to allow Kubernetes containers to request privileged mode.","loc":["services","kubernetes","kubelet","allowPrivileged"],"readOnly":false,"type":"boolean"},"services.kubernetes.kubelet.applyManifests":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to apply manifests (this is true for master node).","loc":["services","kubernetes","kubelet","applyManifests"],"readOnly":false,"type":"boolean"},"services.kubernetes.kubelet.clientCaFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes apiserver CA file for client authentication.","loc":["services","kubernetes","kubelet","clientCaFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubelet.clusterDns":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"10.1.0.1","description":"Use alternative DNS.","loc":["services","kubernetes","kubelet","clusterDns"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.clusterDomain":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"cluster.local","description":"Use alternative domain.","loc":["services","kubernetes","kubelet","clusterDomain"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.cni.config":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"Kubernetes CNI configuration.","example":{"_type":"literalExample","text":"[{\n  \"cniVersion\": \"0.2.0\",\n  \"name\": \"mynet\",\n  \"type\": \"bridge\",\n  \"bridge\": \"cni0\",\n  \"isGateway\": true,\n  \"ipMasq\": true,\n  \"ipam\": {\n      \"type\": \"host-local\",\n      \"subnet\": \"10.22.0.0/16\",\n      \"routes\": [\n          { \"dst\": \"0.0.0.0/0\" }\n      ]\n  }\n} {\n  \"cniVersion\": \"0.2.0\",\n  \"type\": \"loopback\"\n}]\n"},"loc":["services","kubernetes","kubelet","cni","config"],"readOnly":false,"type":"list of attribute sets"},"services.kubernetes.kubelet.cni.configDir":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Path to Kubernetes CNI configuration directory.","loc":["services","kubernetes","kubelet","cni","configDir"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubelet.cni.packages":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"List of network plugin packages to install.","loc":["services","kubernetes","kubelet","cni","packages"],"readOnly":false,"type":"list of packages"},"services.kubernetes.kubelet.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to enable Kubernetes kubelet.","loc":["services","kubernetes","kubelet","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.kubelet.extraOpts":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"","description":"Kubernetes kubelet extra command line options.","loc":["services","kubernetes","kubelet","extraOpts"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.featureGates":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"List set of feature gates","loc":["services","kubernetes","kubelet","featureGates"],"readOnly":false,"type":"list of strings"},"services.kubernetes.kubelet.healthz.bind":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"127.0.0.1","description":"Kubernetes kubelet healthz listening address.","loc":["services","kubernetes","kubelet","healthz","bind"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.healthz.port":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":10248,"description":"Kubernetes kubelet healthz port.","loc":["services","kubernetes","kubelet","healthz","port"],"readOnly":false,"type":"signed integer"},"services.kubernetes.kubelet.hostname":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"nixos","description":"Kubernetes kubelet hostname override.","loc":["services","kubernetes","kubelet","hostname"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.kubeconfig.caFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubelet certificate authority file used to connect to kube-apiserver.","loc":["services","kubernetes","kubelet","kubeconfig","caFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubelet.kubeconfig.certFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubelet client certificate file used to connect to kube-apiserver.","loc":["services","kubernetes","kubelet","kubeconfig","certFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubelet.kubeconfig.keyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubelet client key file used to connect to kube-apiserver.","loc":["services","kubernetes","kubelet","kubeconfig","keyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubelet.kubeconfig.server":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"http://127.0.0.1:8080","description":"Kubelet kube-apiserver server address.","loc":["services","kubernetes","kubelet","kubeconfig","server"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.manifests":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":{},"description":"List of manifests to bootstrap with kubelet (only pods can be created as manifest entry)","loc":["services","kubernetes","kubelet","manifests"],"readOnly":false,"type":"attribute set of attribute sets"},"services.kubernetes.kubelet.networkPlugin":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"kubenet","description":"Network plugin to use by Kubernetes.","loc":["services","kubernetes","kubelet","networkPlugin"],"readOnly":false,"type":"null or one of \"cni\", \"kubenet\""},"services.kubernetes.kubelet.nodeIp":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"IP address of the node. If set, kubelet will use this IP address for the node.","loc":["services","kubernetes","kubelet","nodeIp"],"readOnly":false,"type":"null or string"},"services.kubernetes.kubelet.port":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":10250,"description":"Kubernetes kubelet info server listening port.","loc":["services","kubernetes","kubelet","port"],"readOnly":false,"type":"signed integer"},"services.kubernetes.kubelet.registerNode":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":true,"description":"Whether to auto register kubelet with API server.","loc":["services","kubernetes","kubelet","registerNode"],"readOnly":false,"type":"boolean"},"services.kubernetes.kubelet.seedDockerImages":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"List of docker images to preload on system","loc":["services","kubernetes","kubelet","seedDockerImages"],"readOnly":false,"type":"list of packages"},"services.kubernetes.kubelet.taints":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":{},"description":"Node taints (https://kubernetes.io/docs/concepts/configuration/assign-pod-node/).","loc":["services","kubernetes","kubelet","taints"],"readOnly":false,"type":"attribute set of submodules"},"services.kubernetes.kubelet.taints.<name>.effect":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"description":"Effect of taint.","example":"NoSchedule","loc":["services","kubernetes","kubelet","taints","<name>","effect"],"readOnly":false,"type":"one of \"NoSchedule\", \"PreferNoSchedule\", \"NoExecute\""},"services.kubernetes.kubelet.taints.<name>.key":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"‹name›","description":"Key of taint.","loc":["services","kubernetes","kubelet","taints","<name>","key"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.taints.<name>.value":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"description":"Value of taint.","loc":["services","kubernetes","kubelet","taints","<name>","value"],"readOnly":false,"type":"string"},"services.kubernetes.kubelet.tlsCertFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"File containing x509 Certificate for HTTPS.","loc":["services","kubernetes","kubelet","tlsCertFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubelet.tlsKeyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"File containing x509 private key matching tlsCertFile.","loc":["services","kubernetes","kubelet","tlsKeyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.kubelet.unschedulable":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to set node taint to unschedulable=true as it is the case of node that has only master role.","loc":["services","kubernetes","kubelet","unschedulable"],"readOnly":false,"type":"boolean"},"services.kubernetes.package":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"pkgs.kubernetes","description":"Kubernetes package to use.","loc":["services","kubernetes","package"],"readOnly":false,"type":"package"},"services.kubernetes.path":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"Packages added to the services' PATH environment variable. Both the bin and sbin subdirectories of each package are added.","loc":["services","kubernetes","path"],"readOnly":false,"type":"list of packages"},"services.kubernetes.proxy.address":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"0.0.0.0","description":"Kubernetes proxy listening address.","loc":["services","kubernetes","proxy","address"],"readOnly":false,"type":"string"},"services.kubernetes.proxy.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to enable Kubernetes proxy.","loc":["services","kubernetes","proxy","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.proxy.extraOpts":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"","description":"Kubernetes proxy extra command line options.","loc":["services","kubernetes","proxy","extraOpts"],"readOnly":false,"type":"string"},"services.kubernetes.proxy.featureGates":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"List set of feature gates","loc":["services","kubernetes","proxy","featureGates"],"readOnly":false,"type":"list of strings"},"services.kubernetes.proxy.kubeconfig.caFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes proxy certificate authority file used to connect to kube-apiserver.","loc":["services","kubernetes","proxy","kubeconfig","caFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.proxy.kubeconfig.certFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes proxy client certificate file used to connect to kube-apiserver.","loc":["services","kubernetes","proxy","kubeconfig","certFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.proxy.kubeconfig.keyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes proxy client key file used to connect to kube-apiserver.","loc":["services","kubernetes","proxy","kubeconfig","keyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.proxy.kubeconfig.server":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"http://127.0.0.1:8080","description":"Kubernetes proxy kube-apiserver server address.","loc":["services","kubernetes","proxy","kubeconfig","server"],"readOnly":false,"type":"string"},"services.kubernetes.roles":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"Kubernetes role that this machine should take.\n\nMaster role will enable etcd, apiserver, scheduler and controller manager\nservices. Node role will enable etcd, docker, kubelet and proxy services.\n","loc":["services","kubernetes","roles"],"readOnly":false,"type":"list of one of \"master\", \"node\"s"},"services.kubernetes.scheduler.address":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"127.0.0.1","description":"Kubernetes scheduler listening address.","loc":["services","kubernetes","scheduler","address"],"readOnly":false,"type":"string"},"services.kubernetes.scheduler.enable":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Whether to enable Kubernetes scheduler.","loc":["services","kubernetes","scheduler","enable"],"readOnly":false,"type":"boolean"},"services.kubernetes.scheduler.extraOpts":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"","description":"Kubernetes scheduler extra command line options.","loc":["services","kubernetes","scheduler","extraOpts"],"readOnly":false,"type":"string"},"services.kubernetes.scheduler.featureGates":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":[],"description":"List set of feature gates","loc":["services","kubernetes","scheduler","featureGates"],"readOnly":false,"type":"list of strings"},"services.kubernetes.scheduler.kubeconfig.caFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes scheduler certificate authority file used to connect to kube-apiserver.","loc":["services","kubernetes","scheduler","kubeconfig","caFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.scheduler.kubeconfig.certFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes scheduler client certificate file used to connect to kube-apiserver.","loc":["services","kubernetes","scheduler","kubeconfig","certFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.scheduler.kubeconfig.keyFile":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":null,"description":"Kubernetes scheduler client key file used to connect to kube-apiserver.","loc":["services","kubernetes","scheduler","kubeconfig","keyFile"],"readOnly":false,"type":"null or path"},"services.kubernetes.scheduler.kubeconfig.server":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":"http://127.0.0.1:8080","description":"Kubernetes scheduler kube-apiserver server address.","loc":["services","kubernetes","scheduler","kubeconfig","server"],"readOnly":false,"type":"string"},"services.kubernetes.scheduler.leaderElect":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":true,"description":"Whether to start leader election before executing main loop.","loc":["services","kubernetes","scheduler","leaderElect"],"readOnly":false,"type":"boolean"},"services.kubernetes.scheduler.port":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":10251,"description":"Kubernetes scheduler listening port.","loc":["services","kubernetes","scheduler","port"],"readOnly":false,"type":"signed integer"},"services.kubernetes.verbose":{"declarations":["nixos/modules/services/cluster/kubernetes/default.nix"],"default":false,"description":"Kubernetes enable verbose mode for debugging.","loc":["services","kubernetes","verbose"],"readOnly":false,"type":"boolean"},"services.lambdabot.enable":{"declarations":["nixos/modules/services/networking/lambdabot.nix"],"default":false,"description":"Enable the Lambdabot IRC bot","loc":["services","lambdabot","enable"],"readOnly":false,"type":"boolean"},"services.lambdabot.package":{"declarations":["nixos/modules/services/networking/lambdabot.nix"],"default":"pkgs.lambdabot","description":"Used lambdabot package","loc":["services","lambdabot","package"],"readOnly":false,"type":"package"},"services.lambdabot.script":{"declarations":["nixos/modules/services/networking/lambdabot.nix"],"default":"","description":"Lambdabot script","loc":["services","lambdabot","script"],"readOnly":false,"type":"string"},"services.leaps.address":{"declarations":["nixos/modules/services/misc/leaps.nix"],"default":"","description":"Hostname or IP-address to listen to. By default it will listen on all interfaces.","example":"127.0.0.1","loc":["services","leaps","address"],"readOnly":false,"type":"string"},"services.leaps.enable":{"declarations":["nixos/modules/services/misc/leaps.nix"],"default":false,"description":"Whether to enable leaps.","example":true,"loc":["services","leaps","enable"],"readOnly":false,"type":"boolean"},"services.leaps.path":{"declarations":["nixos/modules/services/misc/leaps.nix"],"default":"/","description":"Subdirectory used for reverse proxy setups","loc":["services","leaps","path"],"readOnly":false,"type":"path"},"services.leaps.port":{"declarations":["nixos/modules/services/misc/leaps.nix"],"default":8080,"description":"A port where leaps listens for incoming http requests","loc":["services","leaps","port"],"readOnly":false,"type":"signed integer"},"services.libreswan.configSetup":{"declarations":["nixos/modules/services/networking/libreswan.nix"],"default":"protostack=netkey\nnat_traversal=yes\nvirtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v4:100.64.0.0/10,%v6:fd00::/8,%v6:fe80::/10\n","description":"Options to go in the 'config setup' section of the libreswan ipsec configuration","example":"secretsfile=/root/ipsec.secrets\nprotostack=netkey\nnat_traversal=yes\nvirtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v4:100.64.0.0/10,%v6:fd00::/8,%v6:fe80::/10\n","loc":["services","libreswan","configSetup"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.libreswan.connections":{"declarations":["nixos/modules/services/networking/libreswan.nix"],"default":{},"description":"A set of connections to define for the libreswan ipsec service","example":{"myconnection":"auto=add\nleft=%defaultroute\nleftid=@user\n\nright=my.vpn.com\n\nikev2=no\nikelifetime=8h\n"},"loc":["services","libreswan","connections"],"readOnly":false,"type":"attribute set of strings concatenated with \"\\n\"s"},"services.libreswan.enable":{"declarations":["nixos/modules/services/networking/libreswan.nix"],"default":false,"description":"Whether to enable libreswan ipsec service.","example":true,"loc":["services","libreswan","enable"],"readOnly":false,"type":"boolean"},"services.lidarr.enable":{"declarations":["nixos/modules/services/misc/lidarr.nix"],"default":false,"description":"Whether to enable Lidarr.","example":true,"loc":["services","lidarr","enable"],"readOnly":false,"type":"boolean"},"services.lighttpd.cgit.configText":{"declarations":["nixos/modules/services/web-servers/lighttpd/cgit.nix"],"default":"","description":"Verbatim contents of the cgit runtime configuration file. Documentation\n(with cgitrc example file) is available in \"man cgitrc\". Or online:\nhttp://git.zx2c4.com/cgit/tree/cgitrc.5.txt\n","example":"cache-size=1000\nscan-path=/srv/git\n","loc":["services","lighttpd","cgit","configText"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.lighttpd.cgit.enable":{"declarations":["nixos/modules/services/web-servers/lighttpd/cgit.nix"],"default":false,"description":"If true, enable cgit (fast web interface for git repositories) as a\nsub-service in lighttpd.\n","loc":["services","lighttpd","cgit","enable"],"readOnly":false,"type":"boolean"},"services.lighttpd.cgit.subdir":{"declarations":["nixos/modules/services/web-servers/lighttpd/cgit.nix"],"default":"cgit","description":"The subdirectory in which to serve cgit. The web application will be\naccessible at http://yourserver/${subdir}\n","example":"","loc":["services","lighttpd","cgit","subdir"],"readOnly":false,"type":"string"},"services.lighttpd.collectd.collectionCgi":{"declarations":["nixos/modules/services/web-servers/lighttpd/collectd.nix"],"default":"collection.cgi","description":"Path to collection.cgi script from (collectd sources)/contrib/collection.cgi\nThis option allows to use a customized version\n","loc":["services","lighttpd","collectd","collectionCgi"],"readOnly":false,"type":"path"},"services.lighttpd.collectd.enable":{"declarations":["nixos/modules/services/web-servers/lighttpd/collectd.nix"],"default":false,"description":"Whether to enable collectd subservice accessible at http://yourserver/collectd.","example":true,"loc":["services","lighttpd","collectd","enable"],"readOnly":false,"type":"boolean"},"services.lighttpd.configText":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":"","description":"Overridable config file contents to use for lighttpd. By default, use\nthe contents automatically generated by NixOS.\n","example":"...verbatim config file contents...","loc":["services","lighttpd","configText"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.lighttpd.document-root":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":"/srv/www","description":"Document-root of the web server. Must be readable by the \"lighttpd\" user.\n","loc":["services","lighttpd","document-root"],"readOnly":false,"type":"path"},"services.lighttpd.enable":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":false,"description":"Enable the lighttpd web server.\n","loc":["services","lighttpd","enable"],"readOnly":false,"type":"boolean"},"services.lighttpd.enableModules":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":[],"description":"List of lighttpd modules to enable. Sub-services take care of\nenabling modules as needed, so this option is mainly for when you\nwant to add custom stuff to\n<option>services.lighttpd.extraConfig</option> that depends on a\ncertain module.\n","example":["mod_cgi","mod_status"],"loc":["services","lighttpd","enableModules"],"readOnly":false,"type":"list of strings"},"services.lighttpd.enableUpstreamMimeTypes":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":true,"description":"Whether to include the list of mime types bundled with lighttpd\n(upstream). If you disable this, no mime types will be added by\nNixOS and you will have to add your own mime types in\n<option>services.lighttpd.extraConfig</option>.\n","loc":["services","lighttpd","enableUpstreamMimeTypes"],"readOnly":false,"type":"boolean"},"services.lighttpd.extraConfig":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":"","description":"These configuration lines will be appended to the generated lighttpd\nconfig file. Note that this mechanism does not work when the manual\n<option>configText</option> option is used.\n","loc":["services","lighttpd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.lighttpd.gitweb.enable":{"declarations":["nixos/modules/services/web-servers/lighttpd/gitweb.nix"],"default":false,"description":"If true, enable gitweb in lighttpd. Access it at http://yourserver/gitweb\n","loc":["services","lighttpd","gitweb","enable"],"readOnly":false,"type":"boolean"},"services.lighttpd.mod_status":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":false,"description":"Show server status overview at /server-status, statistics at\n/server-statistics and list of loaded modules at /server-config.\n","loc":["services","lighttpd","mod_status"],"readOnly":false,"type":"boolean"},"services.lighttpd.mod_userdir":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":false,"description":"If true, requests in the form /~user/page.html are rewritten to take\nthe file public_html/page.html from the home directory of the user.\n","loc":["services","lighttpd","mod_userdir"],"readOnly":false,"type":"boolean"},"services.lighttpd.port":{"declarations":["nixos/modules/services/web-servers/lighttpd/default.nix"],"default":80,"description":"TCP port number for lighttpd to bind to.\n","loc":["services","lighttpd","port"],"readOnly":false,"type":"signed integer"},"services.liquidsoap.streams":{"declarations":["nixos/modules/services/audio/liquidsoap.nix"],"default":{},"description":"Set of Liquidsoap streams to start,\none systemd service per stream.\n","example":{"myStream1":{"_type":"literalExample","text":"\"/etc/liquidsoap/myStream1.liq\""},"myStream2":{"_type":"literalExample","text":"./myStream2.liq"},"myStream3":{"_type":"literalExample","text":"\"out(playlist(\\\"/srv/music/\\\"))\""}},"loc":["services","liquidsoap","streams"],"readOnly":false,"type":"attribute set of path or strings"},"services.lirc.configs":{"declarations":["nixos/modules/services/hardware/lirc.nix"],"description":"Configurations for lircd to load, see man:lircd.conf(5) for details (<filename>lircd.conf</filename>)","loc":["services","lirc","configs"],"readOnly":false,"type":"list of strings concatenated with \"\\n\"s"},"services.lirc.enable":{"declarations":["nixos/modules/services/hardware/lirc.nix"],"default":false,"description":"Whether to enable LIRC daemon.","example":true,"loc":["services","lirc","enable"],"readOnly":false,"type":"boolean"},"services.lirc.extraArguments":{"declarations":["nixos/modules/services/hardware/lirc.nix"],"default":[],"description":"Extra arguments to lircd.","loc":["services","lirc","extraArguments"],"readOnly":false,"type":"list of strings"},"services.lirc.options":{"declarations":["nixos/modules/services/hardware/lirc.nix"],"description":"LIRC default options descriped in man:lircd(8) (<filename>lirc_options.conf</filename>)","example":"[lircd]\nnodaemon = False\n","loc":["services","lirc","options"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.lldpd.enable":{"declarations":["nixos/modules/services/networking/lldpd.nix"],"default":false,"description":"Whether to enable Link Layer Discovery Protocol Daemon.","example":true,"loc":["services","lldpd","enable"],"readOnly":false,"type":"boolean"},"services.lldpd.extraArgs":{"declarations":["nixos/modules/services/networking/lldpd.nix"],"default":[],"description":"List of command line parameters for lldpd","example":["-c","-k","-I eth0"],"loc":["services","lldpd","extraArgs"],"readOnly":false,"type":"list of strings"},"services.localtime.enable":{"declarations":["nixos/modules/services/system/localtime.nix"],"default":false,"description":"Enable <literal>localtime</literal>, simple daemon for keeping the system\ntimezone up-to-date based on the current location. It uses geoclue2 to\ndetermine the current location and systemd-timedated to actually set\nthe timezone.\n","loc":["services","localtime","enable"],"readOnly":false,"type":"unspecified"},"services.locate.enable":{"declarations":["nixos/modules/misc/locate.nix"],"default":false,"description":"If enabled, NixOS will periodically update the database of\nfiles used by the <command>locate</command> command.\n","loc":["services","locate","enable"],"readOnly":false,"type":"boolean"},"services.locate.extraFlags":{"declarations":["nixos/modules/misc/locate.nix"],"default":[],"description":"Extra flags to pass to <command>updatedb</command>.\n","loc":["services","locate","extraFlags"],"readOnly":false,"type":"list of strings"},"services.locate.interval":{"declarations":["nixos/modules/misc/locate.nix"],"default":"02:15","description":"Update the locate database at this interval. Updates by\ndefault at 2:15 AM every day.\n\nThe format is described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","example":"hourly","loc":["services","locate","interval"],"readOnly":false,"type":"string"},"services.locate.localuser":{"declarations":["nixos/modules/misc/locate.nix"],"default":"nobody","description":"The user to search non-network directories as, using\n<command>su</command>.\n","loc":["services","locate","localuser"],"readOnly":false,"type":"null or string"},"services.locate.locate":{"declarations":["nixos/modules/misc/locate.nix"],"default":"pkgs.findutils","description":"The locate implementation to use\n","example":"pkgs.mlocate","loc":["services","locate","locate"],"readOnly":false,"type":"package"},"services.locate.output":{"declarations":["nixos/modules/misc/locate.nix"],"default":"/var/cache/locatedb","description":"The database file to build.\n","loc":["services","locate","output"],"readOnly":false,"type":"path"},"services.locate.pruneBindMounts":{"declarations":["nixos/modules/misc/locate.nix"],"default":false,"description":"Whether not to index bind mounts\n","loc":["services","locate","pruneBindMounts"],"readOnly":false,"type":"boolean"},"services.locate.pruneFS":{"declarations":["nixos/modules/misc/locate.nix"],"default":["afs","anon_inodefs","auto","autofs","bdev","binfmt","binfmt_misc","cgroup","cifs","coda","configfs","cramfs","cpuset","debugfs","devfs","devpts","devtmpfs","ecryptfs","eventpollfs","exofs","futexfs","ftpfs","fuse","fusectl","gfs","gfs2","hostfs","hugetlbfs","inotifyfs","iso9660","jffs2","lustre","misc","mqueue","ncpfs","nnpfs","ocfs","ocfs2","pipefs","proc","ramfs","rpc_pipefs","securityfs","selinuxfs","sfs","shfs","smbfs","sockfs","spufs","nfs","NFS","nfs4","nfsd","sshfs","subfs","supermount","sysfs","tmpfs","ubifs","udf","usbfs","vboxsf","vperfctrfs"],"description":"Which filesystem types to exclude from indexing\n","loc":["services","locate","pruneFS"],"readOnly":false,"type":"list of strings"},"services.locate.pruneNames":{"declarations":["nixos/modules/misc/locate.nix"],"default":[],"description":"Directory components which should exclude paths containing them from indexing\n","loc":["services","locate","pruneNames"],"readOnly":false,"type":"list of strings"},"services.locate.prunePaths":{"declarations":["nixos/modules/misc/locate.nix"],"default":["/tmp","/var/tmp","/var/cache","/var/lock","/var/run","/var/spool","/nix/store"],"description":"Which paths to exclude from indexing\n","loc":["services","locate","prunePaths"],"readOnly":false,"type":"list of paths"},"services.logcheck.config":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"FQDN=1","description":"Config options that you would like in logcheck.conf.\n","loc":["services","logcheck","config"],"readOnly":false,"type":"Concatenated string"},"services.logcheck.enable":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":false,"description":"Enable the logcheck cron job.\n","loc":["services","logcheck","enable"],"readOnly":false,"type":"boolean"},"services.logcheck.extraGroups":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":[],"description":"Extra groups for the logcheck user, for example to be able to use sendmail,\nor to access certain log files.\n","example":["postdrop","mongodb"],"loc":["services","logcheck","extraGroups"],"readOnly":false,"type":"list of strings"},"services.logcheck.extraRulesDirs":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":[],"description":"Directories with extra rules.\n","example":"/etc/logcheck","loc":["services","logcheck","extraRulesDirs"],"readOnly":false,"type":"list of paths"},"services.logcheck.files":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":["/var/log/messages"],"description":"Which log files to check.\n","example":["/var/log/messages","/var/log/mail"],"loc":["services","logcheck","files"],"readOnly":false,"type":"list of paths"},"services.logcheck.ignore":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":{},"description":"This option defines extra ignore rules.\n","loc":["services","logcheck","ignore"],"readOnly":false,"type":"attribute set of submodules"},"services.logcheck.ignore.<name>.level":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"server","description":"Set the logcheck level.\n","loc":["services","logcheck","ignore","<name>","level"],"readOnly":false,"type":"one of \"workstation\", \"server\", \"paranoid\""},"services.logcheck.ignore.<name>.regex":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"","description":"Regex specifying which log lines to ignore.\n","loc":["services","logcheck","ignore","<name>","regex"],"readOnly":false,"type":"string"},"services.logcheck.ignoreCron":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":{},"description":"This option defines extra ignore rules for cronjobs.\n","loc":["services","logcheck","ignoreCron"],"readOnly":false,"type":"attribute set of submodules"},"services.logcheck.ignoreCron.<name>.cmdline":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"","description":"Command line for the cron job. Will be turned into a regex for the logcheck ignore rule.\n","loc":["services","logcheck","ignoreCron","<name>","cmdline"],"readOnly":false,"type":"string"},"services.logcheck.ignoreCron.<name>.timeArgs":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":null,"description":"\"min hr dom mon dow\" crontab time args, to auto-create a cronjob too.\nLeave at null to not do this and just add a logcheck ignore rule.\n","example":"02 06 * * *","loc":["services","logcheck","ignoreCron","<name>","timeArgs"],"readOnly":false,"type":"null or string"},"services.logcheck.ignoreCron.<name>.user":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"root","description":"User that runs the cronjob.\n","loc":["services","logcheck","ignoreCron","<name>","user"],"readOnly":false,"type":"string"},"services.logcheck.level":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"server","description":"Set the logcheck level. Either \"workstation\", \"server\", or \"paranoid\".\n","loc":["services","logcheck","level"],"readOnly":false,"type":"string"},"services.logcheck.mailTo":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"root","description":"Email address to send reports to.\n","example":"you@domain.com","loc":["services","logcheck","mailTo"],"readOnly":false,"type":"string"},"services.logcheck.timeOfDay":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"*","description":"Time of day to run logcheck. A logcheck will be scheduled at xx:02 each day.\nLeave default (*) to run every hour. Of course when nothing special was logged,\nlogcheck will be silent.\n","example":"6","loc":["services","logcheck","timeOfDay"],"readOnly":false,"type":"string"},"services.logcheck.user":{"declarations":["nixos/modules/services/logging/logcheck.nix"],"default":"logcheck","description":"Username for the logcheck user.\n","loc":["services","logcheck","user"],"readOnly":false,"type":"string"},"services.logind.extraConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Extra config options for systemd-logind. See man logind.conf for\navailable options.\n","example":"IdleAction=lock","loc":["services","logind","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.logind.lidSwitch":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"suspend","description":"Specifies what to be done when the laptop lid is closed.\n","example":"ignore","loc":["services","logind","lidSwitch"],"readOnly":false,"type":"one of \"ignore\", \"poweroff\", \"reboot\", \"halt\", \"kexec\", \"suspend\", \"hibernate\", \"hybrid-sleep\", \"lock\""},"services.logind.lidSwitchDocked":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"ignore","description":"Specifies what to be done when the laptop lid is closed\nand another screen is added.\n","example":"suspend","loc":["services","logind","lidSwitchDocked"],"readOnly":false,"type":"one of \"ignore\", \"poweroff\", \"reboot\", \"halt\", \"kexec\", \"suspend\", \"hibernate\", \"hybrid-sleep\", \"lock\""},"services.logkeys.device":{"declarations":["nixos/modules/services/misc/logkeys.nix"],"default":null,"description":"Use the given device as keyboard input event device instead of /dev/input/eventX default.","example":"/dev/input/event15","loc":["services","logkeys","device"],"readOnly":false,"type":"null or Concatenated string"},"services.logkeys.enable":{"declarations":["nixos/modules/services/misc/logkeys.nix"],"default":false,"description":"Whether to enable logkeys service.","example":true,"loc":["services","logkeys","enable"],"readOnly":false,"type":"boolean"},"services.logmein-hamachi.enable":{"declarations":["nixos/modules/services/networking/logmein-hamachi.nix"],"default":false,"description":"Whether to enable LogMeIn Hamachi, a proprietary\n(closed source) commercial VPN software.\n","loc":["services","logmein-hamachi","enable"],"readOnly":false,"type":"boolean"},"services.logrotate.config":{"declarations":["nixos/modules/services/logging/logrotate.nix"],"default":"","description":"The contents of the logrotate config file\n","loc":["services","logrotate","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.logrotate.enable":{"declarations":["nixos/modules/services/logging/logrotate.nix"],"default":false,"description":"Enable the logrotate cron job\n","loc":["services","logrotate","enable"],"readOnly":false,"type":"boolean"},"services.logstash.dataDir":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"/var/lib/logstash","description":"A path to directory writable by logstash that it uses to store data.\nPlugins will also have access to this path.\n","loc":["services","logstash","dataDir"],"readOnly":false,"type":"string"},"services.logstash.enable":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":false,"description":"Enable logstash.","loc":["services","logstash","enable"],"readOnly":false,"type":"boolean"},"services.logstash.extraSettings":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"","description":"Extra Logstash settings in YAML format.","example":"pipeline:\n  batch:\n    size: 125\n    delay: 5\n","loc":["services","logstash","extraSettings"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.logstash.filterConfig":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"","description":"logstash filter configuration.","example":"if [type] == \"syslog\" {\n  # Keep only relevant systemd fields\n  # http://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html\n  prune {\n    whitelist_names => [\n      \"type\", \"@timestamp\", \"@version\",\n      \"MESSAGE\", \"PRIORITY\", \"SYSLOG_FACILITY\"\n    ]\n  }\n}\n","loc":["services","logstash","filterConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.logstash.filterWorkers":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":1,"description":"The quantity of filter workers to run.","loc":["services","logstash","filterWorkers"],"readOnly":false,"type":"signed integer"},"services.logstash.inputConfig":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"generator { }","description":"Logstash input configuration.","example":"# Read from journal\npipe {\n  command => \"${pkgs.systemd}/bin/journalctl -f -o json\"\n  type => \"syslog\" codec => json {}\n}\n","loc":["services","logstash","inputConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.logstash.listenAddress":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"127.0.0.1","description":"Address on which to start webserver.","loc":["services","logstash","listenAddress"],"readOnly":false,"type":"string"},"services.logstash.logLevel":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"warn","description":"Logging verbosity level.","loc":["services","logstash","logLevel"],"readOnly":false,"type":"one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\""},"services.logstash.outputConfig":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"stdout { codec => rubydebug }","description":"Logstash output configuration.","example":"redis { host => [\"localhost\"] data_type => \"list\" key => \"logstash\" codec => json }\nelasticsearch { }\n","loc":["services","logstash","outputConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.logstash.package":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"pkgs.logstash","description":"Logstash package to use.","example":{"_type":"literalExample","text":"pkgs.logstash5"},"loc":["services","logstash","package"],"readOnly":false,"type":"package"},"services.logstash.plugins":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":[],"description":"The paths to find other logstash plugins in.","example":{"_type":"literalExample","text":"[ pkgs.logstash-contrib ]"},"loc":["services","logstash","plugins"],"readOnly":false,"type":"list of paths"},"services.logstash.port":{"declarations":["nixos/modules/services/logging/logstash.nix"],"default":"9292","description":"Port on which to start webserver.","loc":["services","logstash","port"],"readOnly":false,"type":"string"},"services.longview.apacheStatusUrl":{"declarations":["nixos/modules/services/monitoring/longview.nix"],"default":"","description":"The Apache status page URL. If provided, Longview will\ngather statistics from this location. This requires Apache\nmod_status to be loaded and enabled.\n","example":"http://127.0.0.1/server-status","loc":["services","longview","apacheStatusUrl"],"readOnly":false,"type":"string"},"services.longview.apiKey":{"declarations":["nixos/modules/services/monitoring/longview.nix"],"default":"","description":"Longview API key. To get this, look in Longview settings which\nare found at https://manager.linode.com/longview/.\n\nWarning: this secret is stored in the world-readable Nix store!\nUse <option>apiKeyFile</option> instead.\n","example":"01234567-89AB-CDEF-0123456789ABCDEF","loc":["services","longview","apiKey"],"readOnly":false,"type":"string"},"services.longview.apiKeyFile":{"declarations":["nixos/modules/services/monitoring/longview.nix"],"default":null,"description":"A file containing the Longview API key.\nTo get this, look in Longview settings which\nare found at https://manager.linode.com/longview/.\n\n<option>apiKeyFile</option> takes precedence over <option>apiKey</option>.\n","example":"/run/keys/longview-api-key","loc":["services","longview","apiKeyFile"],"readOnly":false,"type":"null or path"},"services.longview.enable":{"declarations":["nixos/modules/services/monitoring/longview.nix"],"default":false,"description":"If enabled, system metrics will be sent to Linode LongView.\n","loc":["services","longview","enable"],"readOnly":false,"type":"boolean"},"services.longview.mysqlPassword":{"declarations":["nixos/modules/services/monitoring/longview.nix"],"default":"","description":"The password corresponding to <option>mysqlUser</option>.\nWarning: this is stored in cleartext in the Nix store!\nUse <option>mysqlPasswordFile</option> instead.\n","loc":["services","longview","mysqlPassword"],"readOnly":false,"type":"string"},"services.longview.mysqlPasswordFile":{"declarations":["nixos/modules/services/monitoring/longview.nix"],"default":null,"description":"A file containing the password corresponding to <option>mysqlUser</option>.\n","example":"/run/keys/dbpassword","loc":["services","longview","mysqlPasswordFile"],"readOnly":false,"type":"null or path"},"services.longview.mysqlUser":{"declarations":["nixos/modules/services/monitoring/longview.nix"],"default":"","description":"The user for connecting to the MySQL database. If provided,\nLongview will connect to MySQL and collect statistics about\nqueries, etc. This user does not need to have been granted\nany extra privileges.\n","loc":["services","longview","mysqlUser"],"readOnly":false,"type":"string"},"services.longview.nginxStatusUrl":{"declarations":["nixos/modules/services/monitoring/longview.nix"],"default":"","description":"The Nginx status page URL. Longview will gather statistics\nfrom this URL. This requires the Nginx stub_status module to\nbe enabled and configured at the given location.\n","example":"http://127.0.0.1/nginx_status","loc":["services","longview","nginxStatusUrl"],"readOnly":false,"type":"string"},"services.lshd.enable":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":false,"description":"Whether to enable the GNU lshd SSH2 daemon, which allows\nsecure remote login.\n","loc":["services","lshd","enable"],"readOnly":false,"type":"unspecified"},"services.lshd.hostKey":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":"/etc/lsh/host-key","description":"Path to the server's private key.  Note that this key must\nhave been created, e.g., using \"lsh-keygen --server |\nlsh-writekey --server\", so that you can run lshd.\n","loc":["services","lshd","hostKey"],"readOnly":false,"type":"unspecified"},"services.lshd.interfaces":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":[],"description":"List of network interfaces where listening for connections.\nWhen providing the empty list, `[]', lshd listens on all\nnetwork interfaces.\n","example":["localhost","1.2.3.4:443"],"loc":["services","lshd","interfaces"],"readOnly":false,"type":"unspecified"},"services.lshd.loginShell":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":null,"description":"If non-null, override the default login shell with the\nspecified value.\n","example":"/nix/store/xyz-bash-10.0/bin/bash10","loc":["services","lshd","loginShell"],"readOnly":false,"type":"unspecified"},"services.lshd.passwordAuthentication":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":true,"description":"Whether to enable password authentication.","loc":["services","lshd","passwordAuthentication"],"readOnly":false,"type":"unspecified"},"services.lshd.portNumber":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":22,"description":"The port on which to listen for connections.\n","loc":["services","lshd","portNumber"],"readOnly":false,"type":"unspecified"},"services.lshd.publicKeyAuthentication":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":true,"description":"Whether to enable public key authentication.","loc":["services","lshd","publicKeyAuthentication"],"readOnly":false,"type":"unspecified"},"services.lshd.rootLogin":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":false,"description":"Whether to enable remote root login.","loc":["services","lshd","rootLogin"],"readOnly":false,"type":"unspecified"},"services.lshd.srpKeyExchange":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":false,"description":"Whether to enable SRP key exchange and user authentication.\n","loc":["services","lshd","srpKeyExchange"],"readOnly":false,"type":"unspecified"},"services.lshd.subsystems":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"description":"List of subsystem-path pairs, where the head of the pair\ndenotes the subsystem name, and the tail denotes the path to\nan executable implementing it.\n","loc":["services","lshd","subsystems"],"readOnly":false,"type":"unspecified"},"services.lshd.syslog":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":true,"description":"Whether to enable syslog output.","loc":["services","lshd","syslog"],"readOnly":false,"type":"unspecified"},"services.lshd.tcpForwarding":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":true,"description":"Whether to enable TCP/IP forwarding.","loc":["services","lshd","tcpForwarding"],"readOnly":false,"type":"unspecified"},"services.lshd.x11Forwarding":{"declarations":["nixos/modules/services/networking/ssh/lshd.nix"],"default":true,"description":"Whether to enable X11 forwarding.","loc":["services","lshd","x11Forwarding"],"readOnly":false,"type":"unspecified"},"services.mail.freepopsd.bind":{"declarations":["nixos/modules/services/mail/freepops.nix"],"default":"0.0.0.0","description":"Bind over an IPv4 address instead of any.\n","loc":["services","mail","freepopsd","bind"],"readOnly":false,"type":"string"},"services.mail.freepopsd.enable":{"declarations":["nixos/modules/services/mail/freepops.nix"],"default":false,"description":"Enables Freepops, a POP3 webmail wrapper.\n","loc":["services","mail","freepopsd","enable"],"readOnly":false,"type":"boolean"},"services.mail.freepopsd.logFile":{"declarations":["nixos/modules/services/mail/freepops.nix"],"default":"/var/log/freepopsd","description":"Filename of the log file or syslog to rely on the logging daemon.\n","example":"syslog","loc":["services","mail","freepopsd","logFile"],"readOnly":false,"type":"string"},"services.mail.freepopsd.port":{"declarations":["nixos/modules/services/mail/freepops.nix"],"default":2000,"description":"Port on which the pop server will listen.\n","loc":["services","mail","freepopsd","port"],"readOnly":false,"type":"signed integer"},"services.mail.freepopsd.suid.group":{"declarations":["nixos/modules/services/mail/freepops.nix"],"default":"nogroup","description":"Group under which freepopsd will be after binding the port.\n","loc":["services","mail","freepopsd","suid","group"],"readOnly":false,"type":"string"},"services.mail.freepopsd.suid.user":{"declarations":["nixos/modules/services/mail/freepops.nix"],"default":"nobody","description":"User name under which freepopsd will be after binding the port.\n","loc":["services","mail","freepopsd","suid","user"],"readOnly":false,"type":"string"},"services.mail.freepopsd.threads":{"declarations":["nixos/modules/services/mail/freepops.nix"],"default":5,"description":"Max simultaneous connections.\n","loc":["services","mail","freepopsd","threads"],"readOnly":false,"type":"signed integer"},"services.mailhog.enable":{"declarations":["nixos/modules/services/mail/mailhog.nix"],"default":false,"description":"Whether to enable MailHog.","example":true,"loc":["services","mailhog","enable"],"readOnly":false,"type":"boolean"},"services.mailhog.user":{"declarations":["nixos/modules/services/mail/mailhog.nix"],"default":"mailhog","description":"User account under which mailhog runs.","loc":["services","mailhog","user"],"readOnly":false,"type":"string"},"services.mailpile.enable":{"declarations":["nixos/modules/services/networking/mailpile.nix"],"default":false,"description":"\n          Whether to enable Mailpile the mail client.\n        ","loc":["services","mailpile","enable"],"readOnly":false,"type":"unspecified"},"services.mailpile.hostname":{"declarations":["nixos/modules/services/networking/mailpile.nix"],"default":"localhost","description":"Listen to this hostname or ip.","loc":["services","mailpile","hostname"],"readOnly":false,"type":"unspecified"},"services.mailpile.port":{"declarations":["nixos/modules/services/networking/mailpile.nix"],"default":"33411","description":"Listen on this port.","loc":["services","mailpile","port"],"readOnly":false,"type":"unspecified"},"services.mantisbt.enable":{"declarations":["nixos/modules/services/misc/mantisbt.nix"],"default":false,"description":"Enable the mantisbt web service.\nThis switches on httpd with PHP and database.\n","loc":["services","mantisbt","enable"],"readOnly":false,"type":"boolean"},"services.mantisbt.extraConfig":{"declarations":["nixos/modules/services/misc/mantisbt.nix"],"default":"","description":"The contents of config_inc.php, without leading &lt;?php.\nIf left empty, the admin directory will be accessible.\n","loc":["services","mantisbt","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.mantisbt.urlPrefix":{"declarations":["nixos/modules/services/misc/mantisbt.nix"],"default":"/mantisbt","description":"The URL prefix under which the mantisbt service appears.","loc":["services","mantisbt","urlPrefix"],"readOnly":false,"type":"Concatenated string"},"services.marathon.enable":{"declarations":["nixos/modules/services/scheduling/marathon.nix"],"default":false,"description":"\tWhether to enable the marathon mesos framework.\n","loc":["services","marathon","enable"],"readOnly":false,"type":"boolean"},"services.marathon.environment":{"declarations":["nixos/modules/services/scheduling/marathon.nix"],"default":{},"description":"\tEnvironment variables passed to Marathon.\n","example":{"JAVA_OPTS":"-Xmx512m","MESOSPHERE_HTTP_CREDENTIALS":"username:password"},"loc":["services","marathon","environment"],"readOnly":false,"type":"attribute set"},"services.marathon.extraCmdLineOptions":{"declarations":["nixos/modules/services/scheduling/marathon.nix"],"default":[],"description":"\tExtra command line options to pass to Marathon.\n\tSee <link xlink:href=\"https://mesosphere.github.io/marathon/docs/command-line-flags.html\"/> for all possible flags.\n","example":["--https_port=8443","--zk_timeout=10000","--marathon_store_timeout=2000"],"loc":["services","marathon","extraCmdLineOptions"],"readOnly":false,"type":"list of strings"},"services.marathon.httpPort":{"declarations":["nixos/modules/services/scheduling/marathon.nix"],"default":8080,"description":"\tMarathon listening port for HTTP connections.\n","loc":["services","marathon","httpPort"],"readOnly":false,"type":"signed integer"},"services.marathon.master":{"declarations":["nixos/modules/services/scheduling/marathon.nix"],"default":"zk://localhost:2181/mesos","description":"\tMesos master address. See <link xlink:href=\"https://mesosphere.github.io/marathon/docs/\"/> for details.\n","example":"zk://1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181/mesos","loc":["services","marathon","master"],"readOnly":false,"type":"string"},"services.marathon.user":{"declarations":["nixos/modules/services/scheduling/marathon.nix"],"default":"marathon","description":"\tThe user that the Marathon framework will be launched as. If the user doesn't exist it will be created.\n\tIf you want to run apps that require root access or you want to launch apps using arbitrary users, that\n\tis using the `--mesos_user` flag then you need to change this to `root`.\n","example":"root","loc":["services","marathon","user"],"readOnly":false,"type":"string"},"services.marathon.zookeeperHosts":{"declarations":["nixos/modules/services/scheduling/marathon.nix"],"default":["localhost:2181"],"description":"\tZooKeeper hosts' addresses.\n","example":["1.2.3.4:2181","2.3.4.5:2181","3.4.5.6:2181"],"loc":["services","marathon","zookeeperHosts"],"readOnly":false,"type":"list of strings"},"services.mathics.enable":{"declarations":["nixos/modules/services/misc/mathics.nix"],"default":false,"description":"Whether to enable Mathics notebook service.","example":true,"loc":["services","mathics","enable"],"readOnly":false,"type":"boolean"},"services.mathics.external":{"declarations":["nixos/modules/services/misc/mathics.nix"],"default":false,"description":"Listen on all interfaces, rather than just localhost?","loc":["services","mathics","external"],"readOnly":false,"type":"boolean"},"services.mathics.port":{"declarations":["nixos/modules/services/misc/mathics.nix"],"default":8000,"description":"TCP port to listen on.","loc":["services","mathics","port"],"readOnly":false,"type":"signed integer"},"services.matomo.enable":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":false,"description":"Enable matomo web analytics with php-fpm backend.\nEither the nginx option or the webServerUser option is mandatory.\n","loc":["services","matomo","enable"],"readOnly":false,"type":"boolean"},"services.matomo.nginx":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"With this option, you can customize an nginx virtualHost which already has sensible defaults for matomo.\nEither this option or the webServerUser option is mandatory.\nSet this to {} to just enable the virtualHost if you don't need any customization.\nIf enabled, then by default, the <option>serverName</option> is\n<literal>matomo.$\\{config.networking.hostName\\}.$\\{config.networking.domain\\}</literal>,\nSSL is active, and certificates are acquired via ACME.\nIf this is set to null (the default), no nginx virtualHost will be configured.\n","example":{"enableACME":false,"serverAliases":["matomo.${config.networking.domain}","stats.${config.networking.domain}"]},"loc":["services","matomo","nginx"],"readOnly":false,"type":"null or submodule"},"services.matomo.nginx.acmeFallbackHost":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Host which to proxy requests to if acme challenge is not found. Useful\nif you want multiple hosts to be able to verify the same domain name.\n","loc":["services","matomo","nginx","acmeFallbackHost"],"readOnly":false,"type":"null or string"},"services.matomo.nginx.acmeRoot":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":"/var/lib/acme/acme-challenge","description":"Directory to store certificates and keys managed by the ACME service.","loc":["services","matomo","nginx","acmeRoot"],"readOnly":false,"type":"string"},"services.matomo.nginx.addSSL":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":false,"description":"Whether to enable HTTPS in addition to plain HTTP. This will set defaults for\n<literal>listen</literal> to listen on all interfaces on the respective default\nports (80, 443).\n","loc":["services","matomo","nginx","addSSL"],"readOnly":false,"type":"boolean"},"services.matomo.nginx.basicAuth":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":{},"description":"Basic Auth protection for a vhost.\n\nWARNING: This is implemented to store the password in plain text in the\nnix store.\n","example":{"_type":"literalExample","text":"{\n  user = \"password\";\n};\n"},"loc":["services","matomo","nginx","basicAuth"],"readOnly":false,"type":"attribute set of strings"},"services.matomo.nginx.basicAuthFile":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Basic Auth password file for a vhost.\n","loc":["services","matomo","nginx","basicAuthFile"],"readOnly":false,"type":"null or path"},"services.matomo.nginx.default":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":false,"description":"Makes this vhost the default.\n","loc":["services","matomo","nginx","default"],"readOnly":false,"type":"boolean"},"services.matomo.nginx.enableACME":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":true,"description":"Whether to ask Let's Encrypt to sign a certificate for this vhost.\nAlternately, you can use an existing certificate through <option>useACMEHost</option>.\n","loc":["services","matomo","nginx","enableACME"],"readOnly":false,"type":"boolean"},"services.matomo.nginx.extraConfig":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":"","description":"These lines go to the end of the vhost verbatim.\n","loc":["services","matomo","nginx","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.matomo.nginx.forceSSL":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":true,"description":"Whether to add a separate nginx server block that permanently redirects (301)\nall plain HTTP traffic to HTTPS. This will set defaults for\n<literal>listen</literal> to listen on all interfaces on the respective default\nports (80, 443), where the non-SSL listens are used for the redirect vhosts.\n","loc":["services","matomo","nginx","forceSSL"],"readOnly":false,"type":"boolean"},"services.matomo.nginx.globalRedirect":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"If set, all requests for this host are redirected permanently to\nthe given hostname.\n","example":"newserver.example.org","loc":["services","matomo","nginx","globalRedirect"],"readOnly":false,"type":"null or string"},"services.matomo.nginx.http2":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":true,"description":"Whether to enable HTTP 2.\nNote that (as of writing) due to nginx's implementation, to disable\nHTTP 2 you have to disable it on all vhosts that use a given\nIP address / port.\nIf there is one server block configured to enable http2,then it is\nenabled for all server blocks on this IP.\nSee https://stackoverflow.com/a/39466948/263061.\n","loc":["services","matomo","nginx","http2"],"readOnly":false,"type":"boolean"},"services.matomo.nginx.listen":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":[],"description":"Listen addresses and ports for this virtual host.\nIPv6 addresses must be enclosed in square brackets.\nNote: this option overrides <literal>addSSL</literal>\nand <literal>onlySSL</literal>.\n","example":[{"addr":"195.154.1.1","port":443,"ssl":true},{"addr":"192.154.1.1","port":80}],"loc":["services","matomo","nginx","listen"],"readOnly":false,"type":"list of submodules"},"services.matomo.nginx.listen.*.addr":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"description":"IP address.","loc":["services","matomo","nginx","listen","*","addr"],"readOnly":false,"type":"string"},"services.matomo.nginx.listen.*.port":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":80,"description":"Port number.","loc":["services","matomo","nginx","listen","*","port"],"readOnly":false,"type":"signed integer"},"services.matomo.nginx.listen.*.ssl":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":false,"description":"Enable SSL.","loc":["services","matomo","nginx","listen","*","ssl"],"readOnly":false,"type":"boolean"},"services.matomo.nginx.locations":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":{},"description":"Declarative location config","example":{"_type":"literalExample","text":"{\n  \"/\" = {\n    proxyPass = \"http://localhost:3000\";\n  };\n};\n"},"loc":["services","matomo","nginx","locations"],"readOnly":false,"type":"attribute set of submodules"},"services.matomo.nginx.locations.<name>.alias":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Alias directory for requests.\n","example":"/your/alias/directory","loc":["services","matomo","nginx","locations","<name>","alias"],"readOnly":false,"type":"null or path"},"services.matomo.nginx.locations.<name>.extraConfig":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":"","description":"These lines go to the end of the location verbatim.\n","loc":["services","matomo","nginx","locations","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.matomo.nginx.locations.<name>.index":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Adds index directive.\n","example":"index.php index.html","loc":["services","matomo","nginx","locations","<name>","index"],"readOnly":false,"type":"null or string"},"services.matomo.nginx.locations.<name>.priority":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":1000,"description":"Order of this location block in relation to the others in the vhost.\nThe semantics are the same as with `lib.mkOrder`. Smaller values have\na greater priority.\n","loc":["services","matomo","nginx","locations","<name>","priority"],"readOnly":false,"type":"signed integer"},"services.matomo.nginx.locations.<name>.proxyPass":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Adds proxy_pass directive and sets recommended proxy headers if\nrecommendedProxySettings is enabled.\n","example":"http://www.example.org/","loc":["services","matomo","nginx","locations","<name>","proxyPass"],"readOnly":false,"type":"null or string"},"services.matomo.nginx.locations.<name>.proxyWebsockets":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":false,"description":"Whether to supporty proxying websocket connections with HTTP/1.1.\n","example":true,"loc":["services","matomo","nginx","locations","<name>","proxyWebsockets"],"readOnly":false,"type":"boolean"},"services.matomo.nginx.locations.<name>.root":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Root directory for requests.\n","example":"/your/root/directory","loc":["services","matomo","nginx","locations","<name>","root"],"readOnly":false,"type":"null or path"},"services.matomo.nginx.locations.<name>.tryFiles":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Adds try_files directive.\n","example":"$uri =404","loc":["services","matomo","nginx","locations","<name>","tryFiles"],"readOnly":false,"type":"null or string"},"services.matomo.nginx.onlySSL":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":false,"description":"Whether to enable HTTPS and reject plain HTTP connections. This will set\ndefaults for <literal>listen</literal> to listen on all interfaces on port 443.\n","loc":["services","matomo","nginx","onlySSL"],"readOnly":false,"type":"boolean"},"services.matomo.nginx.root":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"The path of the web root directory.\n","example":"/data/webserver/docs","loc":["services","matomo","nginx","root"],"readOnly":false,"type":"null or path"},"services.matomo.nginx.serverAliases":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":[],"description":"Additional names of virtual hosts served by this virtual host configuration.\n","example":["www.example.org","example.org"],"loc":["services","matomo","nginx","serverAliases"],"readOnly":false,"type":"list of strings"},"services.matomo.nginx.serverName":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Name of this virtual host. Defaults to attribute name in virtualHosts.\n","example":"example.org","loc":["services","matomo","nginx","serverName"],"readOnly":false,"type":"null or string"},"services.matomo.nginx.sslCertificate":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"description":"Path to server SSL certificate.","example":"/var/host.cert","loc":["services","matomo","nginx","sslCertificate"],"readOnly":false,"type":"path"},"services.matomo.nginx.sslCertificateKey":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"description":"Path to server SSL certificate key.","example":"/var/host.key","loc":["services","matomo","nginx","sslCertificateKey"],"readOnly":false,"type":"path"},"services.matomo.nginx.sslTrustedCertificate":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Path to root SSL certificate for stapling and client certificates.","example":"/var/root.cert","loc":["services","matomo","nginx","sslTrustedCertificate"],"readOnly":false,"type":"null or path"},"services.matomo.nginx.useACMEHost":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"A host of an existing Let's Encrypt certificate to use.\nThis is useful if you have many subdomains and want to avoid hitting the\n<link xlink:href=\"https://letsencrypt.org/docs/rate-limits/\">rate limit</link>.\nAlternately, you can generate a certificate through <option>enableACME</option>.\n<emphasis>Note that this option does not create any certificates, nor it does add subdomains to existing ones – you will need to create them manually using  <xref linkend=\"opt-security.acme.certs\"/>.</emphasis>\n","loc":["services","matomo","nginx","useACMEHost"],"readOnly":false,"type":"null or string"},"services.matomo.package":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":"pkgs.matomo","description":"Matomo package to use","loc":["services","matomo","package"],"readOnly":false,"type":"package"},"services.matomo.phpfpmProcessManagerConfig":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":"; default phpfpm process manager settings\npm = dynamic\npm.max_children = 75\npm.start_servers = 10\npm.min_spare_servers = 5\npm.max_spare_servers = 20\npm.max_requests = 500\n\n; log worker's stdout, but this has a performance hit\ncatch_workers_output = yes\n","description":"Settings for phpfpm's process manager. You might need to change this depending on the load for matomo.\n","loc":["services","matomo","phpfpmProcessManagerConfig"],"readOnly":false,"type":"string"},"services.matomo.webServerUser":{"declarations":["nixos/modules/services/web-apps/matomo.nix"],"default":null,"description":"Name of the web server user that forwards requests to the /run/phpfpm-matomo.sock fastcgi socket for matomo if the nginx\noption is not used. Either this option or the nginx option is mandatory.\nIf you want to use another webserver than nginx, you need to set this to that server's user\nand pass fastcgi requests to `index.php` and `piwik.php` to this socket.\n","example":"lighttpd","loc":["services","matomo","webServerUser"],"readOnly":false,"type":"null or string"},"services.matrix-synapse.allow_guest_access":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Allows users to register as guests without a password/email/etc, and\nparticipate in rooms hosted on this server which have been made\naccessible to anonymous users.\n","loc":["services","matrix-synapse","allow_guest_access"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.app_service_config_files":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":[],"description":"A list of application service config file to use\n","loc":["services","matrix-synapse","app_service_config_files"],"readOnly":false,"type":"list of paths"},"services.matrix-synapse.bcrypt_rounds":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"12","description":"Set the number of bcrypt rounds used to generate password hash.\nLarger numbers increase the work factor needed to generate the hash.\n","loc":["services","matrix-synapse","bcrypt_rounds"],"readOnly":false,"type":"string"},"services.matrix-synapse.bind_host":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"DEPRECATED: Use listeners instead.\nLocal interface to listen on.\nThe empty string will cause synapse to listen on all interfaces.\n","loc":["services","matrix-synapse","bind_host"],"readOnly":false,"type":"null or string"},"services.matrix-synapse.bind_port":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"DEPRECATED: Use listeners instead.\nThe port to listen for HTTPS requests on.\nFor when matrix traffic is sent directly to synapse.\n","example":8448,"loc":["services","matrix-synapse","bind_port"],"readOnly":false,"type":"null or signed integer"},"services.matrix-synapse.create_local_database":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":true,"description":"Whether to create a local database automatically.\n","loc":["services","matrix-synapse","create_local_database"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.dataDir":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"/var/lib/matrix-synapse","description":"The directory where matrix-synapse stores its stateful data such as\ncertificates, media and uploads.\n","loc":["services","matrix-synapse","dataDir"],"readOnly":false,"type":"string"},"services.matrix-synapse.database_args":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":{"database":"matrix-synapse","user":"matrix-synapse"},"description":"Arguments to pass to the engine.\n","loc":["services","matrix-synapse","database_args"],"readOnly":false,"type":"attribute set"},"services.matrix-synapse.database_name":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"matrix-synapse","description":"Database name.","loc":["services","matrix-synapse","database_name"],"readOnly":false,"type":"string"},"services.matrix-synapse.database_type":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"psycopg2","description":"The database engine name. Can be sqlite or psycopg2.\n","loc":["services","matrix-synapse","database_type"],"readOnly":false,"type":"one of \"sqlite3\", \"psycopg2\""},"services.matrix-synapse.database_user":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"matrix-synapse","description":"Database user name.","loc":["services","matrix-synapse","database_user"],"readOnly":false,"type":"string"},"services.matrix-synapse.dynamic_thumbnails":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Whether to generate new thumbnails on the fly to precisely match\nthe resolution requested by the client. If true then whenever\na new resolution is requested by the client the server will\ngenerate a new thumbnail. If false the server will pick a thumbnail\nfrom a precalculated list.\n","loc":["services","matrix-synapse","dynamic_thumbnails"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.enable":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Whether to enable matrix.org synapse.","example":true,"loc":["services","matrix-synapse","enable"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.enable_metrics":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Enable collection and rendering of performance metrics\n","loc":["services","matrix-synapse","enable_metrics"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.enable_registration":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Enable registration for new users.\n","loc":["services","matrix-synapse","enable_registration"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.enable_registration_captcha":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Enables ReCaptcha checks when registering, preventing signup\nunless a captcha is answered. Requires a valid ReCaptcha\npublic/private key.\n","loc":["services","matrix-synapse","enable_registration_captcha"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.event_cache_size":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"10K","description":"Number of events to cache in memory.","loc":["services","matrix-synapse","event_cache_size"],"readOnly":false,"type":"string"},"services.matrix-synapse.expire_access_token":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Whether to enable access token expiration.\n","loc":["services","matrix-synapse","expire_access_token"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.extraConfig":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"","description":"Extra config options for matrix-synapse.\n","loc":["services","matrix-synapse","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.matrix-synapse.extraConfigFiles":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":[],"description":"Extra config files to include.\n\nThe configuration files will be included based on the command line\nargument --config-path. This allows to configure secrets without\nhaving to go through the Nix store, e.g. based on deployment keys if\nNixOPS is in use.\n","loc":["services","matrix-synapse","extraConfigFiles"],"readOnly":false,"type":"list of paths"},"services.matrix-synapse.federation_rc_concurrent":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"3","description":"The number of federation requests to concurrently process from a single server","loc":["services","matrix-synapse","federation_rc_concurrent"],"readOnly":false,"type":"string"},"services.matrix-synapse.federation_rc_reject_limit":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"50","description":"The maximum number of concurrent federation requests allowed\nfrom a single server\n","loc":["services","matrix-synapse","federation_rc_reject_limit"],"readOnly":false,"type":"string"},"services.matrix-synapse.federation_rc_sleep_delay":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"500","description":"The duration in milliseconds to delay processing events from\nremote servers by if they go over the sleep limit.\n","loc":["services","matrix-synapse","federation_rc_sleep_delay"],"readOnly":false,"type":"string"},"services.matrix-synapse.federation_rc_sleep_limit":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"10","description":"The number of federation requests from a single server in a window\nbefore the server will delay processing the request.\n","loc":["services","matrix-synapse","federation_rc_sleep_limit"],"readOnly":false,"type":"string"},"services.matrix-synapse.federation_rc_window_size":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"1000","description":"The federation window size in milliseconds","loc":["services","matrix-synapse","federation_rc_window_size"],"readOnly":false,"type":"string"},"services.matrix-synapse.key_refresh_interval":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"1d","description":"How long key response published by this server is valid for.\nUsed to set the valid_until_ts in /key/v2 APIs.\nDetermines how quickly servers will query to check which keys\nare still valid.\n","loc":["services","matrix-synapse","key_refresh_interval"],"readOnly":false,"type":"string"},"services.matrix-synapse.listeners":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":[{"bind_address":"","port":8448,"resources":[{"compress":true,"names":["client","webclient"]},{"compress":false,"names":["federation"]}],"tls":true,"type":"http","x_forwarded":false}],"description":"List of ports that Synapse should listen on, their purpose and their configuration.\n","loc":["services","matrix-synapse","listeners"],"readOnly":false,"type":"list of submodules"},"services.matrix-synapse.listeners.*.bind_address":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"","description":"Local interface to listen on.\nThe empty string will cause synapse to listen on all interfaces.\n","example":"203.0.113.42","loc":["services","matrix-synapse","listeners","*","bind_address"],"readOnly":false,"type":"string"},"services.matrix-synapse.listeners.*.port":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"description":"The port to listen for HTTP(S) requests on.\n","example":8448,"loc":["services","matrix-synapse","listeners","*","port"],"readOnly":false,"type":"signed integer"},"services.matrix-synapse.listeners.*.resources":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"description":"List of HTTP resources to serve on this listener.\n","loc":["services","matrix-synapse","listeners","*","resources"],"readOnly":false,"type":"list of submodules"},"services.matrix-synapse.listeners.*.resources.*.compress":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"description":"Should synapse compress HTTP responses to clients that support it?\nThis should be disabled if running synapse behind a load balancer\nthat can do automatic compression.\n","loc":["services","matrix-synapse","listeners","*","resources","*","compress"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.listeners.*.resources.*.names":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"description":"List of resources to host on this listener.\n","example":["client","webclient","federation"],"loc":["services","matrix-synapse","listeners","*","resources","*","names"],"readOnly":false,"type":"list of strings"},"services.matrix-synapse.listeners.*.tls":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":true,"description":"Whether to listen for HTTPS connections rather than HTTP.\n","loc":["services","matrix-synapse","listeners","*","tls"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.listeners.*.type":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"http","description":"Type of listener.\n","loc":["services","matrix-synapse","listeners","*","type"],"readOnly":false,"type":"string"},"services.matrix-synapse.listeners.*.x_forwarded":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Use the X-Forwarded-For (XFF) header as the client IP and not the\nactual client IP.\n","loc":["services","matrix-synapse","listeners","*","x_forwarded"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.logConfig":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"version: 1\n\n# In systemd's journal, loglevel is implicitly stored, so let's omit it\n# from the message text.\nformatters:\n    journal_fmt:\n        format: '%(name)s: [%(request)s] %(message)s'\n\nfilters:\n    context:\n        (): synapse.util.logcontext.LoggingContextFilter\n        request: \"\"\n\nhandlers:\n    journal:\n        class: systemd.journal.JournalHandler\n        formatter: journal_fmt\n        filters: [context]\n        SYSLOG_IDENTIFIER: synapse\n\nroot:\n    level: INFO\n    handlers: [journal]\n\ndisable_existing_loggers: False\n","description":"A yaml python logging config file\n","loc":["services","matrix-synapse","logConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.matrix-synapse.macaroon_secret_key":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"Secret key for authentication tokens\n","loc":["services","matrix-synapse","macaroon_secret_key"],"readOnly":false,"type":"null or string"},"services.matrix-synapse.max_image_pixels":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"32M","description":"Maximum number of pixels that will be thumbnailed","loc":["services","matrix-synapse","max_image_pixels"],"readOnly":false,"type":"string"},"services.matrix-synapse.max_upload_size":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"10M","description":"The largest allowed upload size in bytes","loc":["services","matrix-synapse","max_upload_size"],"readOnly":false,"type":"string"},"services.matrix-synapse.no_tls":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Don't bind to the https port\n","loc":["services","matrix-synapse","no_tls"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.package":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"pkgs.matrix-synapse","description":"Overridable attribute of the matrix synapse server package to use.\n","loc":["services","matrix-synapse","package"],"readOnly":false,"type":"package"},"services.matrix-synapse.public_baseurl":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"The public-facing base URL for the client API (not including _matrix/...)\n","example":"https://example.com:8448/","loc":["services","matrix-synapse","public_baseurl"],"readOnly":false,"type":"null or string"},"services.matrix-synapse.rc_message_burst_count":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"10.0","description":"Number of message a client can send before being throttled","loc":["services","matrix-synapse","rc_message_burst_count"],"readOnly":false,"type":"string"},"services.matrix-synapse.rc_messages_per_second":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"0.2","description":"Number of messages a client can send per second","loc":["services","matrix-synapse","rc_messages_per_second"],"readOnly":false,"type":"string"},"services.matrix-synapse.recaptcha_private_key":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"","description":"This Home Server's ReCAPTCHA private key.\n","loc":["services","matrix-synapse","recaptcha_private_key"],"readOnly":false,"type":"string"},"services.matrix-synapse.recaptcha_public_key":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"","description":"This Home Server's ReCAPTCHA public key.\n","loc":["services","matrix-synapse","recaptcha_public_key"],"readOnly":false,"type":"string"},"services.matrix-synapse.registration_shared_secret":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"If set, allows registration by anyone who also has the shared\nsecret, even if registration is otherwise disabled.\n","loc":["services","matrix-synapse","registration_shared_secret"],"readOnly":false,"type":"null or string"},"services.matrix-synapse.report_stats":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"","loc":["services","matrix-synapse","report_stats"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.room_invite_state_types":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":["m.room.join_rules","m.room.canonical_alias","m.room.avatar","m.room.name"],"description":"A list of event types that will be included in the room_invite_state\n","loc":["services","matrix-synapse","room_invite_state_types"],"readOnly":false,"type":"list of strings"},"services.matrix-synapse.server_name":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"nixos","description":"The domain name of the server, with optional explicit port.\nThis is used by remote servers to connect to this server,\ne.g. matrix.org, localhost:8080, etc.\nThis is also the last part of your UserID.\n","example":"example.com","loc":["services","matrix-synapse","server_name"],"readOnly":false,"type":"string"},"services.matrix-synapse.servers":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":{"matrix.org":{"ed25519:auto":"Noi6WqcDj0QmPxCNQqgezwTlBKrfqehY1u2FyWP9uYw"}},"description":"The trusted servers to download signing keys from.\n","loc":["services","matrix-synapse","servers"],"readOnly":false,"type":"attribute set of attribute set of stringss"},"services.matrix-synapse.tls_certificate_path":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"PEM encoded X509 certificate for TLS.\nYou can replace the self-signed certificate that synapse\nautogenerates on launch with your own SSL certificate + key pair\nif you like.  Any required intermediary certificates can be\nappended after the primary certificate in hierarchical order.\n","example":"/var/lib/matrix-synapse/homeserver.tls.crt","loc":["services","matrix-synapse","tls_certificate_path"],"readOnly":false,"type":"null or string"},"services.matrix-synapse.tls_dh_params_path":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"PEM dh parameters for ephemeral keys\n","example":"/var/lib/matrix-synapse/homeserver.tls.dh","loc":["services","matrix-synapse","tls_dh_params_path"],"readOnly":false,"type":"null or string"},"services.matrix-synapse.tls_private_key_path":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"PEM encoded private key for TLS. Specify null if synapse is not\nspeaking TLS directly.\n","example":"/var/lib/matrix-synapse/homeserver.tls.key","loc":["services","matrix-synapse","tls_private_key_path"],"readOnly":false,"type":"null or string"},"services.matrix-synapse.trusted_third_party_id_servers":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":["matrix.org"],"description":"The list of identity servers trusted to verify third party identifiers by this server.\n","loc":["services","matrix-synapse","trusted_third_party_id_servers"],"readOnly":false,"type":"list of strings"},"services.matrix-synapse.turn_shared_secret":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"","description":"The shared secret used to compute passwords for the TURN server\n","loc":["services","matrix-synapse","turn_shared_secret"],"readOnly":false,"type":"string"},"services.matrix-synapse.turn_uris":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":[],"description":"The public URIs of the TURN server to give to clients\n","loc":["services","matrix-synapse","turn_uris"],"readOnly":false,"type":"list of strings"},"services.matrix-synapse.turn_user_lifetime":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"1h","description":"How long generated TURN credentials last","loc":["services","matrix-synapse","turn_user_lifetime"],"readOnly":false,"type":"string"},"services.matrix-synapse.unsecure_port":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":null,"description":"DEPRECATED: Use listeners instead.\nThe port to listen for HTTP requests on.\nFor when matrix traffic passes through loadbalancer that unwraps TLS.\n","example":8008,"loc":["services","matrix-synapse","unsecure_port"],"readOnly":false,"type":"null or signed integer"},"services.matrix-synapse.url_preview_enabled":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Is the preview URL API enabled?  If enabled, you *must* specify an\nexplicit url_preview_ip_range_blacklist of IPs that the spider is\ndenied from accessing.\n","loc":["services","matrix-synapse","url_preview_enabled"],"readOnly":false,"type":"boolean"},"services.matrix-synapse.url_preview_ip_range_blacklist":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":["127.0.0.0/8","10.0.0.0/8","172.16.0.0/12","192.168.0.0/16","100.64.0.0/10","169.254.0.0/16"],"description":"List of IP address CIDR ranges that the URL preview spider is denied\nfrom accessing.\n","loc":["services","matrix-synapse","url_preview_ip_range_blacklist"],"readOnly":false,"type":"list of strings"},"services.matrix-synapse.url_preview_ip_range_whitelist":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":[],"description":"List of IP address CIDR ranges that the URL preview spider is allowed\nto access even if they are specified in\nurl_preview_ip_range_blacklist.\n","loc":["services","matrix-synapse","url_preview_ip_range_whitelist"],"readOnly":false,"type":"list of strings"},"services.matrix-synapse.url_preview_url_blacklist":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":[],"description":"Optional list of URL matches that the URL preview spider is\ndenied from accessing.\n","loc":["services","matrix-synapse","url_preview_url_blacklist"],"readOnly":false,"type":"list of strings"},"services.matrix-synapse.user_creation_max_duration":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"1209600000","description":"Sets the expiry for the short term user creation in\nmilliseconds. The default value is two weeks.\n","loc":["services","matrix-synapse","user_creation_max_duration"],"readOnly":false,"type":"string"},"services.matrix-synapse.verbose":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":"0","description":"Logging verbosity level.","loc":["services","matrix-synapse","verbose"],"readOnly":false,"type":"string"},"services.matrix-synapse.web_client":{"declarations":["nixos/modules/services/misc/matrix-synapse.nix"],"default":false,"description":"Whether to serve a web client from the HTTP/HTTPS root resource.\n","loc":["services","matrix-synapse","web_client"],"readOnly":false,"type":"boolean"},"services.matterbridge.configFile":{"declarations":["nixos/modules/services/networking/matterbridge.nix"],"description":"WARNING: THIS IS INSECURE, as your password will end up in\n<filename>/nix/store</filename>, thus publicly readable. Use\n<literal>services.matterbridge.configPath</literal> instead.\n\nThe matterbridge configuration file in the TOML file format.\n","example":"# WARNING: as this file contains credentials, do not use this option!\n# It is kept only for backwards compatibility, and would cause your\n# credentials to be in the nix-store, thus with the world-readable\n# permission bits.\n# Use services.matterbridge.configPath instead.\n\n[irc]\n    [irc.freenode]\n    Server=\"irc.freenode.net:6667\"\n    Nick=\"matterbot\"\n\n[mattermost]\n    [mattermost.work]\n     # Do not prefix it with http:// or https://\n     Server=\"yourmattermostserver.domain\"\n     Team=\"yourteam\"\n     Login=\"yourlogin\"\n     Password=\"yourpass\"\n     PrefixMessagesWithNick=true\n\n[[gateway]]\nname=\"gateway1\"\nenable=true\n    [[gateway.inout]]\n    account=\"irc.freenode\"\n    channel=\"#testing\"\n\n    [[gateway.inout]]\n    account=\"mattermost.work\"\n    channel=\"off-topic\"\n","loc":["services","matterbridge","configFile"],"readOnly":false,"type":"string"},"services.matterbridge.configPath":{"declarations":["nixos/modules/services/networking/matterbridge.nix"],"default":null,"description":"The path to the matterbridge configuration file.\n","example":"/etc/nixos/matterbridge.toml","loc":["services","matterbridge","configPath"],"readOnly":false,"type":"null or string"},"services.matterbridge.enable":{"declarations":["nixos/modules/services/networking/matterbridge.nix"],"default":false,"description":"Whether to enable Matterbridge chat platform bridge.","example":true,"loc":["services","matterbridge","enable"],"readOnly":false,"type":"boolean"},"services.matterbridge.group":{"declarations":["nixos/modules/services/networking/matterbridge.nix"],"default":"matterbridge","description":"Group which runs the matterbridge service.\n","loc":["services","matterbridge","group"],"readOnly":false,"type":"string"},"services.matterbridge.user":{"declarations":["nixos/modules/services/networking/matterbridge.nix"],"default":"matterbridge","description":"User which runs the matterbridge service.\n","loc":["services","matterbridge","user"],"readOnly":false,"type":"string"},"services.mattermost.enable":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":false,"description":"Whether to enable Mattermost chat server.","example":true,"loc":["services","mattermost","enable"],"readOnly":false,"type":"boolean"},"services.mattermost.extraConfig":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":{},"description":"Addtional configuration options as Nix attribute set in config.json schema.\n","loc":["services","mattermost","extraConfig"],"readOnly":false,"type":"attribute set"},"services.mattermost.group":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":"mattermost","description":"Group which runs the Mattermost service.\n","loc":["services","mattermost","group"],"readOnly":false,"type":"string"},"services.mattermost.listenAddress":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":":8065","description":"Address and port this Mattermost instance listens to.\n","example":"[::1]:8065","loc":["services","mattermost","listenAddress"],"readOnly":false,"type":"string"},"services.mattermost.localDatabaseCreate":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":true,"description":"Create a local PostgreSQL database for Mattermost automatically.\n","loc":["services","mattermost","localDatabaseCreate"],"readOnly":false,"type":"boolean"},"services.mattermost.localDatabaseName":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":"mattermost","description":"Local Mattermost database name.\n","loc":["services","mattermost","localDatabaseName"],"readOnly":false,"type":"string"},"services.mattermost.localDatabasePassword":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":"mmpgsecret","description":"Password for local Mattermost database user.\n","loc":["services","mattermost","localDatabasePassword"],"readOnly":false,"type":"string"},"services.mattermost.localDatabaseUser":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":"mattermost","description":"Local Mattermost database username.\n","loc":["services","mattermost","localDatabaseUser"],"readOnly":false,"type":"string"},"services.mattermost.matterircd.enable":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":false,"description":"Whether to enable Mattermost IRC bridge.","example":true,"loc":["services","mattermost","matterircd","enable"],"readOnly":false,"type":"boolean"},"services.mattermost.matterircd.parameters":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":[],"description":"Set commandline parameters to pass to matterircd. See\nhttps://github.com/42wim/matterircd#usage for more information.\n","example":["-mmserver chat.example.com","-bind [::]:6667"],"loc":["services","mattermost","matterircd","parameters"],"readOnly":false,"type":"list of strings"},"services.mattermost.mutableConfig":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":false,"description":"Whether the Mattermost config.json is writeable by Mattermost.\n\nMost of the settings can be edited in the system console of\nMattermost if this option is enabled. A template config using\nthe options specified in services.mattermost will be generated\nbut won't be overwritten on changes or rebuilds.\n\nIf this option is disabled, changes in the system console won't\nbe possible (default). If an config.json is present, it will be\noverwritten!\n","loc":["services","mattermost","mutableConfig"],"readOnly":false,"type":"boolean"},"services.mattermost.siteName":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":"Mattermost","description":"Name of this Mattermost site.","loc":["services","mattermost","siteName"],"readOnly":false,"type":"string"},"services.mattermost.siteUrl":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"description":"URL this Mattermost instance is reachable under, without trailing slash.\n","example":"https://chat.example.com","loc":["services","mattermost","siteUrl"],"readOnly":false,"type":"string"},"services.mattermost.statePath":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":"/var/lib/mattermost","description":"Mattermost working directory","loc":["services","mattermost","statePath"],"readOnly":false,"type":"string"},"services.mattermost.user":{"declarations":["nixos/modules/services/web-apps/mattermost.nix"],"default":"mattermost","description":"User which runs the Mattermost service.\n","loc":["services","mattermost","user"],"readOnly":false,"type":"string"},"services.mbpfan.enable":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":false,"description":"Whether to enable mbpfan, fan controller daemon for Apple Macs and MacBooks.","example":true,"loc":["services","mbpfan","enable"],"readOnly":false,"type":"boolean"},"services.mbpfan.highTemp":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":66,"description":"The high temperature.\n","loc":["services","mbpfan","highTemp"],"readOnly":false,"type":"signed integer"},"services.mbpfan.lowTemp":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":63,"description":"The low temperature.\n","loc":["services","mbpfan","lowTemp"],"readOnly":false,"type":"signed integer"},"services.mbpfan.maxFanSpeed":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":6200,"description":"The maximum fan speed.\n","loc":["services","mbpfan","maxFanSpeed"],"readOnly":false,"type":"signed integer"},"services.mbpfan.maxTemp":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":86,"description":"The maximum temperature.\n","loc":["services","mbpfan","maxTemp"],"readOnly":false,"type":"signed integer"},"services.mbpfan.minFanSpeed":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":2000,"description":"The minimum fan speed.\n","loc":["services","mbpfan","minFanSpeed"],"readOnly":false,"type":"signed integer"},"services.mbpfan.package":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":"pkgs.mbpfan","description":"The package used for the mbpfan daemon.\n","loc":["services","mbpfan","package"],"readOnly":false,"type":"package"},"services.mbpfan.pollingInterval":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":7,"description":"The polling interval.\n","loc":["services","mbpfan","pollingInterval"],"readOnly":false,"type":"signed integer"},"services.mbpfan.verbose":{"declarations":["nixos/modules/services/misc/mbpfan.nix"],"default":false,"description":"If true, sets the log level to verbose.\n","loc":["services","mbpfan","verbose"],"readOnly":false,"type":"boolean"},"services.mediatomb.customCfg":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":false,"description":"Allow mediatomb to create and use its own config file inside /var/lib/mediatomb.\n","loc":["services","mediatomb","customCfg"],"readOnly":false,"type":"boolean"},"services.mediatomb.dataDir":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":"/var/lib/mediatomb","description":"The directory where mediatomb stores its state, data, etc.\n","loc":["services","mediatomb","dataDir"],"readOnly":false,"type":"path"},"services.mediatomb.dsmSupport":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":false,"description":"Whether to enable D-Link DSM 320 specific tweaks.\nWARNING: incompatible with ps3 support.\n","loc":["services","mediatomb","dsmSupport"],"readOnly":false,"type":"boolean"},"services.mediatomb.enable":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":false,"description":"Whether to enable the mediatomb DLNA server.\n","loc":["services","mediatomb","enable"],"readOnly":false,"type":"boolean"},"services.mediatomb.group":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":"mediatomb","description":"Group account under which mediatomb runs.","loc":["services","mediatomb","group"],"readOnly":false,"type":"unspecified"},"services.mediatomb.interface":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":"","description":"A specific interface to bind to.\n","loc":["services","mediatomb","interface"],"readOnly":false,"type":"unspecified"},"services.mediatomb.port":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":49152,"description":"The network port to listen on.\n","loc":["services","mediatomb","port"],"readOnly":false,"type":"unspecified"},"services.mediatomb.ps3Support":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":false,"description":"Whether to enable ps3 specific tweaks.\nWARNING: incompatible with DSM 320 support.\n","loc":["services","mediatomb","ps3Support"],"readOnly":false,"type":"boolean"},"services.mediatomb.serverName":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":"mediatomb","description":"How to identify the server on the network.\n","loc":["services","mediatomb","serverName"],"readOnly":false,"type":"Concatenated string"},"services.mediatomb.tg100Support":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":false,"description":"Whether to enable Telegent TG100 specific tweaks.\n","loc":["services","mediatomb","tg100Support"],"readOnly":false,"type":"boolean"},"services.mediatomb.transcoding":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":false,"description":"Whether to enable transcoding.\n","loc":["services","mediatomb","transcoding"],"readOnly":false,"type":"boolean"},"services.mediatomb.user":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":"mediatomb","description":"User account under which mediatomb runs.","loc":["services","mediatomb","user"],"readOnly":false,"type":"unspecified"},"services.mediatomb.uuid":{"declarations":["nixos/modules/services/misc/mediatomb.nix"],"default":"fdfc8a4e-a3ad-4c1d-b43d-a2eedb03a687","description":"A unique (on your network) to identify the server by.\n","loc":["services","mediatomb","uuid"],"readOnly":false,"type":"unspecified"},"services.meguca.assumeReverseProxy":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":false,"description":"Assume the server is behind a reverse proxy, when resolving client IPs.","loc":["services","meguca","assumeReverseProxy"],"readOnly":false,"type":"boolean"},"services.meguca.cacheSize":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":null,"description":"Cache size in MB.","example":256,"loc":["services","meguca","cacheSize"],"readOnly":false,"type":"null or signed integer"},"services.meguca.compressTraffic":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":false,"description":"Compress all traffic with gzip.","loc":["services","meguca","compressTraffic"],"readOnly":false,"type":"boolean"},"services.meguca.dataDir":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":"/var/lib/meguca","description":"Location where meguca stores it's database and links.","example":"/home/okina/meguca","loc":["services","meguca","dataDir"],"readOnly":false,"type":"path"},"services.meguca.enable":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":false,"description":"Whether to enable meguca.","example":true,"loc":["services","meguca","enable"],"readOnly":false,"type":"boolean"},"services.meguca.httpsOnly":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":false,"description":"Serve and listen only through HTTPS.","loc":["services","meguca","httpsOnly"],"readOnly":false,"type":"boolean"},"services.meguca.listenAddress":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":null,"description":"Listen on a specific IP address and port.","example":"127.0.0.1:8000","loc":["services","meguca","listenAddress"],"readOnly":false,"type":"null or string"},"services.meguca.password":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":"meguca","description":"Password for the meguca database.","example":"dumbpass","loc":["services","meguca","password"],"readOnly":false,"type":"string"},"services.meguca.passwordFile":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":"/run/keys/meguca-password-file","description":"Password file for the meguca database.","example":"/home/okina/meguca/keys/pass","loc":["services","meguca","passwordFile"],"readOnly":false,"type":"path"},"services.meguca.postgresArgs":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"description":"Postgresql connection arguments.","example":"user=meguca password=dumbpass dbname=meguca sslmode=disable","loc":["services","meguca","postgresArgs"],"readOnly":false,"type":"string"},"services.meguca.postgresArgsFile":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":"/run/keys/meguca-postgres-args","description":"Postgresql connection arguments file.","example":"/home/okina/meguca/keys/postgres","loc":["services","meguca","postgresArgsFile"],"readOnly":false,"type":"path"},"services.meguca.reverseProxy":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":null,"description":"Reverse proxy IP.","example":"192.168.1.5","loc":["services","meguca","reverseProxy"],"readOnly":false,"type":"null or string"},"services.meguca.sslCertificate":{"declarations":["nixos/modules/services/web-servers/meguca.nix"],"default":null,"description":"Path to the SSL certificate.","example":"/home/okina/meguca/ssl.cert","loc":["services","meguca","sslCertificate"],"readOnly":false,"type":"null or string"},"services.memcached.enable":{"declarations":["nixos/modules/services/databases/memcached.nix"],"default":false,"description":"\n          Whether to enable Memcached.\n        ","loc":["services","memcached","enable"],"readOnly":false,"type":"unspecified"},"services.memcached.enableUnixSocket":{"declarations":["nixos/modules/services/databases/memcached.nix"],"default":false,"description":"Whether to enable unix socket at /run/memcached/memcached.sock.","example":true,"loc":["services","memcached","enableUnixSocket"],"readOnly":false,"type":"boolean"},"services.memcached.extraOptions":{"declarations":["nixos/modules/services/databases/memcached.nix"],"default":[],"description":"A list of extra options that will be added as a suffix when running memcached","loc":["services","memcached","extraOptions"],"readOnly":false,"type":"unspecified"},"services.memcached.listen":{"declarations":["nixos/modules/services/databases/memcached.nix"],"default":"127.0.0.1","description":"The IP address to bind to","loc":["services","memcached","listen"],"readOnly":false,"type":"unspecified"},"services.memcached.maxConnections":{"declarations":["nixos/modules/services/databases/memcached.nix"],"default":1024,"description":"The maximum number of simultaneous connections","loc":["services","memcached","maxConnections"],"readOnly":false,"type":"unspecified"},"services.memcached.maxMemory":{"declarations":["nixos/modules/services/databases/memcached.nix"],"default":64,"description":"The maximum amount of memory to use for storage, in megabytes.","loc":["services","memcached","maxMemory"],"readOnly":false,"type":"unspecified"},"services.memcached.port":{"declarations":["nixos/modules/services/databases/memcached.nix"],"default":11211,"description":"The port to bind to","loc":["services","memcached","port"],"readOnly":false,"type":"unspecified"},"services.memcached.user":{"declarations":["nixos/modules/services/databases/memcached.nix"],"default":"memcached","description":"The user to run Memcached as","loc":["services","memcached","user"],"readOnly":false,"type":"unspecified"},"services.mesos.master.advertiseIp":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":null,"description":"IP address advertised to reach this master.","loc":["services","mesos","master","advertiseIp"],"readOnly":false,"type":"null or string"},"services.mesos.master.advertisePort":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":null,"description":"Port advertised to reach this Mesos master.","loc":["services","mesos","master","advertisePort"],"readOnly":false,"type":"null or signed integer"},"services.mesos.master.enable":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":false,"description":"Whether to enable the Mesos Master.","loc":["services","mesos","master","enable"],"readOnly":false,"type":"boolean"},"services.mesos.master.extraCmdLineOptions":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":[""],"description":"Extra command line options for Mesos Master.\n\nSee https://mesos.apache.org/documentation/latest/configuration/\n","example":["--credentials=VALUE"],"loc":["services","mesos","master","extraCmdLineOptions"],"readOnly":false,"type":"list of strings"},"services.mesos.master.ip":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":"0.0.0.0","description":"IP address to listen on.","loc":["services","mesos","master","ip"],"readOnly":false,"type":"string"},"services.mesos.master.logLevel":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":"INFO","description":"The logging level used. Possible values:\n  'INFO', 'WARNING', 'ERROR'\n","loc":["services","mesos","master","logLevel"],"readOnly":false,"type":"string"},"services.mesos.master.port":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":5050,"description":"Mesos Master port","loc":["services","mesos","master","port"],"readOnly":false,"type":"signed integer"},"services.mesos.master.quorum":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":0,"description":"The size of the quorum of replicas when using 'replicated_log' based\nregistry. It is imperative to set this value to be a majority of\nmasters i.e., quorum > (number of masters)/2.\n\nIf 0 will fall back to --registry=in_memory.\n","loc":["services","mesos","master","quorum"],"readOnly":false,"type":"signed integer"},"services.mesos.master.workDir":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"default":"/var/lib/mesos/master","description":"The Mesos work directory.","loc":["services","mesos","master","workDir"],"readOnly":false,"type":"string"},"services.mesos.master.zk":{"declarations":["nixos/modules/services/misc/mesos-master.nix"],"description":"ZooKeeper URL (used for leader election amongst masters).\nMay be one of:\n  zk://host1:port1,host2:port2,.../mesos\n  zk://username:password@host1:port1,host2:port2,.../mesos\n","loc":["services","mesos","master","zk"],"readOnly":false,"type":"string"},"services.mesos.slave.advertiseIp":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":null,"description":"IP address advertised to reach this agent.","loc":["services","mesos","slave","advertiseIp"],"readOnly":false,"type":"null or string"},"services.mesos.slave.advertisePort":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":null,"description":"Port advertised to reach this agent.","loc":["services","mesos","slave","advertisePort"],"readOnly":false,"type":"null or signed integer"},"services.mesos.slave.attributes":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":{},"description":"Machine attributes for the slave instance.\n\nUse caution when changing this; you may need to manually reset slave\nmetadata before the slave can re-register.\n","example":{"host":"aabc123","os":"nixos","rack":"aa"},"loc":["services","mesos","slave","attributes"],"readOnly":false,"type":"attribute set of strings"},"services.mesos.slave.containerizers":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":["mesos"],"description":"List of containerizer implementations to compose in order to provide\ncontainerization. Available options are mesos and docker.\nThe order the containerizers are specified is the order they are tried.\n","loc":["services","mesos","slave","containerizers"],"readOnly":false,"type":"list of strings"},"services.mesos.slave.dockerRegistry":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":null,"description":"The default url for pulling Docker images.\nIt could either be a Docker registry server url,\nor a local path in which Docker image archives are stored.\n","loc":["services","mesos","slave","dockerRegistry"],"readOnly":false,"type":"null or string or path"},"services.mesos.slave.enable":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":false,"description":"Whether to enable the Mesos Slave.","loc":["services","mesos","slave","enable"],"readOnly":false,"type":"boolean"},"services.mesos.slave.executorEnvironmentVariables":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":{"PATH":"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"},"description":"The environment variables that should be passed to the executor, and thus subsequently task(s).\n","loc":["services","mesos","slave","executorEnvironmentVariables"],"readOnly":false,"type":"attribute set of strings"},"services.mesos.slave.extraCmdLineOptions":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":[""],"description":"Extra command line options for Mesos Slave.\n\nSee https://mesos.apache.org/documentation/latest/configuration/\n","example":["--gc_delay=3days"],"loc":["services","mesos","slave","extraCmdLineOptions"],"readOnly":false,"type":"list of strings"},"services.mesos.slave.imageProviders":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":[],"description":"List of supported image providers, e.g., APPC,DOCKER.","loc":["services","mesos","slave","imageProviders"],"readOnly":false,"type":"list of strings"},"services.mesos.slave.imageProvisionerBackend":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":"copy","description":"Strategy for provisioning container rootfs from images,\ne.g., aufs, bind, copy, overlay.\n","loc":["services","mesos","slave","imageProvisionerBackend"],"readOnly":false,"type":"string"},"services.mesos.slave.ip":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":"0.0.0.0","description":"IP address to listen on.","loc":["services","mesos","slave","ip"],"readOnly":false,"type":"string"},"services.mesos.slave.isolation":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":["posix/cpu","posix/mem"],"description":"Isolation mechanisms to use, e.g., posix/cpu,posix/mem, or\ncgroups/cpu,cgroups/mem, or network/port_mapping, or `gpu/nvidia` for nvidia\nspecific gpu isolation.\n","loc":["services","mesos","slave","isolation"],"readOnly":false,"type":"list of strings"},"services.mesos.slave.logLevel":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":"INFO","description":"The logging level used. Possible values:\n  'INFO', 'WARNING', 'ERROR'\n","loc":["services","mesos","slave","logLevel"],"readOnly":false,"type":"string"},"services.mesos.slave.master":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"description":"May be one of:\n  zk://host1:port1,host2:port2,.../path\n  zk://username:password@host1:port1,host2:port2,.../path\n","loc":["services","mesos","slave","master"],"readOnly":false,"type":"string"},"services.mesos.slave.port":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":5051,"description":"Port to listen on.","loc":["services","mesos","slave","port"],"readOnly":false,"type":"signed integer"},"services.mesos.slave.withDocker":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":false,"description":"Enable the docker containerizer.","loc":["services","mesos","slave","withDocker"],"readOnly":false,"type":"boolean"},"services.mesos.slave.withHadoop":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":false,"description":"Add the HADOOP_HOME to the slave.","loc":["services","mesos","slave","withHadoop"],"readOnly":false,"type":"boolean"},"services.mesos.slave.workDir":{"declarations":["nixos/modules/services/misc/mesos-slave.nix"],"default":"/var/lib/mesos/slave","description":"The Mesos work directory.","loc":["services","mesos","slave","workDir"],"readOnly":false,"type":"string"},"services.mighttpd2.config":{"declarations":["nixos/modules/services/web-servers/mighttpd2.nix"],"default":"","description":"Verbatim config file to use\n(see http://www.mew.org/~kazu/proj/mighttpd/en/config.html)\n","example":"# Example configuration for Mighttpd 2\nPort: 80\n# IP address or \"*\"\nHost: *\nDebug_Mode: Yes # Yes or No\n# If available, \"nobody\" is much more secure for User:.\nUser: root\n# If available, \"nobody\" is much more secure for Group:.\nGroup: root\nPid_File: /var/run/mighty.pid\nLogging: Yes # Yes or No\nLog_File: /var/log/mighty # The directory must be writable by User:\nLog_File_Size: 16777216 # bytes\nLog_Backup_Number: 10\nIndex_File: index.html\nIndex_Cgi: index.cgi\nStatus_File_Dir: /usr/local/share/mighty/status\nConnection_Timeout: 30 # seconds\nFd_Cache_Duration: 10 # seconds\n# Server_Name: Mighttpd/3.x.y\nTls_Port: 443\nTls_Cert_File: cert.pem # should change this with an absolute path\n# should change this with comma-separated absolute paths\nTls_Chain_Files: chain.pem\n# Currently, Tls_Key_File must not be encrypted.\nTls_Key_File: privkey.pem # should change this with an absolute path\nService: 0 # 0 is HTTP only, 1 is HTTPS only, 2 is both\n","loc":["services","mighttpd2","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.mighttpd2.cores":{"declarations":["nixos/modules/services/web-servers/mighttpd2.nix"],"default":null,"description":"How many cores to use.\nIf null it will be determined automatically\n","loc":["services","mighttpd2","cores"],"readOnly":false,"type":"null or signed integer"},"services.mighttpd2.enable":{"declarations":["nixos/modules/services/web-servers/mighttpd2.nix"],"default":false,"description":"Whether to enable Mighttpd2 web server.","example":true,"loc":["services","mighttpd2","enable"],"readOnly":false,"type":"boolean"},"services.mighttpd2.routing":{"declarations":["nixos/modules/services/web-servers/mighttpd2.nix"],"default":"","description":"Verbatim routing file to use\n(see http://www.mew.org/~kazu/proj/mighttpd/en/config.html)\n","example":"# Example routing for Mighttpd 2\n\n# Domain lists\n[localhost www.example.com]\n\n# Entries are looked up in the specified order\n# All paths must end with \"/\"\n\n# A path to CGI scripts should be specified with \"=>\"\n/~alice/cgi-bin/ => /home/alice/public_html/cgi-bin/\n\n# A path to static files should be specified with \"->\"\n/~alice/         -> /home/alice/public_html/\n/cgi-bin/        => /export/cgi-bin/\n\n# Reverse proxy rules should be specified with \">>\"\n# /path >> host:port/path2\n# Either \"host\" or \":port\" can be committed, but not both.\n/app/cal/        >> example.net/calendar/\n# Yesod app in the same server\n/app/wiki/       >> 127.0.0.1:3000/\n\n/                -> /export/www/\n","loc":["services","mighttpd2","routing"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.minecraft-server.dataDir":{"declarations":["nixos/modules/services/games/minecraft-server.nix"],"default":"/var/lib/minecraft","description":"Directory to store minecraft database and other state/data files.\n","loc":["services","minecraft-server","dataDir"],"readOnly":false,"type":"path"},"services.minecraft-server.enable":{"declarations":["nixos/modules/services/games/minecraft-server.nix"],"default":false,"description":"If enabled, start a Minecraft Server. The listening port for\nthe server is always <literal>25565</literal>. The server\ndata will be loaded from and saved to\n<literal>/var/lib/minecraft</literal>.\n","loc":["services","minecraft-server","enable"],"readOnly":false,"type":"boolean"},"services.minecraft-server.jvmOpts":{"declarations":["nixos/modules/services/games/minecraft-server.nix"],"default":"-Xmx2048M -Xms2048M","description":"JVM options for the Minecraft Service.","loc":["services","minecraft-server","jvmOpts"],"readOnly":false,"type":"string"},"services.minecraft-server.openFirewall":{"declarations":["nixos/modules/services/games/minecraft-server.nix"],"default":false,"description":"Whether to open ports in the firewall (if enabled) for the server.\n","loc":["services","minecraft-server","openFirewall"],"readOnly":false,"type":"boolean"},"services.minetest-server.configPath":{"declarations":["nixos/modules/services/games/minetest-server.nix"],"default":null,"description":"Path to the config to use.\n\nIf set to null, the config of the running user will be used:\n`~/.minetest/minetest.conf`.\n","loc":["services","minetest-server","configPath"],"readOnly":false,"type":"null or path"},"services.minetest-server.enable":{"declarations":["nixos/modules/services/games/minetest-server.nix"],"default":false,"description":"If enabled, starts a Minetest Server.","loc":["services","minetest-server","enable"],"readOnly":false,"type":"boolean"},"services.minetest-server.gameId":{"declarations":["nixos/modules/services/games/minetest-server.nix"],"default":null,"description":"Id of the game to use. To list available games run \n`minetestserver --gameid list`.\n\nIf only one game exists, this option can be null.\n","loc":["services","minetest-server","gameId"],"readOnly":false,"type":"null or string"},"services.minetest-server.logPath":{"declarations":["nixos/modules/services/games/minetest-server.nix"],"default":null,"description":"Path to logfile for logging. \n\nIf set to null, logging will be output to stdout which means\nall output will be catched by systemd.\n","loc":["services","minetest-server","logPath"],"readOnly":false,"type":"null or path"},"services.minetest-server.port":{"declarations":["nixos/modules/services/games/minetest-server.nix"],"default":null,"description":"Port number to bind to.\n\nIf set to null, the default 30000 will be used.\n","loc":["services","minetest-server","port"],"readOnly":false,"type":"null or signed integer"},"services.minetest-server.world":{"declarations":["nixos/modules/services/games/minetest-server.nix"],"default":null,"description":"Name of the world to use. To list available worlds run\n`minetestserver --world list`.\n\nIf only one world exists, this option can be null.\n","loc":["services","minetest-server","world"],"readOnly":false,"type":"null or path"},"services.mingetty.autologinUser":{"declarations":["nixos/modules/services/ttys/agetty.nix"],"default":null,"description":"Username of the account that will be automatically logged in at the console.\nIf unspecified, a login prompt is shown as usual.\n","loc":["services","mingetty","autologinUser"],"readOnly":false,"type":"null or string"},"services.mingetty.greetingLine":{"declarations":["nixos/modules/services/ttys/agetty.nix"],"description":"Welcome line printed by mingetty.\nThe default shows current NixOS version label, machine type and tty.\n","loc":["services","mingetty","greetingLine"],"readOnly":false,"type":"string"},"services.mingetty.helpLine":{"declarations":["nixos/modules/services/ttys/agetty.nix"],"default":"","description":"Help line printed by mingetty below the welcome line.\nUsed by the installation CD to give some hints on\nhow to proceed.\n","loc":["services","mingetty","helpLine"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.mingetty.serialSpeed":{"declarations":["nixos/modules/services/ttys/agetty.nix"],"default":[115200,57600,38400,9600],"description":"Bitrates to allow for agetty's listening on serial ports. Listing more\nbitrates gives more interoperability but at the cost of long delays\nfor getting a sync on the line.\n","example":[38400,9600],"loc":["services","mingetty","serialSpeed"],"readOnly":false,"type":"list of signed integers"},"services.minidlna.config":{"declarations":["nixos/modules/services/networking/minidlna.nix"],"description":"The contents of MiniDLNA's configuration file.","loc":["services","minidlna","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.minidlna.enable":{"declarations":["nixos/modules/services/networking/minidlna.nix"],"default":false,"description":"Whether to enable MiniDLNA, a simple DLNA server.  It serves\nmedia files such as video and music to DLNA client devices\nsuch as televisions and media players.\n","loc":["services","minidlna","enable"],"readOnly":false,"type":"boolean"},"services.minidlna.loglevel":{"declarations":["nixos/modules/services/networking/minidlna.nix"],"default":"warn","description":"Defines the type of messages that should be logged, and down to\nwhich level of importance they should be considered.\n\nThe possible types are “artwork”, “database”, “general”, “http”,\n“inotify”, “metadata”, “scanner”, “ssdp” and “tivo”.\n\nThe levels are “off”, “fatal”, “error”, “warn”, “info” and\n“debug”, listed here in order of decreasing importance.  “off”\nturns off logging messages entirely, “fatal” logs the most\ncritical messages only, and so on down to “debug” that logs every\nsingle messages.\n\nThe types are comma-separated, followed by an equal sign (‘=’),\nfollowed by a level that applies to the preceding types. This can\nbe repeated, separating each of these constructs with a comma.\n\nDefaults to “general,artwork,database,inotify,scanner,metadata,\nhttp,ssdp,tivo=warn” which logs every type of message at the\n“warn” level.\n","example":"general,artwork,database,inotify,scanner,metadata,http,ssdp,tivo=warn","loc":["services","minidlna","loglevel"],"readOnly":false,"type":"string"},"services.minidlna.mediaDirs":{"declarations":["nixos/modules/services/networking/minidlna.nix"],"default":[],"description":"Directories to be scanned for media files.  The prefixes\n<literal>A,</literal>, <literal>V,</literal> and\n<literal>P,</literal> restrict a directory to audio, video\nor image files.  The directories must be accessible to the\n<literal>minidlna</literal> user account.\n","example":["/data/media","V,/home/alice/video"],"loc":["services","minidlna","mediaDirs"],"readOnly":false,"type":"list of strings"},"services.minio.accessKey":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":"","description":"Access key of 5 to 20 characters in length that clients use to access the server.\nThis overrides the access key that is generated by minio on first startup and stored inside the\n<literal>configDir</literal> directory.\n","loc":["services","minio","accessKey"],"readOnly":false,"type":"string"},"services.minio.browser":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":true,"description":"Enable or disable access to web UI.","loc":["services","minio","browser"],"readOnly":false,"type":"boolean"},"services.minio.configDir":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":"/var/lib/minio/config","description":"The config directory, for the access keys and other settings.","loc":["services","minio","configDir"],"readOnly":false,"type":"path"},"services.minio.dataDir":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":"/var/lib/minio/data","description":"The data directory, for storing the objects.","loc":["services","minio","dataDir"],"readOnly":false,"type":"path"},"services.minio.enable":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":false,"description":"Whether to enable Minio Object Storage.","example":true,"loc":["services","minio","enable"],"readOnly":false,"type":"boolean"},"services.minio.listenAddress":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":":9000","description":"Listen on a specific IP address and port.","loc":["services","minio","listenAddress"],"readOnly":false,"type":"string"},"services.minio.package":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":"pkgs.minio","description":"Minio package to use.","loc":["services","minio","package"],"readOnly":false,"type":"package"},"services.minio.region":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":"us-east-1","description":"The physical location of the server. By default it is set to us-east-1, which is same as AWS S3's and Minio's default region.\n","loc":["services","minio","region"],"readOnly":false,"type":"string"},"services.minio.secretKey":{"declarations":["nixos/modules/services/web-servers/minio.nix"],"default":"","description":"Specify the Secret key of 8 to 40 characters in length that clients use to access the server.\nThis overrides the secret key that is generated by minio on first startup and stored inside the\n<literal>configDir</literal> directory.\n","loc":["services","minio","secretKey"],"readOnly":false,"type":"string"},"services.miniupnpd.appendConfig":{"declarations":["nixos/modules/services/networking/miniupnpd.nix"],"default":"","description":"Configuration lines appended to the MiniUPnP config.\n","loc":["services","miniupnpd","appendConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.miniupnpd.enable":{"declarations":["nixos/modules/services/networking/miniupnpd.nix"],"default":false,"description":"Whether to enable MiniUPnP daemon.","example":true,"loc":["services","miniupnpd","enable"],"readOnly":false,"type":"boolean"},"services.miniupnpd.externalInterface":{"declarations":["nixos/modules/services/networking/miniupnpd.nix"],"description":"Name of the external interface.\n","loc":["services","miniupnpd","externalInterface"],"readOnly":false,"type":"string"},"services.miniupnpd.internalIPs":{"declarations":["nixos/modules/services/networking/miniupnpd.nix"],"description":"The IP address ranges to listen on.\n","example":["192.168.1.1/24","enp1s0"],"loc":["services","miniupnpd","internalIPs"],"readOnly":false,"type":"list of strings"},"services.miniupnpd.natpmp":{"declarations":["nixos/modules/services/networking/miniupnpd.nix"],"default":false,"description":"Whether to enable NAT-PMP support.","example":true,"loc":["services","miniupnpd","natpmp"],"readOnly":false,"type":"boolean"},"services.miniupnpd.upnp":{"declarations":["nixos/modules/services/networking/miniupnpd.nix"],"default":true,"description":"Whether to enable UPNP support.\n","loc":["services","miniupnpd","upnp"],"readOnly":false,"type":"boolean"},"services.miredo.bindAddress":{"declarations":["nixos/modules/services/networking/miredo.nix"],"default":null,"description":"Depending on the local firewall/NAT rules, you might need to force\nMiredo to use a fixed UDP port and or IPv4 address.\n","loc":["services","miredo","bindAddress"],"readOnly":false,"type":"null or string"},"services.miredo.bindPort":{"declarations":["nixos/modules/services/networking/miredo.nix"],"default":null,"description":"Depending on the local firewall/NAT rules, you might need to force\nMiredo to use a fixed UDP port and or IPv4 address.\n","loc":["services","miredo","bindPort"],"readOnly":false,"type":"null or string"},"services.miredo.enable":{"declarations":["nixos/modules/services/networking/miredo.nix"],"default":false,"description":"Whether to enable the Miredo IPv6 tunneling service..","example":true,"loc":["services","miredo","enable"],"readOnly":false,"type":"boolean"},"services.miredo.interfaceName":{"declarations":["nixos/modules/services/networking/miredo.nix"],"default":"teredo","description":"Name of the network tunneling interface.\n","loc":["services","miredo","interfaceName"],"readOnly":false,"type":"string"},"services.miredo.package":{"declarations":["nixos/modules/services/networking/miredo.nix"],"default":"pkgs.miredo","description":"The package to use for the miredo daemon's binary.\n","loc":["services","miredo","package"],"readOnly":false,"type":"package"},"services.miredo.serverAddress":{"declarations":["nixos/modules/services/networking/miredo.nix"],"default":"teredo.remlab.net","description":"The hostname or primary IPv4 address of the Teredo server.\nThis setting is required if Miredo runs as a Teredo client.\n\"teredo.remlab.net\" is an experimental service for testing only.\nPlease use another server for production and/or large scale deployments.\n","loc":["services","miredo","serverAddress"],"readOnly":false,"type":"string"},"services.mjpg-streamer.enable":{"declarations":["nixos/modules/services/networking/mjpg-streamer.nix"],"default":false,"description":"Whether to enable mjpg-streamer webcam streamer.","example":true,"loc":["services","mjpg-streamer","enable"],"readOnly":false,"type":"boolean"},"services.mjpg-streamer.group":{"declarations":["nixos/modules/services/networking/mjpg-streamer.nix"],"default":"video","description":"mjpg-streamer group name.","loc":["services","mjpg-streamer","group"],"readOnly":false,"type":"string"},"services.mjpg-streamer.inputPlugin":{"declarations":["nixos/modules/services/networking/mjpg-streamer.nix"],"default":"input_uvc.so","description":"Input plugin. See plugins documentation for more information.\n","loc":["services","mjpg-streamer","inputPlugin"],"readOnly":false,"type":"string"},"services.mjpg-streamer.outputPlugin":{"declarations":["nixos/modules/services/networking/mjpg-streamer.nix"],"default":"output_http.so -w @www@ -n -p 5050","description":"Output plugin. <literal>@www@</literal> is substituted for default mjpg-streamer www directory.\nSee plugins documentation for more information.\n","loc":["services","mjpg-streamer","outputPlugin"],"readOnly":false,"type":"string"},"services.mjpg-streamer.user":{"declarations":["nixos/modules/services/networking/mjpg-streamer.nix"],"default":"mjpg-streamer","description":"mjpg-streamer user name.","loc":["services","mjpg-streamer","user"],"readOnly":false,"type":"string"},"services.mlmmj.enable":{"declarations":["nixos/modules/services/mail/mlmmj.nix"],"default":false,"description":"Enable mlmmj","loc":["services","mlmmj","enable"],"readOnly":false,"type":"boolean"},"services.mlmmj.group":{"declarations":["nixos/modules/services/mail/mlmmj.nix"],"default":"mlmmj","description":"mailinglist local group","loc":["services","mlmmj","group"],"readOnly":false,"type":"string"},"services.mlmmj.listDomain":{"declarations":["nixos/modules/services/mail/mlmmj.nix"],"default":"localhost","description":"Set the mailing list domain","loc":["services","mlmmj","listDomain"],"readOnly":false,"type":"string"},"services.mlmmj.mailLists":{"declarations":["nixos/modules/services/mail/mlmmj.nix"],"default":[],"description":"The collection of hosted maillists","loc":["services","mlmmj","mailLists"],"readOnly":false,"type":"list of strings"},"services.mlmmj.maintInterval":{"declarations":["nixos/modules/services/mail/mlmmj.nix"],"default":"20min","description":"Time interval between mlmmj-maintd runs, see\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry> for format information.\n","loc":["services","mlmmj","maintInterval"],"readOnly":false,"type":"string"},"services.mlmmj.user":{"declarations":["nixos/modules/services/mail/mlmmj.nix"],"default":"mlmmj","description":"mailinglist local user","loc":["services","mlmmj","user"],"readOnly":false,"type":"string"},"services.monero.enable":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":false,"description":"Whether to enable Monero node daemon..","example":true,"loc":["services","monero","enable"],"readOnly":false,"type":"boolean"},"services.monero.exclusiveNodes":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":[],"description":"List of peer IP addresses to connect to *only*.\nIf given the other peer options will be ignored.\n","loc":["services","monero","exclusiveNodes"],"readOnly":false,"type":"list of strings"},"services.monero.extraConfig":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":"","description":"Extra lines to be added verbatim to monerod configuration.\n","loc":["services","monero","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.monero.extraNodes":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":[],"description":"List of additional peer IP addresses to add to the local list.\n","loc":["services","monero","extraNodes"],"readOnly":false,"type":"list of strings"},"services.monero.limits.download":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":-1,"description":"Limit of the download rate in kB/s.\nSet to <literal>-1</literal> to leave unlimited.\n","loc":["services","monero","limits","download"],"readOnly":false,"type":"signed integer"},"services.monero.limits.syncSize":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":0,"description":"Maximum number of blocks to sync at once.\nSet to <literal>0</literal> for adaptive.\n","loc":["services","monero","limits","syncSize"],"readOnly":false,"type":"signed integer"},"services.monero.limits.threads":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":0,"description":"Maximum number of threads used for a parallel job.\nSet to <literal>0</literal> to leave unlimited.\n","loc":["services","monero","limits","threads"],"readOnly":false,"type":"signed integer"},"services.monero.limits.upload":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":-1,"description":"Limit of the upload rate in kB/s.\nSet to <literal>-1</literal> to leave unlimited.\n","loc":["services","monero","limits","upload"],"readOnly":false,"type":"signed integer"},"services.monero.mining.address":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":"","description":"Monero address where to send mining rewards.\n","loc":["services","monero","mining","address"],"readOnly":false,"type":"string"},"services.monero.mining.enable":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":false,"description":"Whether to mine moneroj.\n","loc":["services","monero","mining","enable"],"readOnly":false,"type":"boolean"},"services.monero.mining.threads":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":0,"description":"Number of threads used for mining.\nSet to <literal>0</literal> to use all available.\n","loc":["services","monero","mining","threads"],"readOnly":false,"type":"signed integer"},"services.monero.priorityNodes":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":[],"description":"List of peer IP addresses to connect to and\nattempt to keep the connection open.\n","loc":["services","monero","priorityNodes"],"readOnly":false,"type":"list of strings"},"services.monero.rpc.address":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":"127.0.0.1","description":"IP address the RPC server will bind to.\n","loc":["services","monero","rpc","address"],"readOnly":false,"type":"string"},"services.monero.rpc.password":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":null,"description":"Password for RPC connections.\n","loc":["services","monero","rpc","password"],"readOnly":false,"type":"string"},"services.monero.rpc.port":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":18081,"description":"Port the RPC server will bind to.\n","loc":["services","monero","rpc","port"],"readOnly":false,"type":"signed integer"},"services.monero.rpc.restricted":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":false,"description":"Whether to restrict RPC to view only commands.\n","loc":["services","monero","rpc","restricted"],"readOnly":false,"type":"boolean"},"services.monero.rpc.user":{"declarations":["nixos/modules/services/networking/monero.nix"],"default":null,"description":"User name for RPC connections.\n","loc":["services","monero","rpc","user"],"readOnly":false,"type":"null or string"},"services.monetdb.dataDir":{"declarations":["nixos/modules/services/databases/monetdb.nix"],"default":"/var/lib/monetdb","description":"Data directory for the dbfarm.","loc":["services","monetdb","dataDir"],"readOnly":false,"type":"path"},"services.monetdb.enable":{"declarations":["nixos/modules/services/databases/monetdb.nix"],"default":false,"description":"Whether to enable the MonetDB database server.","example":true,"loc":["services","monetdb","enable"],"readOnly":false,"type":"boolean"},"services.monetdb.group":{"declarations":["nixos/modules/services/databases/monetdb.nix"],"default":"monetdb","description":"Group under which MonetDB runs.","loc":["services","monetdb","group"],"readOnly":false,"type":"string"},"services.monetdb.listenAddress":{"declarations":["nixos/modules/services/databases/monetdb.nix"],"default":"127.0.0.1","description":"Address to listen on.","example":"0.0.0.0","loc":["services","monetdb","listenAddress"],"readOnly":false,"type":"string"},"services.monetdb.package":{"declarations":["nixos/modules/services/databases/monetdb.nix"],"default":"pkgs.monetdb","description":"MonetDB package to use.","loc":["services","monetdb","package"],"readOnly":false,"type":"package"},"services.monetdb.port":{"declarations":["nixos/modules/services/databases/monetdb.nix"],"default":50000,"description":"Port to listen on.","loc":["services","monetdb","port"],"readOnly":false,"type":"16 bit unsigned integer; between 0 and 65535 (both inclusive)"},"services.monetdb.user":{"declarations":["nixos/modules/services/databases/monetdb.nix"],"default":"monetdb","description":"User account under which MonetDB runs.","loc":["services","monetdb","user"],"readOnly":false,"type":"string"},"services.mongodb.bind_ip":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":"127.0.0.1","description":"IP to bind to","loc":["services","mongodb","bind_ip"],"readOnly":false,"type":"unspecified"},"services.mongodb.dbpath":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":"/var/db/mongodb","description":"Location where MongoDB stores its files","loc":["services","mongodb","dbpath"],"readOnly":false,"type":"unspecified"},"services.mongodb.enable":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":false,"description":"\n          Whether to enable the MongoDB server.\n        ","loc":["services","mongodb","enable"],"readOnly":false,"type":"unspecified"},"services.mongodb.extraConfig":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":"","description":"MongoDB extra configuration in YAML format","example":"storage.journal.enabled: false\n","loc":["services","mongodb","extraConfig"],"readOnly":false,"type":"unspecified"},"services.mongodb.package":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":"pkgs.mongodb","description":"\n          Which MongoDB derivation to use.\n        ","loc":["services","mongodb","package"],"readOnly":false,"type":"package"},"services.mongodb.pidFile":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":"/var/run/mongodb.pid","description":"Location of MongoDB pid file","loc":["services","mongodb","pidFile"],"readOnly":false,"type":"unspecified"},"services.mongodb.quiet":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":false,"description":"quieter output","loc":["services","mongodb","quiet"],"readOnly":false,"type":"unspecified"},"services.mongodb.replSetName":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":"","description":"If this instance is part of a replica set, set its name here.\nOtherwise, leave empty to run as single node.\n","loc":["services","mongodb","replSetName"],"readOnly":false,"type":"unspecified"},"services.mongodb.user":{"declarations":["nixos/modules/services/databases/mongodb.nix"],"default":"mongodb","description":"User account under which MongoDB runs","loc":["services","mongodb","user"],"readOnly":false,"type":"unspecified"},"services.monit.config":{"declarations":["nixos/modules/services/monitoring/monit.nix"],"default":"","description":"monitrc content","loc":["services","monit","config"],"readOnly":false,"type":"unspecified"},"services.monit.enable":{"declarations":["nixos/modules/services/monitoring/monit.nix"],"default":false,"description":"Whether to run Monit system watcher.\n","loc":["services","monit","enable"],"readOnly":false,"type":"unspecified"},"services.mopidy.configuration":{"declarations":["nixos/modules/services/audio/mopidy.nix"],"default":"","description":"The configuration that Mopidy should use.\n","loc":["services","mopidy","configuration"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.mopidy.dataDir":{"declarations":["nixos/modules/services/audio/mopidy.nix"],"default":"/var/lib/mopidy","description":"The directory where Mopidy stores its state.\n","loc":["services","mopidy","dataDir"],"readOnly":false,"type":"string"},"services.mopidy.enable":{"declarations":["nixos/modules/services/audio/mopidy.nix"],"default":false,"description":"Whether to enable Mopidy, a music player daemon.","example":true,"loc":["services","mopidy","enable"],"readOnly":false,"type":"boolean"},"services.mopidy.extensionPackages":{"declarations":["nixos/modules/services/audio/mopidy.nix"],"default":[],"description":"Mopidy extensions that should be loaded by the service.\n","example":{"_type":"literalExample","text":"[ pkgs.mopidy-spotify ]"},"loc":["services","mopidy","extensionPackages"],"readOnly":false,"type":"list of packages"},"services.mopidy.extraConfigFiles":{"declarations":["nixos/modules/services/audio/mopidy.nix"],"default":[],"description":"Extra config file read by Mopidy when the service starts.\nLater files in the list overrides earlier configuration.\n","loc":["services","mopidy","extraConfigFiles"],"readOnly":false,"type":"list of strings"},"services.morty.enable":{"declarations":["nixos/modules/services/networking/morty.nix"],"default":false,"description":"Whether to enable Morty proxy server. See https://github.com/asciimoo/morty.","example":true,"loc":["services","morty","enable"],"readOnly":false,"type":"boolean"},"services.morty.ipv6":{"declarations":["nixos/modules/services/networking/morty.nix"],"default":"Allow IPv6 HTTP requests.","description":"Allow IPv6 HTTP requests?","loc":["services","morty","ipv6"],"readOnly":false,"type":"boolean"},"services.morty.key":{"declarations":["nixos/modules/services/networking/morty.nix"],"default":"No HMAC url validation. Generate with echo -n somevalue | openssl dgst -sha1 -hmac somekey","description":"HMAC url validation key (hexadecimal encoded).\n\tLeave blank to disable. Without validation key, anyone can\n\tsubmit proxy requests. Leave blank to disable.","loc":["services","morty","key"],"readOnly":false,"type":"Concatenated string"},"services.morty.listenAddress":{"declarations":["nixos/modules/services/networking/morty.nix"],"default":"127.0.0.1 (localhost)","description":"The address on which the service listens","loc":["services","morty","listenAddress"],"readOnly":false,"type":"Concatenated string"},"services.morty.package":{"declarations":["nixos/modules/services/networking/morty.nix"],"default":"pkgs.morty","description":"morty package to use.","loc":["services","morty","package"],"readOnly":false,"type":"package"},"services.morty.port":{"declarations":["nixos/modules/services/networking/morty.nix"],"default":3000,"description":"Listing port","loc":["services","morty","port"],"readOnly":false,"type":"signed integer"},"services.morty.timeout":{"declarations":["nixos/modules/services/networking/morty.nix"],"default":"A resource now gets 2 seconds to respond.","description":"Request timeout in seconds.","loc":["services","morty","timeout"],"readOnly":false,"type":"signed integer"},"services.mosquitto.aclExtraConf":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":"","description":"Extra config to prepend to the ACL file.\n","loc":["services","mosquitto","aclExtraConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.mosquitto.allowAnonymous":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":false,"description":"Allow clients to connect without authentication.\n","loc":["services","mosquitto","allowAnonymous"],"readOnly":false,"type":"boolean"},"services.mosquitto.checkPasswords":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":false,"description":"Refuse connection when clients provide incorrect passwords.\n","example":true,"loc":["services","mosquitto","checkPasswords"],"readOnly":false,"type":"boolean"},"services.mosquitto.dataDir":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":"/var/lib/mosquitto","description":"The data directory.\n","loc":["services","mosquitto","dataDir"],"readOnly":false,"type":"path"},"services.mosquitto.enable":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":false,"description":"Whether to enable Enable the MQTT Mosquitto broker..","example":true,"loc":["services","mosquitto","enable"],"readOnly":false,"type":"boolean"},"services.mosquitto.extraConf":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":"","description":"Extra config to append to `mosquitto.conf` file.\n","loc":["services","mosquitto","extraConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.mosquitto.host":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":"127.0.0.1","description":"Host to listen on without SSL.\n","example":"0.0.0.0","loc":["services","mosquitto","host"],"readOnly":false,"type":"Concatenated string"},"services.mosquitto.port":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":1883,"description":"Port on which to listen without SSL.\n","example":1883,"loc":["services","mosquitto","port"],"readOnly":false,"type":"signed integer"},"services.mosquitto.ssl.cafile":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":null,"description":"Path to PEM encoded CA certificates.","loc":["services","mosquitto","ssl","cafile"],"readOnly":false,"type":"null or path"},"services.mosquitto.ssl.certfile":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":null,"description":"Path to PEM encoded server certificate.","loc":["services","mosquitto","ssl","certfile"],"readOnly":false,"type":"null or path"},"services.mosquitto.ssl.enable":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":false,"description":"Whether to enable Enable SSL listener..","example":true,"loc":["services","mosquitto","ssl","enable"],"readOnly":false,"type":"boolean"},"services.mosquitto.ssl.host":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":"0.0.0.0","description":"Host to listen on with SSL.\n","example":"localhost","loc":["services","mosquitto","ssl","host"],"readOnly":false,"type":"Concatenated string"},"services.mosquitto.ssl.keyfile":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":null,"description":"Path to PEM encoded server key.","loc":["services","mosquitto","ssl","keyfile"],"readOnly":false,"type":"null or path"},"services.mosquitto.ssl.port":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":8883,"description":"Port on which to listen with SSL.\n","example":8883,"loc":["services","mosquitto","ssl","port"],"readOnly":false,"type":"signed integer"},"services.mosquitto.users":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"description":"A set of users and their passwords and ACLs.\n","example":{"john":{"acl":["topic readwrite john/#"],"password":"123456"}},"loc":["services","mosquitto","users"],"readOnly":false,"type":"attribute set of submodules"},"services.mosquitto.users.<name>.acl":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"description":"Control client access to topics on the broker.\n","example":["topic read A/B","topic A/#"],"loc":["services","mosquitto","users","<name>","acl"],"readOnly":false,"type":"list of Concatenated strings"},"services.mosquitto.users.<name>.hashedPassword":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":null,"description":"Specifies the hashed password for the MQTT User.\n<option>hashedPassword</option> overrides <option>password</option>.\nTo generate hashed password install <literal>mosquitto</literal>\npackage and use <literal>mosquitto_passwd</literal>.\n","loc":["services","mosquitto","users","<name>","hashedPassword"],"readOnly":false,"type":"null or string"},"services.mosquitto.users.<name>.password":{"declarations":["nixos/modules/services/networking/mosquitto.nix"],"default":null,"description":"Specifies the (clear text) password for the MQTT User.\n","loc":["services","mosquitto","users","<name>","password"],"readOnly":false,"type":"null or string"},"services.mpd.dataDir":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":"/var/lib/mpd","description":"The directory where MPD stores its state, tag cache,\nplaylists etc.\n","loc":["services","mpd","dataDir"],"readOnly":false,"type":"path"},"services.mpd.dbFile":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":"${dataDir}/tag_cache","description":"The path to MPD's database. If set to <literal>null</literal> the\nparameter is omitted from the configuration.\n","loc":["services","mpd","dbFile"],"readOnly":false,"type":"null or string"},"services.mpd.enable":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":false,"description":"Whether to enable MPD, the music player daemon.\n","loc":["services","mpd","enable"],"readOnly":false,"type":"boolean"},"services.mpd.extraConfig":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":"","description":"Extra directives added to to the end of MPD's configuration file,\nmpd.conf. Basic configuration like file location and uid/gid\nis added automatically to the beginning of the file. For available\noptions see <literal>man 5 mpd.conf</literal>'.\n","loc":["services","mpd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.mpd.group":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":"mpd","description":"Group account under which MPD runs.","loc":["services","mpd","group"],"readOnly":false,"type":"string"},"services.mpd.musicDirectory":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":"${dataDir}/music","description":"The directory or NFS/SMB network share where mpd reads music from.\n","loc":["services","mpd","musicDirectory"],"readOnly":false,"type":"path or string matching the pattern (http|https|nfs|smb)://.+"},"services.mpd.network.listenAddress":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":"127.0.0.1","description":"The address for the daemon to listen on.\nUse <literal>any</literal> to listen on all addresses.\n","example":"any","loc":["services","mpd","network","listenAddress"],"readOnly":false,"type":"string"},"services.mpd.network.port":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":6600,"description":"This setting is the TCP port that is desired for the daemon to get assigned\nto.\n","loc":["services","mpd","network","port"],"readOnly":false,"type":"signed integer"},"services.mpd.playlistDirectory":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":"${dataDir}/playlists","description":"The directory where mpd stores playlists.\n","loc":["services","mpd","playlistDirectory"],"readOnly":false,"type":"path"},"services.mpd.startWhenNeeded":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":false,"description":"If set, <command>mpd</command> is socket-activated; that\nis, instead of having it permanently running as a daemon,\nsystemd will start it on the first incoming connection.\n","loc":["services","mpd","startWhenNeeded"],"readOnly":false,"type":"boolean"},"services.mpd.user":{"declarations":["nixos/modules/services/audio/mpd.nix"],"default":"mpd","description":"User account under which MPD runs.","loc":["services","mpd","user"],"readOnly":false,"type":"string"},"services.mstpd.enable":{"declarations":["nixos/modules/services/networking/mstpd.nix"],"default":false,"description":"Whether to enable the multiple spanning tree protocol daemon.\n","loc":["services","mstpd","enable"],"readOnly":false,"type":"boolean"},"services.munge.enable":{"declarations":["nixos/modules/services/security/munge.nix"],"default":false,"description":"Whether to enable munge service.","example":true,"loc":["services","munge","enable"],"readOnly":false,"type":"boolean"},"services.munge.password":{"declarations":["nixos/modules/services/security/munge.nix"],"default":"/etc/munge/munge.key","description":"The path to a daemon's secret key.\n","loc":["services","munge","password"],"readOnly":false,"type":"Concatenated string"},"services.munin-cron.enable":{"declarations":["nixos/modules/services/monitoring/munin.nix"],"default":false,"description":"Enable munin-cron. Takes care of all heavy lifting to collect data from\nnodes and draws graphs to html. Runs munin-update, munin-limits,\nmunin-graphs and munin-html in that order.\n\nHTML output is in <filename>/var/www/munin/</filename>, configure your\nfavourite webserver to serve static files.\n","loc":["services","munin-cron","enable"],"readOnly":false,"type":"unspecified"},"services.munin-cron.extraGlobalConfig":{"declarations":["nixos/modules/services/monitoring/munin.nix"],"default":"","description":"<filename>munin.conf</filename> extra global configuration.\nSee <link xlink:href='http://munin-monitoring.org/wiki/munin.conf' />.\nUseful to setup notifications, see\n<link xlink:href='http://munin-monitoring.org/wiki/HowToContact' />\n","example":"contact.email.command mail -s \"Munin notification for ${var:host}\" someone@example.com\n","loc":["services","munin-cron","extraGlobalConfig"],"readOnly":false,"type":"unspecified"},"services.munin-cron.hosts":{"declarations":["nixos/modules/services/monitoring/munin.nix"],"description":"Definitions of hosts of nodes to collect data from. Needs at least one\nhosts for cron to succeed. See\n<link xlink:href='http://munin-monitoring.org/wiki/munin.conf' />\n","example":"[${config.networking.hostName}]\naddress localhost\n","loc":["services","munin-cron","hosts"],"readOnly":false,"type":"unspecified"},"services.munin-node.enable":{"declarations":["nixos/modules/services/monitoring/munin.nix"],"default":false,"description":"Enable Munin Node agent. Munin node listens on 0.0.0.0 and\nby default accepts connections only from 127.0.0.1 for security reasons.\n\nSee <link xlink:href='http://munin-monitoring.org/wiki/munin-node.conf' />.\n","loc":["services","munin-node","enable"],"readOnly":false,"type":"unspecified"},"services.munin-node.extraConfig":{"declarations":["nixos/modules/services/monitoring/munin.nix"],"default":"","description":"<filename>munin-node.conf</filename> extra configuration. See\n<link xlink:href='http://munin-monitoring.org/wiki/munin-node.conf' />\n","loc":["services","munin-node","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.murmur.allowHtml":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":true,"description":"Allow HTML in client messages, comments, and channel\ndescriptions.\n","loc":["services","murmur","allowHtml"],"readOnly":false,"type":"boolean"},"services.murmur.autobanAttempts":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":10,"description":"Number of attempts a client is allowed to make in\n<literal>autobanTimeframe</literal> seconds, before being\nbanned for <literal>autobanTime</literal>.\n","loc":["services","murmur","autobanAttempts"],"readOnly":false,"type":"signed integer"},"services.murmur.autobanTime":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":300,"description":"The amount of time an IP ban lasts (in seconds).","loc":["services","murmur","autobanTime"],"readOnly":false,"type":"signed integer"},"services.murmur.autobanTimeframe":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":120,"description":"Timeframe in which a client can connect without being banned\nfor repeated attempts (in seconds).\n","loc":["services","murmur","autobanTimeframe"],"readOnly":false,"type":"signed integer"},"services.murmur.bandwidth":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":72000,"description":"Maximum bandwidth (in bits per second) that clients may send\nspeech at.\n","loc":["services","murmur","bandwidth"],"readOnly":false,"type":"signed integer"},"services.murmur.bonjour":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":false,"description":"Enable Bonjour auto-discovery, which allows clients over\nyour LAN to automatically discover Murmur servers.\n","loc":["services","murmur","bonjour"],"readOnly":false,"type":"boolean"},"services.murmur.clientCertRequired":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":false,"description":"Require clients to authenticate via certificates.","loc":["services","murmur","clientCertRequired"],"readOnly":false,"type":"boolean"},"services.murmur.enable":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":false,"description":"If enabled, start the Murmur Mumble server.","loc":["services","murmur","enable"],"readOnly":false,"type":"boolean"},"services.murmur.extraConfig":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Extra configuration to put into mumur.ini.","loc":["services","murmur","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.murmur.hostName":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Host to bind to. Defaults binding on all addresses.","loc":["services","murmur","hostName"],"readOnly":false,"type":"string"},"services.murmur.imgMsgLength":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":131072,"description":"Max length of image messages. Set 0 for no limit.","loc":["services","murmur","imgMsgLength"],"readOnly":false,"type":"signed integer"},"services.murmur.logDays":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":31,"description":"How long to store RPC logs for in the database. Set 0 to\nkeep logs forever, or -1 to disable DB logging.\n","loc":["services","murmur","logDays"],"readOnly":false,"type":"signed integer"},"services.murmur.password":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Required password to join server, if specified.","loc":["services","murmur","password"],"readOnly":false,"type":"string"},"services.murmur.pidfile":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"/run/murmur/murmurd.pid","description":"Path to PID file for Murmur daemon.","loc":["services","murmur","pidfile"],"readOnly":false,"type":"path"},"services.murmur.port":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":64738,"description":"Ports to bind to (UDP and TCP).","loc":["services","murmur","port"],"readOnly":false,"type":"signed integer"},"services.murmur.registerHostname":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"DNS hostname where your server can be reached. This is only\nneeded if you want your server to be accessed by its\nhostname and not IP - but the name *must* resolve on the\ninternet properly.\n","loc":["services","murmur","registerHostname"],"readOnly":false,"type":"string"},"services.murmur.registerName":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Public server registration name, and also the name of the\nRoot channel. Even if you don't publicly register your\nserver, you probably still want to set this.\n","loc":["services","murmur","registerName"],"readOnly":false,"type":"string"},"services.murmur.registerPassword":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Public server registry password, used authenticate your\nserver to the registry to prevent impersonation; required for\nsubsequent registry updates.\n","loc":["services","murmur","registerPassword"],"readOnly":false,"type":"string"},"services.murmur.registerUrl":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"URL website for your server.","loc":["services","murmur","registerUrl"],"readOnly":false,"type":"string"},"services.murmur.sendVersion":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":true,"description":"Send Murmur version in UDP response.","loc":["services","murmur","sendVersion"],"readOnly":false,"type":"boolean"},"services.murmur.sslCa":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Path to your SSL CA certificate.","loc":["services","murmur","sslCa"],"readOnly":false,"type":"string"},"services.murmur.sslCert":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Path to your SSL certificate.","loc":["services","murmur","sslCert"],"readOnly":false,"type":"string"},"services.murmur.sslKey":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Path to your SSL key.","loc":["services","murmur","sslKey"],"readOnly":false,"type":"string"},"services.murmur.textMsgLength":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":5000,"description":"Max length of text messages. Set 0 for no limit.","loc":["services","murmur","textMsgLength"],"readOnly":false,"type":"signed integer"},"services.murmur.users":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":100,"description":"Maximum number of concurrent clients allowed.","loc":["services","murmur","users"],"readOnly":false,"type":"signed integer"},"services.murmur.welcometext":{"declarations":["nixos/modules/services/networking/murmur.nix"],"default":"","description":"Welcome message for connected clients.","loc":["services","murmur","welcometext"],"readOnly":false,"type":"string"},"services.mwlib.nserve.address":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"127.0.0.1","description":"Specify network interface to listen on.","loc":["services","mwlib","nserve","address"],"readOnly":false,"type":"string"},"services.mwlib.nserve.enable":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":false,"description":"Whether to enable nserve. Nserve is a HTTP\nserver.  The Collection extension is talking to\nthat program directly.  Nserve uses at least\none qserve instance in order to distribute\nand manage jobs.\n","loc":["services","mwlib","nserve","enable"],"readOnly":false,"type":"boolean"},"services.mwlib.nserve.port":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":8899,"description":"Specify port to listen on.","loc":["services","mwlib","nserve","port"],"readOnly":false,"type":"signed integer"},"services.mwlib.nserve.qserve":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":["127.0.0.1:14311"],"description":"Register qserve instance.","loc":["services","mwlib","nserve","qserve"],"readOnly":false,"type":"list of strings"},"services.mwlib.nserve.user":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"nobody","description":"User to run as.","loc":["services","mwlib","nserve","user"],"readOnly":false,"type":"string"},"services.mwlib.nslave.cachedir":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"/var/cache/mwlib-nslave","description":"Directory to store generated documents.","loc":["services","mwlib","nslave","cachedir"],"readOnly":false,"type":"path"},"services.mwlib.nslave.enable":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":false,"description":"Pulls new jobs from exactly one qserve instance\nand calls the zip and render programs\nin order to download article collections and\nconvert them to different output formats. Nslave\nuses a cache directory to store the generated\ndocuments. Nslave also starts an internal http\nserver serving the content of the cache directory.\n","loc":["services","mwlib","nslave","enable"],"readOnly":false,"type":"boolean"},"services.mwlib.nslave.http":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":{},"description":"Internal http server serving the content of the cache directory.\nYou have to enable it, or use your own way for serving files\nand set the http.url option accordingly.\n","loc":["services","mwlib","nslave","http"],"readOnly":false,"type":"submodule"},"services.mwlib.nslave.http.address":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"127.0.0.1","description":"Specify network interface to listen on.","loc":["services","mwlib","nslave","http","address"],"readOnly":false,"type":"string"},"services.mwlib.nslave.http.enable":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":true,"description":"Enable internal http server.","loc":["services","mwlib","nslave","http","enable"],"readOnly":false,"type":"boolean"},"services.mwlib.nslave.http.port":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":8898,"description":"Port to listen to when serving files from cache.","loc":["services","mwlib","nslave","http","port"],"readOnly":false,"type":"signed integer"},"services.mwlib.nslave.http.url":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"http://localhost:8898/cache","description":"Specify URL for accessing generated files from cache.\nThe Collection extension of Mediawiki won't be able to\ndownload files without it.\n","loc":["services","mwlib","nslave","http","url"],"readOnly":false,"type":"string"},"services.mwlib.nslave.numprocs":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":10,"description":"Number of parallel jobs to be executed.","loc":["services","mwlib","nslave","numprocs"],"readOnly":false,"type":"signed integer"},"services.mwlib.nslave.user":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"nobody","description":"User to run as.","loc":["services","mwlib","nslave","user"],"readOnly":false,"type":"string"},"services.mwlib.qserve.address":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"127.0.0.1","description":"Specify network interface to listen on.","loc":["services","mwlib","qserve","address"],"readOnly":false,"type":"string"},"services.mwlib.qserve.allow":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":["127.0.0.1"],"description":"List of allowed client IPs. Empty means any.","loc":["services","mwlib","qserve","allow"],"readOnly":false,"type":"list of strings"},"services.mwlib.qserve.datadir":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"/var/lib/mwlib-qserve","description":"qserve data directory (FIXME: unused?)","loc":["services","mwlib","qserve","datadir"],"readOnly":false,"type":"path"},"services.mwlib.qserve.enable":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":false,"description":"A job queue server used to distribute and manage\njobs. You should start one qserve instance\nfor each machine that is supposed to render pdf\nfiles. Unless you’re operating the Wikipedia\ninstallation, one machine should suffice.\n","loc":["services","mwlib","qserve","enable"],"readOnly":false,"type":"boolean"},"services.mwlib.qserve.port":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":14311,"description":"Specify port to listen on.","loc":["services","mwlib","qserve","port"],"readOnly":false,"type":"signed integer"},"services.mwlib.qserve.user":{"declarations":["nixos/modules/services/misc/mwlib.nix"],"default":"nobody","description":"User to run as.","loc":["services","mwlib","qserve","user"],"readOnly":false,"type":"string"},"services.mysql.bind":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":null,"description":"Address to bind to. The default is to bind to all addresses","example":{"_type":"literalExample","text":"0.0.0.0"},"loc":["services","mysql","bind"],"readOnly":false,"type":"null or string"},"services.mysql.dataDir":{"declarations":["nixos/modules/services/databases/mysql.nix"],"description":"Location where MySQL stores its table files","example":"/var/lib/mysql","loc":["services","mysql","dataDir"],"readOnly":false,"type":"path"},"services.mysql.enable":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":false,"description":"\n          Whether to enable the MySQL server.\n        ","loc":["services","mysql","enable"],"readOnly":false,"type":"boolean"},"services.mysql.ensureDatabases":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":[],"description":"Ensures that the specified databases exist.\nThis option will never delete existing databases, especially not when the value of this\noption is changed. This means that databases created once through this option or\notherwise have to be removed manually.\n","example":["nextcloud","matomo"],"loc":["services","mysql","ensureDatabases"],"readOnly":false,"type":"unspecified"},"services.mysql.ensureUsers":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":[],"description":"Ensures that the specified users exist and have at least the ensured permissions.\nThe MySQL users will be identified using Unix socket authentication. This authenticates the Unix user with the\nsame name only, and that without the need for a password.\nThis option will never delete existing users or remove permissions, especially not when the value of this\noption is changed. This means that users created and permissions assigned once through this option or\notherwise have to be removed manually.\n","example":[{"ensurePermissions":{"nextcloud.*":"ALL PRIVILEGES"},"name":"nextcloud"},{"ensurePermissions":{"*.*":"SELECT, LOCK TABLES"},"name":"backup"}],"loc":["services","mysql","ensureUsers"],"readOnly":false,"type":"unspecified"},"services.mysql.extraOptions":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":"","description":"Provide extra options to the MySQL configuration file.\n\nPlease note, that these options are added to the\n<literal>[mysqld]</literal> section so you don't need to explicitly\nstate it again.\n","example":"key_buffer_size = 6G\ntable_cache = 1600\nlog-error = /var/log/mysql_err.log\n","loc":["services","mysql","extraOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.mysql.initialDatabases":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":[],"description":"List of database names and their initial schemas that should be used to create databases on the first startup\nof MySQL. The schema attribute is optional: If not specified, an empty database is created.\n","example":[{"name":"foodatabase","schema":{"_type":"literalExample","text":"./foodatabase.sql"}},{"name":"bardatabase"}],"loc":["services","mysql","initialDatabases"],"readOnly":false,"type":"unspecified"},"services.mysql.initialScript":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":null,"description":"A file containing SQL statements to be executed on the first startup. Can be used for granting certain permissions on the database","loc":["services","mysql","initialScript"],"readOnly":false,"type":"unspecified"},"services.mysql.package":{"declarations":["nixos/modules/services/databases/mysql.nix"],"description":"\n          Which MySQL derivation to use. MariaDB packages are supported too.\n        ","example":{"_type":"literalExample","text":"pkgs.mysql"},"loc":["services","mysql","package"],"readOnly":false,"type":"package"},"services.mysql.pidDir":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":"/run/mysqld","description":"Location of the file which stores the PID of the MySQL server","loc":["services","mysql","pidDir"],"readOnly":false,"type":"unspecified"},"services.mysql.port":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":3306,"description":"Port of MySQL","loc":["services","mysql","port"],"readOnly":false,"type":"signed integer"},"services.mysql.replication.masterHost":{"declarations":["nixos/modules/services/databases/mysql.nix"],"description":"Hostname of the MySQL master server","loc":["services","mysql","replication","masterHost"],"readOnly":false,"type":"string"},"services.mysql.replication.masterPassword":{"declarations":["nixos/modules/services/databases/mysql.nix"],"description":"Password of the MySQL replication user","loc":["services","mysql","replication","masterPassword"],"readOnly":false,"type":"string"},"services.mysql.replication.masterPort":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":3306,"description":"Port number on which the MySQL master server runs","loc":["services","mysql","replication","masterPort"],"readOnly":false,"type":"signed integer"},"services.mysql.replication.masterUser":{"declarations":["nixos/modules/services/databases/mysql.nix"],"description":"Username of the MySQL replication user","loc":["services","mysql","replication","masterUser"],"readOnly":false,"type":"string"},"services.mysql.replication.role":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":"none","description":"Role of the MySQL server instance.","loc":["services","mysql","replication","role"],"readOnly":false,"type":"one of \"master\", \"slave\", \"none\""},"services.mysql.replication.serverId":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":1,"description":"Id of the MySQL server instance. This number must be unique for each instance","loc":["services","mysql","replication","serverId"],"readOnly":false,"type":"signed integer"},"services.mysql.replication.slaveHost":{"declarations":["nixos/modules/services/databases/mysql.nix"],"description":"Hostname of the MySQL slave server","loc":["services","mysql","replication","slaveHost"],"readOnly":false,"type":"string"},"services.mysql.rootPassword":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":null,"description":"Path to a file containing the root password, modified on the first startup. Not specifying a root password will leave the root password empty.","loc":["services","mysql","rootPassword"],"readOnly":false,"type":"unspecified"},"services.mysql.user":{"declarations":["nixos/modules/services/databases/mysql.nix"],"default":"mysql","description":"User account under which MySQL runs","loc":["services","mysql","user"],"readOnly":false,"type":"string"},"services.mysqlBackup.calendar":{"declarations":["nixos/modules/services/backup/mysql-backup.nix"],"default":"01:15:00","description":"Configured when to run the backup service systemd unit (DayOfWeek Year-Month-Day Hour:Minute:Second).\n","loc":["services","mysqlBackup","calendar"],"readOnly":false,"type":"string"},"services.mysqlBackup.databases":{"declarations":["nixos/modules/services/backup/mysql-backup.nix"],"default":[],"description":"List of database names to dump.\n","loc":["services","mysqlBackup","databases"],"readOnly":false,"type":"unspecified"},"services.mysqlBackup.enable":{"declarations":["nixos/modules/services/backup/mysql-backup.nix"],"default":false,"description":"Whether to enable MySQL backups.\n","loc":["services","mysqlBackup","enable"],"readOnly":false,"type":"unspecified"},"services.mysqlBackup.location":{"declarations":["nixos/modules/services/backup/mysql-backup.nix"],"default":"/var/backup/mysql","description":"Location to put the gzipped MySQL database dumps.\n","loc":["services","mysqlBackup","location"],"readOnly":false,"type":"unspecified"},"services.mysqlBackup.singleTransaction":{"declarations":["nixos/modules/services/backup/mysql-backup.nix"],"default":false,"description":"Whether to create database dump in a single transaction\n","loc":["services","mysqlBackup","singleTransaction"],"readOnly":false,"type":"unspecified"},"services.mysqlBackup.user":{"declarations":["nixos/modules/services/backup/mysql-backup.nix"],"default":"mysqlbackup","description":"User to be used to perform backup.\n","loc":["services","mysqlBackup","user"],"readOnly":false,"type":"unspecified"},"services.nagios.cgiConfigFile":{"declarations":["nixos/modules/services/monitoring/nagios.nix"],"default":"nagiosCGICfgFile","description":"\n          Derivation for the configuration file of Nagios CGI scripts\n          that can be used in web servers for running the Nagios web interface.\n        ","loc":["services","nagios","cgiConfigFile"],"readOnly":false,"type":"package"},"services.nagios.enable":{"declarations":["nixos/modules/services/monitoring/nagios.nix"],"default":false,"description":"\n          Whether to use <link\n          xlink:href='http://www.nagios.org/'>Nagios</link> to monitor\n          your system or network.\n        ","loc":["services","nagios","enable"],"readOnly":false,"type":"unspecified"},"services.nagios.enableWebInterface":{"declarations":["nixos/modules/services/monitoring/nagios.nix"],"default":false,"description":"\n          Whether to enable the Nagios web interface.  You should also\n          enable Apache (<option>services.httpd.enable</option>).\n        ","loc":["services","nagios","enableWebInterface"],"readOnly":false,"type":"unspecified"},"services.nagios.mainConfigFile":{"declarations":["nixos/modules/services/monitoring/nagios.nix"],"default":"nagiosCfgFile","description":"\n          Derivation for the main configuration file of Nagios.\n        ","loc":["services","nagios","mainConfigFile"],"readOnly":false,"type":"package"},"services.nagios.objectDefs":{"declarations":["nixos/modules/services/monitoring/nagios.nix"],"description":"\n          A list of Nagios object configuration files that must define\n          the hosts, host groups, services and contacts for the\n          network that you want Nagios to monitor.\n        ","loc":["services","nagios","objectDefs"],"readOnly":false,"type":"unspecified"},"services.nagios.plugins":{"declarations":["nixos/modules/services/monitoring/nagios.nix"],"default":"[pkgs.nagiosPluginsOfficial pkgs.ssmtp]","description":"\n          Packages to be added to the Nagios <envar>PATH</envar>.\n          Typically used to add plugins, but can be anything.\n        ","loc":["services","nagios","plugins"],"readOnly":false,"type":"list of packages"},"services.nagios.urlPath":{"declarations":["nixos/modules/services/monitoring/nagios.nix"],"default":"/nagios","description":"\n          The URL path under which the Nagios web interface appears.\n          That is, you can access the Nagios web interface through\n          <literal>http://<replaceable>server</replaceable>/<replaceable>urlPath</replaceable></literal>.\n        ","loc":["services","nagios","urlPath"],"readOnly":false,"type":"unspecified"},"services.namecoind.enable":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":false,"description":"Whether to enable namecoind, Namecoin client..","example":true,"loc":["services","namecoind","enable"],"readOnly":false,"type":"boolean"},"services.namecoind.extraNodes":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":[],"description":"List of additional peer IP addresses to connect to.\n","loc":["services","namecoind","extraNodes"],"readOnly":false,"type":"list of strings"},"services.namecoind.generate":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":false,"description":"Whether to generate (mine) Namecoins.\n","loc":["services","namecoind","generate"],"readOnly":false,"type":"boolean"},"services.namecoind.rpc.address":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":"0.0.0.0","description":"IP address the RPC server will bind to.\n","loc":["services","namecoind","rpc","address"],"readOnly":false,"type":"string"},"services.namecoind.rpc.allowFrom":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":["127.0.0.1"],"description":"List of IP address ranges allowed to use the RPC API.\nWiledcards (*) can be user to specify a range.\n","loc":["services","namecoind","rpc","allowFrom"],"readOnly":false,"type":"list of strings"},"services.namecoind.rpc.certificate":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":null,"description":"Certificate file for securing RPC connections.\n","example":"/var/lib/namecoind/server.cert","loc":["services","namecoind","rpc","certificate"],"readOnly":false,"type":"null or path"},"services.namecoind.rpc.key":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":null,"description":"Key file for securing RPC connections.\n","example":"/var/lib/namecoind/server.pem","loc":["services","namecoind","rpc","key"],"readOnly":false,"type":"null or path"},"services.namecoind.rpc.password":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":null,"description":"Password for RPC connections.\n","loc":["services","namecoind","rpc","password"],"readOnly":false,"type":"string"},"services.namecoind.rpc.port":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":8332,"description":"Port the RPC server will bind to.\n","loc":["services","namecoind","rpc","port"],"readOnly":false,"type":"signed integer"},"services.namecoind.rpc.user":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":null,"description":"User name for RPC connections.\n","loc":["services","namecoind","rpc","user"],"readOnly":false,"type":"null or string"},"services.namecoind.trustedNodes":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":[],"description":"List of the only peer IP addresses to connect to. If specified\nno other connection will be made.\n","loc":["services","namecoind","trustedNodes"],"readOnly":false,"type":"list of strings"},"services.namecoind.wallet":{"declarations":["nixos/modules/services/networking/namecoind.nix"],"default":"/var/lib/namecoind/wallet.dat","description":"Wallet file. The ownership of the file has to be\nnamecoin:namecoin, and the permissions must be 0640.\n","loc":["services","namecoind","wallet"],"readOnly":false,"type":"path"},"services.ndppd.configFile":{"declarations":["nixos/modules/services/networking/ndppd.nix"],"default":null,"description":"Path to configuration file.","loc":["services","ndppd","configFile"],"readOnly":false,"type":"null or path"},"services.ndppd.enable":{"declarations":["nixos/modules/services/networking/ndppd.nix"],"default":false,"description":"Whether to enable daemon that proxies NDP (Neighbor Discovery Protocol) messages between interfaces.","example":true,"loc":["services","ndppd","enable"],"readOnly":false,"type":"boolean"},"services.ndppd.interface":{"declarations":["nixos/modules/services/networking/ndppd.nix"],"default":"eth0","description":"Interface which is on link-level with router.","example":"ens3","loc":["services","ndppd","interface"],"readOnly":false,"type":"Concatenated string"},"services.ndppd.network":{"declarations":["nixos/modules/services/networking/ndppd.nix"],"default":"1111::","description":"Network that we proxy.","example":"2001:DB8::/32","loc":["services","ndppd","network"],"readOnly":false,"type":"Concatenated string"},"services.neo4j.allowUpgrade":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":false,"description":"Allow upgrade of Neo4j database files from an older version.\n","loc":["services","neo4j","allowUpgrade"],"readOnly":false,"type":"boolean"},"services.neo4j.bolt.enable":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":true,"description":"Enable the BOLT connector for Neo4j. Setting this option to\n<literal>false</literal> will stop Neo4j from listening for incoming\nconnections on the BOLT port (7687 by default).\n","loc":["services","neo4j","bolt","enable"],"readOnly":false,"type":"boolean"},"services.neo4j.bolt.listenAddress":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":":7687","description":"Neo4j listen address for BOLT traffic. The listen address is\nexpressed in the format <literal>&lt;ip-address&gt;:&lt;port-number&gt;</literal>.\n","loc":["services","neo4j","bolt","listenAddress"],"readOnly":false,"type":"string"},"services.neo4j.bolt.sslPolicy":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"legacy","description":"Neo4j SSL policy for BOLT traffic.\n</para>\n<para>\nThe legacy policy is a special policy which is not defined in\nthe policy configuration section, but rather derives from\n<option>directories.certificates</option> and\nassociated files (by default: <filename>neo4j.key</filename> and\n<filename>neo4j.cert</filename>). Its use will be deprecated.\n</para>\n<para>\nNote: This connector must be configured to support/require\nSSL/TLS for the legacy policy to actually be utilized. See\n<option>bolt.tlsLevel</option>.\n","loc":["services","neo4j","bolt","sslPolicy"],"readOnly":false,"type":"string"},"services.neo4j.bolt.tlsLevel":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"OPTIONAL","description":"SSL/TSL requirement level for BOLT traffic.\n","loc":["services","neo4j","bolt","tlsLevel"],"readOnly":false,"type":"one of \"REQUIRED\", \"OPTIONAL\", \"DISABLED\""},"services.neo4j.constrainLoadCsv":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":true,"description":"Sets the root directory for file URLs used with the Cypher\n<literal>LOAD CSV</literal> clause to be that defined by\n<option>directories.imports</option>. It restricts\naccess to only those files within that directory and its\nsubdirectories.\n</para>\n<para>\nSetting this option to <literal>false</literal> introduces\npossible security problems.\n","loc":["services","neo4j","constrainLoadCsv"],"readOnly":false,"type":"boolean"},"services.neo4j.defaultListenAddress":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"127.0.0.1","description":"Default network interface to listen for incoming connections. To\nlisten for connections on all interfaces, use \"0.0.0.0\".\n</para>\n<para>\nSpecifies the default IP address and address part of connector\nspecific <option>listenAddress</option> options. To bind specific\nconnectors to a specific network interfaces, specify the entire\n<option>listenAddress</option> option for that connector.\n","loc":["services","neo4j","defaultListenAddress"],"readOnly":false,"type":"string"},"services.neo4j.directories.certificates":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"/var/lib/neo4j/certificates","description":"Directory for storing certificates to be used by Neo4j for\nTLS connections.\n</para>\n<para>\nWhen setting this directory to something other than its default,\nensure the directory's existence, and that read/write permissions are\ngiven to the Neo4j daemon user <literal>neo4j</literal>.\n</para>\n<para>\nNote that changing this directory from its default will prevent\nthe directory structure required for each SSL policy from being\nautomatically generated. A policy's directory structure as defined by\nits <option>baseDirectory</option>,<option>revokedDir</option> and\n<option>trustedDir</option> must then be setup manually. The\nexistence of these directories is mandatory, as well as the presence\nof the certificate file and the private key. Ensure the correct\npermissions are set on these directories and files.\n","loc":["services","neo4j","directories","certificates"],"readOnly":false,"type":"path"},"services.neo4j.directories.data":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"/var/lib/neo4j/data","description":"Path of the data directory. You must not configure more than one\nNeo4j installation to use the same data directory.\n</para>\n<para>\nWhen setting this directory to something other than its default,\nensure the directory's existence, and that read/write permissions are\ngiven to the Neo4j daemon user <literal>neo4j</literal>.\n","loc":["services","neo4j","directories","data"],"readOnly":false,"type":"path"},"services.neo4j.directories.home":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"/var/lib/neo4j","description":"Path of the Neo4j home directory. Other default directories are\nsubdirectories of this path. This directory will be created if\nnon-existent, and its ownership will be <command>chown</command> to\nthe Neo4j daemon user <literal>neo4j</literal>.\n","loc":["services","neo4j","directories","home"],"readOnly":false,"type":"path"},"services.neo4j.directories.imports":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"/var/lib/neo4j/import","description":"The root directory for file URLs used with the Cypher\n<literal>LOAD CSV</literal> clause. Only meaningful when\n<option>constrainLoadCvs</option> is set to\n<literal>true</literal>.\n</para>\n<para>\nWhen setting this directory to something other than its default,\nensure the directory's existence, and that read permission is\ngiven to the Neo4j daemon user <literal>neo4j</literal>.\n","loc":["services","neo4j","directories","imports"],"readOnly":false,"type":"path"},"services.neo4j.directories.plugins":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"/var/lib/neo4j/plugins","description":"Path of the database plugin directory. Compiled Java JAR files that\ncontain database procedures will be loaded if they are placed in\nthis directory.\n</para>\n<para>\nWhen setting this directory to something other than its default,\nensure the directory's existence, and that read permission is\ngiven to the Neo4j daemon user <literal>neo4j</literal>.\n","loc":["services","neo4j","directories","plugins"],"readOnly":false,"type":"path"},"services.neo4j.enable":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":false,"description":"Whether to enable Neo4j Community Edition.\n","loc":["services","neo4j","enable"],"readOnly":false,"type":"boolean"},"services.neo4j.extraServerConfig":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"","description":"Extra configuration for Neo4j Community server. Refer to the\n<link xlink:href=\"https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/\">complete reference</link>\nof Neo4j configuration settings.\n","loc":["services","neo4j","extraServerConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.neo4j.http.enable":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":true,"description":"The HTTP connector is required for Neo4j, and cannot be disabled.\nSetting this option to <literal>false</literal> will force the HTTP\nconnector's <option>listenAddress</option> to the loopback\ninterface to prevent connection of remote clients. To prevent all\nclients from connecting, block the HTTP port (7474 by default) by\nfirewall.\n","loc":["services","neo4j","http","enable"],"readOnly":false,"type":"boolean"},"services.neo4j.http.listenAddress":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":":7474","description":"Neo4j listen address for HTTP traffic. The listen address is\nexpressed in the format <literal>&lt;ip-address&gt;:&lt;port-number&gt;</literal>.\n","loc":["services","neo4j","http","listenAddress"],"readOnly":false,"type":"string"},"services.neo4j.https.enable":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":true,"description":"Enable the HTTPS connector for Neo4j. Setting this option to\n<literal>false</literal> will stop Neo4j from listening for incoming\nconnections on the HTTPS port (7473 by default).\n","loc":["services","neo4j","https","enable"],"readOnly":false,"type":"boolean"},"services.neo4j.https.listenAddress":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":":7473","description":"Neo4j listen address for HTTPS traffic. The listen address is\nexpressed in the format <literal>&lt;ip-address&gt;:&lt;port-number&gt;</literal>.\n","loc":["services","neo4j","https","listenAddress"],"readOnly":false,"type":"string"},"services.neo4j.https.sslPolicy":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"legacy","description":"Neo4j SSL policy for HTTPS traffic.\n</para>\n<para>\nThe legacy policy is a special policy which is not defined in the\npolicy configuration section, but rather derives from\n<option>directories.certificates</option> and\nassociated files (by default: <filename>neo4j.key</filename> and\n<filename>neo4j.cert</filename>). Its use will be deprecated.\n","loc":["services","neo4j","https","sslPolicy"],"readOnly":false,"type":"string"},"services.neo4j.package":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"pkgs.neo4j","description":"Neo4j package to use.\n","loc":["services","neo4j","package"],"readOnly":false,"type":"package"},"services.neo4j.readOnly":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":false,"description":"Only allow read operations from this Neo4j instance.\n","loc":["services","neo4j","readOnly"],"readOnly":false,"type":"boolean"},"services.neo4j.shell.enable":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":false,"description":"Enable a remote shell server which Neo4j Shell clients can log in to.\nOnly applicable to <command>neo4j-shell</command>.\n","loc":["services","neo4j","shell","enable"],"readOnly":false,"type":"boolean"},"services.neo4j.ssl.policies":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":{},"description":"Defines the SSL policies for use with Neo4j connectors. Each attribute\nof this set defines a policy, with the attribute name defining the name\nof the policy and its namespace. Refer to the operations manual section\non Neo4j's\n<link xlink:href=\"https://neo4j.com/docs/operations-manual/current/security/ssl-framework/\">SSL Framework</link>\nfor further details.\n","loc":["services","neo4j","ssl","policies"],"readOnly":false,"type":"attribute set of submodules"},"services.neo4j.ssl.policies.<name>.allowKeyGeneration":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":false,"description":"Allows the generation of a private key and associated self-signed\ncertificate. Only performed when both objects cannot be found for\nthis policy. It is recommended to turn this off again after keys\nhave been generated.\n</para>\n<para>\nThe public certificate is required to be duplicated to the\ndirectory holding trusted certificates as defined by the\n<option>trustedDir</option> option.\n</para>\n<para>\nKeys should in general be generated and distributed offline by a\ntrusted certificate authority and not by utilizing this mode.\n","loc":["services","neo4j","ssl","policies","<name>","allowKeyGeneration"],"readOnly":false,"type":"boolean"},"services.neo4j.ssl.policies.<name>.baseDirectory":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"/var/lib/neo4j/certificates/‹name›","description":"The mandatory base directory for cryptographic objects of this\npolicy. This path is only automatically generated when this\noption as well as <option>directories.certificates</option> are\nleft at their default. Ensure read/write permissions are given\nto the Neo4j daemon user <literal>neo4j</literal>.\n</para>\n<para>\nIt is also possible to override each individual\nconfiguration with absolute paths. See the\n<option>privateKey</option> and <option>publicCertificate</option>\npolicy options.\n","loc":["services","neo4j","ssl","policies","<name>","baseDirectory"],"readOnly":false,"type":"path"},"services.neo4j.ssl.policies.<name>.ciphers":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":null,"description":"Restrict the allowed ciphers of this policy to those defined\nhere. The default ciphers are those of the JVM platform.\n","loc":["services","neo4j","ssl","policies","<name>","ciphers"],"readOnly":false,"type":"null or list of strings"},"services.neo4j.ssl.policies.<name>.clientAuth":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"REQUIRE","description":"The client authentication stance for this policy.\n","loc":["services","neo4j","ssl","policies","<name>","clientAuth"],"readOnly":false,"type":"one of \"NONE\", \"OPTIONAL\", \"REQUIRE\""},"services.neo4j.ssl.policies.<name>.privateKey":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"private.key","description":"The name of private PKCS #8 key file for this policy to be found\nin the <option>baseDirectory</option>, or the absolute path to\nthe key file. It is mandatory that a key can be found or generated.\n","loc":["services","neo4j","ssl","policies","<name>","privateKey"],"readOnly":false,"type":"string"},"services.neo4j.ssl.policies.<name>.publicCertificate":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"public.crt","description":"The name of public X.509 certificate (chain) file in PEM format\nfor this policy to be found in the <option>baseDirectory</option>,\nor the absolute path to the certificate file. It is mandatory\nthat a certificate can be found or generated.\n</para>\n<para>\nThe public certificate is required to be duplicated to the\ndirectory holding trusted certificates as defined by the\n<option>trustedDir</option> option.\n","loc":["services","neo4j","ssl","policies","<name>","publicCertificate"],"readOnly":false,"type":"string"},"services.neo4j.ssl.policies.<name>.revokedDir":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"/var/lib/neo4j/certificates/‹name›/revoked","description":"Path to directory of CRLs (Certificate Revocation Lists) in\nPEM format. Must be an absolute path. The existence of this\ndirectory is mandatory and will need to be created manually when:\nsetting this option to something other than its default; setting\neither this policy's <option>baseDirectory</option> or\n<option>directories.certificates</option> to something other than\ntheir default. Ensure read/write permissions are given to the\nNeo4j daemon user <literal>neo4j</literal>.\n","loc":["services","neo4j","ssl","policies","<name>","revokedDir"],"readOnly":false,"type":"path"},"services.neo4j.ssl.policies.<name>.tlsVersions":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":["TLSv1.2"],"description":"Restrict the TLS protocol versions of this policy to those\ndefined here.\n","loc":["services","neo4j","ssl","policies","<name>","tlsVersions"],"readOnly":false,"type":"list of strings"},"services.neo4j.ssl.policies.<name>.trustAll":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":false,"description":"Makes this policy trust all remote parties. Enabling this is not\nrecommended and the policy's trusted directory will be ignored.\nUse of this mode is discouraged. It would offer encryption but\nno security.\n","loc":["services","neo4j","ssl","policies","<name>","trustAll"],"readOnly":false,"type":"boolean"},"services.neo4j.ssl.policies.<name>.trustedDir":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":"/var/lib/neo4j/certificates/‹name›/trusted","description":"Path to directory of X.509 certificates in PEM format for\ntrusted parties. Must be an absolute path. The existence of this\ndirectory is mandatory and will need to be created manually when:\nsetting this option to something other than its default; setting\neither this policy's <option>baseDirectory</option> or\n<option>directories.certificates</option> to something other than\ntheir default. Ensure read/write permissions are given to the\nNeo4j daemon user <literal>neo4j</literal>.\n</para>\n<para>\nThe public certificate as defined by\n<option>publicCertificate</option> is required to be duplicated\nto this directory.\n","loc":["services","neo4j","ssl","policies","<name>","trustedDir"],"readOnly":false,"type":"path"},"services.neo4j.udc.enable":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":false,"description":"Enable the Usage Data Collector which Neo4j uses to collect usage\ndata. Refer to the operations manual section on the\n<link xlink:href=\"https://neo4j.com/docs/operations-manual/current/configuration/usage-data-collector/\">Usage Data Collector</link>\nfor more information.\n","loc":["services","neo4j","udc","enable"],"readOnly":false,"type":"boolean"},"services.neo4j.workerCount":{"declarations":["nixos/modules/services/databases/neo4j.nix"],"default":0,"description":"Number of Neo4j worker threads, where the default of\n<literal>0</literal> indicates a worker count equal to the number of\navailable processors.\n","loc":["services","neo4j","workerCount"],"readOnly":false,"type":"integer between 0 and 44738 (both inclusive)"},"services.netatalk.enable":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"default":false,"description":"Whether to enable the Netatalk AFP fileserver.","loc":["services","netatalk","enable"],"readOnly":false,"type":"unspecified"},"services.netatalk.extmap":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"default":"","description":"\t  File name extension mappings.\n\t  See <literal>man extmap.conf</literal> for more information.\n","loc":["services","netatalk","extmap"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.netatalk.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"default":"","description":"Lines of configuration to add to the <literal>[Global]</literal> section.\nSee <literal>man apf.conf</literal> for more information.\n","example":"uam list = uams_guest.so","loc":["services","netatalk","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.netatalk.homes.basedirRegex":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"description":"Regex which matches the parent directory of the user homes.","example":"/home","loc":["services","netatalk","homes","basedirRegex"],"readOnly":false,"type":"unspecified"},"services.netatalk.homes.enable":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"default":false,"description":"Enable sharing of the UNIX server user home directories.","loc":["services","netatalk","homes","enable"],"readOnly":false,"type":"unspecified"},"services.netatalk.homes.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"default":"","description":"Lines of configuration to add to the <literal>[Homes]</literal> section.\nSee <literal>man apf.conf</literal> for more information.\n","loc":["services","netatalk","homes","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.netatalk.homes.path":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"default":"","description":"Share not the whole user home but this subdirectory path.","example":"afp-data","loc":["services","netatalk","homes","path"],"readOnly":false,"type":"unspecified"},"services.netatalk.port":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"default":548,"description":"TCP port to be used for AFP.","loc":["services","netatalk","port"],"readOnly":false,"type":"unspecified"},"services.netatalk.volumes":{"declarations":["nixos/modules/services/network-filesystems/netatalk.nix"],"default":{},"description":"Set of AFP volumes to export.\nSee <literal>man apf.conf</literal> for more information.\n","example":{"srv":{"hosts allow":"10.1.0.0/16 10.2.1.100 2001:0db8:1234::/48","path":"/srv","read only":true}},"loc":["services","netatalk","volumes"],"readOnly":false,"type":"attribute set of attribute set of unspecifiedss"},"services.netdata.config":{"declarations":["nixos/modules/services/monitoring/netdata.nix"],"default":{},"description":"netdata.conf configuration as nix attributes. cannot be combined with configText.","example":{"_type":"literalExample","text":"global = {\n  \"debug log\" = \"syslog\";\n  \"access log\" = \"syslog\";\n  \"error log\" = \"syslog\";\n};\n"},"loc":["services","netdata","config"],"readOnly":false,"type":"attribute set of attribute sets"},"services.netdata.configText":{"declarations":["nixos/modules/services/monitoring/netdata.nix"],"default":null,"description":"Verbatim netdata.conf, cannot be combined with config.","example":"[global]\ndebug log = syslog\naccess log = syslog\nerror log = syslog\n","loc":["services","netdata","configText"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.netdata.enable":{"declarations":["nixos/modules/services/monitoring/netdata.nix"],"default":false,"description":"Whether to enable netdata.","example":true,"loc":["services","netdata","enable"],"readOnly":false,"type":"boolean"},"services.netdata.group":{"declarations":["nixos/modules/services/monitoring/netdata.nix"],"default":"netdata","description":"Group under which netdata runs.","loc":["services","netdata","group"],"readOnly":false,"type":"string"},"services.netdata.user":{"declarations":["nixos/modules/services/monitoring/netdata.nix"],"default":"netdata","description":"User account under which netdata runs.","loc":["services","netdata","user"],"readOnly":false,"type":"string"},"services.networking.websockify.enable":{"declarations":["nixos/modules/services/networking/websockify.nix"],"default":false,"description":"Whether to enable websockify to forward websocket connections to TCP connections.","loc":["services","networking","websockify","enable"],"readOnly":false,"type":"boolean"},"services.networking.websockify.portMap":{"declarations":["nixos/modules/services/networking/websockify.nix"],"default":{},"description":"Ports to map by default.","loc":["services","networking","websockify","portMap"],"readOnly":false,"type":"attribute set of signed integers"},"services.networking.websockify.sslCert":{"declarations":["nixos/modules/services/networking/websockify.nix"],"description":"Path to the SSL certificate.","loc":["services","networking","websockify","sslCert"],"readOnly":false,"type":"path"},"services.networking.websockify.sslKey":{"declarations":["nixos/modules/services/networking/websockify.nix"],"default":"config.services.networking.websockify.sslCert","description":"Path to the SSL key.","loc":["services","networking","websockify","sslKey"],"readOnly":false,"type":"path"},"services.nextcloud.caching.apcu":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":true,"description":"Whether to load the APCu module into PHP.\n","loc":["services","nextcloud","caching","apcu"],"readOnly":false,"type":"boolean"},"services.nextcloud.caching.memcached":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":false,"description":"Whether to load the Memcached module into PHP.\nYou still need to enable Memcached in your config.php.\nSee https://docs.nextcloud.com/server/14/admin_manual/configuration_server/caching_configuration.html\n","loc":["services","nextcloud","caching","memcached"],"readOnly":false,"type":"boolean"},"services.nextcloud.caching.redis":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":false,"description":"Whether to load the Redis module into PHP.\nYou still need to enable Redis in your config.php.\nSee https://docs.nextcloud.com/server/14/admin_manual/configuration_server/caching_configuration.html\n","loc":["services","nextcloud","caching","redis"],"readOnly":false,"type":"boolean"},"services.nextcloud.config.adminpass":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":null,"description":"Database password.  Use <literal>adminpassFile</literal> to avoid this\nbeing world-readable in the <literal>/nix/store</literal>.\n","loc":["services","nextcloud","config","adminpass"],"readOnly":false,"type":"null or string"},"services.nextcloud.config.adminpassFile":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":null,"description":"The full path to a file that contains the admin's password.\n","loc":["services","nextcloud","config","adminpassFile"],"readOnly":false,"type":"null or string"},"services.nextcloud.config.adminuser":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"root","description":"Admin username.","loc":["services","nextcloud","config","adminuser"],"readOnly":false,"type":"string"},"services.nextcloud.config.dbhost":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"localhost","description":"Database host.","loc":["services","nextcloud","config","dbhost"],"readOnly":false,"type":"null or string"},"services.nextcloud.config.dbname":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"nextcloud","description":"Database name.","loc":["services","nextcloud","config","dbname"],"readOnly":false,"type":"null or string"},"services.nextcloud.config.dbpass":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":null,"description":"Database password.  Use <literal>dbpassFile</literal> to avoid this\nbeing world-readable in the <literal>/nix/store</literal>.\n","loc":["services","nextcloud","config","dbpass"],"readOnly":false,"type":"null or string"},"services.nextcloud.config.dbpassFile":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":null,"description":"The full path to a file that contains the database password.\n","loc":["services","nextcloud","config","dbpassFile"],"readOnly":false,"type":"null or string"},"services.nextcloud.config.dbport":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":null,"description":"Database port.","loc":["services","nextcloud","config","dbport"],"readOnly":false,"type":"null or signed integer or string"},"services.nextcloud.config.dbtableprefix":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":null,"description":"Table prefix in Nextcloud database.","loc":["services","nextcloud","config","dbtableprefix"],"readOnly":false,"type":"null or string"},"services.nextcloud.config.dbtype":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"sqlite","description":"Database type.","loc":["services","nextcloud","config","dbtype"],"readOnly":false,"type":"one of \"sqlite\", \"pgsql\", \"mysql\""},"services.nextcloud.config.dbuser":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"nextcloud","description":"Database user.","loc":["services","nextcloud","config","dbuser"],"readOnly":false,"type":"null or string"},"services.nextcloud.config.extraTrustedDomains":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":[],"description":"Trusted domains, from which the nextcloud installation will be\nacessible.  You don't need to add\n<literal>services.nextcloud.hostname</literal> here.\n","loc":["services","nextcloud","config","extraTrustedDomains"],"readOnly":false,"type":"list of strings"},"services.nextcloud.enable":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":false,"description":"Whether to enable nextcloud.","example":true,"loc":["services","nextcloud","enable"],"readOnly":false,"type":"boolean"},"services.nextcloud.home":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"/var/lib/nextcloud","description":"Storage path of nextcloud.","loc":["services","nextcloud","home"],"readOnly":false,"type":"string"},"services.nextcloud.hostName":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"description":"FQDN for the nextcloud instance.","loc":["services","nextcloud","hostName"],"readOnly":false,"type":"string"},"services.nextcloud.https":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":false,"description":"Enable if there is a TLS terminating proxy in front of nextcloud.","loc":["services","nextcloud","https"],"readOnly":false,"type":"boolean"},"services.nextcloud.maxUploadSize":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"512M","description":"Defines the upload limit for files. This changes the relevant options\nin php.ini and nginx if enabled.\n","loc":["services","nextcloud","maxUploadSize"],"readOnly":false,"type":"string"},"services.nextcloud.nginx.enable":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":false,"description":"Whether to enable nginx vhost management.","example":true,"loc":["services","nextcloud","nginx","enable"],"readOnly":false,"type":"boolean"},"services.nextcloud.phpOptions":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":{"catch_workers_output":"yes","display_errors":"stderr","error_reporting":"E_ALL & ~E_DEPRECATED & ~E_STRICT","expose_php":"Off","opcache.enable_cli":"1","opcache.fast_shutdown":"1","opcache.interned_strings_buffer":"8","opcache.max_accelerated_files":"10000","opcache.memory_consumption":"128","opcache.revalidate_freq":"1","openssl.cafile":"/etc/ssl/certs/ca-certificates.crt","short_open_tag":"Off"},"description":"Options for PHP's php.ini file for nextcloud.\n","loc":["services","nextcloud","phpOptions"],"readOnly":false,"type":"attribute set of strings"},"services.nextcloud.phpPackages":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"pkgs.php71Packages","description":"Overridable attribute of the PHP packages set to use.  If any caching\nmodule is enabled, it will be taken from here.  Therefore it should\nmatch the version of PHP given to\n<literal>services.phpfpm.phpPackage</literal>.\n","loc":["services","nextcloud","phpPackages"],"readOnly":false,"type":"attribute set"},"services.nextcloud.poolConfig":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"pm = dynamic\npm.max_children = 32\npm.start_servers = 2\npm.min_spare_servers = 2\npm.max_spare_servers = 4\npm.max_requests = 500\n","description":"Options for nextcloud's PHP pool. See the documentation on <literal>php-fpm.conf</literal> for details on configuration directives.\n","loc":["services","nextcloud","poolConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nextcloud.skeletonDirectory":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":"","description":"The directory where the skeleton files are located. These files will be\ncopied to the data directory of new users. Leave empty to not copy any\nskeleton files.\n","loc":["services","nextcloud","skeletonDirectory"],"readOnly":false,"type":"string"},"services.nextcloud.webfinger":{"declarations":["nixos/modules/services/web-apps/nextcloud.nix"],"default":false,"description":"Enable this option if you plan on using the webfinger plugin.\nThe appropriate nginx rewrite rules will be added to your configuration.\n","loc":["services","nextcloud","webfinger"],"readOnly":false,"type":"boolean"},"services.nexus.enable":{"declarations":["nixos/modules/services/web-apps/nexus.nix"],"default":false,"description":"Whether to enable Sonatype Nexus3 OSS service.","example":true,"loc":["services","nexus","enable"],"readOnly":false,"type":"boolean"},"services.nexus.group":{"declarations":["nixos/modules/services/web-apps/nexus.nix"],"default":"nexus","description":"Group which runs Nexus3.","loc":["services","nexus","group"],"readOnly":false,"type":"string"},"services.nexus.home":{"declarations":["nixos/modules/services/web-apps/nexus.nix"],"default":"/var/lib/sonatype-work","description":"Home directory of the Nexus3 instance.","loc":["services","nexus","home"],"readOnly":false,"type":"string"},"services.nexus.jvmOpts":{"declarations":["nixos/modules/services/web-apps/nexus.nix"],"default":"-Xms1200M\n-Xmx1200M\n-XX:MaxDirectMemorySize=2G\n-XX:+UnlockDiagnosticVMOptions\n-XX:+UnsyncloadClass\n-XX:+LogVMOutput\n-XX:LogFile=/var/lib/sonatype-work/nexus3/log/jvm.log\n-XX:-OmitStackTraceInFastThrow\n-Djava.net.preferIPv4Stack=true\n-Dkaraf.home=${pkgs.nexus}\n-Dkaraf.base=${pkgs.nexus}\n-Dkaraf.etc=${pkgs.nexus}/etc/karaf\n-Djava.util.logging.config.file=${pkgs.nexus}/etc/karaf/java.util.logging.properties\n-Dkaraf.data=/var/lib/sonatype-work/nexus3\n-Djava.io.tmpdir=/var/lib/sonatype-work/nexus3/tmp\n-Dkaraf.startLocalConsole=false\n","description":"Options for the JVM written to `nexus.jvmopts`.\nPlease refer to the docs (https://help.sonatype.com/repomanager3/installation/configuring-the-runtime-environment)\nfor further information.\n","loc":["services","nexus","jvmOpts"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nexus.listenAddress":{"declarations":["nixos/modules/services/web-apps/nexus.nix"],"default":"127.0.0.1","description":"Address to listen on.","loc":["services","nexus","listenAddress"],"readOnly":false,"type":"string"},"services.nexus.listenPort":{"declarations":["nixos/modules/services/web-apps/nexus.nix"],"default":8081,"description":"Port to listen on.","loc":["services","nexus","listenPort"],"readOnly":false,"type":"signed integer"},"services.nexus.package":{"declarations":["nixos/modules/services/web-apps/nexus.nix"],"default":"nexus-3.12.1-01","description":"Package which runs Nexus3","loc":["services","nexus","package"],"readOnly":false,"type":"package"},"services.nexus.user":{"declarations":["nixos/modules/services/web-apps/nexus.nix"],"default":"nexus","description":"User which runs Nexus3.","loc":["services","nexus","user"],"readOnly":false,"type":"string"},"services.nfs.extraConfig":{"declarations":["nixos/modules/tasks/filesystems/nfs.nix"],"default":"","description":"Extra nfs-utils configuration.\n","loc":["services","nfs","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nfs.server.createMountPoints":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":false,"description":"Whether to create the mount points in the exports file at startup time.","loc":["services","nfs","server","createMountPoints"],"readOnly":false,"type":"boolean"},"services.nfs.server.enable":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":false,"description":"Whether to enable the kernel's NFS server.\n","loc":["services","nfs","server","enable"],"readOnly":false,"type":"boolean"},"services.nfs.server.exports":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":"","description":"Contents of the /etc/exports file.  See\n<citerefentry><refentrytitle>exports</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for the format.\n","loc":["services","nfs","server","exports"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nfs.server.extraNfsdConfig":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":"","description":"Extra configuration options for the [nfsd] section of /etc/nfs.conf.\n","loc":["services","nfs","server","extraNfsdConfig"],"readOnly":false,"type":"string"},"services.nfs.server.hostName":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":null,"description":"Hostname or address on which NFS requests will be accepted.\nDefault is all.  See the <option>-H</option> option in\n<citerefentry><refentrytitle>nfsd</refentrytitle>\n<manvolnum>8</manvolnum></citerefentry>.\n","loc":["services","nfs","server","hostName"],"readOnly":false,"type":"null or string"},"services.nfs.server.lockdPort":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":null,"description":"Use a fixed port for the NFS lock manager kernel module\n(<literal>lockd/nlockmgr</literal>).  This is useful if the\nNFS server is behind a firewall.\n","example":4001,"loc":["services","nfs","server","lockdPort"],"readOnly":false,"type":"null or signed integer"},"services.nfs.server.mountdPort":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":null,"description":"Use fixed port for rpc.mountd, useful if server is behind firewall.\n","example":4002,"loc":["services","nfs","server","mountdPort"],"readOnly":false,"type":"null or signed integer"},"services.nfs.server.nproc":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":8,"description":"Number of NFS server threads.  Defaults to the recommended value of 8.\n","loc":["services","nfs","server","nproc"],"readOnly":false,"type":"signed integer"},"services.nfs.server.statdPort":{"declarations":["nixos/modules/services/network-filesystems/nfsd.nix"],"default":null,"description":"Use a fixed port for <command>rpc.statd</command>. This is\nuseful if the NFS server is behind a firewall.\n","example":4000,"loc":["services","nfs","server","statdPort"],"readOnly":false,"type":"null or signed integer"},"services.nghttpx.backend-address-family":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":"auto","description":"Specify address family of backend connections. If \"auto\" is\ngiven, both IPv4 and IPv6 are considered. If \"IPv4\" is given,\nonly IPv4 address is considered. If \"IPv6\" is given, only IPv6\naddress is considered.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx--backend-address-family\n","loc":["services","nghttpx","backend-address-family"],"readOnly":false,"type":"one of \"auto\", \"IPv4\", \"IPv6\""},"services.nghttpx.backends":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"description":"A list of backend specifications.\n","example":[{"params":{"proto":"http/1.1","redirect-if-not-tls":true},"patterns":["/"],"server":{"host":"172.16.0.22","port":8443}}],"loc":["services","nghttpx","backends"],"readOnly":false,"type":"list of submodules"},"services.nghttpx.backends.*.params":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":null,"description":"Parameters to configure a backend.\n","example":{"proto":"h2","tls":true},"loc":["services","nghttpx","backends","*","params"],"readOnly":false,"type":"null or submodule"},"services.nghttpx.backends.*.params.affinity":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":"none","description":"If \"ip\" is given, client IP based session affinity is\nenabled. If \"none\" is given, session affinity is disabled.\n\nSession affinity is enabled (by nghttpx) per-backend\npattern. If at least one backend has a non-\"none\" affinity,\nthen session affinity is enabled for all backend servers\nsharing the same pattern.\n\nIt is advised to set affinity on all backends explicitly if\nsession affinity is desired. The session affinity may break if\none of the backend gets unreachable, or backend settings are\nreloaded or replaced by API.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more detail.\n","loc":["services","nghttpx","backends","*","params","affinity"],"readOnly":false,"type":"one of \"ip\", \"none\""},"services.nghttpx.backends.*.params.dns":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"Name resolution of a backends host name is done at start up,\nor configuration reload. If \"dns\" is true, name resolution\ntakes place dynamically.\n\nThis is useful if a backends address changes frequently. If\n\"dns\" is true, name resolution of a backend's host name at\nstart up, or configuration reload is skipped.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more detail.\n","loc":["services","nghttpx","backends","*","params","dns"],"readOnly":false,"type":"boolean"},"services.nghttpx.backends.*.params.fall":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":0,"description":"If nghttpx cannot connect to the backend N times in a row, the\nbackend is assumed to be offline and is excluded from load\nbalancing. If N is 0 the backend is never excluded from load\nbalancing.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more detail.\n","loc":["services","nghttpx","backends","*","params","fall"],"readOnly":false,"type":"signed integer"},"services.nghttpx.backends.*.params.proto":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":"http/1.1","description":"This option configures the protocol the backend server expects\nto use.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more detail.\n","loc":["services","nghttpx","backends","*","params","proto"],"readOnly":false,"type":"one of \"h2\", \"http/1.1\""},"services.nghttpx.backends.*.params.redirect-if-not-tls":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"If true, a backend match requires the frontend connection be\nTLS encrypted. If it is not, nghttpx responds to the request\nwith a 308 status code and https URI the client should use\ninstead in the Location header.\n\nThe port number in the redirect URI is 443 by default and can\nbe changed using 'services.nghttpx.redirect-https-port'\noption.\n\nIf at least one backend has \"redirect-if-not-tls\" set to true,\nthis feature is enabled for all backend servers with the same\npattern. It is advised to set \"redirect-if-no-tls\" parameter\nto all backends explicitly if this feature is desired.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more detail.\n","loc":["services","nghttpx","backends","*","params","redirect-if-not-tls"],"readOnly":false,"type":"boolean"},"services.nghttpx.backends.*.params.rise":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":0,"description":"If the backend is excluded from load balancing, nghttpx will\nperiodically attempt to make a connection to the backend. If\nthe connection is successful N times in a row the backend is\nre-included in load balancing. If N is 0 a backend is never\nreconsidered for load balancing once it falls.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more detail.\n","loc":["services","nghttpx","backends","*","params","rise"],"readOnly":false,"type":"signed integer"},"services.nghttpx.backends.*.params.sni":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":null,"description":"Override the TLS SNI field value. This value (in nghttpx)\ndefaults to the host value of the backend configuration.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more detail.\n","loc":["services","nghttpx","backends","*","params","sni"],"readOnly":false,"type":"null or string"},"services.nghttpx.backends.*.params.tls":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"This option determines whether nghttpx will negotiate its\nconnection with a backend server using TLS or not. The burden\nis on the backend server to provide the TLS certificate!\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more detail.\n","loc":["services","nghttpx","backends","*","params","tls"],"readOnly":false,"type":"boolean"},"services.nghttpx.backends.*.patterns":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":[],"description":"List of nghttpx backend patterns.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-b\nfor more information on the pattern syntax and nghttpxs behavior.\n","example":["*.host.net/v1/","host.org/v2/mypath","/somepath"],"loc":["services","nghttpx","backends","*","patterns"],"readOnly":false,"type":"list of strings"},"services.nghttpx.backends.*.server":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":{"host":"127.0.0.1","port":80},"description":"Backend server location specified as either a host:port pair\nor a unix domain docket.\n","example":{"host":"127.0.0.1","port":8888},"loc":["services","nghttpx","backends","*","server"],"readOnly":false,"type":"submodule or path"},"services.nghttpx.backlog":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":65536,"description":"Listen backlog size.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx--backlog\n","loc":["services","nghttpx","backlog"],"readOnly":false,"type":"signed integer"},"services.nghttpx.enable":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"Whether to enable nghttpx.","example":true,"loc":["services","nghttpx","enable"],"readOnly":false,"type":"boolean"},"services.nghttpx.extraConfig":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":"","description":"Extra configuration options to be appended to the generated\nconfiguration file.\n","loc":["services","nghttpx","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nghttpx.frontends":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"description":"A list of frontend listener specifications.\n","example":[{"params":{"tls":"no-tls"},"server":{"host":"*","port":80}}],"loc":["services","nghttpx","frontends"],"readOnly":false,"type":"list of submodules"},"services.nghttpx.frontends.*.params":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":null,"description":"Parameters to configure a backend.\n","example":{"tls":"tls"},"loc":["services","nghttpx","frontends","*","params"],"readOnly":false,"type":"null or submodule"},"services.nghttpx.frontends.*.params.api":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"Enable API access for this frontend. This enables you to\ndynamically modify nghttpx at run-time therefore this feature\nis disabled by default and should be turned on with care.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-f\nfor more detail.\n","loc":["services","nghttpx","frontends","*","params","api"],"readOnly":false,"type":"boolean"},"services.nghttpx.frontends.*.params.healthmon":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"Make this frontend a health monitor endpoint. Any request\nreceived on this frontend is responded to with a 200 OK.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-f\nfor more detail.\n","loc":["services","nghttpx","frontends","*","params","healthmon"],"readOnly":false,"type":"boolean"},"services.nghttpx.frontends.*.params.proxyproto":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"Accept PROXY protocol version 1 on frontend connection.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-f\nfor more detail.\n","loc":["services","nghttpx","frontends","*","params","proxyproto"],"readOnly":false,"type":"boolean"},"services.nghttpx.frontends.*.params.sni-fwd":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"When performing a match to select a backend server, SNI host\nname received from the client is used instead of the request\nhost. See --backend option about the pattern match.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-f\nfor more detail.\n","loc":["services","nghttpx","frontends","*","params","sni-fwd"],"readOnly":false,"type":"boolean"},"services.nghttpx.frontends.*.params.tls":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":"tls","description":"Enable or disable TLS. If true (enabled) the key and\ncertificate must be configured for nghttpx.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-f\nfor more detail.\n","loc":["services","nghttpx","frontends","*","params","tls"],"readOnly":false,"type":"one of \"tls\", \"no-tls\""},"services.nghttpx.frontends.*.server":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":{"host":"127.0.0.1","port":80},"description":"Frontend server interface binding specification as either a\nhost:port pair or a unix domain docket.\n\nNB: a host of \"*\" listens on all interfaces and includes IPv6\naddresses.\n","example":{"host":"127.0.0.1","port":8888},"loc":["services","nghttpx","frontends","*","server"],"readOnly":false,"type":"submodule or path"},"services.nghttpx.rlimit-nofile":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":0,"description":"Set maximum number of open files (RLIMIT_NOFILE) to &lt;N&gt;. If 0\nis given, nghttpx does not set the limit.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx--rlimit-nofile\n","loc":["services","nghttpx","rlimit-nofile"],"readOnly":false,"type":"signed integer"},"services.nghttpx.single-process":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"Run this program in a single process mode for debugging\npurpose. Without this option, nghttpx creates at least 2\nprocesses: master and worker processes. If this option is\nused, master and worker are unified into a single\nprocess. nghttpx still spawns additional process if neverbleed\nis used. In the single process mode, the signal handling\nfeature is disabled.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx--single-process\n","loc":["services","nghttpx","single-process"],"readOnly":false,"type":"boolean"},"services.nghttpx.single-thread":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":false,"description":"Run everything in one thread inside the worker process. This\nfeature is provided for better debugging experience, or for\nthe platforms which lack thread support. If threading is\ndisabled, this option is always enabled.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx--single-thread\n","loc":["services","nghttpx","single-thread"],"readOnly":false,"type":"boolean"},"services.nghttpx.tls":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":null,"description":"TLS certificate and key paths. Note that this does not enable\nTLS for a frontend listener, to do so, a frontend\nspecification must set <literal>params.tls</literal> to true.\n","example":{"crt":"/etc/ssl/certs/server.crt","key":"/etc/ssl/keys/server.key"},"loc":["services","nghttpx","tls"],"readOnly":false,"type":"null or submodule"},"services.nghttpx.tls.crt":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":"/etc/ssl/certs/server.crt","description":"Path to the TLS certificate file.\n","example":"/etc/ssl/certs/mycert.crt","loc":["services","nghttpx","tls","crt"],"readOnly":false,"type":"string"},"services.nghttpx.tls.key":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":"/etc/ssl/keys/server.key","description":"Path to the TLS key file.\n","example":"/etc/ssl/keys/mykeyfile.key","loc":["services","nghttpx","tls","key"],"readOnly":false,"type":"string"},"services.nghttpx.workers":{"declarations":["nixos/modules/services/networking/nghttpx/nghttpx-options.nix"],"default":1,"description":"Set the number of worker threads.\n\nPlease see https://nghttp2.org/documentation/nghttpx.1.html#cmdoption-nghttpx-n\n","loc":["services","nghttpx","workers"],"readOnly":false,"type":"signed integer"},"services.nginx.appendConfig":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"Configuration lines appended to the generated Nginx\nconfiguration file. Commonly used by different modules\nproviding http snippets. <option>appendConfig</option>\ncan be specified more than once and it's value will be\nconcatenated (contrary to <option>config</option> which\ncan be set only once).\n","loc":["services","nginx","appendConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nginx.appendHttpConfig":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"\n          Configuration lines to be appended to the generated http block.\n          This is mutually exclusive with using config and httpConfig for\n          specifying the whole http block verbatim.\n        ","loc":["services","nginx","appendHttpConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nginx.clientMaxBodySize":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"10m","description":"Set nginx global client_max_body_size.","loc":["services","nginx","clientMaxBodySize"],"readOnly":false,"type":"Concatenated string"},"services.nginx.commonHttpConfig":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"With nginx you must provide common http context definitions before\nthey are used, e.g. log_format, resolver, etc. inside of server\nor location contexts. Use this attribute to set these definitions\nat the appropriate location.\n","example":"resolver 127.0.0.1 valid=5s;\n\nlog_format myformat '$remote_addr - $remote_user [$time_local] '\n                    '\"$request\" $status $body_bytes_sent '\n                    '\"$http_referer\" \"$http_user_agent\"';\n","loc":["services","nginx","commonHttpConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nginx.config":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"\n          Verbatim nginx.conf configuration.\n          This is mutually exclusive with the structured configuration\n          via virtualHosts and the recommendedXyzSettings configuration\n          options. See appendConfig for appending to the generated http block.\n        ","loc":["services","nginx","config"],"readOnly":false,"type":"unspecified"},"services.nginx.enable":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Whether to enable Nginx Web Server.","example":true,"loc":["services","nginx","enable"],"readOnly":false,"type":"boolean"},"services.nginx.eventsConfig":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"Configuration lines to be set inside the events block.\n","loc":["services","nginx","eventsConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nginx.gitweb.enable":{"declarations":["nixos/modules/services/web-servers/nginx/gitweb.nix"],"default":false,"description":"If true, enable gitweb in nginx. Access it at http://yourserver/gitweb\n","loc":["services","nginx","gitweb","enable"],"readOnly":false,"type":"boolean"},"services.nginx.group":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"nginx","description":"Group account under which nginx runs.","loc":["services","nginx","group"],"readOnly":false,"type":"string"},"services.nginx.httpConfig":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"\n          Configuration lines to be set inside the http block.\n          This is mutually exclusive with the structured configuration\n          via virtualHosts and the recommendedXyzSettings configuration\n          options. See appendHttpConfig for appending to the generated http block.\n        ","loc":["services","nginx","httpConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nginx.package":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"pkgs.nginxStable","description":"\n          Nginx package to use. This defaults to the stable version. Note\n          that the nginx team recommends to use the mainline version which\n          available in nixpkgs as <literal>nginxMainline</literal>.\n        ","loc":["services","nginx","package"],"readOnly":false,"type":"package"},"services.nginx.proxyResolveWhileRunning":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Resolves domains of proxyPass targets at runtime\nand not only at start, you have to set\nservices.nginx.resolver, too.\n","loc":["services","nginx","proxyResolveWhileRunning"],"readOnly":false,"type":"boolean"},"services.nginx.recommendedGzipSettings":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"\n          Enable recommended gzip settings.\n        ","loc":["services","nginx","recommendedGzipSettings"],"readOnly":false,"type":"boolean"},"services.nginx.recommendedOptimisation":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"\n          Enable recommended optimisation settings.\n        ","loc":["services","nginx","recommendedOptimisation"],"readOnly":false,"type":"boolean"},"services.nginx.recommendedProxySettings":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"\n          Enable recommended proxy settings.\n        ","loc":["services","nginx","recommendedProxySettings"],"readOnly":false,"type":"boolean"},"services.nginx.recommendedTlsSettings":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"\n          Enable recommended TLS settings.\n        ","loc":["services","nginx","recommendedTlsSettings"],"readOnly":false,"type":"boolean"},"services.nginx.resolver":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":{},"description":"Configures name servers used to resolve names of upstream servers into addresses\n","loc":["services","nginx","resolver"],"readOnly":false,"type":"submodule"},"services.nginx.resolver.addresses":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":[],"description":"List of resolvers to use","example":{"_type":"literalExample","text":"[ \"[::1]\" \"127.0.0.1:5353\" ]"},"loc":["services","nginx","resolver","addresses"],"readOnly":false,"type":"list of strings"},"services.nginx.resolver.valid":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"By default, nginx caches answers using the TTL value of a response.\nAn optional valid parameter allows overriding it\n","example":"30s","loc":["services","nginx","resolver","valid"],"readOnly":false,"type":"string"},"services.nginx.serverTokens":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Show nginx version in headers and error pages.","loc":["services","nginx","serverTokens"],"readOnly":false,"type":"boolean"},"services.nginx.sslCiphers":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"EECDH+aRSA+AESGCM:EDH+aRSA:EECDH+aRSA:+AES256:+AES128:+SHA1:!CAMELLIA:!SEED:!3DES:!DES:!RC4:!eNULL","description":"Ciphers to choose from when negotiating tls handshakes.","loc":["services","nginx","sslCiphers"],"readOnly":false,"type":"string"},"services.nginx.sslDhparam":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Path to DH parameters file.","example":"/path/to/dhparams.pem","loc":["services","nginx","sslDhparam"],"readOnly":false,"type":"null or path"},"services.nginx.sslProtocols":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"TLSv1.2","description":"Allowed TLS protocol versions.","example":"TLSv1 TLSv1.1 TLSv1.2","loc":["services","nginx","sslProtocols"],"readOnly":false,"type":"string"},"services.nginx.stateDir":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"/var/spool/nginx","description":"\n          Directory holding all state for nginx to run.\n        ","loc":["services","nginx","stateDir"],"readOnly":false,"type":"unspecified"},"services.nginx.statusPage":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"\n          Enable status page reachable from localhost on http://127.0.0.1/nginx_status.\n        ","loc":["services","nginx","statusPage"],"readOnly":false,"type":"boolean"},"services.nginx.upstreams":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":{},"description":"Defines a group of servers to use as proxy target.\n","loc":["services","nginx","upstreams"],"readOnly":false,"type":"attribute set of submodules"},"services.nginx.upstreams.<name>.extraConfig":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"These lines go to the end of the upstream verbatim.\n","loc":["services","nginx","upstreams","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nginx.upstreams.<name>.servers":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":{},"description":"Defines the address and other parameters of the upstream servers.\n","loc":["services","nginx","upstreams","<name>","servers"],"readOnly":false,"type":"attribute set of submodules"},"services.nginx.upstreams.<name>.servers.<name>.backup":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Marks the server as a backup server. It will be passed\nrequests when the primary servers are unavailable.\n","loc":["services","nginx","upstreams","<name>","servers","<name>","backup"],"readOnly":false,"type":"boolean"},"services.nginx.user":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"nginx","description":"User account under which nginx runs.","loc":["services","nginx","user"],"readOnly":false,"type":"string"},"services.nginx.virtualHosts":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":{"localhost":{}},"description":"Declarative vhost config","example":{"_type":"literalExample","text":"{\n  \"hydra.example.com\" = {\n    forceSSL = true;\n    enableACME = true;\n    locations.\"/\" = {\n      proxyPass = \"http://localhost:3000\";\n    };\n  };\n};\n"},"loc":["services","nginx","virtualHosts"],"readOnly":false,"type":"attribute set of submodules"},"services.nginx.virtualHosts.<name>.acmeFallbackHost":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Host which to proxy requests to if acme challenge is not found. Useful\nif you want multiple hosts to be able to verify the same domain name.\n","loc":["services","nginx","virtualHosts","<name>","acmeFallbackHost"],"readOnly":false,"type":"null or string"},"services.nginx.virtualHosts.<name>.acmeRoot":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"/var/lib/acme/acme-challenge","description":"Directory to store certificates and keys managed by the ACME service.","loc":["services","nginx","virtualHosts","<name>","acmeRoot"],"readOnly":false,"type":"string"},"services.nginx.virtualHosts.<name>.addSSL":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Whether to enable HTTPS in addition to plain HTTP. This will set defaults for\n<literal>listen</literal> to listen on all interfaces on the respective default\nports (80, 443).\n","loc":["services","nginx","virtualHosts","<name>","addSSL"],"readOnly":false,"type":"boolean"},"services.nginx.virtualHosts.<name>.basicAuth":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":{},"description":"Basic Auth protection for a vhost.\n\nWARNING: This is implemented to store the password in plain text in the\nnix store.\n","example":{"_type":"literalExample","text":"{\n  user = \"password\";\n};\n"},"loc":["services","nginx","virtualHosts","<name>","basicAuth"],"readOnly":false,"type":"attribute set of strings"},"services.nginx.virtualHosts.<name>.basicAuthFile":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Basic Auth password file for a vhost.\n","loc":["services","nginx","virtualHosts","<name>","basicAuthFile"],"readOnly":false,"type":"null or path"},"services.nginx.virtualHosts.<name>.default":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Makes this vhost the default.\n","loc":["services","nginx","virtualHosts","<name>","default"],"readOnly":false,"type":"boolean"},"services.nginx.virtualHosts.<name>.enableACME":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Whether to ask Let's Encrypt to sign a certificate for this vhost.\nAlternately, you can use an existing certificate through <option>useACMEHost</option>.\n","loc":["services","nginx","virtualHosts","<name>","enableACME"],"readOnly":false,"type":"boolean"},"services.nginx.virtualHosts.<name>.extraConfig":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"These lines go to the end of the vhost verbatim.\n","loc":["services","nginx","virtualHosts","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nginx.virtualHosts.<name>.forceSSL":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Whether to add a separate nginx server block that permanently redirects (301)\nall plain HTTP traffic to HTTPS. This will set defaults for\n<literal>listen</literal> to listen on all interfaces on the respective default\nports (80, 443), where the non-SSL listens are used for the redirect vhosts.\n","loc":["services","nginx","virtualHosts","<name>","forceSSL"],"readOnly":false,"type":"boolean"},"services.nginx.virtualHosts.<name>.globalRedirect":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"If set, all requests for this host are redirected permanently to\nthe given hostname.\n","example":"newserver.example.org","loc":["services","nginx","virtualHosts","<name>","globalRedirect"],"readOnly":false,"type":"null or string"},"services.nginx.virtualHosts.<name>.http2":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":true,"description":"Whether to enable HTTP 2.\nNote that (as of writing) due to nginx's implementation, to disable\nHTTP 2 you have to disable it on all vhosts that use a given\nIP address / port.\nIf there is one server block configured to enable http2,then it is\nenabled for all server blocks on this IP.\nSee https://stackoverflow.com/a/39466948/263061.\n","loc":["services","nginx","virtualHosts","<name>","http2"],"readOnly":false,"type":"boolean"},"services.nginx.virtualHosts.<name>.listen":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":[],"description":"Listen addresses and ports for this virtual host.\nIPv6 addresses must be enclosed in square brackets.\nNote: this option overrides <literal>addSSL</literal>\nand <literal>onlySSL</literal>.\n","example":[{"addr":"195.154.1.1","port":443,"ssl":true},{"addr":"192.154.1.1","port":80}],"loc":["services","nginx","virtualHosts","<name>","listen"],"readOnly":false,"type":"list of submodules"},"services.nginx.virtualHosts.<name>.listen.*.addr":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"description":"IP address.","loc":["services","nginx","virtualHosts","<name>","listen","*","addr"],"readOnly":false,"type":"string"},"services.nginx.virtualHosts.<name>.listen.*.port":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":80,"description":"Port number.","loc":["services","nginx","virtualHosts","<name>","listen","*","port"],"readOnly":false,"type":"signed integer"},"services.nginx.virtualHosts.<name>.listen.*.ssl":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Enable SSL.","loc":["services","nginx","virtualHosts","<name>","listen","*","ssl"],"readOnly":false,"type":"boolean"},"services.nginx.virtualHosts.<name>.locations":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":{},"description":"Declarative location config","example":{"_type":"literalExample","text":"{\n  \"/\" = {\n    proxyPass = \"http://localhost:3000\";\n  };\n};\n"},"loc":["services","nginx","virtualHosts","<name>","locations"],"readOnly":false,"type":"attribute set of submodules"},"services.nginx.virtualHosts.<name>.locations.<name>.alias":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Alias directory for requests.\n","example":"/your/alias/directory","loc":["services","nginx","virtualHosts","<name>","locations","<name>","alias"],"readOnly":false,"type":"null or path"},"services.nginx.virtualHosts.<name>.locations.<name>.extraConfig":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":"","description":"These lines go to the end of the location verbatim.\n","loc":["services","nginx","virtualHosts","<name>","locations","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nginx.virtualHosts.<name>.locations.<name>.index":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Adds index directive.\n","example":"index.php index.html","loc":["services","nginx","virtualHosts","<name>","locations","<name>","index"],"readOnly":false,"type":"null or string"},"services.nginx.virtualHosts.<name>.locations.<name>.priority":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":1000,"description":"Order of this location block in relation to the others in the vhost.\nThe semantics are the same as with `lib.mkOrder`. Smaller values have\na greater priority.\n","loc":["services","nginx","virtualHosts","<name>","locations","<name>","priority"],"readOnly":false,"type":"signed integer"},"services.nginx.virtualHosts.<name>.locations.<name>.proxyPass":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Adds proxy_pass directive and sets recommended proxy headers if\nrecommendedProxySettings is enabled.\n","example":"http://www.example.org/","loc":["services","nginx","virtualHosts","<name>","locations","<name>","proxyPass"],"readOnly":false,"type":"null or string"},"services.nginx.virtualHosts.<name>.locations.<name>.proxyWebsockets":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Whether to supporty proxying websocket connections with HTTP/1.1.\n","example":true,"loc":["services","nginx","virtualHosts","<name>","locations","<name>","proxyWebsockets"],"readOnly":false,"type":"boolean"},"services.nginx.virtualHosts.<name>.locations.<name>.root":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Root directory for requests.\n","example":"/your/root/directory","loc":["services","nginx","virtualHosts","<name>","locations","<name>","root"],"readOnly":false,"type":"null or path"},"services.nginx.virtualHosts.<name>.locations.<name>.tryFiles":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Adds try_files directive.\n","example":"$uri =404","loc":["services","nginx","virtualHosts","<name>","locations","<name>","tryFiles"],"readOnly":false,"type":"null or string"},"services.nginx.virtualHosts.<name>.onlySSL":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":false,"description":"Whether to enable HTTPS and reject plain HTTP connections. This will set\ndefaults for <literal>listen</literal> to listen on all interfaces on port 443.\n","loc":["services","nginx","virtualHosts","<name>","onlySSL"],"readOnly":false,"type":"boolean"},"services.nginx.virtualHosts.<name>.root":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"The path of the web root directory.\n","example":"/data/webserver/docs","loc":["services","nginx","virtualHosts","<name>","root"],"readOnly":false,"type":"null or path"},"services.nginx.virtualHosts.<name>.serverAliases":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":[],"description":"Additional names of virtual hosts served by this virtual host configuration.\n","example":["www.example.org","example.org"],"loc":["services","nginx","virtualHosts","<name>","serverAliases"],"readOnly":false,"type":"list of strings"},"services.nginx.virtualHosts.<name>.serverName":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Name of this virtual host. Defaults to attribute name in virtualHosts.\n","example":"example.org","loc":["services","nginx","virtualHosts","<name>","serverName"],"readOnly":false,"type":"null or string"},"services.nginx.virtualHosts.<name>.sslCertificate":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"description":"Path to server SSL certificate.","example":"/var/host.cert","loc":["services","nginx","virtualHosts","<name>","sslCertificate"],"readOnly":false,"type":"path"},"services.nginx.virtualHosts.<name>.sslCertificateKey":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"description":"Path to server SSL certificate key.","example":"/var/host.key","loc":["services","nginx","virtualHosts","<name>","sslCertificateKey"],"readOnly":false,"type":"path"},"services.nginx.virtualHosts.<name>.sslTrustedCertificate":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"Path to root SSL certificate for stapling and client certificates.","example":"/var/root.cert","loc":["services","nginx","virtualHosts","<name>","sslTrustedCertificate"],"readOnly":false,"type":"null or path"},"services.nginx.virtualHosts.<name>.useACMEHost":{"declarations":["nixos/modules/services/web-servers/nginx/default.nix"],"default":null,"description":"A host of an existing Let's Encrypt certificate to use.\nThis is useful if you have many subdomains and want to avoid hitting the\n<link xlink:href=\"https://letsencrypt.org/docs/rate-limits/\">rate limit</link>.\nAlternately, you can generate a certificate through <option>enableACME</option>.\n<emphasis>Note that this option does not create any certificates, nor it does add subdomains to existing ones – you will need to create them manually using  <xref linkend=\"opt-security.acme.certs\"/>.</emphasis>\n","loc":["services","nginx","virtualHosts","<name>","useACMEHost"],"readOnly":false,"type":"null or string"},"services.ngircd.config":{"declarations":["nixos/modules/services/networking/ngircd.nix"],"description":"The ngircd configuration (see ngircd.conf(5)).","loc":["services","ngircd","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.ngircd.enable":{"declarations":["nixos/modules/services/networking/ngircd.nix"],"default":false,"description":"Whether to enable the ngircd IRC server.","example":true,"loc":["services","ngircd","enable"],"readOnly":false,"type":"boolean"},"services.ngircd.package":{"declarations":["nixos/modules/services/networking/ngircd.nix"],"default":"pkgs.ngircd","description":"The ngircd package.","loc":["services","ngircd","package"],"readOnly":false,"type":"package"},"services.nix-serve.bindAddress":{"declarations":["nixos/modules/services/networking/nix-serve.nix"],"default":"0.0.0.0","description":"IP address where nix-serve will bind its listening socket.\n","loc":["services","nix-serve","bindAddress"],"readOnly":false,"type":"Concatenated string"},"services.nix-serve.enable":{"declarations":["nixos/modules/services/networking/nix-serve.nix"],"default":false,"description":"Whether to enable nix-serve, the standalone Nix binary cache server.","example":true,"loc":["services","nix-serve","enable"],"readOnly":false,"type":"boolean"},"services.nix-serve.extraParams":{"declarations":["nixos/modules/services/networking/nix-serve.nix"],"default":"","description":"Extra command line parameters for nix-serve.\n","loc":["services","nix-serve","extraParams"],"readOnly":false,"type":"Concatenated string"},"services.nix-serve.port":{"declarations":["nixos/modules/services/networking/nix-serve.nix"],"default":5000,"description":"Port number where nix-serve will listen on.\n","loc":["services","nix-serve","port"],"readOnly":false,"type":"signed integer"},"services.nix-serve.secretKeyFile":{"declarations":["nixos/modules/services/networking/nix-serve.nix"],"default":null,"description":"The path to the file used for signing derivation data.\n","loc":["services","nix-serve","secretKeyFile"],"readOnly":false,"type":"null or string"},"services.nixops-dns.dnsmasq":{"declarations":["nixos/modules/services/networking/nixops-dns.nix"],"default":true,"description":"Enable dnsmasq forwarding to nixops-dns. This allows to use\nnixops-dns for `services.nixops-dns.domain` resolution\nwhile forwarding the rest of the queries to original resolvers.\n","loc":["services","nixops-dns","dnsmasq"],"readOnly":false,"type":"boolean"},"services.nixops-dns.domain":{"declarations":["nixos/modules/services/networking/nixops-dns.nix"],"default":"ops","description":"Fake domain name to resolve to NixOps virtual machines.\n\nFor example \"ops\" will resolve \"vm.ops\".\n","example":"ops","loc":["services","nixops-dns","domain"],"readOnly":false,"type":"string"},"services.nixops-dns.enable":{"declarations":["nixos/modules/services/networking/nixops-dns.nix"],"default":false,"description":"Whether to enable the nixops-dns resolution\nof NixOps virtual machines via dnsmasq and fake domain name.\n","loc":["services","nixops-dns","enable"],"readOnly":false,"type":"boolean"},"services.nixops-dns.user":{"declarations":["nixos/modules/services/networking/nixops-dns.nix"],"description":"The user the nixops-dns daemon should run as.\nThis should be the user, which is also used for nixops and\nhave the .nixops directory in its home.\n","loc":["services","nixops-dns","user"],"readOnly":false,"type":"string"},"services.nixosManual.browser":{"declarations":["nixos/modules/services/misc/nixos-manual.nix"],"default":"${pkgs.w3m-nographics}/bin/w3m","description":"Browser used to show the manual.\n","loc":["services","nixosManual","browser"],"readOnly":false,"type":"path"},"services.nixosManual.showManual":{"declarations":["nixos/modules/services/misc/nixos-manual.nix"],"default":false,"description":"Whether to show the NixOS manual on one of the virtual\nconsoles.\n","loc":["services","nixosManual","showManual"],"readOnly":false,"type":"boolean"},"services.nixosManual.ttyNumber":{"declarations":["nixos/modules/services/misc/nixos-manual.nix"],"default":8,"description":"Virtual console on which to show the manual.\n","loc":["services","nixosManual","ttyNumber"],"readOnly":false,"type":"signed integer"},"services.nntp-proxy.enable":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":false,"description":"Whether to enable NNTP-Proxy.","example":true,"loc":["services","nntp-proxy","enable"],"readOnly":false,"type":"boolean"},"services.nntp-proxy.listenAddress":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":"127.0.0.1","description":"Proxy listen address (IPv6 literal addresses need to be enclosed in \"[\" and \"]\" characters)\n","example":"[::]","loc":["services","nntp-proxy","listenAddress"],"readOnly":false,"type":"string"},"services.nntp-proxy.port":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":5555,"description":"Proxy listen port\n","loc":["services","nntp-proxy","port"],"readOnly":false,"type":"signed integer"},"services.nntp-proxy.prohibitPosting":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":true,"description":"Whether to prohibit posting to the upstream server\n","loc":["services","nntp-proxy","prohibitPosting"],"readOnly":false,"type":"boolean"},"services.nntp-proxy.sslCert":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":"cert.pem","description":"Proxy ssl certificate path\n","example":"/path/to/your/cert.file","loc":["services","nntp-proxy","sslCert"],"readOnly":false,"type":"string"},"services.nntp-proxy.sslKey":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":"key.pem","description":"Proxy ssl key path\n","example":"/path/to/your/key.file","loc":["services","nntp-proxy","sslKey"],"readOnly":false,"type":"string"},"services.nntp-proxy.upstreamMaxConnections":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":20,"description":"Upstream server maximum allowed concurrent connections\n","loc":["services","nntp-proxy","upstreamMaxConnections"],"readOnly":false,"type":"signed integer"},"services.nntp-proxy.upstreamPassword":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":"","description":"Upstream server password\n","loc":["services","nntp-proxy","upstreamPassword"],"readOnly":false,"type":"string"},"services.nntp-proxy.upstreamPort":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":563,"description":"Upstream server port\n","loc":["services","nntp-proxy","upstreamPort"],"readOnly":false,"type":"signed integer"},"services.nntp-proxy.upstreamServer":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":"","description":"Upstream server address\n","example":"ssl-eu.astraweb.com","loc":["services","nntp-proxy","upstreamServer"],"readOnly":false,"type":"string"},"services.nntp-proxy.upstreamUser":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":"","description":"Upstream server username\n","loc":["services","nntp-proxy","upstreamUser"],"readOnly":false,"type":"string"},"services.nntp-proxy.users":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":{},"description":"NNTP-Proxy user configuration\n","example":{"_type":"literalExample","text":"\"user1\" = {\n  passwordHash = \"$6$1l0t5Kn2Dk$appzivc./9l/kjq57eg5UCsBKlcfyCr0zNWYNerKoPsI1d7eAwiT0SVsOVx/CTgaBNT/u4fi2vN.iGlPfv1ek0\";\n  maxConnections = 5;\n};\n\"anotheruser\" = {\n  passwordHash = \"$6$6lwEsWB.TmsS$W7m1riUx4QrA8pKJz8hvff0dnF1NwtZXgdjmGqA1Dx2MDPj07tI9GNcb0SWlMglE.2/hBgynDdAd/XqqtRqVQ0\";\n  maxConnections = 7;\n};\n"},"loc":["services","nntp-proxy","users"],"readOnly":false,"type":"attribute set of submodules"},"services.nntp-proxy.users.<name>.maxConnections":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":1,"description":"Maximum number of concurrent connections to the proxy for this user\n","loc":["services","nntp-proxy","users","<name>","maxConnections"],"readOnly":false,"type":"signed integer"},"services.nntp-proxy.users.<name>.passwordHash":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":null,"description":"SHA-512 password hash (can be generated by\n<code>mkpasswd -m sha-512 &lt;password&gt;</code>)\n","example":"$6$GtzE7FrpE$wwuVgFYU.TZH4Rz.Snjxk9XGua89IeVwPQ/fEUD8eujr40q5Y021yhn0aNcsQ2Ifw.BLclyzvzgegopgKcneL0","loc":["services","nntp-proxy","users","<name>","passwordHash"],"readOnly":false,"type":"string"},"services.nntp-proxy.users.<name>.username":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":null,"description":"Username\n","loc":["services","nntp-proxy","users","<name>","username"],"readOnly":false,"type":"string"},"services.nntp-proxy.verbosity":{"declarations":["nixos/modules/services/networking/nntp-proxy.nix"],"default":"info","description":"Verbosity level\n","example":"error","loc":["services","nntp-proxy","verbosity"],"readOnly":false,"type":"one of \"error\", \"warning\", \"notice\", \"info\", \"debug\""},"services.novacomd.enable":{"declarations":["nixos/modules/services/misc/novacomd.nix"],"default":false,"description":"Whether to enable Novacom service for connecting to WebOS devices.","example":true,"loc":["services","novacomd","enable"],"readOnly":false,"type":"boolean"},"services.nscd.config":{"declarations":["nixos/modules/services/system/nscd.nix"],"default":"server-user             nscd\nthreads                 1\nparanoia                no\ndebug-level             0\n\nenable-cache            passwd          yes\npositive-time-to-live   passwd          600\nnegative-time-to-live   passwd          20\nsuggested-size          passwd          211\ncheck-files             passwd          yes\npersistent              passwd          no\nshared                  passwd          yes\n\nenable-cache            group           yes\npositive-time-to-live   group           3600\nnegative-time-to-live   group           60\nsuggested-size          group           211\ncheck-files             group           yes\npersistent              group           no\nshared                  group           yes\n\nenable-cache            hosts           yes\npositive-time-to-live   hosts           600\nnegative-time-to-live   hosts           5\nsuggested-size          hosts           211\ncheck-files             hosts           yes\npersistent              hosts           no\nshared                  hosts           yes\n","description":"Configuration to use for Name Service Cache Daemon.","loc":["services","nscd","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.nscd.enable":{"declarations":["nixos/modules/services/system/nscd.nix"],"default":true,"description":"Whether to enable the Name Service Cache Daemon.","loc":["services","nscd","enable"],"readOnly":false,"type":"boolean"},"services.nsd.bind8Stats":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Whether to enable BIND8 like statistics.","example":true,"loc":["services","nsd","bind8Stats"],"readOnly":false,"type":"boolean"},"services.nsd.dnssecInterval":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"1h","description":"How often to check whether dnssec key rollover is required\n","loc":["services","nsd","dnssecInterval"],"readOnly":false,"type":"string"},"services.nsd.enable":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Whether to enable NSD authoritative DNS server.","example":true,"loc":["services","nsd","enable"],"readOnly":false,"type":"boolean"},"services.nsd.extraConfig":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"","description":"Extra nsd config.\n","loc":["services","nsd","extraConfig"],"readOnly":false,"type":"string"},"services.nsd.hideVersion":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":true,"description":"Whether NSD should answer VERSION.BIND and VERSION.SERVER CHAOS class queries.\n","loc":["services","nsd","hideVersion"],"readOnly":false,"type":"boolean"},"services.nsd.identity":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"unidentified server","description":"Identify the server (CH TXT ID.SERVER entry).\n","loc":["services","nsd","identity"],"readOnly":false,"type":"string"},"services.nsd.interfaces":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":["127.0.0.0","::1"],"description":"What addresses the server should listen to.\n","loc":["services","nsd","interfaces"],"readOnly":false,"type":"list of strings"},"services.nsd.ipFreebind":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Whether to bind to nonlocal addresses and interfaces that are down.\nSimilar to ip-transparent.\n","loc":["services","nsd","ipFreebind"],"readOnly":false,"type":"boolean"},"services.nsd.ipTransparent":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Allow binding to non local addresses.\n","loc":["services","nsd","ipTransparent"],"readOnly":false,"type":"boolean"},"services.nsd.ipv4":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":true,"description":"Whether to listen on IPv4 connections.\n","loc":["services","nsd","ipv4"],"readOnly":false,"type":"boolean"},"services.nsd.ipv4EDNSSize":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":4096,"description":"Preferred EDNS buffer size for IPv4.\n","loc":["services","nsd","ipv4EDNSSize"],"readOnly":false,"type":"signed integer"},"services.nsd.ipv6":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":true,"description":"Whether to listen on IPv6 connections.\n","loc":["services","nsd","ipv6"],"readOnly":false,"type":"boolean"},"services.nsd.ipv6EDNSSize":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":4096,"description":"Preferred EDNS buffer size for IPv6.\n","loc":["services","nsd","ipv6EDNSSize"],"readOnly":false,"type":"signed integer"},"services.nsd.keys":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":{},"description":"Define your TSIG keys here.\n","example":{"_type":"literalExample","text":"{ \"tsig.example.org\" = {\n    algorithm = \"hmac-md5\";\n    keyFile = \"/path/to/my/key\";\n  };\n}\n"},"loc":["services","nsd","keys"],"readOnly":false,"type":"attribute set of submodules"},"services.nsd.keys.<name>.algorithm":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"hmac-sha256","description":"Authentication algorithm for this key.\n","loc":["services","nsd","keys","<name>","algorithm"],"readOnly":false,"type":"string"},"services.nsd.keys.<name>.keyFile":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"Path to the file which contains the actual base64 encoded\nkey. The key will be copied into \"/var/lib/nsd/private\" before\nNSD starts. The copied file is only accessibly by the NSD\nuser.\n","loc":["services","nsd","keys","<name>","keyFile"],"readOnly":false,"type":"path"},"services.nsd.logTimeAscii":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":true,"description":"Log time in ascii, if false then in unix epoch seconds.\n","loc":["services","nsd","logTimeAscii"],"readOnly":false,"type":"boolean"},"services.nsd.nsid":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"NSID identity (hex string, or \"ascii_somestring\").\n","loc":["services","nsd","nsid"],"readOnly":false,"type":"null or string"},"services.nsd.port":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":53,"description":"Port the service should bind do.\n","loc":["services","nsd","port"],"readOnly":false,"type":"signed integer"},"services.nsd.ratelimit.enable":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Whether to enable ratelimit capabilities.","example":true,"loc":["services","nsd","ratelimit","enable"],"readOnly":false,"type":"boolean"},"services.nsd.ratelimit.ipv4PrefixLength":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"IPv4 prefix length. Addresses are grouped by netblock.\n","loc":["services","nsd","ratelimit","ipv4PrefixLength"],"readOnly":false,"type":"null or signed integer"},"services.nsd.ratelimit.ipv6PrefixLength":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"IPv6 prefix length. Addresses are grouped by netblock.\n","loc":["services","nsd","ratelimit","ipv6PrefixLength"],"readOnly":false,"type":"null or signed integer"},"services.nsd.ratelimit.ratelimit":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":200,"description":"Max qps allowed from any query source.\n0 means unlimited. With an verbosity of 2 blocked and\nunblocked subnets will be logged.\n","loc":["services","nsd","ratelimit","ratelimit"],"readOnly":false,"type":"signed integer"},"services.nsd.ratelimit.size":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":1000000,"description":"Size of the hashtable. More buckets use more memory but lower\nthe chance of hash hash collisions.\n","loc":["services","nsd","ratelimit","size"],"readOnly":false,"type":"signed integer"},"services.nsd.ratelimit.slip":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"Number of packets that get discarded before replying a SLIP response.\n0 disables SLIP responses. 1 will make every response a SLIP response.\n","loc":["services","nsd","ratelimit","slip"],"readOnly":false,"type":"null or signed integer"},"services.nsd.ratelimit.whitelistRatelimit":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":2000,"description":"Max qps allowed from whitelisted sources.\n0 means unlimited. Set the rrl-whitelist option for specific\nqueries to apply this limit instead of the default to them.\n","loc":["services","nsd","ratelimit","whitelistRatelimit"],"readOnly":false,"type":"signed integer"},"services.nsd.remoteControl.controlCertFile":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"/etc/nsd/nsd_control.pem","description":"Path to the client certificate signed with the server certificate.\nThis file is used by nsd-control and generated by nsd-control-setup.\n","loc":["services","nsd","remoteControl","controlCertFile"],"readOnly":false,"type":"path"},"services.nsd.remoteControl.controlKeyFile":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"/etc/nsd/nsd_control.key","description":"Path to the client private key, which is used by nsd-control\nbut not by the server. This file is generated by nsd-control-setup.\n","loc":["services","nsd","remoteControl","controlKeyFile"],"readOnly":false,"type":"path"},"services.nsd.remoteControl.enable":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Whether to enable remote control via nsd-control.","example":true,"loc":["services","nsd","remoteControl","enable"],"readOnly":false,"type":"boolean"},"services.nsd.remoteControl.interfaces":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":["127.0.0.1","::1"],"description":"Which interfaces NSD should bind to for remote control.\n","loc":["services","nsd","remoteControl","interfaces"],"readOnly":false,"type":"list of strings"},"services.nsd.remoteControl.port":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":8952,"description":"Port number for remote control operations (uses TLS over TCP).\n","loc":["services","nsd","remoteControl","port"],"readOnly":false,"type":"signed integer"},"services.nsd.remoteControl.serverCertFile":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"/etc/nsd/nsd_server.pem","description":"Path to the server self signed certificate, which is used by the server\nbut and by nsd-control. This file is generated by nsd-control-setup.\n","loc":["services","nsd","remoteControl","serverCertFile"],"readOnly":false,"type":"path"},"services.nsd.remoteControl.serverKeyFile":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"/etc/nsd/nsd_server.key","description":"Path to the server private key, which is used by the server\nbut not by nsd-control. This file is generated by nsd-control-setup.\n","loc":["services","nsd","remoteControl","serverKeyFile"],"readOnly":false,"type":"path"},"services.nsd.reuseport":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":true,"description":"Whether to enable SO_REUSEPORT on all used sockets. This lets multiple\nprocesses bind to the same port. This speeds up operation especially\nif the server count is greater than one and makes fast restarts less\nprone to fail\n","loc":["services","nsd","reuseport"],"readOnly":false,"type":"boolean"},"services.nsd.rootServer":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Whether this server will be a root server (a DNS root server, you\nusually don't want that).\n","loc":["services","nsd","rootServer"],"readOnly":false,"type":"boolean"},"services.nsd.roundRobin":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Whether to enable round robin rotation of records.","example":true,"loc":["services","nsd","roundRobin"],"readOnly":false,"type":"boolean"},"services.nsd.serverCount":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":1,"description":"Number of NSD servers to fork. Put the number of CPUs to use here.\n","loc":["services","nsd","serverCount"],"readOnly":false,"type":"signed integer"},"services.nsd.statistics":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"Statistics are produced every number of seconds. Prints to log.\nIf null no statistics are logged.\n","loc":["services","nsd","statistics"],"readOnly":false,"type":"null or signed integer"},"services.nsd.tcpCount":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":100,"description":"Maximum number of concurrent TCP connections per server.\n","loc":["services","nsd","tcpCount"],"readOnly":false,"type":"signed integer"},"services.nsd.tcpQueryCount":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":0,"description":"Maximum number of queries served on a single TCP connection.\n0 means no maximum.\n","loc":["services","nsd","tcpQueryCount"],"readOnly":false,"type":"signed integer"},"services.nsd.tcpTimeout":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":120,"description":"TCP timeout in seconds.\n","loc":["services","nsd","tcpTimeout"],"readOnly":false,"type":"signed integer"},"services.nsd.verbosity":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":0,"description":"Verbosity level.\n","loc":["services","nsd","verbosity"],"readOnly":false,"type":"signed integer"},"services.nsd.version":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"The version string replied for CH TXT version.server and version.bind\nqueries. Will use the compiled package version on null.\nSee hideVersion for enabling/disabling this responses.\n","loc":["services","nsd","version"],"readOnly":false,"type":"null or string"},"services.nsd.xfrdReloadTimeout":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":1,"description":"Number of seconds between reloads triggered by xfrd.\n","loc":["services","nsd","xfrdReloadTimeout"],"readOnly":false,"type":"signed integer"},"services.nsd.zonefilesCheck":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":true,"description":"Whether to check mtime of all zone files on start and sighup.\n","loc":["services","nsd","zonefilesCheck"],"readOnly":false,"type":"boolean"},"services.nsd.zones":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":{},"description":"Define your zones here. Zones can cascade other zones and therefore\ninherit settings from parent zones. Look at the definition of\nchildren to learn about inheritance and child zones.\nThe given example will define 3 zones (example.(com|org|net).). Both\nexample.com. and example.org. inherit their configuration from\nserverGroup1.\n","example":{"_type":"literalExample","text":"{ \"serverGroup1\" = {\n    provideXFR = [ \"10.1.2.3 NOKEY\" ];\n    children = {\n      \"example.com.\" = {\n        data = ''\n          $ORIGIN example.com.\n          $TTL    86400\n          @ IN SOA a.ns.example.com. admin.example.com. (\n          ...\n        '';\n      };\n      \"example.org.\" = {\n        data = ''\n          $ORIGIN example.org.\n          $TTL    86400\n          @ IN SOA a.ns.example.com. admin.example.com. (\n          ...\n        '';\n      };\n    };\n  };\n\n  \"example.net.\" = {\n    provideXFR = [ \"10.3.2.1 NOKEY\" ];\n    data = ''\n      ...\n    '';\n  };\n}\n"},"loc":["services","nsd","zones"],"readOnly":false,"type":"attribute set of submodules"},"services.nsd.zones.<name>.allowAXFRFallback":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":true,"description":"If NSD as secondary server should be allowed to AXFR if the primary\nserver does not allow IXFR.\n","loc":["services","nsd","zones","<name>","allowAXFRFallback"],"readOnly":false,"type":"boolean"},"services.nsd.zones.<name>.allowNotify":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":[],"description":"Listed primary servers are allowed to notify this secondary server.\n<screen><![CDATA[\nFormat: <ip> <key-name | NOKEY | BLOCKED>\n\n<ip> either a plain IPv4/IPv6 address or range. Valid patters for ranges:\n* 10.0.0.0/24            # via subnet size\n* 10.0.0.0&255.255.255.0 # via subnet mask\n* 10.0.0.1-10.0.0.254    # via range\n\nA optional port number could be added with a '@':\n* 2001:1234::1@1234\n\n<key-name | NOKEY | BLOCKED>\n* <key-name> will use the specified TSIG key\n* NOKEY      no TSIG signature is required\n* BLOCKED    notifies from non-listed or blocked IPs will be ignored\n* ]]></screen>\n","example":["192.0.2.0/24 NOKEY","10.0.0.1-10.0.0.5 my_tsig_key_name","10.0.3.4&255.255.0.0 BLOCKED"],"loc":["services","nsd","zones","<name>","allowNotify"],"readOnly":false,"type":"list of strings"},"services.nsd.zones.<name>.children":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":{},"description":"Children zones inherit all options of their parents. Attributes\ndefined in a child will overwrite the ones of its parent. Only\nleaf zones will be actually served. This way it's possible to\ndefine maybe zones which share most attributes without\nduplicating everything. This mechanism replaces nsd's patterns\nin a save and functional way.\n","loc":["services","nsd","zones","<name>","children"],"readOnly":false,"type":"unspecified"},"services.nsd.zones.<name>.data":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"","description":"The actual zone data. This is the content of your zone file.\nUse imports or pkgs.lib.readFile if you don't want this data in your config file.\n","example":"","loc":["services","nsd","zones","<name>","data"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssec":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":false,"description":"Whether to enable DNSSEC.","example":true,"loc":["services","nsd","zones","<name>","dnssec"],"readOnly":false,"type":"boolean"},"services.nsd.zones.<name>.dnssecPolicy.algorithm":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"RSASHA256","description":"Which algorithm to use for DNSSEC","loc":["services","nsd","zones","<name>","dnssecPolicy","algorithm"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssecPolicy.coverage":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"1y","description":"The length of time to ensure that keys will be correct; no action will be taken to create new keys to be activated after this time.\n","loc":["services","nsd","zones","<name>","dnssecPolicy","coverage"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssecPolicy.keyttl":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":"1h","description":"TTL for dnssec records","loc":["services","nsd","zones","<name>","dnssecPolicy","keyttl"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssecPolicy.ksk":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":{"keySize":4096,"postPublish":"1mo","prePublish":"1mo","rollPeriod":"0"},"description":"Key policy for key signing keys","loc":["services","nsd","zones","<name>","dnssecPolicy","ksk"],"readOnly":false,"type":"submodule"},"services.nsd.zones.<name>.dnssecPolicy.ksk.keySize":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"Key size in bits","loc":["services","nsd","zones","<name>","dnssecPolicy","ksk","keySize"],"readOnly":false,"type":"signed integer"},"services.nsd.zones.<name>.dnssecPolicy.ksk.postPublish":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"How long after deactivation to keep a key in the zone","loc":["services","nsd","zones","<name>","dnssecPolicy","ksk","postPublish"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssecPolicy.ksk.prePublish":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"How long in advance to publish new keys","loc":["services","nsd","zones","<name>","dnssecPolicy","ksk","prePublish"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssecPolicy.ksk.rollPeriod":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"How frequently to change keys","loc":["services","nsd","zones","<name>","dnssecPolicy","ksk","rollPeriod"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssecPolicy.zsk":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":{"keySize":2048,"postPublish":"1w","prePublish":"1w","rollPeriod":"1mo"},"description":"Key policy for zone signing keys","loc":["services","nsd","zones","<name>","dnssecPolicy","zsk"],"readOnly":false,"type":"submodule"},"services.nsd.zones.<name>.dnssecPolicy.zsk.keySize":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"Key size in bits","loc":["services","nsd","zones","<name>","dnssecPolicy","zsk","keySize"],"readOnly":false,"type":"signed integer"},"services.nsd.zones.<name>.dnssecPolicy.zsk.postPublish":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"How long after deactivation to keep a key in the zone","loc":["services","nsd","zones","<name>","dnssecPolicy","zsk","postPublish"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssecPolicy.zsk.prePublish":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"How long in advance to publish new keys","loc":["services","nsd","zones","<name>","dnssecPolicy","zsk","prePublish"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.dnssecPolicy.zsk.rollPeriod":{"declarations":["nixos/modules/services/networking/nsd.nix"],"description":"How frequently to change keys","loc":["services","nsd","zones","<name>","dnssecPolicy","zsk","rollPeriod"],"readOnly":false,"type":"string"},"services.nsd.zones.<name>.maxRefreshSecs":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"Limit refresh time for secondary zones. This is the timer which\nchecks to see if the zone has to be refetched when it expires.\nNormally the value from the SOA record is used, but this  option\nrestricts that value.\n","loc":["services","nsd","zones","<name>","maxRefreshSecs"],"readOnly":false,"type":"null or signed integer"},"services.nsd.zones.<name>.maxRetrySecs":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"Limit retry time for secondary zones. This is the timeout after\na failed fetch attempt for the zone. Normally the value from\nthe SOA record is used, but this option restricts that value.\n","loc":["services","nsd","zones","<name>","maxRetrySecs"],"readOnly":false,"type":"null or signed integer"},"services.nsd.zones.<name>.minRefreshSecs":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"Limit refresh time for secondary zones.\n","loc":["services","nsd","zones","<name>","minRefreshSecs"],"readOnly":false,"type":"null or signed integer"},"services.nsd.zones.<name>.minRetrySecs":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"Limit retry time for secondary zones.\n","loc":["services","nsd","zones","<name>","minRetrySecs"],"readOnly":false,"type":"null or signed integer"},"services.nsd.zones.<name>.notify":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":[],"description":"This primary server will notify all given secondary servers about\nzone changes.\n<screen><![CDATA[\nFormat: <ip> <key-name | NOKEY>\n\n<ip> a plain IPv4/IPv6 address with on optional port number (ip@port)\n\n<key-name | NOKEY>\n* <key-name> sign notifies with the specified key\n* NOKEY      don't sign notifies\n]]></screen>\n","example":["10.0.0.1@3721 my_key","::5 NOKEY"],"loc":["services","nsd","zones","<name>","notify"],"readOnly":false,"type":"list of strings"},"services.nsd.zones.<name>.notifyRetry":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":5,"description":"Specifies the number of retries for failed notifies. Set this along with notify.\n","loc":["services","nsd","zones","<name>","notifyRetry"],"readOnly":false,"type":"signed integer"},"services.nsd.zones.<name>.outgoingInterface":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"This address will be used for zone-transfere requests if configured\nas a secondary server or notifications in case of a primary server.\nSupply either a plain IPv4 or IPv6 address with an optional port\nnumber (ip@port).\n","example":"2000::1@1234","loc":["services","nsd","zones","<name>","outgoingInterface"],"readOnly":false,"type":"null or string"},"services.nsd.zones.<name>.provideXFR":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":[],"description":"Allow these IPs and TSIG to transfer zones, addr TSIG|NOKEY|BLOCKED\naddress range 192.0.2.0/24, 1.2.3.4&amp;255.255.0.0, 3.0.2.20-3.0.2.40\n","example":["192.0.2.0/24 NOKEY","192.0.2.0/24 my_tsig_key_name"],"loc":["services","nsd","zones","<name>","provideXFR"],"readOnly":false,"type":"list of strings"},"services.nsd.zones.<name>.requestXFR":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":[],"description":"Format: <code>[AXFR|UDP] &lt;ip-address&gt; &lt;key-name | NOKEY&gt;</code>\n","example":[],"loc":["services","nsd","zones","<name>","requestXFR"],"readOnly":false,"type":"list of strings"},"services.nsd.zones.<name>.rrlWhitelist":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":[],"description":"Whitelists the given rrl-types.\n","loc":["services","nsd","zones","<name>","rrlWhitelist"],"readOnly":false,"type":"list of one of \"nxdomain\", \"error\", \"referral\", \"any\", \"rrsig\", \"wildcard\", \"nodata\", \"dnskey\", \"positive\", \"all\"s"},"services.nsd.zones.<name>.zoneStats":{"declarations":["nixos/modules/services/networking/nsd.nix"],"default":null,"description":"When set to something distinct to null NSD is able to collect\nstatistics per zone. All statistics of this zone(s) will be added\nto the group specified by this given name. Use \"%s\" to use the zones\nname as the group. The groups are output from nsd-control stats\nand stats_noreset.\n","example":"%s","loc":["services","nsd","zones","<name>","zoneStats"],"readOnly":false,"type":"null or string"},"services.ntopng.configText":{"declarations":["nixos/modules/services/networking/ntopng.nix"],"default":"","description":"Overridable configuration file contents to use for ntopng. By\ndefault, use the contents automatically generated by NixOS.\n","example":"--interface=any\n--http-port=3000\n--disable-login\n","loc":["services","ntopng","configText"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.ntopng.enable":{"declarations":["nixos/modules/services/networking/ntopng.nix"],"default":false,"description":"Enable ntopng, a high-speed web-based traffic analysis and flow\ncollection tool.\n\nWith the default configuration, ntopng monitors all network\ninterfaces and displays its findings at http://localhost:3000. Default username and password is admin/admin.\n\nSee the ntopng(8) manual page and http://www.ntop.org/products/ntop/\nfor more info.\n\nNote that enabling ntopng will also enable redis (key-value\ndatabase server) for persistent data storage.\n","loc":["services","ntopng","enable"],"readOnly":false,"type":"boolean"},"services.ntopng.extraConfig":{"declarations":["nixos/modules/services/networking/ntopng.nix"],"default":"","description":"Configuration lines that will be appended to the generated ntopng\nconfiguration file. Note that this mechanism does not work when the\nmanual <option>configText</option> option is used.\n","loc":["services","ntopng","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.ntopng.http-port":{"declarations":["nixos/modules/services/networking/ntopng.nix"],"default":3000,"description":"Sets the HTTP port of the embedded web server.\n","loc":["services","ntopng","http-port"],"readOnly":false,"type":"signed integer"},"services.ntopng.interfaces":{"declarations":["nixos/modules/services/networking/ntopng.nix"],"default":["any"],"description":"List of interfaces to monitor. Use \"any\" to monitor all interfaces.\n","example":["eth0","wlan0"],"loc":["services","ntopng","interfaces"],"readOnly":false,"type":"list of strings"},"services.ntp.enable":{"declarations":["nixos/modules/services/networking/ntpd.nix"],"default":false,"description":"Whether to synchronise your machine's time using the NTP\nprotocol.\n","loc":["services","ntp","enable"],"readOnly":false,"type":"unspecified"},"services.ntp.extraFlags":{"declarations":["nixos/modules/services/networking/ntpd.nix"],"default":[],"description":"Extra flags passed to the ntpd command.","loc":["services","ntp","extraFlags"],"readOnly":false,"type":"list of strings"},"services.ntp.servers":{"declarations":["nixos/modules/services/networking/ntpd.nix"],"default":["0.nixos.pool.ntp.org","1.nixos.pool.ntp.org","2.nixos.pool.ntp.org","3.nixos.pool.ntp.org"],"description":"The set of NTP servers from which to synchronise.\n","loc":["services","ntp","servers"],"readOnly":false,"type":"unspecified"},"services.nullidentdmod.enable":{"declarations":["nixos/modules/services/networking/nullidentdmod.nix"],"default":false,"description":"Whether to enable Enable the nullidentdmod identd daemon.","example":true,"loc":["services","nullidentdmod","enable"],"readOnly":false,"type":"boolean"},"services.nullidentdmod.userid":{"declarations":["nixos/modules/services/networking/nullidentdmod.nix"],"default":null,"description":"User ID to return. Set to null to return a random string each time.","example":"alice","loc":["services","nullidentdmod","userid"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.adminaddr":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"If set, all recipients to users at either \"localhost\" (the literal string)\nor the canonical host name (from the me control attribute) are remapped to this address.\nThis is provided to allow local daemons to be able to send email to\n\"somebody@localhost\" and have it go somewhere sensible instead of being  bounced\nby your relay host. To send to multiple addresses,\nput them all on one line separated by a comma.\n","loc":["services","nullmailer","config","adminaddr"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.allmailfrom":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"If set, content will override the envelope sender on all messages.\n","loc":["services","nullmailer","config","allmailfrom"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.defaultdomain":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"The content of this attribute is appended to any host name that\ndoes not contain a period (except localhost), including defaulthost\nand idhost. Defaults to the value of the me attribute, if it exists,\notherwise the literal name defauldomain.\n","loc":["services","nullmailer","config","defaultdomain"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.defaulthost":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"The content of this attribute is appended to any address that\nis missing a host name. Defaults to the value of the me control\nattribute, if it exists, otherwise the literal name defaulthost.\n","loc":["services","nullmailer","config","defaulthost"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.doublebounceto":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"If the original sender was empty (the original message was a\ndelivery status or disposition notification), the double bounce\nis sent to the address in this attribute.\n","loc":["services","nullmailer","config","doublebounceto"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.helohost":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"Sets  the  environment variable $HELOHOST which is used by the\nSMTP protocol module to set the parameter given to the HELO command.\nDefaults to the value of the me configuration attribute.\n","loc":["services","nullmailer","config","helohost"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.idhost":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"The content of this attribute is used when building the message-id\nstring for the message. Defaults to the canonicalized value of defaulthost.\n","loc":["services","nullmailer","config","idhost"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.maxpause":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"The maximum time to pause between successive queue runs, in seconds.\nDefaults to 24 hours (86400).\n","loc":["services","nullmailer","config","maxpause"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.me":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"The fully-qualifiled host name of the computer running nullmailer.\nDefaults to the literal name me.\n","loc":["services","nullmailer","config","me"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.pausetime":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"The minimum time to pause between successive queue runs when there\nare messages in the queue, in seconds. Defaults to 1 minute (60).\nEach time this timeout is reached, the timeout is doubled to a\nmaximum of maxpause. After new messages are injected, the timeout\nis reset.  If this is set to 0, nullmailer-send will exit\nimmediately after going through the queue once (one-shot mode).\n","loc":["services","nullmailer","config","pausetime"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.remotes":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"A list of remote servers to which to send each message. Each line\ncontains a remote host name or address followed by an optional\nprotocol string, separated by white space.\n\nSee <code>man 8 nullmailer-send</code> for syntax and available\noptions.\n\nWARNING: This is stored world-readable in the nix store. If you need\nto specify any secret credentials here, consider using the\n<code>remotesFile</code> option instead.\n","loc":["services","nullmailer","config","remotes"],"readOnly":false,"type":"null or string"},"services.nullmailer.config.sendtimeout":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"The  time to wait for a remote module listed above to complete sending\na message before killing it and trying again, in seconds.\nDefaults to 1 hour (3600).  If this is set to 0, nullmailer-send\nwill wait forever for messages to complete sending.\n","loc":["services","nullmailer","config","sendtimeout"],"readOnly":false,"type":"null or string"},"services.nullmailer.enable":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":false,"description":"Whether to enable nullmailer daemon.","loc":["services","nullmailer","enable"],"readOnly":false,"type":"boolean"},"services.nullmailer.group":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":"nullmailer","description":"Group to use to run nullmailer-send.\n","loc":["services","nullmailer","group"],"readOnly":false,"type":"Concatenated string"},"services.nullmailer.remotesFile":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":null,"description":"Path to the <code>remotes</code> control file. This file contains a\nlist of remote servers to which to send each message.\n\nSee <code>man 8 nullmailer-send</code> for syntax and available\noptions.\n","loc":["services","nullmailer","remotesFile"],"readOnly":false,"type":"null or string"},"services.nullmailer.setSendmail":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":true,"description":"Whether to set the system sendmail to nullmailer's.","loc":["services","nullmailer","setSendmail"],"readOnly":false,"type":"boolean"},"services.nullmailer.user":{"declarations":["nixos/modules/services/mail/nullmailer.nix"],"default":"nullmailer","description":"User to use to run nullmailer-send.\n","loc":["services","nullmailer","user"],"readOnly":false,"type":"Concatenated string"},"services.nylon.<name?>.acceptInterface":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":"lo","description":"Tell nylon which interface to listen for client requests on, default is \"lo\".\n","loc":["services","nylon","<name?>","acceptInterface"],"readOnly":false,"type":"Concatenated string"},"services.nylon.<name?>.allowedIPRanges":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":["192.168.0.0/16","127.0.0.1/8","172.16.0.1/12","10.0.0.0/8"],"description":"Allowed client IP ranges are evaluated first, defaults to ARIN IPv4 private ranges:\n  [ \"192.168.0.0/16\" \"127.0.0.0/8\" \"172.16.0.0/12\" \"10.0.0.0/8\" ]\n","loc":["services","nylon","<name?>","allowedIPRanges"],"readOnly":false,"type":"list of Concatenated strings"},"services.nylon.<name?>.bindInterface":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":"enp3s0f0","description":"Tell nylon which interface to use as an uplink, default is \"enp3s0f0\".\n","loc":["services","nylon","<name?>","bindInterface"],"readOnly":false,"type":"Concatenated string"},"services.nylon.<name?>.deniedIPRanges":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":["0.0.0.0/0"],"description":"Denied client IP ranges, these gets evaluated after the allowed IP ranges, defaults to all IPv4 addresses:\n  [ \"0.0.0.0/0\" ]\nTo block all other access than the allowed.\n","loc":["services","nylon","<name?>","deniedIPRanges"],"readOnly":false,"type":"list of Concatenated strings"},"services.nylon.<name?>.enable":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":false,"description":"Enables nylon as a running service upon activation.\n","loc":["services","nylon","<name?>","enable"],"readOnly":false,"type":"boolean"},"services.nylon.<name?>.logging":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":false,"description":"Enable logging, default is no logging.\n","loc":["services","nylon","<name?>","logging"],"readOnly":false,"type":"boolean"},"services.nylon.<name?>.name":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":"","description":"The name of this nylon instance.","loc":["services","nylon","<name?>","name"],"readOnly":false,"type":"string"},"services.nylon.<name?>.nrConnections":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":10,"description":"The number of allowed simultaneous connections to the daemon, default 10.\n","loc":["services","nylon","<name?>","nrConnections"],"readOnly":false,"type":"signed integer"},"services.nylon.<name?>.port":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":1080,"description":"What port to listen for client requests, default is 1080.\n","loc":["services","nylon","<name?>","port"],"readOnly":false,"type":"signed integer"},"services.nylon.<name?>.verbosity":{"declarations":["nixos/modules/services/networking/nylon.nix"],"default":false,"description":"Enable verbose output, default is to not be verbose.\n","loc":["services","nylon","<name?>","verbosity"],"readOnly":false,"type":"boolean"},"services.nzbget.enable":{"declarations":["nixos/modules/services/misc/nzbget.nix"],"default":false,"description":"Whether to enable NZBGet.","example":true,"loc":["services","nzbget","enable"],"readOnly":false,"type":"boolean"},"services.nzbget.group":{"declarations":["nixos/modules/services/misc/nzbget.nix"],"default":"nzbget","description":"Group under which NZBGet runs","loc":["services","nzbget","group"],"readOnly":false,"type":"string"},"services.nzbget.package":{"declarations":["nixos/modules/services/misc/nzbget.nix"],"default":"pkgs.nzbget","description":"The NZBGet package to use","loc":["services","nzbget","package"],"readOnly":false,"type":"package"},"services.nzbget.user":{"declarations":["nixos/modules/services/misc/nzbget.nix"],"default":"nzbget","description":"User account under which NZBGet runs","loc":["services","nzbget","user"],"readOnly":false,"type":"string"},"services.oauth2_proxy.approvalPrompt":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":"force","description":"OAuth approval_prompt.\n","loc":["services","oauth2_proxy","approvalPrompt"],"readOnly":false,"type":"one of \"force\", \"auto\""},"services.oauth2_proxy.azure.resource":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"description":"The resource that is protected.\n","loc":["services","oauth2_proxy","azure","resource"],"readOnly":false,"type":"string"},"services.oauth2_proxy.azure.tenant":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":"common","description":"Go to a tenant-specific or common (tenant-independent) endpoint.\n","loc":["services","oauth2_proxy","azure","tenant"],"readOnly":false,"type":"string"},"services.oauth2_proxy.basicAuthPassword":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"The password to set when passing the HTTP Basic Auth header.\n","loc":["services","oauth2_proxy","basicAuthPassword"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.clientID":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"description":"The OAuth Client ID.\n","example":"123456.apps.googleusercontent.com","loc":["services","oauth2_proxy","clientID"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.clientSecret":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"description":"The OAuth Client Secret.\n","loc":["services","oauth2_proxy","clientSecret"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.cookie.domain":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"An optional cookie domain to force cookies to.\n","example":".yourcompany.com","loc":["services","oauth2_proxy","cookie","domain"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.cookie.expire":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":"168h0m0s","description":"Expire timeframe for cookie.\n","loc":["services","oauth2_proxy","cookie","expire"],"readOnly":false,"type":"string"},"services.oauth2_proxy.cookie.httpOnly":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":true,"description":"Set HttpOnly cookie flag.\n","loc":["services","oauth2_proxy","cookie","httpOnly"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.cookie.name":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":"_oauth2_proxy","description":"The name of the cookie that the oauth_proxy creates.\n","loc":["services","oauth2_proxy","cookie","name"],"readOnly":false,"type":"string"},"services.oauth2_proxy.cookie.refresh":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Refresh the cookie after this duration; 0 to disable.\n","example":"168h0m0s","loc":["services","oauth2_proxy","cookie","refresh"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.cookie.secret":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"description":"The seed string for secure cookies.\n","loc":["services","oauth2_proxy","cookie","secret"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.cookie.secure":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":true,"description":"Set secure (HTTPS) cookie flag.\n","loc":["services","oauth2_proxy","cookie","secure"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.customTemplatesDir":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Path to custom HTML templates.\n","loc":["services","oauth2_proxy","customTemplatesDir"],"readOnly":false,"type":"null or path"},"services.oauth2_proxy.email.addresses":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Line-separated email addresses that are allowed to authenticate.\n","loc":["services","oauth2_proxy","email","addresses"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.oauth2_proxy.email.domains":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":[],"description":"Authenticate emails with the specified domains. Use\n<literal>*</literal> to authenticate any email.\n","loc":["services","oauth2_proxy","email","domains"],"readOnly":false,"type":"list of strings"},"services.oauth2_proxy.enable":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":false,"description":"Whether to enable oauth2_proxy.","example":true,"loc":["services","oauth2_proxy","enable"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.extraConfig":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":{},"description":"Extra config to pass to oauth2_proxy.\n","loc":["services","oauth2_proxy","extraConfig"],"readOnly":false,"type":"unspecified"},"services.oauth2_proxy.github.org":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Restrict logins to members of this organisation.\n","loc":["services","oauth2_proxy","github","org"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.github.team":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Restrict logins to members of this team.\n","loc":["services","oauth2_proxy","github","team"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.google.adminEmail":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"description":"The Google Admin to impersonate for API calls.\n\nOnly users with access to the Admin APIs can access the Admin SDK\nDirectory API, thus the service account needs to impersonate one of\nthose users to access the Admin SDK Directory API.\n\nSee <link xlink:href=\"https://developers.google.com/admin-sdk/directory/v1/guides/delegation#delegate_domain-wide_authority_to_your_service_account\" />.\n","loc":["services","oauth2_proxy","google","adminEmail"],"readOnly":false,"type":"string"},"services.oauth2_proxy.google.groups":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":[],"description":"Restrict logins to members of these Google groups.\n","loc":["services","oauth2_proxy","google","groups"],"readOnly":false,"type":"list of strings"},"services.oauth2_proxy.google.serviceAccountJSON":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"description":"The path to the service account JSON credentials.\n","loc":["services","oauth2_proxy","google","serviceAccountJSON"],"readOnly":false,"type":"path"},"services.oauth2_proxy.htpasswd.displayForm":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":true,"description":"Display username / password login form if an htpasswd file is provided.\n","loc":["services","oauth2_proxy","htpasswd","displayForm"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.htpasswd.file":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Additionally authenticate against a htpasswd file. Entries must be\ncreated with <literal>htpasswd -s</literal> for SHA encryption.\n","loc":["services","oauth2_proxy","htpasswd","file"],"readOnly":false,"type":"null or path"},"services.oauth2_proxy.httpAddress":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":"http://127.0.0.1:4180","description":"HTTPS listening address.  This module does not expose the port by\ndefault. If you want this URL to be accessible to other machines, please\nadd the port to <literal>networking.firewall.allowedTCPPorts</literal>.\n","loc":["services","oauth2_proxy","httpAddress"],"readOnly":false,"type":"string"},"services.oauth2_proxy.keyFile":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"oauth2_proxy allows passing sensitive configuration via environment variables.\nMake a file that contains lines like\nOAUTH2_PROXY_CLIENT_SECRET=asdfasdfasdf.apps.googleuserscontent.com\nand specify the path here.\n","example":"/run/keys/oauth2_proxy","loc":["services","oauth2_proxy","keyFile"],"readOnly":false,"type":"null or Concatenated string"},"services.oauth2_proxy.loginURL":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Authentication endpoint.\n\nYou only need to set this if you are using a self-hosted provider (e.g.\nGithub Enterprise). If you're using a publicly hosted provider\n(e.g github.com), then the default works.\n","example":"https://provider.example.com/oauth/authorize","loc":["services","oauth2_proxy","loginURL"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.nginx.proxy":{"declarations":["nixos/modules/services/security/oauth2_proxy_nginx.nix"],"default":"http://127.0.0.1:4180","description":"The address of the reverse proxy endpoint for oauth2_proxy\n","loc":["services","oauth2_proxy","nginx","proxy"],"readOnly":false,"type":"Concatenated string"},"services.oauth2_proxy.nginx.virtualHosts":{"declarations":["nixos/modules/services/security/oauth2_proxy_nginx.nix"],"default":[],"description":"A list of nginx virtual hosts to put behind the oauth2 proxy\n","loc":["services","oauth2_proxy","nginx","virtualHosts"],"readOnly":false,"type":"list of Concatenated strings"},"services.oauth2_proxy.package":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":"pkgs.oauth2_proxy","description":"The package that provides oauth2_proxy.\n","loc":["services","oauth2_proxy","package"],"readOnly":false,"type":"package"},"services.oauth2_proxy.passAccessToken":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":false,"description":"Pass OAuth access_token to upstream via X-Forwarded-Access-Token header.\n","loc":["services","oauth2_proxy","passAccessToken"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.passBasicAuth":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":true,"description":"Pass HTTP Basic Auth, X-Forwarded-User and X-Forwarded-Email information to upstream.\n","loc":["services","oauth2_proxy","passBasicAuth"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.passHostHeader":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":true,"description":"Pass the request Host Header to upstream.\n","loc":["services","oauth2_proxy","passHostHeader"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.profileURL":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"\tProfile access endpoint.\n","loc":["services","oauth2_proxy","profileURL"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.provider":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":"google","description":"OAuth provider.\n","loc":["services","oauth2_proxy","provider"],"readOnly":false,"type":"one of \"google\", \"github\", \"azure\", \"gitlab\", \"linkedin\", \"myusa\""},"services.oauth2_proxy.proxyPrefix":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":"/oauth2","description":"The url root path that this proxy should be nested under.\n","loc":["services","oauth2_proxy","proxyPrefix"],"readOnly":false,"type":"string"},"services.oauth2_proxy.redeemURL":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Token redemption endpoint.\n\nYou only need to set this if you are using a self-hosted provider (e.g.\nGithub Enterprise). If you're using a publicly hosted provider\n(e.g github.com), then the default works.\n","example":"https://provider.example.com/oauth/token","loc":["services","oauth2_proxy","redeemURL"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.redirectURL":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"The OAuth2 redirect URL.\n","example":"https://internalapp.yourcompany.com/oauth2/callback","loc":["services","oauth2_proxy","redirectURL"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.requestLogging":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":true,"description":"Log requests to stdout.\n","loc":["services","oauth2_proxy","requestLogging"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.scope":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"OAuth scope specification.\n","loc":["services","oauth2_proxy","scope"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.setXauthrequest":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":false,"description":"Set X-Auth-Request-User and X-Auth-Request-Email response headers (useful in Nginx auth_request mode). Setting this to 'null' means using the upstream default (false).\n","loc":["services","oauth2_proxy","setXauthrequest"],"readOnly":false,"type":"null or boolean"},"services.oauth2_proxy.signatureKey":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"GAP-Signature request signature key.\n","example":"sha1:secret0","loc":["services","oauth2_proxy","signatureKey"],"readOnly":false,"type":"null or string"},"services.oauth2_proxy.skipAuthRegexes":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":[],"description":"Skip authentication for requests matching any of these regular\nexpressions.\n","loc":["services","oauth2_proxy","skipAuthRegexes"],"readOnly":false,"type":"list of strings"},"services.oauth2_proxy.tls.certificate":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"description":"Path to certificate file.\n","loc":["services","oauth2_proxy","tls","certificate"],"readOnly":false,"type":"path"},"services.oauth2_proxy.tls.enable":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":false,"description":"Whether to serve over TLS.\n","loc":["services","oauth2_proxy","tls","enable"],"readOnly":false,"type":"boolean"},"services.oauth2_proxy.tls.httpsAddress":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":":443","description":"<literal>addr:port</literal> to listen on for HTTPS clients.\n\nRemember to add <literal>port</literal> to\n<literal>allowedTCPPorts</literal> if you want other machines to be\nable to connect to it.\n","loc":["services","oauth2_proxy","tls","httpsAddress"],"readOnly":false,"type":"string"},"services.oauth2_proxy.tls.key":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"description":"Path to private key file.\n","loc":["services","oauth2_proxy","tls","key"],"readOnly":false,"type":"path"},"services.oauth2_proxy.upstream":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":[],"description":"The http url(s) of the upstream endpoint or <literal>file://</literal>\npaths for static files. Routing is based on the path.\n","loc":["services","oauth2_proxy","upstream"],"readOnly":false,"type":"list of Concatenated strings or Concatenated string convertible to it"},"services.oauth2_proxy.validateURL":{"declarations":["nixos/modules/services/security/oauth2_proxy.nix"],"default":null,"description":"Access token validation endpoint.\n\nYou only need to set this if you are using a self-hosted provider (e.g.\nGithub Enterprise). If you're using a publicly hosted provider\n(e.g github.com), then the default works.\n","example":"https://provider.example.com/user/emails","loc":["services","oauth2_proxy","validateURL"],"readOnly":false,"type":"null or string"},"services.ocserv.config":{"declarations":["nixos/modules/services/networking/ocserv.nix"],"description":"Configuration content to start an OCServ server.\n\nFor a full configuration reference,please refer to the online documentation\n(https://ocserv.gitlab.io/www/manual.html), the openconnect\nrecipes (https://github.com/openconnect/recipes) or `man ocserv`.\n","example":"# configuration examples from $out/doc without explanatory comments.\n# for a full reference please look at the installed man pages.\nauth = \"plain[passwd=./sample.passwd]\"\ntcp-port = 443\nudp-port = 443\nrun-as-user = nobody\nrun-as-group = nogroup\nsocket-file = /var/run/ocserv-socket\nserver-cert = certs/server-cert.pem\nserver-key = certs/server-key.pem\nkeepalive = 32400\ndpd = 90\nmobile-dpd = 1800\nswitch-to-tcp-timeout = 25\ntry-mtu-discovery = false\ncert-user-oid = 0.9.2342.19200300.100.1.1\ntls-priorities = \"NORMAL:%SERVER_PRECEDENCE:%COMPAT:-VERS-SSL3.0\"\nauth-timeout = 240\nmin-reauth-time = 300\nmax-ban-score = 80\nban-reset-time = 1200\ncookie-timeout = 300\ndeny-roaming = false\nrekey-time = 172800\nrekey-method = ssl\nuse-occtl = true\npid-file = /var/run/ocserv.pid\ndevice = vpns\npredictable-ips = true\ndefault-domain = example.com\nipv4-network = 192.168.1.0\nipv4-netmask = 255.255.255.0\ndns = 192.168.1.2\nping-leases = false\nroute = 10.10.10.0/255.255.255.0\nroute = 192.168.0.0/255.255.0.0\nno-route = 192.168.5.0/255.255.255.0\ncisco-client-compat = true\ndtls-legacy = true\n\n[vhost:www.example.com]\nauth = \"certificate\"\nca-cert = certs/ca.pem\nserver-cert = certs/server-cert-secp521r1.pem\nserver-key = cersts/certs/server-key-secp521r1.pem\nipv4-network = 192.168.2.0\nipv4-netmask = 255.255.255.0\ncert-user-oid = 0.9.2342.19200300.100.1.1\n","loc":["services","ocserv","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.ocserv.enable":{"declarations":["nixos/modules/services/networking/ocserv.nix"],"default":false,"description":"Whether to enable ocserv.","example":true,"loc":["services","ocserv","enable"],"readOnly":false,"type":"boolean"},"services.octoprint.enable":{"declarations":["nixos/modules/services/misc/octoprint.nix"],"default":false,"description":"Whether to enable OctoPrint, web interface for 3D printers.","example":true,"loc":["services","octoprint","enable"],"readOnly":false,"type":"boolean"},"services.octoprint.extraConfig":{"declarations":["nixos/modules/services/misc/octoprint.nix"],"default":{},"description":"Extra options which are added to OctoPrint's YAML configuration file.","loc":["services","octoprint","extraConfig"],"readOnly":false,"type":"attribute set"},"services.octoprint.group":{"declarations":["nixos/modules/services/misc/octoprint.nix"],"default":"octoprint","description":"Group for the daemon.","loc":["services","octoprint","group"],"readOnly":false,"type":"string"},"services.octoprint.host":{"declarations":["nixos/modules/services/misc/octoprint.nix"],"default":"0.0.0.0","description":"Host to bind OctoPrint to.\n","loc":["services","octoprint","host"],"readOnly":false,"type":"string"},"services.octoprint.plugins":{"declarations":["nixos/modules/services/misc/octoprint.nix"],"default":"plugins: []","description":"Additional plugins.","example":{"_type":"literalExample","text":"plugins: [ m3d-fio ]"},"loc":["services","octoprint","plugins"],"readOnly":false,"type":"unspecified"},"services.octoprint.port":{"declarations":["nixos/modules/services/misc/octoprint.nix"],"default":5000,"description":"Port to bind OctoPrint to.\n","loc":["services","octoprint","port"],"readOnly":false,"type":"signed integer"},"services.octoprint.stateDir":{"declarations":["nixos/modules/services/misc/octoprint.nix"],"default":"/var/lib/octoprint","description":"State directory of the daemon.","loc":["services","octoprint","stateDir"],"readOnly":false,"type":"path"},"services.octoprint.user":{"declarations":["nixos/modules/services/misc/octoprint.nix"],"default":"octoprint","description":"User for the daemon.","loc":["services","octoprint","user"],"readOnly":false,"type":"string"},"services.offlineimap.enable":{"declarations":["nixos/modules/services/mail/offlineimap.nix"],"default":false,"description":"Whether to enable Offlineimap, a software to dispose your mailbox(es) as a local Maildir(s)..","example":true,"loc":["services","offlineimap","enable"],"readOnly":false,"type":"boolean"},"services.offlineimap.install":{"declarations":["nixos/modules/services/mail/offlineimap.nix"],"default":false,"description":"Whether to install a user service for Offlineimap. Once\nthe service is started, emails will be fetched automatically.\n\nThe service must be manually started for each user with\n\"systemctl --user start offlineimap\" or globally through\n<varname>services.offlineimap.enable</varname>.\n","loc":["services","offlineimap","install"],"readOnly":false,"type":"boolean"},"services.offlineimap.onCalendar":{"declarations":["nixos/modules/services/mail/offlineimap.nix"],"default":"*:0/3","description":"How often is offlineimap started. Default is '*:0/3' meaning every 3 minutes. See systemd.time(7) for more information about the format.","loc":["services","offlineimap","onCalendar"],"readOnly":false,"type":"string"},"services.offlineimap.package":{"declarations":["nixos/modules/services/mail/offlineimap.nix"],"default":"pkgs.offlineimap","description":"Offlineimap derivation to use.","loc":["services","offlineimap","package"],"readOnly":false,"type":"package"},"services.offlineimap.path":{"declarations":["nixos/modules/services/mail/offlineimap.nix"],"default":[],"description":"List of derivations to put in Offlineimap's path.","example":{"_type":"literalExample","text":"[ pkgs.pass pkgs.bash pkgs.notmuch ]"},"loc":["services","offlineimap","path"],"readOnly":false,"type":"list of paths"},"services.offlineimap.timeoutStartSec":{"declarations":["nixos/modules/services/mail/offlineimap.nix"],"default":"120sec","description":"How long waiting for offlineimap before killing it. Default is '120sec' meaning every 2 minutes. See systemd.time(7) for more information about the format.","loc":["services","offlineimap","timeoutStartSec"],"readOnly":false,"type":"string"},"services.oidentd.enable":{"declarations":["nixos/modules/services/networking/oidentd.nix"],"default":false,"description":"Whether to enable ‘oidentd’, an implementation of the Ident\nprotocol (RFC 1413).  It allows remote systems to identify the\nname of the user associated with a TCP connection.\n","loc":["services","oidentd","enable"],"readOnly":false,"type":"boolean"},"services.openafsClient.afsdb":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":true,"description":"Resolve cells via AFSDB DNS records.","loc":["services","openafsClient","afsdb"],"readOnly":false,"type":"boolean"},"services.openafsClient.cache.blocks":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":100000,"description":"Cache size in 1KB blocks.","loc":["services","openafsClient","cache","blocks"],"readOnly":false,"type":"signed integer"},"services.openafsClient.cache.chunksize":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":0,"description":"Size of each cache chunk given in powers of\n2. <literal>0</literal> resets the chunk size to its default\nvalues (13 (8 KB) for memcache, 18-20 (256 KB to 1 MB) for\ndiskcache). Maximum value is 30. Important performance\nparameter. Set to higher values when dealing with large files.\n","loc":["services","openafsClient","cache","chunksize"],"readOnly":false,"type":"integer between 0 and 30 (both inclusive)"},"services.openafsClient.cache.directory":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":"/var/cache/openafs","description":"Cache directory.","loc":["services","openafsClient","cache","directory"],"readOnly":false,"type":"string"},"services.openafsClient.cache.diskless":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":false,"description":"Use in-memory cache for diskless machines. Has no real\nperformance benefit anymore.\n","loc":["services","openafsClient","cache","diskless"],"readOnly":false,"type":"boolean"},"services.openafsClient.cellName":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":"","description":"Cell name.","example":"grand.central.org","loc":["services","openafsClient","cellName"],"readOnly":false,"type":"string"},"services.openafsClient.cellServDB":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":[],"description":"This cell's database server records, added to the global\nCellServDB. See CellServDB(5) man page for syntax. Ignored when\n<literal>afsdb</literal> is set to <literal>true</literal>.\n","example":"[ { ip = \"1.2.3.4\"; dnsname = \"first.afsdb.server.dns.fqdn.org\"; }\n  { ip = \"2.3.4.5\"; dnsname = \"second.afsdb.server.dns.fqdn.org\"; }\n]\n","loc":["services","openafsClient","cellServDB"],"readOnly":false,"type":"list of submodules"},"services.openafsClient.cellServDB.*.dnsname":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":"","description":"DNS full-qualified domain name of a database server","example":"afs.example.org","loc":["services","openafsClient","cellServDB","*","dnsname"],"readOnly":false,"type":"string"},"services.openafsClient.cellServDB.*.ip":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":"","description":"IP Address of a database server","example":"1.2.3.4","loc":["services","openafsClient","cellServDB","*","ip"],"readOnly":false,"type":"string"},"services.openafsClient.crypt":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":true,"description":"Whether to enable (weak) protocol encryption.","loc":["services","openafsClient","crypt"],"readOnly":false,"type":"boolean"},"services.openafsClient.daemons":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":2,"description":"Number of daemons to serve user requests. Numbers higher than 6\nusually do no increase performance. Default is sufficient for up\nto five concurrent users.\n","loc":["services","openafsClient","daemons"],"readOnly":false,"type":"signed integer"},"services.openafsClient.enable":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":false,"description":"Whether to enable the OpenAFS client.","loc":["services","openafsClient","enable"],"readOnly":false,"type":"boolean"},"services.openafsClient.fakestat":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":false,"description":"Return fake data on stat() calls. If <literal>true</literal>,\nalways do so. If <literal>false</literal>, only do so for\ncross-cell mounts (as these are potentially expensive).\n","loc":["services","openafsClient","fakestat"],"readOnly":false,"type":"boolean"},"services.openafsClient.inumcalc":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":"compat","description":"Inode calculation method. <literal>compat</literal> is\ncomputationally less expensive, but <literal>md5</literal> greatly\nreduces the likelihood of inode collisions in larger scenarios\ninvolving multiple cells mounted into one AFS space.\n","loc":["services","openafsClient","inumcalc"],"readOnly":false,"type":"string matching the pattern compat|md5"},"services.openafsClient.mountPoint":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":"/afs","description":"Mountpoint of the AFS file tree, conventionally\n<literal>/afs</literal>. When set to a different value, only\ncross-cells that use the same value can be accessed.\n","loc":["services","openafsClient","mountPoint"],"readOnly":false,"type":"string"},"services.openafsClient.packages.module":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":"openafs-1.6.22.2-4.14.76","description":"OpenAFS kernel module package. MUST match the userland package!","loc":["services","openafsClient","packages","module"],"readOnly":false,"type":"package"},"services.openafsClient.packages.programs":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":"openafs-1.6.22.2","description":"OpenAFS programs package. MUST match the kernel module package!","loc":["services","openafsClient","packages","programs"],"readOnly":false,"type":"package"},"services.openafsClient.sparse":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":true,"description":"Minimal cell list in /afs.","loc":["services","openafsClient","sparse"],"readOnly":false,"type":"boolean"},"services.openafsClient.startDisconnected":{"declarations":["nixos/modules/services/network-filesystems/openafs/client.nix"],"default":false,"description":"Start up in disconnected mode.  You need to execute\n<literal>fs disco online</literal> (as root) to switch to\nconnected mode. Useful for roaming devices.\n","loc":["services","openafsClient","startDisconnected"],"readOnly":false,"type":"boolean"},"services.openafsServer.advertisedAddresses":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":[],"description":"List of IP addresses this server is advertised under. See NetInfo(5)","loc":["services","openafsServer","advertisedAddresses"],"readOnly":false,"type":"unspecified"},"services.openafsServer.cellName":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"Cell name, this server will serve.","example":"grand.central.org","loc":["services","openafsServer","cellName"],"readOnly":false,"type":"string"},"services.openafsServer.cellServDB":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":[],"description":"Definition of all cell-local database server machines.","loc":["services","openafsServer","cellServDB"],"readOnly":false,"type":"list of submodules"},"services.openafsServer.cellServDB.*.dnsname":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"DNS full-qualified domain name of a database server","example":"afs.example.org","loc":["services","openafsServer","cellServDB","*","dnsname"],"readOnly":false,"type":"string"},"services.openafsServer.cellServDB.*.ip":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"IP Address of a database server","example":"1.2.3.4","loc":["services","openafsServer","cellServDB","*","ip"],"readOnly":false,"type":"string"},"services.openafsServer.dottedPrincipals":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":false,"description":"If enabled, allow principal names containing (.) dots. Enabling\nthis has security implications!\n","loc":["services","openafsServer","dottedPrincipals"],"readOnly":false,"type":"boolean"},"services.openafsServer.enable":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":false,"description":"Whether to enable the OpenAFS server. An OpenAFS server needs a\ncomplex setup. So, be aware that enabling this service and setting\nsome options does not give you a turn-key-ready solution. You need\nat least a running Kerberos 5 setup, as OpenAFS relies on it for\nauthentication. See the Guide \"QuickStartUnix\" coming with\n<literal>pkgs.openafs.doc</literal> for complete setup\ninstructions.\n","loc":["services","openafsServer","enable"],"readOnly":false,"type":"boolean"},"services.openafsServer.package":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"openafs-1.6.22.2","description":"OpenAFS package for the server binaries","loc":["services","openafsServer","package"],"readOnly":false,"type":"package"},"services.openafsServer.roles.backup.buserverArgs":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"Arguments to the buserver process. See its man page.","example":"-p 8","loc":["services","openafsServer","roles","backup","buserverArgs"],"readOnly":false,"type":"string"},"services.openafsServer.roles.backup.cellServDB":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":[],"description":"Definition of all cell-local backup database server machines.\nUse this when your cell uses less backup database servers than\nother database server machines.\n","loc":["services","openafsServer","roles","backup","cellServDB"],"readOnly":false,"type":"list of submodules"},"services.openafsServer.roles.backup.cellServDB.*.dnsname":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"DNS full-qualified domain name of a database server","example":"afs.example.org","loc":["services","openafsServer","roles","backup","cellServDB","*","dnsname"],"readOnly":false,"type":"string"},"services.openafsServer.roles.backup.cellServDB.*.ip":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"IP Address of a database server","example":"1.2.3.4","loc":["services","openafsServer","roles","backup","cellServDB","*","ip"],"readOnly":false,"type":"string"},"services.openafsServer.roles.backup.enable":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":false,"description":"Backup server role. Use in conjunction with the\n<literal>database</literal> role to maintain the Backup\nDatabase. Normally only used in conjunction with tape storage\nor IBM's Tivoli Storage Manager.\n","loc":["services","openafsServer","roles","backup","enable"],"readOnly":false,"type":"boolean"},"services.openafsServer.roles.database.enable":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":true,"description":"Database server role, maintains the Volume Location Database,\nProtection Database (and Backup Database, see\n<literal>backup</literal> role). There can be multiple\nservers in the database role for replication, which then need\nreliable network connection to each other.\n\nServers in this role appear in AFSDB DNS records or the\nCellServDB.\n","loc":["services","openafsServer","roles","database","enable"],"readOnly":false,"type":"boolean"},"services.openafsServer.roles.database.ptserverArgs":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"Arguments to the ptserver process. See its man page.","example":"-restricted -default_access S---- S-M---","loc":["services","openafsServer","roles","database","ptserverArgs"],"readOnly":false,"type":"string"},"services.openafsServer.roles.database.vlserverArgs":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"Arguments to the vlserver process. See its man page.","example":"-rxbind","loc":["services","openafsServer","roles","database","vlserverArgs"],"readOnly":false,"type":"string"},"services.openafsServer.roles.fileserver.enable":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":true,"description":"Fileserver role, serves files and volumes from its local storage.","loc":["services","openafsServer","roles","fileserver","enable"],"readOnly":false,"type":"boolean"},"services.openafsServer.roles.fileserver.fileserverArgs":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"-vattachpar 128 -vhashsize 11 -L -rxpck 400 -cb 1000000","description":"Arguments to the dafileserver process. See its man page.","loc":["services","openafsServer","roles","fileserver","fileserverArgs"],"readOnly":false,"type":"string"},"services.openafsServer.roles.fileserver.salvagerArgs":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"Arguments to the dasalvager process. See its man page.","example":"-showlog -showmounts","loc":["services","openafsServer","roles","fileserver","salvagerArgs"],"readOnly":false,"type":"string"},"services.openafsServer.roles.fileserver.salvageserverArgs":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"Arguments to the salvageserver process. See its man page.","example":"-showlog","loc":["services","openafsServer","roles","fileserver","salvageserverArgs"],"readOnly":false,"type":"string"},"services.openafsServer.roles.fileserver.volserverArgs":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":"","description":"Arguments to the davolserver process. See its man page.","example":"-sync never","loc":["services","openafsServer","roles","fileserver","volserverArgs"],"readOnly":false,"type":"string"},"services.openafsServer.udpPacketSize":{"declarations":["nixos/modules/services/network-filesystems/openafs/server.nix"],"default":1310720,"description":"UDP packet size to use in Bytes. Higher values can speed up\ncommunications. The default of 1 MB is a sufficient in most\ncases. Make sure to increase the kernel's UDP buffer size\naccordingly via <literal>net.core(w|r|opt)mem_max</literal>\nsysctl.\n","loc":["services","openafsServer","udpPacketSize"],"readOnly":false,"type":"signed integer"},"services.opendkim.configFile":{"declarations":["nixos/modules/services/mail/opendkim.nix"],"default":null,"description":"Additional opendkim configuration.","loc":["services","opendkim","configFile"],"readOnly":false,"type":"null or path"},"services.opendkim.domains":{"declarations":["nixos/modules/services/mail/opendkim.nix"],"default":"csl:nixos","description":"Local domains set (see <literal>opendkim(8)</literal> for more information on datasets).\nMessages from them are signed, not verified.\n","example":"csl:example.com,mydomain.net","loc":["services","opendkim","domains"],"readOnly":false,"type":"string"},"services.opendkim.enable":{"declarations":["nixos/modules/services/mail/opendkim.nix"],"default":false,"description":"Whether to enable the OpenDKIM sender authentication system.","loc":["services","opendkim","enable"],"readOnly":false,"type":"boolean"},"services.opendkim.group":{"declarations":["nixos/modules/services/mail/opendkim.nix"],"default":"opendkim","description":"Group for the daemon.","loc":["services","opendkim","group"],"readOnly":false,"type":"string"},"services.opendkim.keyPath":{"declarations":["nixos/modules/services/mail/opendkim.nix"],"default":"/var/lib/opendkim/keys","description":"The path that opendkim should put its generated private keys into.\nThe DNS settings will be found in this directory with the name selector.txt.\n","loc":["services","opendkim","keyPath"],"readOnly":false,"type":"path"},"services.opendkim.selector":{"declarations":["nixos/modules/services/mail/opendkim.nix"],"description":"Selector to use when signing.","loc":["services","opendkim","selector"],"readOnly":false,"type":"string"},"services.opendkim.socket":{"declarations":["nixos/modules/services/mail/opendkim.nix"],"default":"local:/run/opendkim/opendkim.sock","description":"Socket which is used for communication with OpenDKIM.","loc":["services","opendkim","socket"],"readOnly":false,"type":"string"},"services.opendkim.user":{"declarations":["nixos/modules/services/mail/opendkim.nix"],"default":"opendkim","description":"User for the daemon.","loc":["services","opendkim","user"],"readOnly":false,"type":"string"},"services.openfire.enable":{"declarations":["nixos/modules/services/networking/openfire.nix"],"default":false,"description":"\n          Whether to enable OpenFire XMPP server.\n        ","loc":["services","openfire","enable"],"readOnly":false,"type":"unspecified"},"services.openfire.usePostgreSQL":{"declarations":["nixos/modules/services/networking/openfire.nix"],"default":true,"description":"\n          Whether you use PostgreSQL service for your storage back-end.\n        ","loc":["services","openfire","usePostgreSQL"],"readOnly":false,"type":"unspecified"},"services.openldap.configDir":{"declarations":["nixos/modules/services/databases/openldap.nix"],"default":null,"description":"Use this optional config directory instead of using slapd.conf","example":"/var/db/slapd.d","loc":["services","openldap","configDir"],"readOnly":false,"type":"null or path"},"services.openldap.dataDir":{"declarations":["nixos/modules/services/databases/openldap.nix"],"default":"/var/db/openldap","description":"The database directory.","loc":["services","openldap","dataDir"],"readOnly":false,"type":"Concatenated string"},"services.openldap.declarativeContents":{"declarations":["nixos/modules/services/databases/openldap.nix"],"default":null,"description":"Declarative contents for the LDAP database, in LDIF format.\n\nNote a few facts when using it. First, the database\n<emphasis>must</emphasis> be stored in the directory defined by\n<code>dataDir</code>. Second, all <code>dataDir</code> will be erased\nwhen starting the LDAP server. Third, modifications to the database\nare not prevented, they are just dropped on the next reboot of the\nserver. Finally, performance-wise the database and indexes are rebuilt\non each server startup, so this will slow down server startup,\nespecially with large databases.\n","example":"dn: dc=example,dc=org\nobjectClass: domain\ndc: example\n\ndn: ou=users,dc=example,dc=org\nobjectClass = organizationalUnit\nou: users\n\n# ...\n","loc":["services","openldap","declarativeContents"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.openldap.enable":{"declarations":["nixos/modules/services/databases/openldap.nix"],"default":false,"description":"\n          Whether to enable the ldap server.\n        ","loc":["services","openldap","enable"],"readOnly":false,"type":"boolean"},"services.openldap.extraConfig":{"declarations":["nixos/modules/services/databases/openldap.nix"],"default":"","description":"\n          slapd.conf configuration\n        ","example":{"_type":"literalExample","text":"''\ninclude ${pkgs.openldap.out}/etc/schema/core.schema\ninclude ${pkgs.openldap.out}/etc/schema/cosine.schema\ninclude ${pkgs.openldap.out}/etc/schema/inetorgperson.schema\ninclude ${pkgs.openldap.out}/etc/schema/nis.schema\n\ndatabase bdb \nsuffix dc=example,dc=org \nrootdn cn=admin,dc=example,dc=org \n# NOTE: change after first start\nrootpw secret\ndirectory /var/db/openldap\n''\n"},"loc":["services","openldap","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.openldap.group":{"declarations":["nixos/modules/services/databases/openldap.nix"],"default":"openldap","description":"Group account under which slapd runs.","loc":["services","openldap","group"],"readOnly":false,"type":"Concatenated string"},"services.openldap.urlList":{"declarations":["nixos/modules/services/databases/openldap.nix"],"default":["ldap:///"],"description":"URL list slapd should listen on.","example":["ldaps:///"],"loc":["services","openldap","urlList"],"readOnly":false,"type":"list of Concatenated strings"},"services.openldap.user":{"declarations":["nixos/modules/services/databases/openldap.nix"],"default":"openldap","description":"User account under which slapd runs.","loc":["services","openldap","user"],"readOnly":false,"type":"Concatenated string"},"services.openntpd.enable":{"declarations":["nixos/modules/services/networking/openntpd.nix"],"default":false,"description":"Whether to enable OpenNTP time synchronization server.","example":true,"loc":["services","openntpd","enable"],"readOnly":false,"type":"boolean"},"services.openntpd.extraConfig":{"declarations":["nixos/modules/services/networking/openntpd.nix"],"default":"","description":"Additional text appended to <filename>openntpd.conf</filename>.\n","example":"listen on 127.0.0.1\nlisten on ::1\n","loc":["services","openntpd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.openntpd.extraOptions":{"declarations":["nixos/modules/services/networking/openntpd.nix"],"default":"","description":"Extra options used when launching openntpd.\n","example":"-s","loc":["services","openntpd","extraOptions"],"readOnly":false,"type":"Concatenated string"},"services.openntpd.servers":{"declarations":["nixos/modules/services/networking/openntpd.nix"],"default":["0.nixos.pool.ntp.org","1.nixos.pool.ntp.org","2.nixos.pool.ntp.org","3.nixos.pool.ntp.org"],"description":"The set of NTP servers from which to synchronise.\n","loc":["services","openntpd","servers"],"readOnly":false,"type":"list of strings"},"services.opensmtpd.addSendmailToSystemPath":{"declarations":["nixos/modules/services/mail/opensmtpd.nix"],"default":true,"description":"Whether to add OpenSMTPD's sendmail binary to the\nsystem path or not.\n","loc":["services","opensmtpd","addSendmailToSystemPath"],"readOnly":false,"type":"boolean"},"services.opensmtpd.enable":{"declarations":["nixos/modules/services/mail/opensmtpd.nix"],"default":false,"description":"Whether to enable the OpenSMTPD server.","loc":["services","opensmtpd","enable"],"readOnly":false,"type":"boolean"},"services.opensmtpd.extraServerArgs":{"declarations":["nixos/modules/services/mail/opensmtpd.nix"],"default":[],"description":"Extra command line arguments provided when the smtpd process\nis started.\n","example":["-v","-P mta"],"loc":["services","opensmtpd","extraServerArgs"],"readOnly":false,"type":"list of strings"},"services.opensmtpd.package":{"declarations":["nixos/modules/services/mail/opensmtpd.nix"],"default":"pkgs.opensmtpd","description":"The OpenSMTPD package to use.","loc":["services","opensmtpd","package"],"readOnly":false,"type":"package"},"services.opensmtpd.procPackages":{"declarations":["nixos/modules/services/mail/opensmtpd.nix"],"default":[],"description":"Packages to search for filters, tables, queues, and schedulers.\n\nAdd OpenSMTPD-extras here if you want to use the filters, etc. from\nthat package.\n","loc":["services","opensmtpd","procPackages"],"readOnly":false,"type":"list of packages"},"services.opensmtpd.serverConfiguration":{"declarations":["nixos/modules/services/mail/opensmtpd.nix"],"description":"The contents of the smtpd.conf configuration file. See the\nOpenSMTPD documentation for syntax information.\n","example":"listen on lo\naccept for any deliver to lmtp localhost:24\n","loc":["services","opensmtpd","serverConfiguration"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.openssh.allowSFTP":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":true,"description":"Whether to enable the SFTP subsystem in the SSH daemon.  This\nenables the use of commands such as <command>sftp</command> and\n<command>sshfs</command>.\n","loc":["services","openssh","allowSFTP"],"readOnly":false,"type":"boolean"},"services.openssh.authorizedKeysFiles":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":[],"description":"Files from which authorized keys are read.","loc":["services","openssh","authorizedKeysFiles"],"readOnly":false,"type":"list of strings"},"services.openssh.challengeResponseAuthentication":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":true,"description":"Specifies whether challenge/response authentication is allowed.\n","loc":["services","openssh","challengeResponseAuthentication"],"readOnly":false,"type":"boolean"},"services.openssh.ciphers":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":["chacha20-poly1305@openssh.com","aes256-gcm@openssh.com","aes128-gcm@openssh.com","aes256-ctr","aes192-ctr","aes128-ctr"],"description":"Allowed ciphers\n</para>\n<para>\nDefaults to recommended settings from both\n<link xlink:href=\"https://stribika.github.io/2015/01/04/secure-secure-shell.html\" />\nand\n<link xlink:href=\"https://wiki.mozilla.org/Security/Guidelines/OpenSSH#Modern_.28OpenSSH_6.7.2B.29\" />\n","loc":["services","openssh","ciphers"],"readOnly":false,"type":"list of strings"},"services.openssh.enable":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":false,"description":"Whether to enable the OpenSSH secure shell daemon, which\nallows secure remote logins.\n","loc":["services","openssh","enable"],"readOnly":false,"type":"boolean"},"services.openssh.extraConfig":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":"","description":"Verbatim contents of <filename>sshd_config</filename>.","loc":["services","openssh","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.openssh.forwardX11":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":false,"description":"Whether to allow X11 connections to be forwarded.\n","loc":["services","openssh","forwardX11"],"readOnly":false,"type":"boolean"},"services.openssh.gatewayPorts":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":"no","description":"Specifies whether remote hosts are allowed to connect to\nports forwarded for the client.  See\n<citerefentry><refentrytitle>sshd_config</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry>.\n","loc":["services","openssh","gatewayPorts"],"readOnly":false,"type":"string"},"services.openssh.hostKeys":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":[{"bits":4096,"path":"/etc/ssh/ssh_host_rsa_key","type":"rsa"},{"path":"/etc/ssh/ssh_host_ed25519_key","type":"ed25519"}],"description":"NixOS can automatically generate SSH host keys.  This option\nspecifies the path, type and size of each key.  See\n<citerefentry><refentrytitle>ssh-keygen</refentrytitle>\n<manvolnum>1</manvolnum></citerefentry> for supported types\nand sizes.\n","example":[{"bits":4096,"openSSHFormat":true,"path":"/etc/ssh/ssh_host_rsa_key","rounds":100,"type":"rsa"},{"comment":"key comment","path":"/etc/ssh/ssh_host_ed25519_key","rounds":100,"type":"ed25519"}],"loc":["services","openssh","hostKeys"],"readOnly":false,"type":"list of attribute sets"},"services.openssh.kexAlgorithms":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":["curve25519-sha256@libssh.org","diffie-hellman-group-exchange-sha256"],"description":"Allowed key exchange algorithms\n</para>\n<para>\nDefaults to recommended settings from both\n<link xlink:href=\"https://stribika.github.io/2015/01/04/secure-secure-shell.html\" />\nand\n<link xlink:href=\"https://wiki.mozilla.org/Security/Guidelines/OpenSSH#Modern_.28OpenSSH_6.7.2B.29\" />\n","loc":["services","openssh","kexAlgorithms"],"readOnly":false,"type":"list of strings"},"services.openssh.knownHosts":{"declarations":["nixos/modules/rename.nix"],"description":"Alias of <option>programs.ssh.knownHosts</option>.","loc":["services","openssh","knownHosts"],"readOnly":false,"type":"unspecified"},"services.openssh.listenAddresses":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":[],"description":"List of addresses and ports to listen on (ListenAddress directive\nin config). If port is not specified for address sshd will listen\non all ports specified by <literal>ports</literal> option.\nNOTE: this will override default listening on all local addresses and port 22.\nNOTE: setting this option won't automatically enable given ports\nin firewall configuration.\n","example":[{"addr":"192.168.3.1","port":22},{"addr":"0.0.0.0","port":64022}],"loc":["services","openssh","listenAddresses"],"readOnly":false,"type":"list of submodules"},"services.openssh.listenAddresses.*.addr":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":null,"description":"Host, IPv4 or IPv6 address to listen to.\n","loc":["services","openssh","listenAddresses","*","addr"],"readOnly":false,"type":"null or string"},"services.openssh.listenAddresses.*.port":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":null,"description":"Port to listen to.\n","loc":["services","openssh","listenAddresses","*","port"],"readOnly":false,"type":"null or signed integer"},"services.openssh.logLevel":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":"VERBOSE","description":"Gives the verbosity level that is used when logging messages from sshd(8). The possible values are:\nQUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3. The default is VERBOSE. DEBUG and DEBUG1\nare equivalent. DEBUG2 and DEBUG3 each specify higher levels of debugging output. Logging with a DEBUG level\nviolates the privacy of users and is not recommended.\n\nLogLevel VERBOSE logs user's key fingerprint on login.\nNeeded to have a clear audit track of which key was used to log in.\n","loc":["services","openssh","logLevel"],"readOnly":false,"type":"one of \"QUIET\", \"FATAL\", \"ERROR\", \"INFO\", \"VERBOSE\", \"DEBUG\", \"DEBUG1\", \"DEBUG2\", \"DEBUG3\""},"services.openssh.macs":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":["hmac-sha2-512-etm@openssh.com","hmac-sha2-256-etm@openssh.com","umac-128-etm@openssh.com","hmac-sha2-512","hmac-sha2-256","umac-128@openssh.com"],"description":"Allowed MACs\n</para>\n<para>\nDefaults to recommended settings from both\n<link xlink:href=\"https://stribika.github.io/2015/01/04/secure-secure-shell.html\" />\nand\n<link xlink:href=\"https://wiki.mozilla.org/Security/Guidelines/OpenSSH#Modern_.28OpenSSH_6.7.2B.29\" />\n","loc":["services","openssh","macs"],"readOnly":false,"type":"list of strings"},"services.openssh.moduliFile":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"description":"Path to <literal>moduli</literal> file to install in\n<literal>/etc/ssh/moduli</literal>. If this option is unset, then\nthe <literal>moduli</literal> file shipped with OpenSSH will be used.\n","example":"/etc/my-local-ssh-moduli;","loc":["services","openssh","moduliFile"],"readOnly":false,"type":"path"},"services.openssh.openFirewall":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":true,"description":"Whether to automatically open the specified ports in the firewall.\n","loc":["services","openssh","openFirewall"],"readOnly":false,"type":"boolean"},"services.openssh.passwordAuthentication":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":true,"description":"Specifies whether password authentication is allowed.\n","loc":["services","openssh","passwordAuthentication"],"readOnly":false,"type":"boolean"},"services.openssh.permitRootLogin":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":"prohibit-password","description":"Whether the root user can login using ssh.\n","loc":["services","openssh","permitRootLogin"],"readOnly":false,"type":"one of \"yes\", \"without-password\", \"prohibit-password\", \"forced-commands-only\", \"no\""},"services.openssh.ports":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":[22],"description":"Specifies on which ports the SSH daemon listens.\n","loc":["services","openssh","ports"],"readOnly":false,"type":"list of signed integers"},"services.openssh.sftpFlags":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":[],"description":"Commandline flags to add to sftp-server.\n","example":["-f AUTHPRIV","-l INFO"],"loc":["services","openssh","sftpFlags"],"readOnly":false,"type":"list of strings"},"services.openssh.startWhenNeeded":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":false,"description":"If set, <command>sshd</command> is socket-activated; that\nis, instead of having it permanently running as a daemon,\nsystemd will start an instance for each incoming connection.\n","loc":["services","openssh","startWhenNeeded"],"readOnly":false,"type":"boolean"},"services.openssh.useDns":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":false,"description":"Specifies whether sshd(8) should look up the remote host name, and to check that the resolved host name for\nthe remote IP address maps back to the very same IP address.\nIf this option is set to no (the default) then only addresses and not host names may be used in\n~/.ssh/authorized_keys from and sshd_config Match Host directives.\n","loc":["services","openssh","useDns"],"readOnly":false,"type":"boolean"},"services.opentracker.enable":{"declarations":["nixos/modules/services/torrent/opentracker.nix"],"default":false,"description":"Whether to enable opentracker.","example":true,"loc":["services","opentracker","enable"],"readOnly":false,"type":"boolean"},"services.opentracker.extraOptions":{"declarations":["nixos/modules/services/torrent/opentracker.nix"],"default":"","description":"Configuration Arguments for opentracker\nSee https://erdgeist.org/arts/software/opentracker/ for all params\n","loc":["services","opentracker","extraOptions"],"readOnly":false,"type":"strings concatenated with \" \""},"services.opentracker.package":{"declarations":["nixos/modules/services/torrent/opentracker.nix"],"default":"pkgs.opentracker","description":"opentracker package to use\n","loc":["services","opentracker","package"],"readOnly":false,"type":"package"},"services.opentsdb.config":{"declarations":["nixos/modules/services/databases/opentsdb.nix"],"default":"tsd.core.auto_create_metrics = true\ntsd.http.request.enable_chunked  = true\n","description":"The contents of OpenTSDB's configuration file\n","loc":["services","opentsdb","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.opentsdb.enable":{"declarations":["nixos/modules/services/databases/opentsdb.nix"],"default":false,"description":"Whether to run OpenTSDB.\n","loc":["services","opentsdb","enable"],"readOnly":false,"type":"boolean"},"services.opentsdb.group":{"declarations":["nixos/modules/services/databases/opentsdb.nix"],"default":"opentsdb","description":"Group account under which OpenTSDB runs.\n","loc":["services","opentsdb","group"],"readOnly":false,"type":"Concatenated string"},"services.opentsdb.package":{"declarations":["nixos/modules/services/databases/opentsdb.nix"],"default":"pkgs.opentsdb","description":"OpenTSDB package to use.\n","example":{"_type":"literalExample","text":"pkgs.opentsdb"},"loc":["services","opentsdb","package"],"readOnly":false,"type":"package"},"services.opentsdb.port":{"declarations":["nixos/modules/services/databases/opentsdb.nix"],"default":4242,"description":"Which port OpenTSDB listens on.\n","loc":["services","opentsdb","port"],"readOnly":false,"type":"signed integer"},"services.opentsdb.user":{"declarations":["nixos/modules/services/databases/opentsdb.nix"],"default":"opentsdb","description":"User account under which OpenTSDB runs.\n","loc":["services","opentsdb","user"],"readOnly":false,"type":"Concatenated string"},"services.openvpn.servers":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"default":{},"description":"Each attribute of this option defines a systemd service that\nruns an OpenVPN instance.  These can be OpenVPN servers or\nclients.  The name of each systemd service is\n<literal>openvpn-<replaceable>name</replaceable>.service</literal>,\nwhere <replaceable>name</replaceable> is the corresponding\nattribute name.\n","example":{"_type":"literalExample","text":"{\n  server = {\n    config = ''\n      # Simplest server configuration: http://openvpn.net/index.php/documentation/miscellaneous/static-key-mini-howto.html.\n      # server :\n      dev tun\n      ifconfig 10.8.0.1 10.8.0.2\n      secret /root/static.key\n    '';\n    up = \"ip route add ...\";\n    down = \"ip route del ...\";\n  };\n\n  client = {\n    config = ''\n      client\n      remote vpn.example.org\n      dev tun\n      proto tcp-client\n      port 8080\n      ca /root/.vpn/ca.crt\n      cert /root/.vpn/alice.crt\n      key /root/.vpn/alice.key\n    '';\n    up = \"echo nameserver $nameserver | ${pkgs.openresolv}/sbin/resolvconf -m 0 -a $dev\";\n    down = \"${pkgs.openresolv}/sbin/resolvconf -d $dev\";\n  };\n}\n"},"loc":["services","openvpn","servers"],"readOnly":false,"type":"attribute set of submodules"},"services.openvpn.servers.<name>.authUserPass":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"default":null,"description":"This option can be used to store the username / password credentials\nwith the \"auth-user-pass\" authentication method.\n\nWARNING: Using this option will put the credentials WORLD-READABLE in the Nix store!\n","loc":["services","openvpn","servers","<name>","authUserPass"],"readOnly":false,"type":"null or submodule"},"services.openvpn.servers.<name>.authUserPass.password":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"description":"The password to store inside the credentials file.","loc":["services","openvpn","servers","<name>","authUserPass","password"],"readOnly":false,"type":"Concatenated string"},"services.openvpn.servers.<name>.authUserPass.username":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"description":"The username to store inside the credentials file.","loc":["services","openvpn","servers","<name>","authUserPass","username"],"readOnly":false,"type":"Concatenated string"},"services.openvpn.servers.<name>.autoStart":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"default":true,"description":"Whether this OpenVPN instance should be started automatically.","loc":["services","openvpn","servers","<name>","autoStart"],"readOnly":false,"type":"boolean"},"services.openvpn.servers.<name>.config":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"description":"Configuration of this OpenVPN instance.  See\n<citerefentry><refentrytitle>openvpn</refentrytitle><manvolnum>8</manvolnum></citerefentry>\nfor details.\n\nTo import an external config file, use the following definition:\n<literal>config = \"config /path/to/config.ovpn\"</literal>\n","loc":["services","openvpn","servers","<name>","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.openvpn.servers.<name>.down":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"default":"","description":"Shell commands executed when the instance is shutting down.\n","loc":["services","openvpn","servers","<name>","down"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.openvpn.servers.<name>.up":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"default":"","description":"Shell commands executed when the instance is starting.\n","loc":["services","openvpn","servers","<name>","up"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.openvpn.servers.<name>.updateResolvConf":{"declarations":["nixos/modules/services/networking/openvpn.nix"],"default":false,"description":"Use the script from the update-resolv-conf package to automatically\nupdate resolv.conf with the DNS information provided by openvpn. The\nscript will be run after the \"up\" commands and before the \"down\" commands.\n","loc":["services","openvpn","servers","<name>","updateResolvConf"],"readOnly":false,"type":"boolean"},"services.osquery.databasePath":{"declarations":["nixos/modules/services/monitoring/osquery.nix"],"default":"/var/osquery/osquery.db","description":"Path used for database file.","loc":["services","osquery","databasePath"],"readOnly":false,"type":"path"},"services.osquery.enable":{"declarations":["nixos/modules/services/monitoring/osquery.nix"],"default":false,"description":"Whether to enable osquery.","example":true,"loc":["services","osquery","enable"],"readOnly":false,"type":"boolean"},"services.osquery.extraConfig":{"declarations":["nixos/modules/services/monitoring/osquery.nix"],"default":{},"description":"Extra config to be recursively merged into the JSON config file.","loc":["services","osquery","extraConfig"],"readOnly":false,"type":"attribute set"},"services.osquery.loggerPath":{"declarations":["nixos/modules/services/monitoring/osquery.nix"],"default":"/var/log/osquery","description":"Base directory used for logging.","loc":["services","osquery","loggerPath"],"readOnly":false,"type":"path"},"services.osquery.pidfile":{"declarations":["nixos/modules/services/monitoring/osquery.nix"],"default":"/var/osquery/osqueryd.pidfile","description":"Path used for pid file.","loc":["services","osquery","pidfile"],"readOnly":false,"type":"path"},"services.osquery.utc":{"declarations":["nixos/modules/services/monitoring/osquery.nix"],"default":true,"description":"Attempt to convert all UNIX calendar times to UTC.","loc":["services","osquery","utc"],"readOnly":false,"type":"boolean"},"services.osrm.address":{"declarations":["nixos/modules/services/misc/osrm.nix"],"default":"0.0.0.0","description":"IP address on which the web server will listen.","loc":["services","osrm","address"],"readOnly":false,"type":"string"},"services.osrm.algorithm":{"declarations":["nixos/modules/services/misc/osrm.nix"],"default":"MLD","description":"Algorithm to use for the data. Must be one of CH, CoreCH, MLD","loc":["services","osrm","algorithm"],"readOnly":false,"type":"one of \"CH\", \"CoreCH\", \"MLD\""},"services.osrm.dataFile":{"declarations":["nixos/modules/services/misc/osrm.nix"],"description":"Data file location","example":"/var/lib/osrm/berlin-latest.osrm","loc":["services","osrm","dataFile"],"readOnly":false,"type":"path"},"services.osrm.enable":{"declarations":["nixos/modules/services/misc/osrm.nix"],"default":false,"description":"Enable the OSRM service.","loc":["services","osrm","enable"],"readOnly":false,"type":"boolean"},"services.osrm.extraFlags":{"declarations":["nixos/modules/services/misc/osrm.nix"],"default":[],"description":"Extra command line arguments passed to osrm-routed","example":["--max-table-size 1000","--max-matching-size 1000"],"loc":["services","osrm","extraFlags"],"readOnly":false,"type":"list of strings"},"services.osrm.port":{"declarations":["nixos/modules/services/misc/osrm.nix"],"default":5000,"description":"Port on which the web server will run.","loc":["services","osrm","port"],"readOnly":false,"type":"signed integer"},"services.osrm.threads":{"declarations":["nixos/modules/services/misc/osrm.nix"],"default":4,"description":"Number of threads to use.","loc":["services","osrm","threads"],"readOnly":false,"type":"signed integer"},"services.ostinato.enable":{"declarations":["nixos/modules/services/networking/ostinato.nix"],"default":false,"description":"Whether to enable Ostinato agent-controller (Drone).","example":true,"loc":["services","ostinato","enable"],"readOnly":false,"type":"boolean"},"services.ostinato.port":{"declarations":["nixos/modules/services/networking/ostinato.nix"],"default":7878,"description":"Port to listen on.\n","loc":["services","ostinato","port"],"readOnly":false,"type":"signed integer"},"services.ostinato.portList.exclude":{"declarations":["nixos/modules/services/networking/ostinato.nix"],"default":[],"description":"A list of ports does not appear on the port list managed by drone.\n","example":"[ \"usbmon*\" \"eth0\" ]","loc":["services","ostinato","portList","exclude"],"readOnly":false,"type":"list of strings"},"services.ostinato.portList.include":{"declarations":["nixos/modules/services/networking/ostinato.nix"],"default":[],"description":"For a port to pass the filter and appear on the port list managed\nby drone, it be allowed by this include list.\n","example":"[ \"eth*\" \"lo*\" ]","loc":["services","ostinato","portList","include"],"readOnly":false,"type":"list of Concatenated strings"},"services.ostinato.rateAccuracy":{"declarations":["nixos/modules/services/networking/ostinato.nix"],"default":"High","description":"To ensure that the actual transmit rate is as close as possible to\nthe configured transmit rate, Drone runs a busy-wait loop.\nWhile this provides the maximum accuracy possible, the CPU\nutilization is 100% while the transmit is on. You can however,\nsacrifice the accuracy to reduce the CPU load.\n","loc":["services","ostinato","rateAccuracy"],"readOnly":false,"type":"one of \"High\", \"Low\""},"services.ostinato.rpcServer.address":{"declarations":["nixos/modules/services/networking/ostinato.nix"],"default":"0.0.0.0","description":"By default, the Drone RPC server will listen on all interfaces and\nlocal IPv4 adresses for incoming connections from clients.  Specify\na single IPv4 or IPv6 address if you want to restrict that.\nTo listen on any IPv6 address, use ::\n","loc":["services","ostinato","rpcServer","address"],"readOnly":false,"type":"Concatenated string"},"services.owamp.enable":{"declarations":["nixos/modules/services/networking/owamp.nix"],"default":false,"description":"Whether to enable Enable OWAMP server.","example":true,"loc":["services","owamp","enable"],"readOnly":false,"type":"boolean"},"services.oxidized.configFile":{"declarations":["nixos/modules/services/admin/oxidized.nix"],"description":"Path to the oxidized configuration file.\n","example":{"_type":"literalExample","text":"pkgs.writeText \"oxidized-config.yml\" ''\n  ---\n  debug: true\n  use_syslog: true\n  input:\n    default: ssh\n    ssh:\n      secure: true\n  interval: 3600\n  model_map:\n    dell: powerconnect\n    hp: procurve\n  source:\n    default: csv\n    csv:\n      delimiter: !ruby/regexp /:/\n      file: \"/var/lib/oxidized/.config/oxidized/router.db\"\n      map:\n        name: 0\n        model: 1\n        username: 2\n        password: 3\n  pid: \"/var/lib/oxidized/.config/oxidized/pid\"\n  rest: 127.0.0.1:8888\n  retries: 3\n  # ... additional config\n'';\n"},"loc":["services","oxidized","configFile"],"readOnly":false,"type":"path"},"services.oxidized.dataDir":{"declarations":["nixos/modules/services/admin/oxidized.nix"],"default":"/var/lib/oxidized","description":"State directory for the oxidized service.","loc":["services","oxidized","dataDir"],"readOnly":false,"type":"path"},"services.oxidized.enable":{"declarations":["nixos/modules/services/admin/oxidized.nix"],"default":false,"description":"Whether to enable the oxidized configuation backup service..","example":true,"loc":["services","oxidized","enable"],"readOnly":false,"type":"boolean"},"services.oxidized.group":{"declarations":["nixos/modules/services/admin/oxidized.nix"],"default":"oxidized","description":"Group under which the oxidized service runs.\n","loc":["services","oxidized","group"],"readOnly":false,"type":"string"},"services.oxidized.routerDB":{"declarations":["nixos/modules/services/admin/oxidized.nix"],"description":"Path to the file/database which contains the targets for oxidized.\n","example":{"_type":"literalExample","text":"pkgs.writeText \"oxidized-router.db\" ''\n  hostname-sw1:powerconnect:username1:password2\n  hostname-sw2:procurve:username2:password2\n  # ... additional hosts\n''\n"},"loc":["services","oxidized","routerDB"],"readOnly":false,"type":"path"},"services.oxidized.user":{"declarations":["nixos/modules/services/admin/oxidized.nix"],"default":"oxidized","description":"User under which the oxidized service runs.\n","loc":["services","oxidized","user"],"readOnly":false,"type":"string"},"services.packagekit.enable":{"declarations":["nixos/modules/services/misc/packagekit.nix"],"default":false,"description":"Whether to enable PackageKit provides a cross-platform D-Bus abstraction layer for\ninstalling software. Software utilizing PackageKit can install\nsoftware regardless of the package manager.\n.","example":true,"loc":["services","packagekit","enable"],"readOnly":false,"type":"boolean"},"services.parsoid.enable":{"declarations":["nixos/modules/services/misc/parsoid.nix"],"default":false,"description":"Whether to enable Parsoid -- bidirectional\nwikitext parser.\n","loc":["services","parsoid","enable"],"readOnly":false,"type":"boolean"},"services.parsoid.extraConfig":{"declarations":["nixos/modules/services/misc/parsoid.nix"],"default":{},"description":"Extra configuration to add to parsoid configuration.\n","loc":["services","parsoid","extraConfig"],"readOnly":false,"type":"attribute set"},"services.parsoid.interface":{"declarations":["nixos/modules/services/misc/parsoid.nix"],"default":"127.0.0.1","description":"Interface to listen on.\n","loc":["services","parsoid","interface"],"readOnly":false,"type":"string"},"services.parsoid.port":{"declarations":["nixos/modules/services/misc/parsoid.nix"],"default":8000,"description":"Port to listen on.\n","loc":["services","parsoid","port"],"readOnly":false,"type":"signed integer"},"services.parsoid.wikis":{"declarations":["nixos/modules/services/misc/parsoid.nix"],"description":"Used MediaWiki API endpoints.\n","example":["http://localhost/api.php"],"loc":["services","parsoid","wikis"],"readOnly":false,"type":"list of string or attribute sets"},"services.parsoid.workers":{"declarations":["nixos/modules/services/misc/parsoid.nix"],"default":2,"description":"Number of Parsoid workers.\n","loc":["services","parsoid","workers"],"readOnly":false,"type":"signed integer"},"services.pcscd.enable":{"declarations":["nixos/modules/services/hardware/pcscd.nix"],"default":false,"description":"Whether to enable PCSC-Lite daemon.","example":true,"loc":["services","pcscd","enable"],"readOnly":false,"type":"boolean"},"services.pcscd.plugins":{"declarations":["nixos/modules/services/hardware/pcscd.nix"],"default":"[ pkgs.ccid ]","description":"Plugin packages to be used for PCSC-Lite.","example":{"_type":"literalExample","text":"[ pkgs.pcsc-cyberjack ]"},"loc":["services","pcscd","plugins"],"readOnly":false,"type":"list of packages"},"services.pcscd.readerConfig":{"declarations":["nixos/modules/services/hardware/pcscd.nix"],"default":"","description":"Configuration for devices that aren't hotpluggable.\n\nSee <citerefentry><refentrytitle>reader.conf</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for valid options.\n","example":"FRIENDLYNAME      \"Some serial reader\"\nDEVICENAME        /dev/ttyS0\nLIBPATH           /path/to/serial_reader.so\nCHANNELID         1\n","loc":["services","pcscd","readerConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.pdns-recursor.api.address":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":"0.0.0.0","description":"IP address Recursor REST API server will bind to.\n","loc":["services","pdns-recursor","api","address"],"readOnly":false,"type":"string"},"services.pdns-recursor.api.allowFrom":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":["0.0.0.0/0"],"description":"IP address ranges of clients allowed to make API requests.\n","loc":["services","pdns-recursor","api","allowFrom"],"readOnly":false,"type":"list of strings"},"services.pdns-recursor.api.port":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":8082,"description":"Port number Recursor REST API server will bind to.\n","loc":["services","pdns-recursor","api","port"],"readOnly":false,"type":"signed integer"},"services.pdns-recursor.dns.address":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":"0.0.0.0","description":"IP address Recursor DNS server will bind to.\n","loc":["services","pdns-recursor","dns","address"],"readOnly":false,"type":"string"},"services.pdns-recursor.dns.allowFrom":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":["10.0.0.0/8","172.16.0.0/12","192.168.0.0/16"],"description":"IP address ranges of clients allowed to make DNS queries.\n","example":["0.0.0.0/0"],"loc":["services","pdns-recursor","dns","allowFrom"],"readOnly":false,"type":"list of strings"},"services.pdns-recursor.dns.port":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":53,"description":"Port number Recursor DNS server will bind to.\n","loc":["services","pdns-recursor","dns","port"],"readOnly":false,"type":"signed integer"},"services.pdns-recursor.dnssecValidation":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":"validate","description":"Controls the level of DNSSEC processing done by the PowerDNS Recursor.\nSee https://doc.powerdns.com/md/recursor/dnssec/ for a detailed explanation.\n","loc":["services","pdns-recursor","dnssecValidation"],"readOnly":false,"type":"one of \"off\", \"process-no-validate\", \"process\", \"log-fail\", \"validate\""},"services.pdns-recursor.enable":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":false,"description":"Whether to enable PowerDNS Recursor, a recursive DNS server.","example":true,"loc":["services","pdns-recursor","enable"],"readOnly":false,"type":"boolean"},"services.pdns-recursor.exportHosts":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":false,"description":"Whether to export names and IP addresses defined in /etc/hosts.\n","loc":["services","pdns-recursor","exportHosts"],"readOnly":false,"type":"boolean"},"services.pdns-recursor.extraConfig":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":"","description":"Extra options to be appended to the configuration file.\n","loc":["services","pdns-recursor","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.pdns-recursor.forwardZones":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":{},"description":"DNS zones to be forwarded to other servers.\n","example":{"eth":"127.0.0.1:5353"},"loc":["services","pdns-recursor","forwardZones"],"readOnly":false,"type":"attribute set"},"services.pdns-recursor.resolveDNSChainQueries":{"declarations":["nixos/modules/services/networking/dnschain.nix"],"default":false,"description":"Resolve <literal>.bit</literal> top-level domains using DNSChain and namecoin.\n","loc":["services","pdns-recursor","resolveDNSChainQueries"],"readOnly":false,"type":"boolean"},"services.pdns-recursor.serveRFC1918":{"declarations":["nixos/modules/services/networking/pdns-recursor.nix"],"default":true,"description":"Whether to directly resolve the RFC1918 reverse-mapping domains:\n<literal>10.in-addr.arpa</literal>,\n<literal>168.192.in-addr.arpa</literal>,\n<literal>16-31.172.in-addr.arpa</literal>\nThis saves load on the AS112 servers.\n","loc":["services","pdns-recursor","serveRFC1918"],"readOnly":false,"type":"boolean"},"services.pdnsd.cacheDir":{"declarations":["nixos/modules/services/networking/pdnsd.nix"],"default":"/var/cache/pdnsd","description":"Directory holding the pdnsd cache","loc":["services","pdnsd","cacheDir"],"readOnly":false,"type":"string"},"services.pdnsd.enable":{"declarations":["nixos/modules/services/networking/pdnsd.nix"],"default":false,"description":"Whether to enable pdnsd.","example":true,"loc":["services","pdnsd","enable"],"readOnly":false,"type":"boolean"},"services.pdnsd.extraConfig":{"declarations":["nixos/modules/services/networking/pdnsd.nix"],"default":"","description":"Extra configuration directives that should be added to\n<literal>pdnsd.conf</literal>.\n","loc":["services","pdnsd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.pdnsd.globalConfig":{"declarations":["nixos/modules/services/networking/pdnsd.nix"],"default":"","description":"Global configuration that should be added to the global directory\nof <literal>pdnsd.conf</literal>.\n","loc":["services","pdnsd","globalConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.pdnsd.serverConfig":{"declarations":["nixos/modules/services/networking/pdnsd.nix"],"default":"","description":"Server configuration that should be added to the server directory\nof <literal>pdnsd.conf</literal>.\n","loc":["services","pdnsd","serverConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.peerflix.downloadDir":{"declarations":["nixos/modules/services/torrent/peerflix.nix"],"default":"/var/lib/peerflix/torrents","description":"Peerflix temporary download directory.","loc":["services","peerflix","downloadDir"],"readOnly":false,"type":"path"},"services.peerflix.enable":{"declarations":["nixos/modules/services/torrent/peerflix.nix"],"default":false,"description":"Whether to enable peerflix service.","loc":["services","peerflix","enable"],"readOnly":false,"type":"boolean"},"services.peerflix.stateDir":{"declarations":["nixos/modules/services/torrent/peerflix.nix"],"default":"/var/lib/peerflix","description":"Peerflix state directory.","loc":["services","peerflix","stateDir"],"readOnly":false,"type":"path"},"services.pfix-srsd.domain":{"declarations":["nixos/modules/services/mail/pfix-srsd.nix"],"description":"The domain for which to enable srs","example":"example.com","loc":["services","pfix-srsd","domain"],"readOnly":false,"type":"string"},"services.pfix-srsd.enable":{"declarations":["nixos/modules/services/mail/pfix-srsd.nix"],"default":false,"description":"Whether to run the postfix sender rewriting scheme daemon.","loc":["services","pfix-srsd","enable"],"readOnly":false,"type":"boolean"},"services.pfix-srsd.secretsFile":{"declarations":["nixos/modules/services/mail/pfix-srsd.nix"],"default":"/var/lib/pfix-srsd/secrets","description":"The secret data used to encode the SRS address.\nto generate, use a command like:\n<literal>for n in $(seq 5); do dd if=/dev/urandom count=1 bs=1024 status=none | sha256sum | sed 's/  -$//' | sed 's/^/          /'; done</literal>\n","loc":["services","pfix-srsd","secretsFile"],"readOnly":false,"type":"path"},"services.pgmanage.allowCustomConnections":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":false,"description":"This tells pgmanage whether or not to allow anyone to use a custom\nconnection from the login screen.\n","loc":["services","pgmanage","allowCustomConnections"],"readOnly":false,"type":"boolean"},"services.pgmanage.connections":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":{},"description":"pgmanage requires at least one PostgreSQL server be defined.\n</para><para>\nDetailed information about PostgreSQL connection strings is available at:\n<link xlink:href=\"http://www.postgresql.org/docs/current/static/libpq-connect.html\"/>\n</para><para>\nNote that you should not specify your user name or password. That\ninformation will be entered on the login screen. If you specify a\nusername or password, it will be removed by pgmanage before attempting to\nconnect to a database.\n","example":{"mini-server":"hostaddr=127.0.0.1 port=5432 dbname=postgres sslmode=require","nuc-server":"hostaddr=192.168.0.100 port=5432 dbname=postgres"},"loc":["services","pgmanage","connections"],"readOnly":false,"type":"attribute set of strings"},"services.pgmanage.enable":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":false,"description":"Whether to enable PostgreSQL Administration for the web.","example":true,"loc":["services","pgmanage","enable"],"readOnly":false,"type":"boolean"},"services.pgmanage.localOnly":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":true,"description":"This tells pgmanage whether or not to set the listening socket to local\naddresses only.\n","loc":["services","pgmanage","localOnly"],"readOnly":false,"type":"boolean"},"services.pgmanage.logLevel":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":"error","description":"Verbosity of logs\n","loc":["services","pgmanage","logLevel"],"readOnly":false,"type":"one of \"error\", \"warn\", \"notice\", \"info\""},"services.pgmanage.loginGroup":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":null,"description":"This tells pgmanage to only allow users in a certain PostgreSQL group to\nlogin to pgmanage. Note that a connection will be made to PostgreSQL in\norder to test if the user is a member of the login group.\n","loc":["services","pgmanage","loginGroup"],"readOnly":false,"type":"null or string"},"services.pgmanage.loginTimeout":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":3600,"description":"Number of seconds of inactivity before user is automatically logged\nout.\n","loc":["services","pgmanage","loginTimeout"],"readOnly":false,"type":"signed integer"},"services.pgmanage.package":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":"pkgs.pgmanage","description":"The pgmanage package to use.\n","loc":["services","pgmanage","package"],"readOnly":false,"type":"package"},"services.pgmanage.port":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":8080,"description":"This tells pgmanage what port to listen on for browser requests.\n","loc":["services","pgmanage","port"],"readOnly":false,"type":"signed integer"},"services.pgmanage.sqlRoot":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":"/var/lib/pgmanage","description":"This tells pgmanage where to put the SQL file history. All tabs are saved\nto this location so that if you get disconnected from pgmanage you\ndon't lose your work.\n","loc":["services","pgmanage","sqlRoot"],"readOnly":false,"type":"string"},"services.pgmanage.superOnly":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":true,"description":"This tells pgmanage whether or not to only allow super users to\nlogin. The recommended value is true and will restrict users who are not\nsuper users from logging in to any PostgreSQL instance through\npgmanage. Note that a connection will be made to PostgreSQL in order to\ntest if the user is a superuser.\n","loc":["services","pgmanage","superOnly"],"readOnly":false,"type":"boolean"},"services.pgmanage.tls":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"default":null,"description":"These options tell pgmanage where the TLS Certificate and Key files\nreside. If you use these options then you'll only be able to access\npgmanage through a secure TLS connection. These options are only\nnecessary if you wish to connect directly to pgmanage using a secure TLS\nconnection. As an alternative, you can set up pgmanage in a reverse proxy\nconfiguration. This allows your web server to terminate the secure\nconnection and pass on the request to pgmanage. You can find help to set\nup this configuration in:\n<link xlink:href=\"https://github.com/pgManage/pgManage/blob/master/INSTALL_NGINX.md\"/>\n","loc":["services","pgmanage","tls"],"readOnly":false,"type":"null or submodule"},"services.pgmanage.tls.cert":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"description":"TLS certificate","loc":["services","pgmanage","tls","cert"],"readOnly":false,"type":"string"},"services.pgmanage.tls.key":{"declarations":["nixos/modules/services/databases/pgmanage.nix"],"description":"TLS key","loc":["services","pgmanage","tls","key"],"readOnly":false,"type":"string"},"services.pgpkeyserver-lite.enable":{"declarations":["nixos/modules/services/web-apps/pgpkeyserver-lite.nix"],"default":false,"description":"Whether to enable pgpkeyserver-lite on a nginx vHost proxying to a gpg keyserver.","example":true,"loc":["services","pgpkeyserver-lite","enable"],"readOnly":false,"type":"boolean"},"services.pgpkeyserver-lite.hkpAddress":{"declarations":["nixos/modules/services/web-apps/pgpkeyserver-lite.nix"],"default":"127.0.0.1","description":"\n          Wich ip address the sks-keyserver is listening on.\n        ","loc":["services","pgpkeyserver-lite","hkpAddress"],"readOnly":false,"type":"string"},"services.pgpkeyserver-lite.hkpPort":{"declarations":["nixos/modules/services/web-apps/pgpkeyserver-lite.nix"],"default":11371,"description":"\n          Which port the sks-keyserver is listening on.\n        ","loc":["services","pgpkeyserver-lite","hkpPort"],"readOnly":false,"type":"signed integer"},"services.pgpkeyserver-lite.hostname":{"declarations":["nixos/modules/services/web-apps/pgpkeyserver-lite.nix"],"description":"\n          Which hostname to set the vHost to that is proxying to sks.\n        ","loc":["services","pgpkeyserver-lite","hostname"],"readOnly":false,"type":"string"},"services.pgpkeyserver-lite.package":{"declarations":["nixos/modules/services/web-apps/pgpkeyserver-lite.nix"],"default":"pkgs.pgpkeyserver-lite","description":"\n          Which webgui derivation to use.\n        ","loc":["services","pgpkeyserver-lite","package"],"readOnly":false,"type":"package"},"services.phd.enable":{"declarations":["nixos/modules/services/misc/phd.nix"],"default":false,"description":"\n          Enable daemons for phabricator.\n        ","loc":["services","phd","enable"],"readOnly":false,"type":"unspecified"},"services.phpfpm.extraConfig":{"declarations":["nixos/modules/services/web-servers/phpfpm/default.nix"],"default":"","description":"Extra configuration that should be put in the global section of\nthe PHP-FPM configuration file. Do not specify the options\n<literal>error_log</literal> or\n<literal>daemonize</literal> here, since they are generated by\nNixOS.\n","loc":["services","phpfpm","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.phpfpm.phpOptions":{"declarations":["nixos/modules/services/web-servers/phpfpm/default.nix"],"default":"","description":"Options appended to the PHP configuration file <filename>php.ini</filename>.","example":"date.timezone = \"CET\"\n","loc":["services","phpfpm","phpOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.phpfpm.phpPackage":{"declarations":["nixos/modules/services/web-servers/phpfpm/default.nix"],"default":"pkgs.php","description":"The PHP package to use for running the PHP-FPM service.\n","loc":["services","phpfpm","phpPackage"],"readOnly":false,"type":"package"},"services.phpfpm.poolConfigs":{"declarations":["nixos/modules/services/web-servers/phpfpm/default.nix"],"default":{},"description":"A mapping between PHP-FPM pool names and their configurations.\nSee the documentation on <literal>php-fpm.conf</literal> for\ndetails on configuration directives. If no pools are defined,\nthe phpfpm service is disabled.\n","example":{"_type":"literalExample","text":"{ mypool = ''\n    listen = /run/phpfpm/mypool\n    user = nobody\n    pm = dynamic\n    pm.max_children = 75\n    pm.start_servers = 10\n    pm.min_spare_servers = 5\n    pm.max_spare_servers = 20\n    pm.max_requests = 500\n  '';\n}\n"},"loc":["services","phpfpm","poolConfigs"],"readOnly":false,"type":"attribute set of strings concatenated with \"\\n\"s"},"services.phpfpm.pools":{"declarations":["nixos/modules/services/web-servers/phpfpm/default.nix"],"default":{},"description":"PHP-FPM pools. If no pools or poolConfigs are defined, the PHP-FPM\nservice is disabled.\n","example":{"_type":"literalExample","text":"{\n  mypool = {\n    listen = \"/path/to/unix/socket\";\n    extraConfig = ''\n      user = nobody\n      pm = dynamic\n      pm.max_children = 75\n      pm.start_servers = 10\n      pm.min_spare_servers = 5\n      pm.max_spare_servers = 20\n      pm.max_requests = 500\n    '';\n  }\n}"},"loc":["services","phpfpm","pools"],"readOnly":false,"type":"attribute set of submodules"},"services.phpfpm.pools.<name>.extraConfig":{"declarations":["nixos/modules/services/web-servers/phpfpm/default.nix"],"description":"Extra lines that go into the pool configuration.\nSee the documentation on <literal>php-fpm.conf</literal> for\ndetails on configuration directives.\n","example":"user = nobody\npm = dynamic\npm.max_children = 75\npm.start_servers = 10\npm.min_spare_servers = 5\npm.max_spare_servers = 20\npm.max_requests = 500\n","loc":["services","phpfpm","pools","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.phpfpm.pools.<name>.listen":{"declarations":["nixos/modules/services/web-servers/phpfpm/default.nix"],"description":"The address on which to accept FastCGI requests.\n","example":"/path/to/unix/socket","loc":["services","phpfpm","pools","<name>","listen"],"readOnly":false,"type":"string"},"services.physlock.allowAnyUser":{"declarations":["nixos/modules/services/security/physlock.nix"],"default":false,"description":"Whether to allow any user to lock the screen. This will install a\nsetuid wrapper to allow any user to start physlock as root, which\nis a minor security risk. Call the physlock binary to use this instead\nof using the systemd service.\n\nNote that you might need to relog to have the correct binary in your\nPATH upon changing this option.\n","loc":["services","physlock","allowAnyUser"],"readOnly":false,"type":"boolean"},"services.physlock.disableSysRq":{"declarations":["nixos/modules/services/security/physlock.nix"],"default":true,"description":"Whether to disable SysRq when locked with physlock.\n","loc":["services","physlock","disableSysRq"],"readOnly":false,"type":"boolean"},"services.physlock.enable":{"declarations":["nixos/modules/services/security/physlock.nix"],"default":false,"description":"Whether to enable the <command>physlock</command> screen locking mechanism.\n\nEnable this and then run <command>systemctl start physlock</command>\nto securely lock the screen.\n\nThis will switch to a new virtual terminal, turn off console\nswitching and disable SysRq mechanism (when\n<option>services.physlock.disableSysRq</option> is set)\nuntil the root or user password is given.\n","loc":["services","physlock","enable"],"readOnly":false,"type":"boolean"},"services.physlock.lockOn.extraTargets":{"declarations":["nixos/modules/services/security/physlock.nix"],"default":[],"description":"Other targets to lock the screen just before.\n\nUseful if you want to e.g. both autologin to X11 so that\nyour <filename>~/.xsession</filename> gets executed and\nstill to have the screen locked so that the system can be\nbooted relatively unattended.\n","example":["display-manager.service"],"loc":["services","physlock","lockOn","extraTargets"],"readOnly":false,"type":"list of strings"},"services.physlock.lockOn.hibernate":{"declarations":["nixos/modules/services/security/physlock.nix"],"default":true,"description":"Whether to lock screen with physlock just before hibernate.\n","loc":["services","physlock","lockOn","hibernate"],"readOnly":false,"type":"boolean"},"services.physlock.lockOn.suspend":{"declarations":["nixos/modules/services/security/physlock.nix"],"default":true,"description":"Whether to lock screen with physlock just before suspend.\n","loc":["services","physlock","lockOn","suspend"],"readOnly":false,"type":"boolean"},"services.pipewire.enable":{"declarations":["nixos/modules/services/desktops/pipewire.nix"],"default":false,"description":"Whether to enable pipewire service.","example":true,"loc":["services","pipewire","enable"],"readOnly":false,"type":"boolean"},"services.pipewire.socketActivation":{"declarations":["nixos/modules/services/desktops/pipewire.nix"],"default":true,"description":"Automatically run pipewire when connections are made to the pipewire socket.\n","loc":["services","pipewire","socketActivation"],"readOnly":false,"type":"boolean"},"services.plex.dataDir":{"declarations":["nixos/modules/services/misc/plex.nix"],"default":"/var/lib/plex","description":"The directory where Plex stores its data files.","loc":["services","plex","dataDir"],"readOnly":false,"type":"string"},"services.plex.enable":{"declarations":["nixos/modules/services/misc/plex.nix"],"default":false,"description":"Whether to enable Plex Media Server.","example":true,"loc":["services","plex","enable"],"readOnly":false,"type":"boolean"},"services.plex.extraPlugins":{"declarations":["nixos/modules/services/misc/plex.nix"],"default":[],"description":"A list of paths to extra plugin bundles to install in Plex's plugin\ndirectory. Every time the systemd unit for Plex starts up, all of the\nsymlinks in Plex's plugin directory will be cleared and this module\nwill symlink all of the paths specified here to that directory. If\nthis behavior is undesired, set <option>managePlugins</option> to\nfalse.\n","loc":["services","plex","extraPlugins"],"readOnly":false,"type":"list of paths"},"services.plex.group":{"declarations":["nixos/modules/services/misc/plex.nix"],"default":"plex","description":"Group under which Plex runs.","loc":["services","plex","group"],"readOnly":false,"type":"string"},"services.plex.managePlugins":{"declarations":["nixos/modules/services/misc/plex.nix"],"default":true,"description":"If set to true, this option will cause all of the symlinks in Plex's\nplugin directory to be removed and symlinks for paths specified in\n<option>extraPlugins</option> to be added.\n","loc":["services","plex","managePlugins"],"readOnly":false,"type":"boolean"},"services.plex.openFirewall":{"declarations":["nixos/modules/services/misc/plex.nix"],"default":false,"description":"Open ports in the firewall for the media server\n","loc":["services","plex","openFirewall"],"readOnly":false,"type":"boolean"},"services.plex.package":{"declarations":["nixos/modules/services/misc/plex.nix"],"default":"pkgs.plex","description":"The Plex package to use. Plex subscribers may wish to use their own\npackage here, pointing to subscriber-only server versions.\n","loc":["services","plex","package"],"readOnly":false,"type":"package"},"services.plex.user":{"declarations":["nixos/modules/services/misc/plex.nix"],"default":"plex","description":"User account under which Plex runs.","loc":["services","plex","user"],"readOnly":false,"type":"string"},"services.plexpy.configFile":{"declarations":["nixos/modules/services/misc/plexpy.nix"],"default":"/var/lib/plexpy/config.ini","description":"The location of PlexPy's config file.","loc":["services","plexpy","configFile"],"readOnly":false,"type":"string"},"services.plexpy.dataDir":{"declarations":["nixos/modules/services/misc/plexpy.nix"],"default":"/var/lib/plexpy","description":"The directory where PlexPy stores its data files.","loc":["services","plexpy","dataDir"],"readOnly":false,"type":"string"},"services.plexpy.enable":{"declarations":["nixos/modules/services/misc/plexpy.nix"],"default":false,"description":"Whether to enable PlexPy Plex Monitor.","example":true,"loc":["services","plexpy","enable"],"readOnly":false,"type":"boolean"},"services.plexpy.group":{"declarations":["nixos/modules/services/misc/plexpy.nix"],"default":"nogroup","description":"Group under which PlexPy runs.","loc":["services","plexpy","group"],"readOnly":false,"type":"string"},"services.plexpy.package":{"declarations":["nixos/modules/services/misc/plexpy.nix"],"default":"pkgs.plexpy","description":"The PlexPy package to use.\n","loc":["services","plexpy","package"],"readOnly":false,"type":"package"},"services.plexpy.port":{"declarations":["nixos/modules/services/misc/plexpy.nix"],"default":8181,"description":"TCP port where PlexPy listens.","loc":["services","plexpy","port"],"readOnly":false,"type":"signed integer"},"services.plexpy.user":{"declarations":["nixos/modules/services/misc/plexpy.nix"],"default":"plexpy","description":"User account under which PlexPy runs.","loc":["services","plexpy","user"],"readOnly":false,"type":"string"},"services.polipo.allowedClients":{"declarations":["nixos/modules/services/networking/polipo.nix"],"default":["127.0.0.1","::1"],"description":"List of IP addresses or network addresses that may connect to Polipo.\n","example":["127.0.0.1","::1","134.157.168.0/24","2001:660:116::/48"],"loc":["services","polipo","allowedClients"],"readOnly":false,"type":"list of strings"},"services.polipo.enable":{"declarations":["nixos/modules/services/networking/polipo.nix"],"default":false,"description":"Whether to run the polipo caching web proxy.","loc":["services","polipo","enable"],"readOnly":false,"type":"boolean"},"services.polipo.extraConfig":{"declarations":["nixos/modules/services/networking/polipo.nix"],"default":"","description":"Polio configuration. Contents will be added \nverbatim to the configuration file.\n","loc":["services","polipo","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.polipo.parentProxy":{"declarations":["nixos/modules/services/networking/polipo.nix"],"default":"","description":"Hostname and port number of an HTTP parent proxy;\nit should have the form ‘host:port’.\n","example":"localhost:8124","loc":["services","polipo","parentProxy"],"readOnly":false,"type":"Concatenated string"},"services.polipo.proxyAddress":{"declarations":["nixos/modules/services/networking/polipo.nix"],"default":"127.0.0.1","description":"IP address on which Polipo will listen.","loc":["services","polipo","proxyAddress"],"readOnly":false,"type":"Concatenated string"},"services.polipo.proxyPort":{"declarations":["nixos/modules/services/networking/polipo.nix"],"default":8123,"description":"TCP port on which Polipo will listen.","loc":["services","polipo","proxyPort"],"readOnly":false,"type":"signed integer"},"services.polipo.socksParentProxy":{"declarations":["nixos/modules/services/networking/polipo.nix"],"default":"","description":"Hostname and port number of an SOCKS parent proxy;\nit should have the form ‘host:port’.\n","example":"localhost:9050","loc":["services","polipo","socksParentProxy"],"readOnly":false,"type":"Concatenated string"},"services.postfix.aliasFiles":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":{},"description":"Aliases' tables to be compiled and placed into /var/lib/postfix/conf.","loc":["services","postfix","aliasFiles"],"readOnly":false,"type":"attribute set of paths"},"services.postfix.aliasMapType":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"hash","description":"The format the alias map should have. Use regexp if you want to use regular expressions.","example":"regexp","loc":["services","postfix","aliasMapType"],"readOnly":false,"type":"one of \"hash\", \"regexp\", \"pcre\""},"services.postfix.config":{"declarations":["nixos/modules/services/mail/postfix.nix"],"description":"The main.cf configuration file as key value set.\n","example":{"mail_owner":"postfix","smtp_use_tls":true},"loc":["services","postfix","config"],"readOnly":false,"type":"attribute set of boolean or string or list of stringss"},"services.postfix.destination":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":null,"description":"\n          Full (!) list of domains we deliver locally. Leave blank for\n          acceptable Postfix default.\n        ","example":["localhost"],"loc":["services","postfix","destination"],"readOnly":false,"type":"null or list of strings"},"services.postfix.dnsBlacklistOverrides":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"contents of check_client_access for overriding dnsBlacklists","loc":["services","postfix","dnsBlacklistOverrides"],"readOnly":false,"type":"unspecified"},"services.postfix.dnsBlacklists":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":[],"description":"dns blacklist servers to use with smtpd_client_restrictions","loc":["services","postfix","dnsBlacklists"],"readOnly":false,"type":"list of Concatenated strings"},"services.postfix.domain":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Domain to use. Leave blank to use hostname minus first component.\n        ","loc":["services","postfix","domain"],"readOnly":false,"type":"string"},"services.postfix.enable":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":false,"description":"Whether to run the Postfix mail server.","loc":["services","postfix","enable"],"readOnly":false,"type":"boolean"},"services.postfix.enableHeaderChecks":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":false,"description":"Whether to enable postfix header checks","example":true,"loc":["services","postfix","enableHeaderChecks"],"readOnly":false,"type":"boolean"},"services.postfix.enableSmtp":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":true,"description":"Whether to enable smtp in master.cf.","loc":["services","postfix","enableSmtp"],"readOnly":false,"type":"unspecified"},"services.postfix.enableSubmission":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":false,"description":"Whether to enable smtp submission.","loc":["services","postfix","enableSubmission"],"readOnly":false,"type":"boolean"},"services.postfix.extraAliases":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Additional entries to put verbatim into aliases file, cf. man-page aliases(8).\n        ","loc":["services","postfix","extraAliases"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.postfix.extraConfig":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Extra lines to be added verbatim to the main.cf configuration file.\n        ","loc":["services","postfix","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.postfix.extraHeaderChecks":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"Extra lines to /etc/postfix/header_checks file.","example":"/^X-Spam-Flag:/ REDIRECT spam@example.com","loc":["services","postfix","extraHeaderChecks"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.postfix.extraMasterConf":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"Extra lines to append to the generated master.cf file.","example":"submission inet n - n - - smtpd","loc":["services","postfix","extraMasterConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.postfix.group":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"postfix","description":"What to call the Postfix group (must be used only for postfix).","loc":["services","postfix","group"],"readOnly":false,"type":"string"},"services.postfix.headerChecks":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":[],"description":"Postfix header checks.","example":[{"action":"REDIRECT spam@example.com","pattern":"/^X-Spam-Flag:/"}],"loc":["services","postfix","headerChecks"],"readOnly":false,"type":"list of submodules"},"services.postfix.headerChecks.*.action":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"DUNNO","description":"The action to be executed when the pattern is matched","example":"BCC mail@example.com","loc":["services","postfix","headerChecks","*","action"],"readOnly":false,"type":"string"},"services.postfix.headerChecks.*.pattern":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"/^.*/","description":"A regexp pattern matching the header","example":"/^X-Mailer:/","loc":["services","postfix","headerChecks","*","pattern"],"readOnly":false,"type":"string"},"services.postfix.hostname":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Hostname to use. Leave blank to use just the hostname of machine.\n          It should be FQDN.\n        ","loc":["services","postfix","hostname"],"readOnly":false,"type":"string"},"services.postfix.lookupMX":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":false,"description":"\n          Whether relay specified is just domain whose MX must be used.\n        ","loc":["services","postfix","lookupMX"],"readOnly":false,"type":"boolean"},"services.postfix.mapFiles":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":{},"description":"Maps to be compiled and placed into /var/lib/postfix/conf.","loc":["services","postfix","mapFiles"],"readOnly":false,"type":"attribute set of paths"},"services.postfix.masterConfig":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":{},"description":"An attribute set of service options, which correspond to the service\ndefinitions usually done within the Postfix\n<filename>master.cf</filename> file.\n","example":{"submission":{"args":["-o","smtpd_tls_security_level=encrypt"],"type":"inet"}},"loc":["services","postfix","masterConfig"],"readOnly":false,"type":"attribute set of submodules"},"services.postfix.masterConfig.<name>.args":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":[],"description":"Arguments to pass to the <option>command</option>. There is no shell\nprocessing involved and shell syntax is passed verbatim to the\nprocess.\n","example":["-o","smtp_helo_timeout=5"],"loc":["services","postfix","masterConfig","<name>","args"],"readOnly":false,"type":"list of strings"},"services.postfix.masterConfig.<name>.chroot":{"declarations":["nixos/modules/services/mail/postfix.nix"],"description":"Whether the service is chrooted to have only access to the\n<option>services.postfix.queueDir</option> and the closure of\nstore paths specified by the <option>program</option> option.\n","example":true,"loc":["services","postfix","masterConfig","<name>","chroot"],"readOnly":false,"type":"boolean"},"services.postfix.masterConfig.<name>.command":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"‹name›","description":"A program name specifying a Postfix service/daemon process.\nBy default it's the attribute <option>name</option>.\n","example":"smtpd","loc":["services","postfix","masterConfig","<name>","command"],"readOnly":false,"type":"string"},"services.postfix.masterConfig.<name>.maxproc":{"declarations":["nixos/modules/services/mail/postfix.nix"],"description":"The maximum number of processes to spawn for this service. If the\nvalue is <literal>0</literal> it doesn't have any limit. If\n<literal>null</literal> is given it uses the postfix default of\n<literal>100</literal>.\n","example":1,"loc":["services","postfix","masterConfig","<name>","maxproc"],"readOnly":false,"type":"signed integer"},"services.postfix.masterConfig.<name>.name":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"‹name›","description":"The name of the service to run. Defaults to the attribute set key.\n","example":"smtp","loc":["services","postfix","masterConfig","<name>","name"],"readOnly":false,"type":"string"},"services.postfix.masterConfig.<name>.private":{"declarations":["nixos/modules/services/mail/postfix.nix"],"description":"Whether the service's sockets and storage directory is restricted to\nbe only available via the mail system. If <literal>null</literal> is\ngiven it uses the postfix default <literal>true</literal>.\n","example":false,"loc":["services","postfix","masterConfig","<name>","private"],"readOnly":false,"type":"boolean"},"services.postfix.masterConfig.<name>.privileged":{"declarations":["nixos/modules/services/mail/postfix.nix"],"description":"","example":true,"loc":["services","postfix","masterConfig","<name>","privileged"],"readOnly":false,"type":"boolean"},"services.postfix.masterConfig.<name>.type":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"unix","description":"The type of the service","example":"inet","loc":["services","postfix","masterConfig","<name>","type"],"readOnly":false,"type":"one of \"inet\", \"unix\", \"fifo\", \"pass\""},"services.postfix.masterConfig.<name>.wakeup":{"declarations":["nixos/modules/services/mail/postfix.nix"],"description":"Automatically wake up the service after the specified number of\nseconds. If <literal>0</literal> is given, never wake the service\nup.\n","example":60,"loc":["services","postfix","masterConfig","<name>","wakeup"],"readOnly":false,"type":"signed integer"},"services.postfix.masterConfig.<name>.wakeupUnusedComponent":{"declarations":["nixos/modules/services/mail/postfix.nix"],"description":"If set to <literal>false</literal> the component will only be woken\nup if it is used. This is equivalent to postfix' notion of adding a\nquestion mark behind the wakeup time in\n<filename>master.cf</filename>\n","example":false,"loc":["services","postfix","masterConfig","<name>","wakeupUnusedComponent"],"readOnly":false,"type":"boolean"},"services.postfix.networks":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":null,"description":"\n          Net masks for trusted - allowed to relay mail to third parties -\n          hosts. Leave empty to use mynetworks_style configuration or use\n          default (localhost-only).\n        ","example":["192.168.0.1/24"],"loc":["services","postfix","networks"],"readOnly":false,"type":"null or list of strings"},"services.postfix.networksStyle":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Name of standard way of trusted network specification to use,\n          leave blank if you specify it explicitly or if you want to use\n          default (localhost-only).\n        ","loc":["services","postfix","networksStyle"],"readOnly":false,"type":"string"},"services.postfix.origin":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Origin to use in outgoing e-mail. Leave blank to use hostname.\n        ","loc":["services","postfix","origin"],"readOnly":false,"type":"string"},"services.postfix.postmasterAlias":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"root","description":"\n          Who should receive postmaster e-mail. Multiple values can be added by\n          separating values with comma.\n        ","loc":["services","postfix","postmasterAlias"],"readOnly":false,"type":"string"},"services.postfix.recipientDelimiter":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Delimiter for address extension: so mail to user+test can be handled by ~user/.forward+test\n        ","example":"+","loc":["services","postfix","recipientDelimiter"],"readOnly":false,"type":"string"},"services.postfix.relayDomains":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":null,"description":"\n          List of domains we agree to relay to. Default is empty.\n        ","example":["localdomain"],"loc":["services","postfix","relayDomains"],"readOnly":false,"type":"null or list of strings"},"services.postfix.relayHost":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Mail relay for outbound mail.\n        ","loc":["services","postfix","relayHost"],"readOnly":false,"type":"string"},"services.postfix.relayPort":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":25,"description":"\n          SMTP port for relay mail relay.\n        ","loc":["services","postfix","relayPort"],"readOnly":false,"type":"signed integer"},"services.postfix.rootAlias":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Who should receive root e-mail. Blank for no redirection.\n          Multiple values can be added by separating values with comma.\n        ","loc":["services","postfix","rootAlias"],"readOnly":false,"type":"string"},"services.postfix.setSendmail":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":true,"description":"Whether to set the system sendmail to postfix's.","loc":["services","postfix","setSendmail"],"readOnly":false,"type":"boolean"},"services.postfix.setgidGroup":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"postdrop","description":"\n          How to call postfix setgid group (for postdrop). Should\n          be uniquely used group.\n        ","loc":["services","postfix","setgidGroup"],"readOnly":false,"type":"string"},"services.postfix.sslCACert":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"SSL certificate of CA.","loc":["services","postfix","sslCACert"],"readOnly":false,"type":"string"},"services.postfix.sslCert":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"SSL certificate to use.","loc":["services","postfix","sslCert"],"readOnly":false,"type":"string"},"services.postfix.sslKey":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"SSL key to use.","loc":["services","postfix","sslKey"],"readOnly":false,"type":"string"},"services.postfix.submissionOptions":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":{"milter_macro_daemon_name":"ORIGINATING","smtpd_client_restrictions":"permit_sasl_authenticated,reject","smtpd_sasl_auth_enable":"yes","smtpd_tls_security_level":"encrypt"},"description":"Options for the submission config in master.cf","example":{"milter_macro_daemon_name":"ORIGINATING","smtpd_client_restrictions":"permit_sasl_authenticated,reject","smtpd_sasl_auth_enable":"yes","smtpd_sasl_type":"dovecot","smtpd_tls_security_level":"encrypt"},"loc":["services","postfix","submissionOptions"],"readOnly":false,"type":"attribute set"},"services.postfix.transport":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Entries for the transport map, cf. man-page transport(8).\n        ","loc":["services","postfix","transport"],"readOnly":false,"type":"unspecified"},"services.postfix.useSrs":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":false,"description":"Whether to enable sender rewriting scheme","loc":["services","postfix","useSrs"],"readOnly":false,"type":"boolean"},"services.postfix.user":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"postfix","description":"What to call the Postfix user (must be used only for postfix).","loc":["services","postfix","user"],"readOnly":false,"type":"string"},"services.postfix.virtual":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"","description":"\n          Entries for the virtual alias map, cf. man-page virtual(8).\n        ","loc":["services","postfix","virtual"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.postfix.virtualMapType":{"declarations":["nixos/modules/services/mail/postfix.nix"],"default":"hash","description":"What type of virtual alias map file to use. Use <literal>\"regexp\"</literal> for regular expressions.\n","loc":["services","postfix","virtualMapType"],"readOnly":false,"type":"one of \"hash\", \"regexp\", \"pcre\""},"services.postgresql.authentication":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":"","description":"Defines how users authenticate themselves to the server. By\ndefault, \"trust\" access to local users will always be granted\nalong with any other custom options. If you do not want this,\nset this option using \"lib.mkForce\" to override this\nbehaviour.\n","loc":["services","postgresql","authentication"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.postgresql.dataDir":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"description":"Data directory for PostgreSQL.\n","example":"/var/lib/postgresql/9.6","loc":["services","postgresql","dataDir"],"readOnly":false,"type":"path"},"services.postgresql.enable":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":false,"description":"Whether to run PostgreSQL.\n","loc":["services","postgresql","enable"],"readOnly":false,"type":"boolean"},"services.postgresql.enableTCPIP":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":false,"description":"Whether PostgreSQL should listen on all network interfaces.\nIf disabled, the database can only be accessed via its Unix\ndomain socket or via TCP connections to localhost.\n","loc":["services","postgresql","enableTCPIP"],"readOnly":false,"type":"boolean"},"services.postgresql.extraConfig":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":"","description":"Additional text to be appended to <filename>postgresql.conf</filename>.","loc":["services","postgresql","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.postgresql.extraPlugins":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":[],"description":"When this list contains elements a new store path is created.\nPostgreSQL and the elements are symlinked into it. Then pg_config,\npostgres and pg_ctl are copied to make them use the new\n$out/lib directory as pkglibdir. This makes it possible to use postgis\nwithout patching the .sql files which reference $libdir/postgis-1.5.\n","example":{"_type":"literalExample","text":"[ (pkgs.postgis.override { postgresql = pkgs.postgresql94; }) ]"},"loc":["services","postgresql","extraPlugins"],"readOnly":false,"type":"list of paths"},"services.postgresql.identMap":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":"","description":"Defines the mapping from system users to database users.\n","loc":["services","postgresql","identMap"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.postgresql.initialScript":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":null,"description":"A file containing SQL statements to execute on first startup.\n","loc":["services","postgresql","initialScript"],"readOnly":false,"type":"null or path"},"services.postgresql.package":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"description":"PostgreSQL package to use.\n","example":{"_type":"literalExample","text":"pkgs.postgresql96"},"loc":["services","postgresql","package"],"readOnly":false,"type":"package"},"services.postgresql.port":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":5432,"description":"The port on which PostgreSQL listens.\n","loc":["services","postgresql","port"],"readOnly":false,"type":"signed integer"},"services.postgresql.recoveryConfig":{"declarations":["nixos/modules/services/databases/postgresql.nix"],"default":null,"description":"Contents of the <filename>recovery.conf</filename> file.\n","loc":["services","postgresql","recoveryConfig"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.postgresqlBackup.databases":{"declarations":["nixos/modules/services/backup/postgresql-backup.nix"],"default":[],"description":"List of database names to dump.\n","loc":["services","postgresqlBackup","databases"],"readOnly":false,"type":"unspecified"},"services.postgresqlBackup.enable":{"declarations":["nixos/modules/services/backup/postgresql-backup.nix"],"default":false,"description":"Whether to enable PostgreSQL dumps.\n","loc":["services","postgresqlBackup","enable"],"readOnly":false,"type":"unspecified"},"services.postgresqlBackup.location":{"declarations":["nixos/modules/services/backup/postgresql-backup.nix"],"default":"/var/backup/postgresql","description":"Location to put the gzipped PostgreSQL database dumps.\n","loc":["services","postgresqlBackup","location"],"readOnly":false,"type":"unspecified"},"services.postgresqlBackup.pgdumpOptions":{"declarations":["nixos/modules/services/backup/postgresql-backup.nix"],"default":"-Cbo","description":"Command line options for pg_dump.\n","loc":["services","postgresqlBackup","pgdumpOptions"],"readOnly":false,"type":"Concatenated string"},"services.postgresqlBackup.startAt":{"declarations":["nixos/modules/services/backup/postgresql-backup.nix"],"default":"*-*-* 01:15:00","description":"This option defines (see <literal>systemd.time</literal> for format) when the\ndatabases should be dumped.\nThe default is to update at 01:15 (at night) every day.\n","loc":["services","postgresqlBackup","startAt"],"readOnly":false,"type":"unspecified"},"services.postgrey.IPv4CIDR":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":24,"description":"Strip N bits from IPv4 addresses if lookupBySubnet is true","loc":["services","postgrey","IPv4CIDR"],"readOnly":false,"type":"signed integer"},"services.postgrey.IPv6CIDR":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":64,"description":"Strip N bits from IPv6 addresses if lookupBySubnet is true","loc":["services","postgrey","IPv6CIDR"],"readOnly":false,"type":"signed integer"},"services.postgrey.autoWhitelist":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":5,"description":"Whitelist clients after successful delivery of N messages","loc":["services","postgrey","autoWhitelist"],"readOnly":false,"type":"null or signed integer"},"services.postgrey.delay":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":300,"description":"Greylist for N seconds","loc":["services","postgrey","delay"],"readOnly":false,"type":"signed integer"},"services.postgrey.enable":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":false,"description":"Whether to run the Postgrey daemon","loc":["services","postgrey","enable"],"readOnly":false,"type":"boolean"},"services.postgrey.greylistAction":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":"DEFER_IF_PERMIT","description":"Response status for greylisted messages (see access(5))","loc":["services","postgrey","greylistAction"],"readOnly":false,"type":"Concatenated string"},"services.postgrey.greylistHeader":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":"X-Greylist: delayed %%t seconds by postgrey-%%v at %%h; %%d","description":"Prepend header to greylisted mails; use %%t for seconds delayed due to greylisting, %%v for the version of postgrey, %%d for the date, and %%h for the host","loc":["services","postgrey","greylistHeader"],"readOnly":false,"type":"Concatenated string"},"services.postgrey.greylistText":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":"Greylisted for %%s seconds","description":"Response status text for greylisted messages; use %%s for seconds left until greylisting is over and %%r for mail domain of recipient","loc":["services","postgrey","greylistText"],"readOnly":false,"type":"Concatenated string"},"services.postgrey.lookupBySubnet":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":true,"description":"Strip the last N bits from IP addresses, determined by IPv4CIDR and IPv6CIDR","loc":["services","postgrey","lookupBySubnet"],"readOnly":false,"type":"boolean"},"services.postgrey.maxAge":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":35,"description":"Delete entries from whitelist if they haven't been seen for N days","loc":["services","postgrey","maxAge"],"readOnly":false,"type":"signed integer"},"services.postgrey.privacy":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":true,"description":"Store data using one-way hash functions (SHA1)","loc":["services","postgrey","privacy"],"readOnly":false,"type":"boolean"},"services.postgrey.retryWindow":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":2,"description":"Allow N days for the first retry. Use string with appended 'h' to specify time in hours","example":"12h","loc":["services","postgrey","retryWindow"],"readOnly":false,"type":"Concatenated string or signed integer"},"services.postgrey.socket":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":{"mode":"0777","path":"/var/run/postgrey.sock"},"description":"Socket to bind to","example":{"addr":"127.0.0.1","port":10030},"loc":["services","postgrey","socket"],"readOnly":false,"type":"submodule or submodule"},"services.postgrey.whitelistClients":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":[],"description":"Client address whitelist files (see postgrey(8))","loc":["services","postgrey","whitelistClients"],"readOnly":false,"type":"list of paths"},"services.postgrey.whitelistRecipients":{"declarations":["nixos/modules/services/mail/postgrey.nix"],"default":[],"description":"Recipient address whitelist files (see postgrey(8))","loc":["services","postgrey","whitelistRecipients"],"readOnly":false,"type":"list of paths"},"services.postsrsd.domain":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"description":"Domain name for rewrite","loc":["services","postsrsd","domain"],"readOnly":false,"type":"string"},"services.postsrsd.enable":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":false,"description":"Whether to enable the postsrsd SRS server for Postfix.","loc":["services","postsrsd","enable"],"readOnly":false,"type":"boolean"},"services.postsrsd.excludeDomains":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":[],"description":"Origin domains to exclude from rewriting in addition to primary domain","loc":["services","postsrsd","excludeDomains"],"readOnly":false,"type":"list of strings"},"services.postsrsd.forwardPort":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":10001,"description":"Port for the forward SRS lookup","loc":["services","postsrsd","forwardPort"],"readOnly":false,"type":"signed integer"},"services.postsrsd.group":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":"postsrsd","description":"Group for the daemon","loc":["services","postsrsd","group"],"readOnly":false,"type":"string"},"services.postsrsd.reversePort":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":10002,"description":"Port for the reverse SRS lookup","loc":["services","postsrsd","reversePort"],"readOnly":false,"type":"signed integer"},"services.postsrsd.secretsFile":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":"/var/lib/postsrsd/postsrsd.secret","description":"Secret keys used for signing and verification","loc":["services","postsrsd","secretsFile"],"readOnly":false,"type":"path"},"services.postsrsd.separator":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":"=","description":"First separator character in generated addresses","loc":["services","postsrsd","separator"],"readOnly":false,"type":"one of \"-\", \"=\", \"+\""},"services.postsrsd.timeout":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":1800,"description":"Timeout for idle client connections in seconds","loc":["services","postsrsd","timeout"],"readOnly":false,"type":"signed integer"},"services.postsrsd.user":{"declarations":["nixos/modules/services/mail/postsrsd.nix"],"default":"postsrsd","description":"User for the daemon","loc":["services","postsrsd","user"],"readOnly":false,"type":"string"},"services.powerdns.enable":{"declarations":["nixos/modules/services/networking/powerdns.nix"],"default":false,"description":"Whether to enable Powerdns domain name server.","example":true,"loc":["services","powerdns","enable"],"readOnly":false,"type":"boolean"},"services.powerdns.extraConfig":{"declarations":["nixos/modules/services/networking/powerdns.nix"],"default":"launch=bind","description":"Extra lines to be added verbatim to pdns.conf.\nPowerdns will chroot to /var/lib/powerdns.\nSo any file, powerdns is supposed to be read,\nshould be in /var/lib/powerdns and needs to specified\nrelative to the chroot.\n","loc":["services","powerdns","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.pptpd.clientIpRange":{"declarations":["nixos/modules/services/networking/pptpd.nix"],"default":"10.124.124.2-11","description":"The range from which client IPs are drawn.","loc":["services","pptpd","clientIpRange"],"readOnly":false,"type":"Concatenated string"},"services.pptpd.enable":{"declarations":["nixos/modules/services/networking/pptpd.nix"],"default":false,"description":"Whether to enable pptpd, the Point-to-Point Tunneling Protocol daemon.","example":true,"loc":["services","pptpd","enable"],"readOnly":false,"type":"boolean"},"services.pptpd.extraPppdOptions":{"declarations":["nixos/modules/services/networking/pptpd.nix"],"default":"","description":"Adds extra lines to the pppd options file.","example":"ms-dns 8.8.8.8\nms-dns 8.8.4.4\n","loc":["services","pptpd","extraPppdOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.pptpd.extraPptpdOptions":{"declarations":["nixos/modules/services/networking/pptpd.nix"],"default":"","description":"Adds extra lines to the pptpd configuration file.","loc":["services","pptpd","extraPptpdOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.pptpd.maxClients":{"declarations":["nixos/modules/services/networking/pptpd.nix"],"default":10,"description":"The maximum number of simultaneous connections.","loc":["services","pptpd","maxClients"],"readOnly":false,"type":"signed integer"},"services.pptpd.serverIp":{"declarations":["nixos/modules/services/networking/pptpd.nix"],"default":"10.124.124.1","description":"The server-side IP address.","loc":["services","pptpd","serverIp"],"readOnly":false,"type":"Concatenated string"},"services.prayer.enable":{"declarations":["nixos/modules/services/networking/prayer.nix"],"default":false,"description":"Whether to run the prayer webmail http server.\n","loc":["services","prayer","enable"],"readOnly":false,"type":"unspecified"},"services.prayer.extraConfig":{"declarations":["nixos/modules/services/networking/prayer.nix"],"default":"","description":"Extra configuration. Contents will be added verbatim to the configuration file.\n","loc":["services","prayer","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.prayer.port":{"declarations":["nixos/modules/services/networking/prayer.nix"],"default":"2080","description":"Port the prayer http server is listening to.\n","loc":["services","prayer","port"],"readOnly":false,"type":"unspecified"},"services.prey.apiKey":{"declarations":["nixos/modules/security/prey.nix"],"description":"<literal>API key</literal> obtained from\n<link xlink:href=\"https://panel.preyproject.com/profile\" />.\n","loc":["services","prey","apiKey"],"readOnly":false,"type":"string"},"services.prey.deviceKey":{"declarations":["nixos/modules/security/prey.nix"],"description":"<literal>Device key</literal> obtained by visiting\n<link xlink:href=\"https://panel.preyproject.com/devices\" />\nand clicking on your device.\n","loc":["services","prey","deviceKey"],"readOnly":false,"type":"string"},"services.prey.enable":{"declarations":["nixos/modules/security/prey.nix"],"default":false,"description":"Enables the <link xlink:href=\"http://preyproject.com/\" />\nshell client. Be sure to specify both API and device keys.\nOnce enabled, a <command>cron</command> job will run every 15\nminutes to report status information.\n","loc":["services","prey","enable"],"readOnly":false,"type":"boolean"},"services.printing.browsedConf":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":"","description":"The contents of the configuration. file of the CUPS Browsed daemon\n(<filename>cups-browsed.conf</filename>)\n","example":"BrowsePoll cups.example.com\n","loc":["services","printing","browsedConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.printing.browsing":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":false,"description":"Specifies whether shared printers are advertised.\n","loc":["services","printing","browsing"],"readOnly":false,"type":"boolean"},"services.printing.clientConf":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":"","description":"The contents of the client configuration.\n(<filename>client.conf</filename>)\n","example":"ServerName server.example.com\nEncryption Never\n","loc":["services","printing","clientConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.printing.defaultShared":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":false,"description":"Specifies whether local printers are shared by default.\n","loc":["services","printing","defaultShared"],"readOnly":false,"type":"boolean"},"services.printing.drivers":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":[],"description":"CUPS drivers to use. Drivers provided by CUPS, cups-filters,\nGhostscript and Samba are added unconditionally. If this list contains\nGutenprint (i.e. a derivation with\n<literal>meta.isGutenprint = true</literal>) the PPD files in\n<filename>/var/lib/cups/ppd</filename> will be updated automatically\nto avoid errors due to incompatible versions.\n","example":{"_type":"literalExample","text":"with pkgs; [ gutenprint hplip splix cups-googlecloudprint ]"},"loc":["services","printing","drivers"],"readOnly":false,"type":"list of paths"},"services.printing.enable":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":false,"description":"Whether to enable printing support through the CUPS daemon.\n","loc":["services","printing","enable"],"readOnly":false,"type":"boolean"},"services.printing.extraConf":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":"","description":"Extra contents of the configuration file of the CUPS daemon\n(<filename>cupsd.conf</filename>).\n","example":"BrowsePoll cups.example.com\nMaxCopies 42\n","loc":["services","printing","extraConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.printing.extraFilesConf":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":"","description":"Extra contents of the configuration file of the CUPS daemon\n(<filename>cups-files.conf</filename>).\n","loc":["services","printing","extraFilesConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.printing.listenAddresses":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":["localhost:631"],"description":"A list of addresses and ports on which to listen.\n","example":["*:631"],"loc":["services","printing","listenAddresses"],"readOnly":false,"type":"list of strings"},"services.printing.logLevel":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":"info","description":"Specifies the cupsd logging verbosity.\n","example":"debug","loc":["services","printing","logLevel"],"readOnly":false,"type":"string"},"services.printing.snmpConf":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":"Address @LOCAL\n","description":"The contents of <filename>/etc/cups/snmp.conf</filename>. See \"man\ncups-snmp.conf\" for a complete description.\n","loc":["services","printing","snmpConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.printing.startWhenNeeded":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":false,"description":"If set, CUPS is socket-activated; that is,\ninstead of having it permanently running as a daemon,\nsystemd will start it on the first incoming connection.\n","loc":["services","printing","startWhenNeeded"],"readOnly":false,"type":"boolean"},"services.printing.tempDir":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":"/tmp","description":"CUPSd temporary directory.\n","example":"/tmp/cups","loc":["services","printing","tempDir"],"readOnly":false,"type":"path"},"services.printing.webInterface":{"declarations":["nixos/modules/services/printing/cupsd.nix"],"default":true,"description":"Specifies whether the web interface is enabled.\n","loc":["services","printing","webInterface"],"readOnly":false,"type":"boolean"},"services.privoxy.actionsFiles":{"declarations":["nixos/modules/services/networking/privoxy.nix"],"default":["match-all.action","default.action"],"description":"List of paths to Privoxy action files.\nThese paths may either be absolute or relative to the privoxy configuration directory.\n","example":["match-all.action","default.action","/etc/privoxy/user.action"],"loc":["services","privoxy","actionsFiles"],"readOnly":false,"type":"list of strings"},"services.privoxy.enable":{"declarations":["nixos/modules/services/networking/privoxy.nix"],"default":false,"description":"Whether to enable the Privoxy non-caching filtering proxy.\n","loc":["services","privoxy","enable"],"readOnly":false,"type":"boolean"},"services.privoxy.enableEditActions":{"declarations":["nixos/modules/services/networking/privoxy.nix"],"default":false,"description":"Whether or not the web-based actions file editor may be used.\n","loc":["services","privoxy","enableEditActions"],"readOnly":false,"type":"boolean"},"services.privoxy.extraConfig":{"declarations":["nixos/modules/services/networking/privoxy.nix"],"default":"","description":"Extra configuration. Contents will be added verbatim to the configuration file.\n","loc":["services","privoxy","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.privoxy.filterFiles":{"declarations":["nixos/modules/services/networking/privoxy.nix"],"default":["default.filter"],"description":"List of paths to Privoxy filter files.\nThese paths may either be absolute or relative to the privoxy configuration directory.\n","example":["default.filter","/etc/privoxy/user.filter"],"loc":["services","privoxy","filterFiles"],"readOnly":false,"type":"list of strings"},"services.privoxy.listenAddress":{"declarations":["nixos/modules/services/networking/privoxy.nix"],"default":"127.0.0.1:8118","description":"Address the proxy server is listening to.\n","loc":["services","privoxy","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.alertmanager.configText":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":null,"description":"Alertmanager configuration as YAML text. If non-null, this option\ndefines the text that is written to alertmanager.yml. If null, the\ncontents of alertmanager.yml is generated from the structured config\noptions.\n","loc":["services","prometheus","alertmanager","configText"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.prometheus.alertmanager.configuration":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":{},"description":"Alertmanager configuration as nix attribute set.\n","loc":["services","prometheus","alertmanager","configuration"],"readOnly":false,"type":"attribute set"},"services.prometheus.alertmanager.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":false,"description":"Whether to enable Prometheus Alertmanager.","example":true,"loc":["services","prometheus","alertmanager","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.alertmanager.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":[],"description":"Extra commandline options when launching the Alertmanager.\n","loc":["services","prometheus","alertmanager","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.alertmanager.group":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":"nogroup","description":"Group under which Alertmanager shall be run.\n","loc":["services","prometheus","alertmanager","group"],"readOnly":false,"type":"string"},"services.prometheus.alertmanager.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":"","description":"Address to listen on for the web interface and API.\n","loc":["services","prometheus","alertmanager","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.alertmanager.logFormat":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":null,"description":"If set use a syslog logger or JSON logging.\n","loc":["services","prometheus","alertmanager","logFormat"],"readOnly":false,"type":"null or string"},"services.prometheus.alertmanager.logLevel":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":"warn","description":"Only log messages with the given severity or above.\n","loc":["services","prometheus","alertmanager","logLevel"],"readOnly":false,"type":"one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\""},"services.prometheus.alertmanager.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","alertmanager","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.alertmanager.port":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":9093,"description":"Port to listen on for the web interface and API.\n","loc":["services","prometheus","alertmanager","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.alertmanager.user":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":"nobody","description":"User name under which Alertmanager shall be run.\n","loc":["services","prometheus","alertmanager","user"],"readOnly":false,"type":"string"},"services.prometheus.alertmanager.webExternalUrl":{"declarations":["nixos/modules/services/monitoring/prometheus/alertmanager.nix"],"default":null,"description":"The URL under which Alertmanager is externally reachable (for example, if Alertmanager is served via a reverse proxy).\nUsed for generating relative and absolute links back to Alertmanager itself.\nIf the URL has a path portion, it will be used to prefix all HTTP endoints served by Alertmanager.\nIf omitted, relevant URL components will be derived automatically.\n","loc":["services","prometheus","alertmanager","webExternalUrl"],"readOnly":false,"type":"null or string"},"services.prometheus.alertmanagerNotificationQueueCapacity":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":10000,"description":"The capacity of the queue for pending alert manager notifications.\n","loc":["services","prometheus","alertmanagerNotificationQueueCapacity"],"readOnly":false,"type":"signed integer"},"services.prometheus.alertmanagerTimeout":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":10,"description":"Alert manager HTTP API timeout (in seconds).\n","loc":["services","prometheus","alertmanagerTimeout"],"readOnly":false,"type":"signed integer"},"services.prometheus.alertmanagerURL":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"List of Alertmanager URLs to send notifications to.\n","loc":["services","prometheus","alertmanagerURL"],"readOnly":false,"type":"list of strings"},"services.prometheus.configText":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":null,"description":"If non-null, this option defines the text that is written to\nprometheus.yml. If null, the contents of prometheus.yml is generated\nfrom the structured config options.\n","loc":["services","prometheus","configText"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.prometheus.dataDir":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"/var/lib/prometheus","description":"Directory to store Prometheus metrics data.\n","loc":["services","prometheus","dataDir"],"readOnly":false,"type":"path"},"services.prometheus.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":false,"description":"Enable the Prometheus monitoring daemon.\n","loc":["services","prometheus","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":{},"description":"Prometheus exporter configuration","example":{"_type":"literalExample","text":"{\n  node = {\n    enable = true;\n    enabledCollectors = [ \"systemd\" ];\n  };\n  varnish.enable = true;\n}\n"},"loc":["services","prometheus","exporters"],"readOnly":false,"type":"submodule"},"services.prometheus.exporters.blackbox.configFile":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"Path to configuration file.\n","loc":["services","prometheus","exporters","blackbox","configFile"],"readOnly":false,"type":"path"},"services.prometheus.exporters.blackbox.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus blackbox exporter.","example":true,"loc":["services","prometheus","exporters","blackbox","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.blackbox.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the blackbox exporter.\n","loc":["services","prometheus","exporters","blackbox","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.blackbox.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9115","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.blackbox.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9115\"\n"},"loc":["services","prometheus","exporters","blackbox","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.blackbox.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the blackbox exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-blackbox-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","blackbox","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.blackbox.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","blackbox","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.blackbox.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","blackbox","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.blackbox.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9115,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","blackbox","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.blackbox.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the blackbox exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-blackbox-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","blackbox","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.collectd.collectdBinary.authFile":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":null,"description":"File mapping user names to pre-shared keys (passwords).","loc":["services","prometheus","exporters","collectd","collectdBinary","authFile"],"readOnly":false,"type":"null or path"},"services.prometheus.exporters.collectd.collectdBinary.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable collectd binary protocol receiver.","example":true,"loc":["services","prometheus","exporters","collectd","collectdBinary","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.collectd.collectdBinary.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on for binary network packets.\n","loc":["services","prometheus","exporters","collectd","collectdBinary","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.collectd.collectdBinary.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":25826,"description":"Network address on which to accept collectd binary network packets.","loc":["services","prometheus","exporters","collectd","collectdBinary","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.collectd.collectdBinary.securityLevel":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"None","description":"Minimum required security level for accepted packets.\n","loc":["services","prometheus","exporters","collectd","collectdBinary","securityLevel"],"readOnly":false,"type":"one of \"None\", \"Sign\", \"Encrypt\""},"services.prometheus.exporters.collectd.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus collectd exporter.","example":true,"loc":["services","prometheus","exporters","collectd","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.collectd.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the collectd exporter.\n","loc":["services","prometheus","exporters","collectd","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.collectd.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9103","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.collectd.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9103\"\n"},"loc":["services","prometheus","exporters","collectd","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.collectd.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the collectd exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-collectd-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","collectd","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.collectd.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","collectd","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.collectd.logFormat":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"logger:stderr","description":"Set the log target and format.\n","example":"logger:syslog?appname=bob&local=7 or logger:stdout?json=true","loc":["services","prometheus","exporters","collectd","logFormat"],"readOnly":false,"type":"string"},"services.prometheus.exporters.collectd.logLevel":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"info","description":"Only log messages with the given severity or above.\n","loc":["services","prometheus","exporters","collectd","logLevel"],"readOnly":false,"type":"one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\""},"services.prometheus.exporters.collectd.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","collectd","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.collectd.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9103,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","collectd","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.collectd.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the collectd exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-collectd-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","collectd","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dnsmasq.dnsmasqListenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"localhost:53","description":"Address on which dnsmasq listens.\n","loc":["services","prometheus","exporters","dnsmasq","dnsmasqListenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dnsmasq.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus dnsmasq exporter.","example":true,"loc":["services","prometheus","exporters","dnsmasq","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.dnsmasq.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the dnsmasq exporter.\n","loc":["services","prometheus","exporters","dnsmasq","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.dnsmasq.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9153","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.dnsmasq.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9153\"\n"},"loc":["services","prometheus","exporters","dnsmasq","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dnsmasq.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the dnsmasq exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-dnsmasq-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","dnsmasq","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dnsmasq.leasesPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"/var/lib/misc/dnsmasq.leases","description":"Path to the <literal>dnsmasq.leases</literal> file.\n","example":"/var/lib/dnsmasq/dnsmasq.leases","loc":["services","prometheus","exporters","dnsmasq","leasesPath"],"readOnly":false,"type":"path"},"services.prometheus.exporters.dnsmasq.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","dnsmasq","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dnsmasq.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","dnsmasq","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.dnsmasq.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9153,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","dnsmasq","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.dnsmasq.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the dnsmasq exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-dnsmasq-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","dnsmasq","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dovecot.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus dovecot exporter.","example":true,"loc":["services","prometheus","exporters","dovecot","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.dovecot.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the dovecot exporter.\n","loc":["services","prometheus","exporters","dovecot","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.dovecot.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9166","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.dovecot.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9166\"\n"},"loc":["services","prometheus","exporters","dovecot","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dovecot.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the dovecot exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-dovecot-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","dovecot","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dovecot.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","dovecot","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dovecot.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","dovecot","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.dovecot.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9166,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","dovecot","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.dovecot.scopes":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":["user"],"description":"Stats scopes to query.\n","example":["user","global"],"loc":["services","prometheus","exporters","dovecot","scopes"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.dovecot.socketPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"/var/run/dovecot/stats","description":"Path under which the stats socket is placed.\nThe user/group under which the exporter runs,\nshould be able to access the socket in order\nto scrape the metrics successfully.\n","example":"/var/run/dovecot2/stats","loc":["services","prometheus","exporters","dovecot","socketPath"],"readOnly":false,"type":"path"},"services.prometheus.exporters.dovecot.telemetryPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"/metrics","description":"Path under which to expose metrics.\n","loc":["services","prometheus","exporters","dovecot","telemetryPath"],"readOnly":false,"type":"string"},"services.prometheus.exporters.dovecot.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the dovecot exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-dovecot-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","dovecot","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.fritzbox.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus fritzbox exporter.","example":true,"loc":["services","prometheus","exporters","fritzbox","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.fritzbox.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the fritzbox exporter.\n","loc":["services","prometheus","exporters","fritzbox","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.fritzbox.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9133","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.fritzbox.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9133\"\n"},"loc":["services","prometheus","exporters","fritzbox","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.fritzbox.gatewayAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"fritz.box","description":"The hostname or IP of the FRITZ!Box.\n","loc":["services","prometheus","exporters","fritzbox","gatewayAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.fritzbox.gatewayPort":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":49000,"description":"The port of the FRITZ!Box UPnP service.\n","loc":["services","prometheus","exporters","fritzbox","gatewayPort"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.fritzbox.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the fritzbox exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-fritzbox-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","fritzbox","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.fritzbox.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","fritzbox","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.fritzbox.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","fritzbox","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.fritzbox.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9133,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","fritzbox","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.fritzbox.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the fritzbox exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-fritzbox-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","fritzbox","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.json.configFile":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"Path to configuration file.\n","loc":["services","prometheus","exporters","json","configFile"],"readOnly":false,"type":"path"},"services.prometheus.exporters.json.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus json exporter.","example":true,"loc":["services","prometheus","exporters","json","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.json.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the json exporter.\n","loc":["services","prometheus","exporters","json","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.json.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 7979","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.json.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 7979\"\n"},"loc":["services","prometheus","exporters","json","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.json.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the json exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-json-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","json","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.json.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","json","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.json.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":7979,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","json","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.json.url":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"URL to scrape JSON from.\n","loc":["services","prometheus","exporters","json","url"],"readOnly":false,"type":"string"},"services.prometheus.exporters.json.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the json exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-json-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","json","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.minio.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus minio exporter.","example":true,"loc":["services","prometheus","exporters","minio","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.minio.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the minio exporter.\n","loc":["services","prometheus","exporters","minio","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.minio.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9290","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.minio.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9290\"\n"},"loc":["services","prometheus","exporters","minio","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.minio.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the minio exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-minio-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","minio","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.minio.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","minio","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.minio.minioAccessKey":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"The value of the Minio access key.\nIt is required in order to connect to the server.\nBy default this uses the one from the local minio server if enabled\nand <literal>config.services.minio.accessKey</literal>.\n","example":"yourMinioAccessKey","loc":["services","prometheus","exporters","minio","minioAccessKey"],"readOnly":false,"type":"string"},"services.prometheus.exporters.minio.minioAccessSecret":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"The value of the Minio access secret.\nIt is required in order to connect to the server.\nBy default this uses the one from the local minio server if enabled\nand <literal>config.services.minio.secretKey</literal>.\n","loc":["services","prometheus","exporters","minio","minioAccessSecret"],"readOnly":false,"type":"string"},"services.prometheus.exporters.minio.minioAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"The URL of the minio server.\nUse HTTPS if Minio accepts secure connections only.\nBy default this connects to the local minio server if enabled.\n","example":"https://10.0.0.1:9000","loc":["services","prometheus","exporters","minio","minioAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.minio.minioBucketStats":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Collect statistics about the buckets and files in buckets.\nIt requires more computation, use it carefully in case of large buckets..\n","loc":["services","prometheus","exporters","minio","minioBucketStats"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.minio.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","minio","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.minio.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9290,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","minio","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.minio.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the minio exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-minio-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","minio","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.nginx.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus nginx exporter.","example":true,"loc":["services","prometheus","exporters","nginx","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.nginx.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the nginx exporter.\n","loc":["services","prometheus","exporters","nginx","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.nginx.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9113","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.nginx.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9113\"\n"},"loc":["services","prometheus","exporters","nginx","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.nginx.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the nginx exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-nginx-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","nginx","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.nginx.insecure":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":true,"description":"Ignore server certificate if using https.\n","loc":["services","prometheus","exporters","nginx","insecure"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.nginx.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","nginx","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.nginx.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","nginx","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.nginx.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9113,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","nginx","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.nginx.scrapeUri":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"http://localhost/nginx_status","description":"Address to access the nginx status page.\nCan be enabled with services.nginx.statusPage = true.\n","loc":["services","prometheus","exporters","nginx","scrapeUri"],"readOnly":false,"type":"string"},"services.prometheus.exporters.nginx.telemetryEndpoint":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"/metrics","description":"Path under which to expose metrics.\n","loc":["services","prometheus","exporters","nginx","telemetryEndpoint"],"readOnly":false,"type":"string"},"services.prometheus.exporters.nginx.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the nginx exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-nginx-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","nginx","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.node.disabledCollectors":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Collectors to disable which are enabled by default.\n","example":"[ \"timex\" ]","loc":["services","prometheus","exporters","node","disabledCollectors"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.node.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus node exporter.","example":true,"loc":["services","prometheus","exporters","node","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.node.enabledCollectors":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Collectors to enable. The collectors listed here are enabled in addition to the default ones.\n","example":"[ \"systemd\" ]","loc":["services","prometheus","exporters","node","enabledCollectors"],"readOnly":false,"type":"list of Concatenated strings"},"services.prometheus.exporters.node.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the node exporter.\n","loc":["services","prometheus","exporters","node","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.node.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9100","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.node.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9100\"\n"},"loc":["services","prometheus","exporters","node","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.node.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the node exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-node-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","node","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.node.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","node","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.node.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","node","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.node.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9100,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","node","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.node.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the node exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-node-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","node","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.postfix.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus postfix exporter.","example":true,"loc":["services","prometheus","exporters","postfix","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.postfix.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the postfix exporter.\n","loc":["services","prometheus","exporters","postfix","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.postfix.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9154","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.postfix.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9154\"\n"},"loc":["services","prometheus","exporters","postfix","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.postfix.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the postfix exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-postfix-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","postfix","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.postfix.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","postfix","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.postfix.logfilePath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"/var/log/postfix_exporter_input.log","description":"Path where Postfix writes log entries.\nThis file will be truncated by this exporter!\n","example":"/var/log/mail.log","loc":["services","prometheus","exporters","postfix","logfilePath"],"readOnly":false,"type":"path"},"services.prometheus.exporters.postfix.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","postfix","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.postfix.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9154,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","postfix","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.postfix.showqPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"/var/spool/postfix/public/showq","description":"Path where Postfix places it's showq socket.\n","example":"/var/lib/postfix/queue/public/showq","loc":["services","prometheus","exporters","postfix","showqPath"],"readOnly":false,"type":"path"},"services.prometheus.exporters.postfix.systemd.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable reading metrics from the systemd-journal instead of from a logfile\n.","example":true,"loc":["services","prometheus","exporters","postfix","systemd","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.postfix.systemd.journalPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":null,"description":"Path to the systemd journal.\n","loc":["services","prometheus","exporters","postfix","systemd","journalPath"],"readOnly":false,"type":"null or path"},"services.prometheus.exporters.postfix.systemd.slice":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":null,"description":"Name of the postfix systemd slice.\nThis overrides the <option>systemd.unit</option>.\n","loc":["services","prometheus","exporters","postfix","systemd","slice"],"readOnly":false,"type":"null or string"},"services.prometheus.exporters.postfix.systemd.unit":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"postfix.service","description":"Name of the postfix systemd unit.\n","loc":["services","prometheus","exporters","postfix","systemd","unit"],"readOnly":false,"type":"string"},"services.prometheus.exporters.postfix.telemetryPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"/metrics","description":"Path under which to expose metrics.\n","loc":["services","prometheus","exporters","postfix","telemetryPath"],"readOnly":false,"type":"string"},"services.prometheus.exporters.postfix.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the postfix exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-postfix-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","postfix","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.snmp.configuration":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":{},"description":"Snmp exporter configuration as nix attribute set. Mutually exclusive with 'configurationPath' option.\n","example":"{\n  \"default\" = {\n    \"version\" = 2;\n    \"auth\" = {\n      \"community\" = \"public\";\n    };\n  };\n};\n","loc":["services","prometheus","exporters","snmp","configuration"],"readOnly":false,"type":"null or attribute set"},"services.prometheus.exporters.snmp.configurationPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":null,"description":"Path to a snmp exporter configuration file. Mutually exclusive with 'configuration' option.\n","example":"./snmp.yml","loc":["services","prometheus","exporters","snmp","configurationPath"],"readOnly":false,"type":"null or path"},"services.prometheus.exporters.snmp.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus snmp exporter.","example":true,"loc":["services","prometheus","exporters","snmp","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.snmp.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the snmp exporter.\n","loc":["services","prometheus","exporters","snmp","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.snmp.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9116","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.snmp.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9116\"\n"},"loc":["services","prometheus","exporters","snmp","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.snmp.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the snmp exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-snmp-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","snmp","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.snmp.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","snmp","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.snmp.logFormat":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"logger:stderr","description":"Set the log target and format.\n","loc":["services","prometheus","exporters","snmp","logFormat"],"readOnly":false,"type":"string"},"services.prometheus.exporters.snmp.logLevel":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"info","description":"Only log messages with the given severity or above.\n","loc":["services","prometheus","exporters","snmp","logLevel"],"readOnly":false,"type":"one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\""},"services.prometheus.exporters.snmp.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","snmp","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.snmp.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9116,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","snmp","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.snmp.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the snmp exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-snmp-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","snmp","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.surfboard.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus surfboard exporter.","example":true,"loc":["services","prometheus","exporters","surfboard","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.surfboard.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the surfboard exporter.\n","loc":["services","prometheus","exporters","surfboard","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.surfboard.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9239","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.surfboard.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9239\"\n"},"loc":["services","prometheus","exporters","surfboard","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.surfboard.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the surfboard exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-surfboard-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","surfboard","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.surfboard.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","surfboard","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.surfboard.modemAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"192.168.100.1","description":"The hostname or IP of the cable modem.\n","loc":["services","prometheus","exporters","surfboard","modemAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.surfboard.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","surfboard","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.surfboard.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9239,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","surfboard","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.surfboard.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the surfboard exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-surfboard-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","surfboard","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.tor.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus tor exporter.","example":true,"loc":["services","prometheus","exporters","tor","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.tor.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the tor exporter.\n","loc":["services","prometheus","exporters","tor","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.tor.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9130","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.tor.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9130\"\n"},"loc":["services","prometheus","exporters","tor","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.tor.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the tor exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-tor-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","tor","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.tor.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","tor","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.tor.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","tor","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.tor.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9130,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","tor","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.tor.torControlAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"127.0.0.1","description":"Tor control IP address or hostname.\n","loc":["services","prometheus","exporters","tor","torControlAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.tor.torControlPort":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9051,"description":"Tor control port.\n","loc":["services","prometheus","exporters","tor","torControlPort"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.tor.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the tor exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-tor-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","tor","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.unifi.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus unifi exporter.","example":true,"loc":["services","prometheus","exporters","unifi","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.unifi.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the unifi exporter.\n","loc":["services","prometheus","exporters","unifi","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.unifi.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9130","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.unifi.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9130\"\n"},"loc":["services","prometheus","exporters","unifi","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.unifi.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the unifi exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-unifi-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","unifi","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.unifi.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","unifi","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.unifi.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","unifi","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.unifi.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9130,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","unifi","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.unifi.unifiAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"URL of the UniFi Controller API.\n","example":"https://10.0.0.1:8443","loc":["services","prometheus","exporters","unifi","unifiAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.unifi.unifiInsecure":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"If enabled skip the verification of the TLS certificate of the UniFi Controller API.\nUse with caution.\n","loc":["services","prometheus","exporters","unifi","unifiInsecure"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.unifi.unifiPassword":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"Password for authentication against UniFi Controller API.\n","loc":["services","prometheus","exporters","unifi","unifiPassword"],"readOnly":false,"type":"string"},"services.prometheus.exporters.unifi.unifiTimeout":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"5s","description":"Timeout including unit for UniFi Controller API requests.\n","example":"2m","loc":["services","prometheus","exporters","unifi","unifiTimeout"],"readOnly":false,"type":"string"},"services.prometheus.exporters.unifi.unifiUsername":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"description":"username for authentication against UniFi Controller API.\n","example":"ReadOnlyUser","loc":["services","prometheus","exporters","unifi","unifiUsername"],"readOnly":false,"type":"string"},"services.prometheus.exporters.unifi.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the unifi exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-unifi-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","unifi","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.varnish.enable":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Whether to enable the prometheus varnish exporter.","example":true,"loc":["services","prometheus","exporters","varnish","enable"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.varnish.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":[],"description":"Extra commandline options to pass to the varnish exporter.\n","loc":["services","prometheus","exporters","varnish","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.exporters.varnish.firewallFilter":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"-p tcp -m tcp --dport 9131","description":"Specify a filter for iptables to use when\n<option>services.prometheus.exporters.varnish.openFirewall</option>\nis true. It is used as `ip46tables -I nixos-fw <option>firewallFilter</option> -j nixos-fw-accept`.\n","example":{"_type":"literalExample","text":"\"-i eth0 -p tcp -m tcp --dport 9131\"\n"},"loc":["services","prometheus","exporters","varnish","firewallFilter"],"readOnly":false,"type":"string"},"services.prometheus.exporters.varnish.group":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"Group under which the varnish exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-varnish-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","varnish","group"],"readOnly":false,"type":"string"},"services.prometheus.exporters.varnish.healthPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":null,"description":"Path under which to expose healthcheck. Disabled unless configured.\n","loc":["services","prometheus","exporters","varnish","healthPath"],"readOnly":false,"type":"null or string"},"services.prometheus.exporters.varnish.instance":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":null,"description":"varnishstat -n value.\n","loc":["services","prometheus","exporters","varnish","instance"],"readOnly":false,"type":"null or string"},"services.prometheus.exporters.varnish.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"0.0.0.0","description":"Address to listen on.\n","loc":["services","prometheus","exporters","varnish","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.exporters.varnish.noExit":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Do not exit server on Varnish scrape errors.\n","loc":["services","prometheus","exporters","varnish","noExit"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.varnish.openFirewall":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Open port in firewall for incoming connections.\n","loc":["services","prometheus","exporters","varnish","openFirewall"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.varnish.port":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":9131,"description":"Port to listen on.\n","loc":["services","prometheus","exporters","varnish","port"],"readOnly":false,"type":"signed integer"},"services.prometheus.exporters.varnish.raw":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Enable raw stdout logging without timestamps.\n","loc":["services","prometheus","exporters","varnish","raw"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.varnish.telemetryPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"/metrics","description":"Path under which to expose metrics.\n","loc":["services","prometheus","exporters","varnish","telemetryPath"],"readOnly":false,"type":"string"},"services.prometheus.exporters.varnish.user":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"nobody","description":"User name under which the varnish exporter shall be run.\nHas no effect when <option>systemd.services.prometheus-varnish-exporter.serviceConfig.DynamicUser</option> is true.\n","loc":["services","prometheus","exporters","varnish","user"],"readOnly":false,"type":"string"},"services.prometheus.exporters.varnish.varnishStatPath":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":"varnishstat","description":"Path to varnishstat.\n","loc":["services","prometheus","exporters","varnish","varnishStatPath"],"readOnly":false,"type":"string"},"services.prometheus.exporters.varnish.verbose":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Enable verbose logging.\n","loc":["services","prometheus","exporters","varnish","verbose"],"readOnly":false,"type":"boolean"},"services.prometheus.exporters.varnish.withGoMetrics":{"declarations":["nixos/modules/services/monitoring/prometheus/exporters.nix"],"default":false,"description":"Export go runtime and http handler metrics.\n","loc":["services","prometheus","exporters","varnish","withGoMetrics"],"readOnly":false,"type":"boolean"},"services.prometheus.extraFlags":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"Extra commandline options when launching Prometheus.\n","loc":["services","prometheus","extraFlags"],"readOnly":false,"type":"list of strings"},"services.prometheus.globalConfig":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":{},"description":"Parameters that are valid in all  configuration contexts. They\nalso serve as defaults for other configuration sections\n","loc":["services","prometheus","globalConfig"],"readOnly":false,"type":"submodule"},"services.prometheus.globalConfig.evaluation_interval":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"1m","description":"How frequently to evaluate rules by default.\n","loc":["services","prometheus","globalConfig","evaluation_interval"],"readOnly":false,"type":"string"},"services.prometheus.globalConfig.external_labels":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":{},"description":"The labels to add to any time series or alerts when\ncommunicating with external systems (federation, remote\nstorage, Alertmanager).\n","loc":["services","prometheus","globalConfig","external_labels"],"readOnly":false,"type":"attribute set of strings"},"services.prometheus.globalConfig.scrape_interval":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"1m","description":"How frequently to scrape targets by default.\n","loc":["services","prometheus","globalConfig","scrape_interval"],"readOnly":false,"type":"string"},"services.prometheus.globalConfig.scrape_timeout":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"10s","description":"How long until a scrape request times out.\n","loc":["services","prometheus","globalConfig","scrape_timeout"],"readOnly":false,"type":"string"},"services.prometheus.listenAddress":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"0.0.0.0:9090","description":"Address to listen on for the web interface, API, and telemetry.\n","loc":["services","prometheus","listenAddress"],"readOnly":false,"type":"string"},"services.prometheus.ruleFiles":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"Any additional rules files to include in this configuration.\n","loc":["services","prometheus","ruleFiles"],"readOnly":false,"type":"list of paths"},"services.prometheus.rules":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"Alerting and/or Recording rules to evaluate at runtime.\n","loc":["services","prometheus","rules"],"readOnly":false,"type":"list of strings"},"services.prometheus.scrapeConfigs":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"A list of scrape configurations.\n","loc":["services","prometheus","scrapeConfigs"],"readOnly":false,"type":"list of submodules"},"services.prometheus.scrapeConfigs.*.basic_auth":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":null,"description":"Optional http login credentials for metrics scraping.\n","loc":["services","prometheus","scrapeConfigs","*","basic_auth"],"readOnly":false,"type":"null or submodule"},"services.prometheus.scrapeConfigs.*.basic_auth.password":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"HTTP password\n","loc":["services","prometheus","scrapeConfigs","*","basic_auth","password"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.basic_auth.username":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"HTTP username\n","loc":["services","prometheus","scrapeConfigs","*","basic_auth","username"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.consul_sd_configs":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"List of Consul service discovery configurations.\n","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs"],"readOnly":false,"type":"list of submodules"},"services.prometheus.scrapeConfigs.*.consul_sd_configs.*.datacenter":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"Consul datacenter","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs","*","datacenter"],"readOnly":false,"type":"null or string"},"services.prometheus.scrapeConfigs.*.consul_sd_configs.*.password":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"Consul password","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs","*","password"],"readOnly":false,"type":"null or string"},"services.prometheus.scrapeConfigs.*.consul_sd_configs.*.scheme":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"Consul scheme","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs","*","scheme"],"readOnly":false,"type":"null or string"},"services.prometheus.scrapeConfigs.*.consul_sd_configs.*.server":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"Consul server to query.","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs","*","server"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.consul_sd_configs.*.services":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"A list of services for which targets are retrieved.\n","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs","*","services"],"readOnly":false,"type":"list of strings"},"services.prometheus.scrapeConfigs.*.consul_sd_configs.*.tag_separator":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":",","description":"The string by which Consul tags are joined into the tag label.\n","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs","*","tag_separator"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.consul_sd_configs.*.token":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"Consul token","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs","*","token"],"readOnly":false,"type":"null or string"},"services.prometheus.scrapeConfigs.*.consul_sd_configs.*.username":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"Consul username","loc":["services","prometheus","scrapeConfigs","*","consul_sd_configs","*","username"],"readOnly":false,"type":"null or string"},"services.prometheus.scrapeConfigs.*.dns_sd_configs":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"List of DNS service discovery configurations.\n","loc":["services","prometheus","scrapeConfigs","*","dns_sd_configs"],"readOnly":false,"type":"list of submodules"},"services.prometheus.scrapeConfigs.*.dns_sd_configs.*.names":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"A list of DNS SRV record names to be queried.\n","loc":["services","prometheus","scrapeConfigs","*","dns_sd_configs","*","names"],"readOnly":false,"type":"list of strings"},"services.prometheus.scrapeConfigs.*.dns_sd_configs.*.refresh_interval":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"30s","description":"The time after which the provided names are refreshed.\n","loc":["services","prometheus","scrapeConfigs","*","dns_sd_configs","*","refresh_interval"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.file_sd_configs":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"List of file service discovery configurations.\n","loc":["services","prometheus","scrapeConfigs","*","file_sd_configs"],"readOnly":false,"type":"list of submodules"},"services.prometheus.scrapeConfigs.*.file_sd_configs.*.files":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"Patterns for files from which target groups are extracted. Refer\nto the Prometheus documentation for permitted filename patterns\nand formats.\n\n","loc":["services","prometheus","scrapeConfigs","*","file_sd_configs","*","files"],"readOnly":false,"type":"list of strings"},"services.prometheus.scrapeConfigs.*.file_sd_configs.*.refresh_interval":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"30s","description":"Refresh interval to re-read the files.\n","loc":["services","prometheus","scrapeConfigs","*","file_sd_configs","*","refresh_interval"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.honor_labels":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":false,"description":"Controls how Prometheus handles conflicts between labels\nthat are already present in scraped data and labels that\nPrometheus would attach server-side (\"job\" and \"instance\"\nlabels, manually configured target labels, and labels\ngenerated by service discovery implementations).\n\nIf honor_labels is set to \"true\", label conflicts are\nresolved by keeping label values from the scraped data and\nignoring the conflicting server-side labels.\n\nIf honor_labels is set to \"false\", label conflicts are\nresolved by renaming conflicting labels in the scraped data\nto \"exported_&lt;original-label&gt;\" (for example\n\"exported_instance\", \"exported_job\") and then attaching\nserver-side labels. This is useful for use cases such as\nfederation, where all labels specified in the target should\nbe preserved.\n","loc":["services","prometheus","scrapeConfigs","*","honor_labels"],"readOnly":false,"type":"boolean"},"services.prometheus.scrapeConfigs.*.job_name":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"The job name assigned to scraped metrics by default.\n","loc":["services","prometheus","scrapeConfigs","*","job_name"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.metrics_path":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"/metrics","description":"The HTTP resource path on which to fetch metrics from targets.\n","loc":["services","prometheus","scrapeConfigs","*","metrics_path"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.params":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":{},"description":"Optional HTTP URL parameters.\n","loc":["services","prometheus","scrapeConfigs","*","params"],"readOnly":false,"type":"attribute set of list of stringss"},"services.prometheus.scrapeConfigs.*.relabel_configs":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"List of relabel configurations.\n","loc":["services","prometheus","scrapeConfigs","*","relabel_configs"],"readOnly":false,"type":"list of submodules"},"services.prometheus.scrapeConfigs.*.relabel_configs.*.action":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"replace","description":"Action to perform based on regex matching.\n","loc":["services","prometheus","scrapeConfigs","*","relabel_configs","*","action"],"readOnly":false,"type":"one of \"replace\", \"keep\", \"drop\""},"services.prometheus.scrapeConfigs.*.relabel_configs.*.regex":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"(.*)","description":"Regular expression against which the extracted value is matched.\n","loc":["services","prometheus","scrapeConfigs","*","relabel_configs","*","regex"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.relabel_configs.*.replacement":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"$1","description":"Replacement value against which a regex replace is performed if the\nregular expression matches.\n","loc":["services","prometheus","scrapeConfigs","*","relabel_configs","*","replacement"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.relabel_configs.*.separator":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":";","description":"Separator placed between concatenated source label values.\n","loc":["services","prometheus","scrapeConfigs","*","relabel_configs","*","separator"],"readOnly":false,"type":"string"},"services.prometheus.scrapeConfigs.*.relabel_configs.*.source_labels":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"The source labels select values from existing labels. Their content\nis concatenated using the configured separator and matched against\nthe configured regular expression.\n","loc":["services","prometheus","scrapeConfigs","*","relabel_configs","*","source_labels"],"readOnly":false,"type":"list of strings"},"services.prometheus.scrapeConfigs.*.relabel_configs.*.target_label":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":null,"description":"Label to which the resulting value is written in a replace action.\nIt is mandatory for replace actions.\n","loc":["services","prometheus","scrapeConfigs","*","relabel_configs","*","target_label"],"readOnly":false,"type":"null or string"},"services.prometheus.scrapeConfigs.*.scheme":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":"http","description":"The URL scheme with which to fetch metrics from targets.\n","loc":["services","prometheus","scrapeConfigs","*","scheme"],"readOnly":false,"type":"one of \"http\", \"https\""},"services.prometheus.scrapeConfigs.*.scrape_interval":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":null,"description":"How frequently to scrape targets from this job. Defaults to the\nglobally configured default.\n","loc":["services","prometheus","scrapeConfigs","*","scrape_interval"],"readOnly":false,"type":"null or string"},"services.prometheus.scrapeConfigs.*.scrape_timeout":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":null,"description":"Per-target timeout when scraping this job. Defaults to the\nglobally configured default.\n","loc":["services","prometheus","scrapeConfigs","*","scrape_timeout"],"readOnly":false,"type":"null or string"},"services.prometheus.scrapeConfigs.*.static_configs":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":[],"description":"List of labeled target groups for this job.\n","loc":["services","prometheus","scrapeConfigs","*","static_configs"],"readOnly":false,"type":"list of submodules"},"services.prometheus.scrapeConfigs.*.static_configs.*.labels":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"default":{},"description":"Labels assigned to all metrics scraped from the targets.\n","loc":["services","prometheus","scrapeConfigs","*","static_configs","*","labels"],"readOnly":false,"type":"attribute set of strings"},"services.prometheus.scrapeConfigs.*.static_configs.*.targets":{"declarations":["nixos/modules/services/monitoring/prometheus/default.nix"],"description":"The targets specified by the target group.\n","loc":["services","prometheus","scrapeConfigs","*","static_configs","*","targets"],"readOnly":false,"type":"list of strings"},"services.prosody.admins":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":[],"description":"List of administrators of the current host","example":["admin1@example.com","admin2@example.com"],"loc":["services","prosody","admins"],"readOnly":false,"type":"list of strings"},"services.prosody.allowRegistration":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Allow account creation","loc":["services","prosody","allowRegistration"],"readOnly":false,"type":"boolean"},"services.prosody.c2sRequireEncryption":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Force clients to use encrypted connections? This option will\nprevent clients from authenticating unless they are using encryption.\n","loc":["services","prosody","c2sRequireEncryption"],"readOnly":false,"type":"boolean"},"services.prosody.dataDir":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":"/var/lib/prosody","description":"Directory where Prosody stores its data","loc":["services","prosody","dataDir"],"readOnly":false,"type":"Concatenated string"},"services.prosody.enable":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Whether to enable the prosody server","loc":["services","prosody","enable"],"readOnly":false,"type":"boolean"},"services.prosody.extraConfig":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":"","description":"Additional prosody configuration","loc":["services","prosody","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.prosody.extraModules":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":[],"description":"Enable custom modules","loc":["services","prosody","extraModules"],"readOnly":false,"type":"list of strings"},"services.prosody.extraPluginPaths":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":[],"description":"Addtional path in which to look find plugins/modules","loc":["services","prosody","extraPluginPaths"],"readOnly":false,"type":"list of paths"},"services.prosody.group":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":"prosody","description":"Group account under which prosody runs.","loc":["services","prosody","group"],"readOnly":false,"type":"string"},"services.prosody.modules.admin_adhoc":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Allows administration via an XMPP client that supports ad-hoc commands","loc":["services","prosody","modules","admin_adhoc"],"readOnly":false,"type":"boolean"},"services.prosody.modules.admin_telnet":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Opens telnet console interface on localhost port 5582","loc":["services","prosody","modules","admin_telnet"],"readOnly":false,"type":"boolean"},"services.prosody.modules.announce":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Send announcement to all online users","loc":["services","prosody","modules","announce"],"readOnly":false,"type":"boolean"},"services.prosody.modules.blocklist":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Allow users to block communications with other users","loc":["services","prosody","modules","blocklist"],"readOnly":false,"type":"boolean"},"services.prosody.modules.bosh":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Enable BOSH clients, aka 'Jabber over HTTP'","loc":["services","prosody","modules","bosh"],"readOnly":false,"type":"boolean"},"services.prosody.modules.carbons":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Keep multiple clients in sync","loc":["services","prosody","modules","carbons"],"readOnly":false,"type":"boolean"},"services.prosody.modules.dialback":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"s2s dialback support","loc":["services","prosody","modules","dialback"],"readOnly":false,"type":"boolean"},"services.prosody.modules.disco":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Service discovery","loc":["services","prosody","modules","disco"],"readOnly":false,"type":"boolean"},"services.prosody.modules.groups":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Shared roster support","loc":["services","prosody","modules","groups"],"readOnly":false,"type":"boolean"},"services.prosody.modules.http_files":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Serve static files from a directory over HTTP","loc":["services","prosody","modules","http_files"],"readOnly":false,"type":"boolean"},"services.prosody.modules.legacyauth":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Legacy authentication. Only used by some old clients and bots","loc":["services","prosody","modules","legacyauth"],"readOnly":false,"type":"boolean"},"services.prosody.modules.limits":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Enable bandwidth limiting for XMPP connections","loc":["services","prosody","modules","limits"],"readOnly":false,"type":"boolean"},"services.prosody.modules.mam":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Store messages in an archive and allow users to access it","loc":["services","prosody","modules","mam"],"readOnly":false,"type":"boolean"},"services.prosody.modules.motd":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Send a message to users when they log in","loc":["services","prosody","modules","motd"],"readOnly":false,"type":"boolean"},"services.prosody.modules.pep":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Enables users to publish their mood, activity, playing music and more","loc":["services","prosody","modules","pep"],"readOnly":false,"type":"boolean"},"services.prosody.modules.ping":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Replies to XMPP pings with pongs","loc":["services","prosody","modules","ping"],"readOnly":false,"type":"boolean"},"services.prosody.modules.private":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Private XML storage (for room bookmarks, etc.)","loc":["services","prosody","modules","private"],"readOnly":false,"type":"boolean"},"services.prosody.modules.proxy65":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Enables a file transfer proxy service which clients behind NAT can use","loc":["services","prosody","modules","proxy65"],"readOnly":false,"type":"boolean"},"services.prosody.modules.register":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Allow users to register on this server using a client and change passwords","loc":["services","prosody","modules","register"],"readOnly":false,"type":"boolean"},"services.prosody.modules.roster":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Allow users to have a roster","loc":["services","prosody","modules","roster"],"readOnly":false,"type":"boolean"},"services.prosody.modules.saslauth":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Authentication for clients and servers. Recommended if you want to log in.","loc":["services","prosody","modules","saslauth"],"readOnly":false,"type":"boolean"},"services.prosody.modules.server_contact_info":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Publish contact information for this service","loc":["services","prosody","modules","server_contact_info"],"readOnly":false,"type":"boolean"},"services.prosody.modules.time":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Let others know the time here on this server","loc":["services","prosody","modules","time"],"readOnly":false,"type":"boolean"},"services.prosody.modules.tls":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Add support for secure TLS on c2s/s2s connections","loc":["services","prosody","modules","tls"],"readOnly":false,"type":"boolean"},"services.prosody.modules.uptime":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Report how long server has been running","loc":["services","prosody","modules","uptime"],"readOnly":false,"type":"boolean"},"services.prosody.modules.vcard":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Allow users to set vCards","loc":["services","prosody","modules","vcard"],"readOnly":false,"type":"boolean"},"services.prosody.modules.version":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Replies to server version requests","loc":["services","prosody","modules","version"],"readOnly":false,"type":"boolean"},"services.prosody.modules.watchregistrations":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Alert admins of registrations","loc":["services","prosody","modules","watchregistrations"],"readOnly":false,"type":"boolean"},"services.prosody.modules.websocket":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Enable WebSocket support","loc":["services","prosody","modules","websocket"],"readOnly":false,"type":"boolean"},"services.prosody.modules.welcome":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Welcome users who register accounts","loc":["services","prosody","modules","welcome"],"readOnly":false,"type":"boolean"},"services.prosody.package":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":"pkgs.prosody","description":"Prosody package to use","example":{"_type":"literalExample","text":"pkgs.prosody.override {\n  withExtraLibs = [ pkgs.luaPackages.lpty ];\n  withCommunityModules = [ \"auth_external\" ];\n};\n"},"loc":["services","prosody","package"],"readOnly":false,"type":"package"},"services.prosody.s2sInsecureDomains":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":[],"description":"Some servers have invalid or self-signed certificates. You can list\nremote domains here that will not be required to authenticate using\ncertificates. They will be authenticated using DNS instead, even\nwhen s2s_secure_auth is enabled.\n","example":["insecure.example.com"],"loc":["services","prosody","s2sInsecureDomains"],"readOnly":false,"type":"list of strings"},"services.prosody.s2sRequireEncryption":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":true,"description":"Force servers to use encrypted connections? This option will\nprevent servers from authenticating unless they are using encryption.\nNote that this is different from authentication.\n","loc":["services","prosody","s2sRequireEncryption"],"readOnly":false,"type":"boolean"},"services.prosody.s2sSecureAuth":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Force certificate authentication for server-to-server connections?\nThis provides ideal security, but requires servers you communicate\nwith to support encryption AND present valid, trusted certificates.\nFor more information see https://prosody.im/doc/s2s#security\n","loc":["services","prosody","s2sSecureAuth"],"readOnly":false,"type":"boolean"},"services.prosody.s2sSecureDomains":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":[],"description":"Even if you leave s2s_secure_auth disabled, you can still require valid\ncertificates for some domains by specifying a list here.\n","example":["jabber.org"],"loc":["services","prosody","s2sSecureDomains"],"readOnly":false,"type":"list of strings"},"services.prosody.ssl":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":null,"description":"Paths to SSL files","loc":["services","prosody","ssl"],"readOnly":false,"type":"null or submodule"},"services.prosody.ssl.cert":{"declarations":["nixos/modules/services/networking/prosody.nix"],"description":"Path to the certificate file.","loc":["services","prosody","ssl","cert"],"readOnly":false,"type":"path"},"services.prosody.ssl.extraOptions":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":{},"description":"Extra SSL configuration options.","loc":["services","prosody","ssl","extraOptions"],"readOnly":false,"type":"attribute set"},"services.prosody.ssl.key":{"declarations":["nixos/modules/services/networking/prosody.nix"],"description":"Path to the key file.","loc":["services","prosody","ssl","key"],"readOnly":false,"type":"path"},"services.prosody.user":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":"prosody","description":"User account under which prosody runs.","loc":["services","prosody","user"],"readOnly":false,"type":"string"},"services.prosody.virtualHosts":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":{"localhost":{"domain":"localhost","enabled":true}},"description":"Define the virtual hosts","example":{"myhost":{"domain":"my-xmpp-example-host.org","enabled":true}},"loc":["services","prosody","virtualHosts"],"readOnly":false,"type":"list or attribute set of submodules"},"services.prosody.virtualHosts.<name?>.domain":{"declarations":["nixos/modules/services/networking/prosody.nix"],"description":"Domain name","loc":["services","prosody","virtualHosts","<name?>","domain"],"readOnly":false,"type":"string"},"services.prosody.virtualHosts.<name?>.enabled":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":false,"description":"Whether to enable the virtual host","loc":["services","prosody","virtualHosts","<name?>","enabled"],"readOnly":false,"type":"boolean"},"services.prosody.virtualHosts.<name?>.extraConfig":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":"","description":"Additional virtual host specific configuration","loc":["services","prosody","virtualHosts","<name?>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.prosody.virtualHosts.<name?>.ssl":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":null,"description":"Paths to SSL files","loc":["services","prosody","virtualHosts","<name?>","ssl"],"readOnly":false,"type":"null or submodule"},"services.prosody.virtualHosts.<name?>.ssl.cert":{"declarations":["nixos/modules/services/networking/prosody.nix"],"description":"Path to the certificate file.","loc":["services","prosody","virtualHosts","<name?>","ssl","cert"],"readOnly":false,"type":"path"},"services.prosody.virtualHosts.<name?>.ssl.extraOptions":{"declarations":["nixos/modules/services/networking/prosody.nix"],"default":{},"description":"Extra SSL configuration options.","loc":["services","prosody","virtualHosts","<name?>","ssl","extraOptions"],"readOnly":false,"type":"attribute set"},"services.prosody.virtualHosts.<name?>.ssl.key":{"declarations":["nixos/modules/services/networking/prosody.nix"],"description":"Path to the key file.","loc":["services","prosody","virtualHosts","<name?>","ssl","key"],"readOnly":false,"type":"path"},"services.psd.enable":{"declarations":["nixos/modules/services/desktops/profile-sync-daemon.nix"],"default":false,"description":"Whether to enable the Profile Sync daemon.\n","loc":["services","psd","enable"],"readOnly":false,"type":"boolean"},"services.psd.resyncTimer":{"declarations":["nixos/modules/services/desktops/profile-sync-daemon.nix"],"default":"1h","description":"The amount of time to wait before syncing browser profiles back to the\ndisk.\n\nTakes a systemd.unit time span. The time unit defaults to seconds if\nomitted.\n","example":"1h 30min","loc":["services","psd","resyncTimer"],"readOnly":false,"type":"string"},"services.pykms.enable":{"declarations":["nixos/modules/services/misc/pykms.nix"],"default":false,"description":"Whether to enable the PyKMS service.","loc":["services","pykms","enable"],"readOnly":false,"type":"boolean"},"services.pykms.listenAddress":{"declarations":["nixos/modules/services/misc/pykms.nix"],"default":"0.0.0.0","description":"The IP address on which to listen.","loc":["services","pykms","listenAddress"],"readOnly":false,"type":"string"},"services.pykms.openFirewallPort":{"declarations":["nixos/modules/services/misc/pykms.nix"],"default":false,"description":"Whether the listening port should be opened automatically.","loc":["services","pykms","openFirewallPort"],"readOnly":false,"type":"boolean"},"services.pykms.port":{"declarations":["nixos/modules/services/misc/pykms.nix"],"default":1688,"description":"The port on which to listen.","loc":["services","pykms","port"],"readOnly":false,"type":"signed integer"},"services.pykms.verbose":{"declarations":["nixos/modules/services/misc/pykms.nix"],"default":false,"description":"Show verbose output.","loc":["services","pykms","verbose"],"readOnly":false,"type":"boolean"},"services.qemuGuest.enable":{"declarations":["nixos/modules/virtualisation/qemu-guest-agent.nix"],"default":false,"description":"Whether to enable the qemu guest agent.","loc":["services","qemuGuest","enable"],"readOnly":false,"type":"boolean"},"services.quagga.babel.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"babeld configuration statements.\n","example":"","loc":["services","quagga","babel","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.babel.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga babeld.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/babeld.conf","loc":["services","quagga","babel","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.babel.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Quagga BABEL routing protocol.","example":true,"loc":["services","quagga","babel","enable"],"readOnly":false,"type":"boolean"},"services.quagga.babel.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","babel","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.babel.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","babel","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quagga.bgp.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"bgpd configuration statements.\n","example":"router bgp 65001\n  neighbor 10.0.0.1 remote-as 65001\n","loc":["services","quagga","bgp","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.bgp.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga bgpd.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/bgpd.conf","loc":["services","quagga","bgp","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.bgp.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Quagga BGP routing protocol.","example":true,"loc":["services","quagga","bgp","enable"],"readOnly":false,"type":"boolean"},"services.quagga.bgp.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","bgp","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.bgp.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","bgp","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quagga.isis.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"isisd configuration statements.\n","example":"","loc":["services","quagga","isis","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.isis.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga isisd.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/isisd.conf","loc":["services","quagga","isis","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.isis.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Quagga ISIS routing protocol.","example":true,"loc":["services","quagga","isis","enable"],"readOnly":false,"type":"boolean"},"services.quagga.isis.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","isis","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.isis.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","isis","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quagga.ospf.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"ospfd configuration statements.\n","example":"router ospf\n  network 10.0.0.0/8 area 0\n","loc":["services","quagga","ospf","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.ospf.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga ospfd.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/ospfd.conf","loc":["services","quagga","ospf","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.ospf.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Quagga OSPF routing protocol.","example":true,"loc":["services","quagga","ospf","enable"],"readOnly":false,"type":"boolean"},"services.quagga.ospf.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","ospf","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.ospf.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","ospf","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quagga.ospf6.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"ospf6d configuration statements.\n","example":"","loc":["services","quagga","ospf6","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.ospf6.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga ospf6d.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/ospf6d.conf","loc":["services","quagga","ospf6","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.ospf6.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Quagga OSPF6 routing protocol.","example":true,"loc":["services","quagga","ospf6","enable"],"readOnly":false,"type":"boolean"},"services.quagga.ospf6.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","ospf6","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.ospf6.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","ospf6","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quagga.pim.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"pimd configuration statements.\n","example":"","loc":["services","quagga","pim","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.pim.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga pimd.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/pimd.conf","loc":["services","quagga","pim","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.pim.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Quagga PIM routing protocol.","example":true,"loc":["services","quagga","pim","enable"],"readOnly":false,"type":"boolean"},"services.quagga.pim.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","pim","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.pim.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","pim","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quagga.rip.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"ripd configuration statements.\n","example":"router rip\n  network 10.0.0.0/8\n","loc":["services","quagga","rip","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.rip.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga ripd.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/ripd.conf","loc":["services","quagga","rip","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.rip.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Quagga RIP routing protocol.","example":true,"loc":["services","quagga","rip","enable"],"readOnly":false,"type":"boolean"},"services.quagga.rip.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","rip","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.rip.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","rip","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quagga.ripng.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"ripngd configuration statements.\n","example":"","loc":["services","quagga","ripng","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.ripng.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga ripngd.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/ripngd.conf","loc":["services","quagga","ripng","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.ripng.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Quagga RIPNG routing protocol.","example":true,"loc":["services","quagga","ripng","enable"],"readOnly":false,"type":"boolean"},"services.quagga.ripng.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","ripng","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.ripng.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","ripng","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quagga.zebra.config":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"","description":"zebra configuration statements.\n","example":"","loc":["services","quagga","zebra","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.quagga.zebra.configFile":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"Configuration file to use for Quagga zebra.\nBy default the NixOS generated files are used.\n","example":"/etc/quagga/zebra.conf","loc":["services","quagga","zebra","configFile"],"readOnly":false,"type":"null or path"},"services.quagga.zebra.enable":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":false,"description":"Whether to enable the Zebra routing manager.\n\nThe Zebra routing manager is automatically enabled\nif any routing protocols are configured.\n","loc":["services","quagga","zebra","enable"],"readOnly":false,"type":"boolean"},"services.quagga.zebra.vtyListenAddress":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":"127.0.0.1","description":"Address to bind to for the VTY interface.\n","loc":["services","quagga","zebra","vtyListenAddress"],"readOnly":false,"type":"string"},"services.quagga.zebra.vtyListenPort":{"declarations":["nixos/modules/services/networking/quagga.nix"],"default":null,"description":"TCP Port to bind to for the VTY interface.\n","loc":["services","quagga","zebra","vtyListenPort"],"readOnly":false,"type":"null or signed integer"},"services.quassel-webserver.backlogLimit":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":100,"description":"Amount of backlogs to fetch per buffer after first retrieval","loc":["services","quassel-webserver","backlogLimit"],"readOnly":false,"type":"signed integer"},"services.quassel-webserver.enable":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":false,"description":"Whether to enable the quassel webclient service","loc":["services","quassel-webserver","enable"],"readOnly":false,"type":"boolean"},"services.quassel-webserver.forceHostAndPort":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":false,"description":"Force the users to use the quasselCoreHost and quasselCorePort defaults","loc":["services","quassel-webserver","forceHostAndPort"],"readOnly":false,"type":"boolean"},"services.quassel-webserver.initialBacklogLimit":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":20,"description":"Amount of backlogs to fetch per buffer on connection","loc":["services","quassel-webserver","initialBacklogLimit"],"readOnly":false,"type":"signed integer"},"services.quassel-webserver.pkg":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":"pkgs.quassel-webserver","description":"The quassel-webserver package","loc":["services","quassel-webserver","pkg"],"readOnly":false,"type":"package"},"services.quassel-webserver.port":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":60443,"description":"The port the quassel webserver should listen on","loc":["services","quassel-webserver","port"],"readOnly":false,"type":"signed integer"},"services.quassel-webserver.prefixPath":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":"","description":"Configure this if you use a reverse proxy. Must start with a '/'","example":"/quassel","loc":["services","quassel-webserver","prefixPath"],"readOnly":false,"type":"string"},"services.quassel-webserver.quasselCoreHost":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":"","description":"The default host of the quassel core","loc":["services","quassel-webserver","quasselCoreHost"],"readOnly":false,"type":"string"},"services.quassel-webserver.quasselCorePort":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":4242,"description":"The default quassel core port","loc":["services","quassel-webserver","quasselCorePort"],"readOnly":false,"type":"signed integer"},"services.quassel-webserver.secureCore":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":true,"description":"Connect to the core using SSL","loc":["services","quassel-webserver","secureCore"],"readOnly":false,"type":"boolean"},"services.quassel-webserver.theme":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":"default","description":"default or darksolarized","loc":["services","quassel-webserver","theme"],"readOnly":false,"type":"string"},"services.quassel-webserver.useHttps":{"declarations":["nixos/modules/services/web-apps/quassel-webserver.nix"],"default":true,"description":"Whether the quassel webserver connection should be a https connection","loc":["services","quassel-webserver","useHttps"],"readOnly":false,"type":"boolean"},"services.quassel.dataDir":{"declarations":["nixos/modules/services/networking/quassel.nix"],"default":"/home/quassel/.config/quassel-irc.org","description":"The directory holding configuration files, the SQlite database and the SSL Cert.\n","loc":["services","quassel","dataDir"],"readOnly":false,"type":"unspecified"},"services.quassel.enable":{"declarations":["nixos/modules/services/networking/quassel.nix"],"default":false,"description":"Whether to run the Quassel IRC client daemon.\n","loc":["services","quassel","enable"],"readOnly":false,"type":"unspecified"},"services.quassel.interfaces":{"declarations":["nixos/modules/services/networking/quassel.nix"],"default":["127.0.0.1"],"description":"The interfaces the Quassel daemon will be listening to.  If `[ 127.0.0.1 ]',\nonly clients on the local host can connect to it; if `[ 0.0.0.0 ]', clients\ncan access it from any network interface.\n","loc":["services","quassel","interfaces"],"readOnly":false,"type":"unspecified"},"services.quassel.package":{"declarations":["nixos/modules/services/networking/quassel.nix"],"default":"pkgs.quasselDaemon","description":"The package of the quassel daemon.\n","example":{"_type":"literalExample","text":"pkgs.quasselDaemon"},"loc":["services","quassel","package"],"readOnly":false,"type":"package"},"services.quassel.portNumber":{"declarations":["nixos/modules/services/networking/quassel.nix"],"default":4242,"description":"The port number the Quassel daemon will be listening to.\n","loc":["services","quassel","portNumber"],"readOnly":false,"type":"unspecified"},"services.quassel.user":{"declarations":["nixos/modules/services/networking/quassel.nix"],"default":null,"description":"The existing user the Quassel daemon should run as. If left empty, a default \"quassel\" user will be created.\n","loc":["services","quassel","user"],"readOnly":false,"type":"unspecified"},"services.rabbitmq.config":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":"","description":"Verbatim advanced configuration file contents.\nPrefered way is to use configItems.\n\nSee http://www.rabbitmq.com/configure.html\n","loc":["services","rabbitmq","config"],"readOnly":false,"type":"string"},"services.rabbitmq.configItems":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":{},"description":"New style config options.\n\nSee http://www.rabbitmq.com/configure.html\n","example":"{\n  \"auth_backends.1.authn\" = \"rabbit_auth_backend_ldap\";\n  \"auth_backends.1.authz\" = \"rabbit_auth_backend_internal\";\n}\n","loc":["services","rabbitmq","configItems"],"readOnly":false,"type":"attribute set of strings"},"services.rabbitmq.cookie":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":"","description":"Erlang cookie is a string of arbitrary length which must\nbe the same for several nodes to be allowed to communicate.\nLeave empty to generate automatically.\n","loc":["services","rabbitmq","cookie"],"readOnly":false,"type":"string"},"services.rabbitmq.dataDir":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":"/var/lib/rabbitmq","description":"Data directory for rabbitmq.\n","loc":["services","rabbitmq","dataDir"],"readOnly":false,"type":"path"},"services.rabbitmq.enable":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":false,"description":"Whether to enable the RabbitMQ server, an Advanced Message\nQueuing Protocol (AMQP) broker.\n","loc":["services","rabbitmq","enable"],"readOnly":false,"type":"unspecified"},"services.rabbitmq.listenAddress":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":"127.0.0.1","description":"IP address on which RabbitMQ will listen for AMQP\nconnections.  Set to the empty string to listen on all\ninterfaces.  Note that RabbitMQ creates a user named\n<literal>guest</literal> with password\n<literal>guest</literal> by default, so you should delete\nthis user if you intend to allow external access.\n\nTogether with 'port' setting it's mostly an alias for\nconfigItems.\"listeners.tcp.1\" and it's left for backwards\ncompatibility with previous version of this module.\n","example":"","loc":["services","rabbitmq","listenAddress"],"readOnly":false,"type":"string"},"services.rabbitmq.package":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":"pkgs.rabbitmq-server","description":"Which rabbitmq package to use.\n","loc":["services","rabbitmq","package"],"readOnly":false,"type":"package"},"services.rabbitmq.pluginDirs":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":[],"description":"The list of directories containing external plugins","loc":["services","rabbitmq","pluginDirs"],"readOnly":false,"type":"list of paths"},"services.rabbitmq.plugins":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":[],"description":"The names of plugins to enable","loc":["services","rabbitmq","plugins"],"readOnly":false,"type":"list of strings"},"services.rabbitmq.port":{"declarations":["nixos/modules/services/amqp/rabbitmq.nix"],"default":5672,"description":"Port on which RabbitMQ will listen for AMQP connections.\n","loc":["services","rabbitmq","port"],"readOnly":false,"type":"signed integer"},"services.racoon.config":{"declarations":["nixos/modules/services/networking/racoon.nix"],"default":"","description":"Contents of racoon configuration file.","loc":["services","racoon","config"],"readOnly":false,"type":"string"},"services.racoon.configPath":{"declarations":["nixos/modules/services/networking/racoon.nix"],"default":"/etc/racoon/racoon.conf","description":"Location of racoon config if config is not provided.","loc":["services","racoon","configPath"],"readOnly":false,"type":"path"},"services.racoon.enable":{"declarations":["nixos/modules/services/networking/racoon.nix"],"default":false,"description":"Whether to enable racoon.","example":true,"loc":["services","racoon","enable"],"readOnly":false,"type":"boolean"},"services.radarr.enable":{"declarations":["nixos/modules/services/misc/radarr.nix"],"default":false,"description":"Whether to enable Radarr.","example":true,"loc":["services","radarr","enable"],"readOnly":false,"type":"boolean"},"services.radicale.config":{"declarations":["nixos/modules/services/networking/radicale.nix"],"default":"","description":"Radicale configuration, this will set the service\nconfiguration file.\n","loc":["services","radicale","config"],"readOnly":false,"type":"Concatenated string"},"services.radicale.enable":{"declarations":["nixos/modules/services/networking/radicale.nix"],"default":false,"description":"Enable Radicale CalDAV and CardDAV server.\n","loc":["services","radicale","enable"],"readOnly":false,"type":"boolean"},"services.radicale.extraArgs":{"declarations":["nixos/modules/services/networking/radicale.nix"],"default":[],"description":"Extra arguments passed to the Radicale daemon.","loc":["services","radicale","extraArgs"],"readOnly":false,"type":"list of Concatenated strings"},"services.radicale.package":{"declarations":["nixos/modules/services/networking/radicale.nix"],"default":"pkgs.radicale2","description":"Radicale package to use. This defaults to version 1.x if\n<literal>system.stateVersion &lt; 17.09</literal> and version 2.x\notherwise.\n","loc":["services","radicale","package"],"readOnly":false,"type":"package"},"services.radvd.config":{"declarations":["nixos/modules/services/networking/radvd.nix"],"description":"The contents of the radvd configuration file.\n","example":"interface eth0 {\n  AdvSendAdvert on;\n  prefix 2001:db8:1234:5678::/64 { };\n};\n","loc":["services","radvd","config"],"readOnly":false,"type":"unspecified"},"services.radvd.enable":{"declarations":["nixos/modules/services/networking/radvd.nix"],"default":false,"description":"Whether to enable the Router Advertisement Daemon\n(<command>radvd</command>), which provides link-local\nadvertisements of IPv6 router addresses and prefixes using\nthe Neighbor Discovery Protocol (NDP).  This enables\nstateless address autoconfiguration in IPv6 clients on the\nnetwork.\n","loc":["services","radvd","enable"],"readOnly":false,"type":"unspecified"},"services.ratbagd.enable":{"declarations":["nixos/modules/services/hardware/ratbagd.nix"],"default":false,"description":"Whether to enable ratbagd for configuring gaming mice.\n","loc":["services","ratbagd","enable"],"readOnly":false,"type":"unspecified"},"services.rdnssd.enable":{"declarations":["nixos/modules/services/networking/rdnssd.nix"],"default":false,"description":"Whether to enable the RDNSS daemon\n(<command>rdnssd</command>), which configures DNS servers in\n<filename>/etc/resolv.conf</filename> from RDNSS\nadvertisements sent by IPv6 routers.\n","loc":["services","rdnssd","enable"],"readOnly":false,"type":"unspecified"},"services.redis.appendFsync":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"everysec","description":"How often to fsync the append-only log, options: no, always, everysec.","loc":["services","redis","appendFsync"],"readOnly":false,"type":"string"},"services.redis.appendOnly":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":false,"description":"By default data is only periodically persisted to disk, enable this option to use an append-only file for improved persistence.","loc":["services","redis","appendOnly"],"readOnly":false,"type":"boolean"},"services.redis.appendOnlyFilename":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"appendonly.aof","description":"Filename for the append-only file (stored inside of dbpath)","loc":["services","redis","appendOnlyFilename"],"readOnly":false,"type":"string"},"services.redis.bind":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":null,"description":"The IP interface to bind to.","example":"127.0.0.1","loc":["services","redis","bind"],"readOnly":false,"type":"null or string"},"services.redis.databases":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":16,"description":"Set the number of databases.","loc":["services","redis","databases"],"readOnly":false,"type":"signed integer"},"services.redis.dbFilename":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"dump.rdb","description":"The filename where to dump the DB.","loc":["services","redis","dbFilename"],"readOnly":false,"type":"string"},"services.redis.dbpath":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"/var/lib/redis","description":"The DB will be written inside this directory, with the filename specified using the 'dbFilename' configuration.","loc":["services","redis","dbpath"],"readOnly":false,"type":"path"},"services.redis.enable":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":false,"description":"Whether to enable the Redis server.","loc":["services","redis","enable"],"readOnly":false,"type":"boolean"},"services.redis.extraConfig":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"","description":"Extra configuration options for redis.conf.","loc":["services","redis","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.redis.logLevel":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"notice","description":"Specify the server verbosity level, options: debug, verbose, notice, warning.","example":"debug","loc":["services","redis","logLevel"],"readOnly":false,"type":"string"},"services.redis.logfile":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"/dev/null","description":"Specify the log file name. Also 'stdout' can be used to force Redis to log on the standard output.","example":"/var/log/redis.log","loc":["services","redis","logfile"],"readOnly":false,"type":"string"},"services.redis.masterAuth":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":null,"description":"If the master is password protected (using the requirePass configuration)\n        it is possible to tell the slave to authenticate before starting the replication synchronization\n        process, otherwise the master will refuse the slave request.\n        (STORED PLAIN TEXT, WORLD-READABLE IN NIX STORE)","loc":["services","redis","masterAuth"],"readOnly":false,"type":"unspecified"},"services.redis.openFirewall":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":false,"description":"Whether to open ports in the firewall for the server.\n","loc":["services","redis","openFirewall"],"readOnly":false,"type":"boolean"},"services.redis.package":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"pkgs.redis","description":"Which Redis derivation to use.","loc":["services","redis","package"],"readOnly":false,"type":"package"},"services.redis.pidFile":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"/var/lib/redis/redis.pid","description":"","loc":["services","redis","pidFile"],"readOnly":false,"type":"path"},"services.redis.port":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":6379,"description":"The port for Redis to listen to.","loc":["services","redis","port"],"readOnly":false,"type":"signed integer"},"services.redis.requirePass":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":null,"description":"Password for database (STORED PLAIN TEXT, WORLD-READABLE IN NIX STORE)","example":"letmein!","loc":["services","redis","requirePass"],"readOnly":false,"type":"null or string"},"services.redis.save":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":[[900,1],[300,10],[60,10000]],"description":"The schedule in which data is persisted to disk, represented as a list of lists where the first element represent the amount of seconds and the second the number of changes.","example":[[900,1],[300,10],[60,10000]],"loc":["services","redis","save"],"readOnly":false,"type":"list of list of signed integerss"},"services.redis.slaveOf":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":null,"description":"An attribute set with two attributes: ip and port to which this redis instance acts as a slave.","example":{"ip":"192.168.1.100","port":6379},"loc":["services","redis","slaveOf"],"readOnly":false,"type":"unspecified"},"services.redis.slowLogLogSlowerThan":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":10000,"description":"Log queries whose execution take longer than X in milliseconds.","example":1000,"loc":["services","redis","slowLogLogSlowerThan"],"readOnly":false,"type":"signed integer"},"services.redis.slowLogMaxLen":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":128,"description":"Maximum number of items to keep in slow log.","loc":["services","redis","slowLogMaxLen"],"readOnly":false,"type":"signed integer"},"services.redis.syslog":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":true,"description":"Enable logging to the system logger.","loc":["services","redis","syslog"],"readOnly":false,"type":"boolean"},"services.redis.unixSocket":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":null,"description":"The path to the socket to bind to.","example":"/var/run/redis.sock","loc":["services","redis","unixSocket"],"readOnly":false,"type":"null or path"},"services.redis.user":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":"redis","description":"User account under which Redis runs.","loc":["services","redis","user"],"readOnly":false,"type":"string"},"services.redis.vmOverCommit":{"declarations":["nixos/modules/services/databases/redis.nix"],"default":false,"description":"Set vm.overcommit_memory to 1 (Suggested for Background Saving: http://redis.io/topics/faq)\n","loc":["services","redis","vmOverCommit"],"readOnly":false,"type":"boolean"},"services.redmine.database.host":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"127.0.0.1","description":"Database host address.","loc":["services","redmine","database","host"],"readOnly":false,"type":"string"},"services.redmine.database.name":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"redmine","description":"Database name.","loc":["services","redmine","database","name"],"readOnly":false,"type":"string"},"services.redmine.database.password":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"","description":"The password corresponding to <option>database.user</option>.\nWarning: this is stored in cleartext in the Nix store!\nUse <option>database.passwordFile</option> instead.\n","loc":["services","redmine","database","password"],"readOnly":false,"type":"string"},"services.redmine.database.passwordFile":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":null,"description":"A file containing the password corresponding to\n<option>database.user</option>.\n","example":"/run/keys/redmine-dbpassword","loc":["services","redmine","database","passwordFile"],"readOnly":false,"type":"null or path"},"services.redmine.database.port":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":3306,"description":"Database host port.","loc":["services","redmine","database","port"],"readOnly":false,"type":"signed integer"},"services.redmine.database.socket":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":null,"description":"Path to the unix socket file to use for authentication.","example":"/run/mysqld/mysqld.sock","loc":["services","redmine","database","socket"],"readOnly":false,"type":"null or path"},"services.redmine.database.type":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"mysql2","description":"Database engine to use.","example":"postgresql","loc":["services","redmine","database","type"],"readOnly":false,"type":"one of \"mysql2\", \"postgresql\""},"services.redmine.database.user":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"redmine","description":"Database user.","loc":["services","redmine","database","user"],"readOnly":false,"type":"string"},"services.redmine.enable":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":false,"description":"Enable the Redmine service.","loc":["services","redmine","enable"],"readOnly":false,"type":"boolean"},"services.redmine.extraConfig":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"","description":"Extra configuration in configuration.yml.\n\nSee https://guides.rubyonrails.org/action_mailer_basics.html#action-mailer-configuration\n","example":{"_type":"literalExample","text":"email_delivery:\n  delivery_method: smtp\n  smtp_settings:\n    address: mail.example.com\n    port: 25\n"},"loc":["services","redmine","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.redmine.group":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"redmine","description":"Group under which Redmine is ran.","loc":["services","redmine","group"],"readOnly":false,"type":"string"},"services.redmine.package":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"pkgs.redmine","description":"Which Redmine package to use.","example":"pkgs.redmine.override { ruby = pkgs.ruby_2_3; }","loc":["services","redmine","package"],"readOnly":false,"type":"package"},"services.redmine.plugins":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":{},"description":"Set of plugins.","example":{"_type":"literalExample","text":"{\n  redmine_env_auth = builtins.fetchurl {\n    url = https://github.com/Intera/redmine_env_auth/archive/0.6.zip;\n    sha256 = \"0yyr1yjd8gvvh832wdc8m3xfnhhxzk2pk3gm2psg5w9jdvd6skak\";\n  };\n}\n"},"loc":["services","redmine","plugins"],"readOnly":false,"type":"attribute set of paths"},"services.redmine.port":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":3000,"description":"Port on which Redmine is ran.","loc":["services","redmine","port"],"readOnly":false,"type":"signed integer"},"services.redmine.stateDir":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"/var/lib/redmine","description":"The state directory, logs and plugins are stored here.","loc":["services","redmine","stateDir"],"readOnly":false,"type":"string"},"services.redmine.themes":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":{},"description":"Set of themes.","example":{"_type":"literalExample","text":"{\n  dkuk-redmine_alex_skin = builtins.fetchurl {\n    url = https://bitbucket.org/dkuk/redmine_alex_skin/get/1842ef675ef3.zip;\n    sha256 = \"0hrin9lzyi50k4w2bd2b30vrf1i4fi1c0gyas5801wn8i7kpm9yl\";\n  };\n}\n"},"loc":["services","redmine","themes"],"readOnly":false,"type":"attribute set of paths"},"services.redmine.user":{"declarations":["nixos/modules/services/misc/redmine.nix"],"default":"redmine","description":"User under which Redmine is ran.","loc":["services","redmine","user"],"readOnly":false,"type":"string"},"services.redshift.brightness.day":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":"1","description":"Screen brightness to apply during the day,\nbetween <literal>0.1</literal> and <literal>1.0</literal>.\n","loc":["services","redshift","brightness","day"],"readOnly":false,"type":"string"},"services.redshift.brightness.night":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":"1","description":"Screen brightness to apply during the night,\nbetween <literal>0.1</literal> and <literal>1.0</literal>.\n","loc":["services","redshift","brightness","night"],"readOnly":false,"type":"string"},"services.redshift.enable":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":false,"description":"Enable Redshift to change your screen's colour temperature depending on\nthe time of day.\n","loc":["services","redshift","enable"],"readOnly":false,"type":"boolean"},"services.redshift.extraOptions":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":[],"description":"Additional command-line arguments to pass to\n<command>redshift</command>.\n","example":["-v","-m randr"],"loc":["services","redshift","extraOptions"],"readOnly":false,"type":"list of strings"},"services.redshift.latitude":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":null,"description":"Your current latitude, between\n<literal>-90.0</literal> and <literal>90.0</literal>. Must be provided\nalong with longitude.\n","loc":["services","redshift","latitude"],"readOnly":false,"type":"null or string"},"services.redshift.longitude":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":null,"description":"Your current longitude, between\nbetween <literal>-180.0</literal> and <literal>180.0</literal>. Must be\nprovided along with latitude.\n","loc":["services","redshift","longitude"],"readOnly":false,"type":"null or string"},"services.redshift.package":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":"pkgs.redshift","description":"redshift derivation to use.\n","loc":["services","redshift","package"],"readOnly":false,"type":"package"},"services.redshift.provider":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":"manual","description":"The location provider to use for determining your location. If set to\n<literal>manual</literal> you must also provide latitude/longitude.\n","loc":["services","redshift","provider"],"readOnly":false,"type":"one of \"manual\", \"geoclue2\""},"services.redshift.temperature.day":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":5500,"description":"Colour temperature to use during the day, between\n<literal>1000</literal> and <literal>25000</literal> K.\n","loc":["services","redshift","temperature","day"],"readOnly":false,"type":"signed integer"},"services.redshift.temperature.night":{"declarations":["nixos/modules/services/x11/redshift.nix"],"default":3700,"description":"Colour temperature to use at night, between\n<literal>1000</literal> and <literal>25000</literal> K.\n","loc":["services","redshift","temperature","night"],"readOnly":false,"type":"signed integer"},"services.redsocks.chroot":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":null,"description":"Chroot under which to run redsocks. Log file is opened before\nchroot, but if logging to syslog /etc/localtime may be required.\n","loc":["services","redsocks","chroot"],"readOnly":false,"type":"null or string"},"services.redsocks.enable":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":false,"description":"Whether to enable redsocks.","loc":["services","redsocks","enable"],"readOnly":false,"type":"boolean"},"services.redsocks.log":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":"stderr","description":"Where to send logs.\n\nPossible values are:\n  - stderr\n  - file:/path/to/file\n  - syslog:FACILITY where FACILITY is any of \"daemon\", \"local0\",\n  etc.\n","loc":["services","redsocks","log"],"readOnly":false,"type":"string"},"services.redsocks.log_debug":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":false,"description":"Log connection progress.","loc":["services","redsocks","log_debug"],"readOnly":false,"type":"boolean"},"services.redsocks.log_info":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":false,"description":"Log start and end of client sessions.","loc":["services","redsocks","log_info"],"readOnly":false,"type":"boolean"},"services.redsocks.redsocks":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"description":"Local port to proxy associations to be performed.\n\nThe example shows how to configure a proxy to handle port 80 as HTTP\nrelay, and all other ports as HTTP connect.\n","example":[{"doNotRedirect":["-d 1.2.0.0/16"],"port":23456,"proxy":"1.2.3.4:8080","redirectCondition":"--dport 80","type":"http-relay"},{"doNotRedirect":["-d 1.2.0.0/16"],"port":23457,"proxy":"1.2.3.4:8080","redirectCondition":true,"type":"http-connect"}],"loc":["services","redsocks","redsocks"],"readOnly":false,"type":"list of submodules"},"services.redsocks.redsocks.*.disclose_src":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":"false","description":"Way to disclose client IP to the proxy.\n  - \"false\": do not disclose\nhttp-connect supports the following ways:\n  - \"X-Forwarded-For\": add header \"X-Forwarded-For: IP\"\n  - \"Forwarded_ip\": add header \"Forwarded: for=IP\" (see RFC7239)\n  - \"Forwarded_ipport\": add header 'Forwarded: for=\"IP:port\"'\n","loc":["services","redsocks","redsocks","*","disclose_src"],"readOnly":false,"type":"one of \"false\", \"X-Forwarded-For\", \"Forwarded_ip\", \"Forwarded_ipport\""},"services.redsocks.redsocks.*.doNotRedirect":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":[],"description":"Iptables filters that if matched will get the packet off of\nredsocks.\n","example":["-d 1.2.3.4"],"loc":["services","redsocks","redsocks","*","doNotRedirect"],"readOnly":false,"type":"list of strings"},"services.redsocks.redsocks.*.ip":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":"127.0.0.1","description":"IP on which redsocks should listen. Defaults to 127.0.0.1 for\nsecurity reasons.\n","loc":["services","redsocks","redsocks","*","ip"],"readOnly":false,"type":"string"},"services.redsocks.redsocks.*.login":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":null,"description":"Login to send to proxy.","loc":["services","redsocks","redsocks","*","login"],"readOnly":false,"type":"null or string"},"services.redsocks.redsocks.*.password":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":null,"description":"Password to send to proxy. WARNING, this will end up\nworld-readable in the store! Awaiting\nhttps://github.com/NixOS/nix/issues/8 to be able to fix.\n","loc":["services","redsocks","redsocks","*","password"],"readOnly":false,"type":"null or string"},"services.redsocks.redsocks.*.port":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":12345,"description":"Port on which redsocks should listen.","loc":["services","redsocks","redsocks","*","port"],"readOnly":false,"type":"signed integer"},"services.redsocks.redsocks.*.proxy":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"description":"Proxy through which redsocks should forward incoming traffic.\nExample: \"example.org:8080\"\n","loc":["services","redsocks","redsocks","*","proxy"],"readOnly":false,"type":"string"},"services.redsocks.redsocks.*.redirectCondition":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":false,"description":"Conditions to make outbound packets go through this redsocks\ninstance.\n\nIf set to false, no packet will be forwarded. If set to true,\nall packets will be forwarded (except packets excluded by\nredirectInternetOnly).\n\nIf set to a string, this is an iptables filter that will be\nmatched against packets before getting them into redsocks. For\nexample, setting it to \"--dport 80\" will only send\npackets to port 80 to redsocks. Note \"-p tcp\" is always\nimplicitly added, as udp can only be proxied through redudp or\nthe like.\n","loc":["services","redsocks","redsocks","*","redirectCondition"],"readOnly":false,"type":"boolean or string"},"services.redsocks.redsocks.*.redirectInternetOnly":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"default":true,"description":"Exclude all non-globally-routable IPs from redsocks","loc":["services","redsocks","redsocks","*","redirectInternetOnly"],"readOnly":false,"type":"boolean"},"services.redsocks.redsocks.*.type":{"declarations":["nixos/modules/services/networking/redsocks.nix"],"description":"Type of proxy.","loc":["services","redsocks","redsocks","*","type"],"readOnly":false,"type":"one of \"socks4\", \"socks5\", \"http-connect\", \"http-relay\""},"services.resilio.apiKey":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":"","description":"API key, which enables the developer API.","loc":["services","resilio","apiKey"],"readOnly":false,"type":"string"},"services.resilio.checkForUpdates":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":true,"description":"Determines whether to check for updates and alert the user\nabout them in the UI.\n","loc":["services","resilio","checkForUpdates"],"readOnly":false,"type":"boolean"},"services.resilio.deviceName":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":"nixos","description":"Name of the Resilio Sync device.\n","example":"Voltron","loc":["services","resilio","deviceName"],"readOnly":false,"type":"string"},"services.resilio.directoryRoot":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":"","description":"Default directory to add folders in the web UI.","example":"/media","loc":["services","resilio","directoryRoot"],"readOnly":false,"type":"string"},"services.resilio.downloadLimit":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":0,"description":"Download speed limit. 0 is unlimited (default).\n","example":1024,"loc":["services","resilio","downloadLimit"],"readOnly":false,"type":"signed integer"},"services.resilio.enable":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":false,"description":"If enabled, start the Resilio Sync daemon. Once enabled, you can\ninteract with the service through the Web UI, or configure it in your\nNixOS configuration.\n","loc":["services","resilio","enable"],"readOnly":false,"type":"boolean"},"services.resilio.enableWebUI":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":false,"description":"Enable Web UI for administration. Bound to the specified\n<literal>httpListenAddress</literal> and\n<literal>httpListenPort</literal>.\n","loc":["services","resilio","enableWebUI"],"readOnly":false,"type":"boolean"},"services.resilio.encryptLAN":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":true,"description":"Encrypt LAN data.","loc":["services","resilio","encryptLAN"],"readOnly":false,"type":"boolean"},"services.resilio.httpListenAddr":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":"0.0.0.0","description":"HTTP address to bind to.\n","example":"1.2.3.4","loc":["services","resilio","httpListenAddr"],"readOnly":false,"type":"string"},"services.resilio.httpListenPort":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":9000,"description":"HTTP port to bind on.\n","loc":["services","resilio","httpListenPort"],"readOnly":false,"type":"signed integer"},"services.resilio.httpLogin":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":"","description":"HTTP web login username.\n","example":"allyourbase","loc":["services","resilio","httpLogin"],"readOnly":false,"type":"string"},"services.resilio.httpPass":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":"","description":"HTTP web login password.\n","example":"arebelongtous","loc":["services","resilio","httpPass"],"readOnly":false,"type":"string"},"services.resilio.listeningPort":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":0,"description":"Listening port. Defaults to 0 which randomizes the port.\n","example":44444,"loc":["services","resilio","listeningPort"],"readOnly":false,"type":"signed integer"},"services.resilio.sharedFolders":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":[],"description":"Shared folder list. If enabled, web UI must be\ndisabled. Secrets can be generated using <literal>rslsync\n--generate-secret</literal>. Note that this secret will be\nput inside the Nix store, so it is realistically not very\nsecret.\n\nIf you would like to be able to modify the contents of this\ndirectories, it is recommended that you make your user a\nmember of the <literal>resilio</literal> group.\n\nDirectories in this list should be in the\n<literal>resilio</literal> group, and that group must have\nwrite access to the directory. It is also recommended that\n<literal>chmod g+s</literal> is applied to the directory\nso that any sub directories created will also belong to\nthe <literal>resilio</literal> group. Also,\n<literal>setfacl -d -m group:resilio:rwx</literal> and\n<literal>setfacl -m group:resilio:rwx</literal> should also\nbe applied so that the sub directories are writable by\nthe group.\n","example":[{"directory":"/home/user/sync_test","knownHosts":["192.168.1.2:4444","192.168.1.3:4444"],"searchLAN":true,"secret":"AHMYFPCQAHBM7LQPFXQ7WV6Y42IGUXJ5Y","useDHT":false,"useRelayServer":true,"useSyncTrash":true,"useTracker":true}],"loc":["services","resilio","sharedFolders"],"readOnly":false,"type":"unspecified"},"services.resilio.storagePath":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":"/var/lib/resilio-sync/","description":"Where BitTorrent Sync will store it's database files (containing\nthings like username info and licenses). Generally, you should not\nneed to ever change this.\n","loc":["services","resilio","storagePath"],"readOnly":false,"type":"path"},"services.resilio.uploadLimit":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":0,"description":"Upload speed limit. 0 is unlimited (default).\n","example":1024,"loc":["services","resilio","uploadLimit"],"readOnly":false,"type":"signed integer"},"services.resilio.useUpnp":{"declarations":["nixos/modules/services/networking/resilio.nix"],"default":true,"description":"Use Universal Plug-n-Play (UPnP)\n","loc":["services","resilio","useUpnp"],"readOnly":false,"type":"boolean"},"services.resolved.dnssec":{"declarations":["nixos/modules/system/boot/resolved.nix"],"default":"allow-downgrade","description":"If set to\n<variablelist>\n<varlistentry>\n  <term><literal>\"true\"</literal></term>\n  <listitem><para>\n    all DNS lookups are DNSSEC-validated locally (excluding\n    LLMNR and Multicast DNS). Note that this mode requires a\n    DNS server that supports DNSSEC. If the DNS server does\n    not properly support DNSSEC all validations will fail.\n  </para></listitem>\n</varlistentry>\n<varlistentry>\n  <term><literal>\"allow-downgrade\"</literal></term>\n  <listitem><para>\n    DNSSEC validation is attempted, but if the server does not\n    support DNSSEC properly, DNSSEC mode is automatically\n    disabled. Note that this mode makes DNSSEC validation\n    vulnerable to \"downgrade\" attacks, where an attacker might\n    be able to trigger a downgrade to non-DNSSEC mode by\n    synthesizing a DNS response that suggests DNSSEC was not\n    supported.\n  </para></listitem>\n</varlistentry>\n<varlistentry>\n  <term><literal>\"false\"</literal></term>\n  <listitem><para>\n    DNS lookups are not DNSSEC validated.\n  </para></listitem>\n</varlistentry>\n</variablelist>\n","example":"true","loc":["services","resolved","dnssec"],"readOnly":false,"type":"one of \"true\", \"allow-downgrade\", \"false\""},"services.resolved.domains":{"declarations":["nixos/modules/system/boot/resolved.nix"],"default":[],"description":"A list of domains. These domains are used as search suffixes\nwhen resolving single-label host names (domain names which\ncontain no dot), in order to qualify them into fully-qualified\ndomain names (FQDNs).\n</para><para>\nFor compatibility reasons, if this setting is not specified,\nthe search domains listed in\n<filename>/etc/resolv.conf</filename> are used instead, if\nthat file exists and any domains are configured in it.\n","example":["example.com"],"loc":["services","resolved","domains"],"readOnly":false,"type":"list of strings"},"services.resolved.enable":{"declarations":["nixos/modules/system/boot/resolved.nix"],"default":false,"description":"Whether to enable the systemd DNS resolver daemon.\n","loc":["services","resolved","enable"],"readOnly":false,"type":"boolean"},"services.resolved.extraConfig":{"declarations":["nixos/modules/system/boot/resolved.nix"],"default":"","description":"Extra config to append to resolved.conf.\n","loc":["services","resolved","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.resolved.fallbackDns":{"declarations":["nixos/modules/system/boot/resolved.nix"],"default":[],"description":"A list of IPv4 and IPv6 addresses to use as the fallback DNS servers.\nIf this option is empty, a compiled-in list of DNS servers is used instead.\n","example":["8.8.8.8","2001:4860:4860::8844"],"loc":["services","resolved","fallbackDns"],"readOnly":false,"type":"list of strings"},"services.resolved.llmnr":{"declarations":["nixos/modules/system/boot/resolved.nix"],"default":"true","description":"Controls Link-Local Multicast Name Resolution support\n(RFC 4795) on the local host.\n</para><para>\nIf set to\n<variablelist>\n<varlistentry>\n  <term><literal>\"true\"</literal></term>\n  <listitem><para>\n    Enables full LLMNR responder and resolver support.\n  </para></listitem>\n</varlistentry>\n<varlistentry>\n  <term><literal>\"false\"</literal></term>\n  <listitem><para>\n    Disables both.\n  </para></listitem>\n</varlistentry>\n<varlistentry>\n  <term><literal>\"resolve\"</literal></term>\n  <listitem><para>\n    Only resolution support is enabled, but responding is disabled.\n  </para></listitem>\n</varlistentry>\n</variablelist>\n","example":"false","loc":["services","resolved","llmnr"],"readOnly":false,"type":"one of \"true\", \"resolve\", \"false\""},"services.restic.backups":{"declarations":["nixos/modules/services/backup/restic.nix"],"default":{},"description":"Periodic backups to create with Restic.\n","example":{"localbackup":{"initialize":true,"passwordFile":"/etc/nixos/secrets/restic-password","paths":["/home"],"repository":"/mnt/backup-hdd"},"remotebackup":{"extraOptions":["sftp.command='ssh backup@host -i /etc/nixos/secrets/backup-private-key -s sftp'"],"passwordFile":"/etc/nixos/secrets/restic-password","paths":["/home"],"repository":"sftp:backup@host:/backups/home","timerConfig":{"OnCalendar":"00:05","RandomizedDelaySec":"5h"}}},"loc":["services","restic","backups"],"readOnly":false,"type":"attribute set of submodules"},"services.restic.backups.<name>.extraBackupArgs":{"declarations":["nixos/modules/services/backup/restic.nix"],"default":[],"description":"Extra arguments passed to restic backup.\n","example":["--exclude-file=/etc/nixos/restic-ignore"],"loc":["services","restic","backups","<name>","extraBackupArgs"],"readOnly":false,"type":"list of strings"},"services.restic.backups.<name>.extraOptions":{"declarations":["nixos/modules/services/backup/restic.nix"],"default":[],"description":"Extra extended options to be passed to the restic --option flag.\n","example":["sftp.command='ssh backup@192.168.1.100 -i /home/user/.ssh/id_rsa -s sftp'"],"loc":["services","restic","backups","<name>","extraOptions"],"readOnly":false,"type":"list of strings"},"services.restic.backups.<name>.initialize":{"declarations":["nixos/modules/services/backup/restic.nix"],"default":false,"description":"Create the repository if it doesn't exist.\n","loc":["services","restic","backups","<name>","initialize"],"readOnly":false,"type":"boolean"},"services.restic.backups.<name>.passwordFile":{"declarations":["nixos/modules/services/backup/restic.nix"],"description":"Read the repository password from a file.\n","example":"/etc/nixos/restic-password","loc":["services","restic","backups","<name>","passwordFile"],"readOnly":false,"type":"string"},"services.restic.backups.<name>.paths":{"declarations":["nixos/modules/services/backup/restic.nix"],"default":[],"description":"Which paths to backup.\n","example":["/var/lib/postgresql","/home/user/backup"],"loc":["services","restic","backups","<name>","paths"],"readOnly":false,"type":"list of strings"},"services.restic.backups.<name>.repository":{"declarations":["nixos/modules/services/backup/restic.nix"],"description":"repository to backup to.\n","example":"sftp:backup@192.168.1.100:/backups/‹name›","loc":["services","restic","backups","<name>","repository"],"readOnly":false,"type":"string"},"services.restic.backups.<name>.s3CredentialsFile":{"declarations":["nixos/modules/services/backup/restic.nix"],"default":null,"description":"file containing the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY\nfor an S3-hosted repository, in the format of an EnvironmentFile\nas described by systemd.exec(5)\n","loc":["services","restic","backups","<name>","s3CredentialsFile"],"readOnly":false,"type":"null or string"},"services.restic.backups.<name>.timerConfig":{"declarations":["nixos/modules/services/backup/restic.nix"],"default":{"OnCalendar":"daily"},"description":"When to run the backup. See man systemd.timer for details.\n","example":{"OnCalendar":"00:05","RandomizedDelaySec":"5h"},"loc":["services","restic","backups","<name>","timerConfig"],"readOnly":false,"type":"attribute set of strings"},"services.restic.backups.<name>.user":{"declarations":["nixos/modules/services/backup/restic.nix"],"default":"root","description":"As which user the backup should run.\n","example":"postgresql","loc":["services","restic","backups","<name>","user"],"readOnly":false,"type":"string"},"services.restic.server.appendOnly":{"declarations":["nixos/modules/services/backup/restic-rest-server.nix"],"default":false,"description":"Enable append only mode.\nThis mode allows creation of new backups but prevents deletion and modification of existing backups.\nThis can be useful when backing up systems that have a potential of being hacked.\n","loc":["services","restic","server","appendOnly"],"readOnly":false,"type":"boolean"},"services.restic.server.dataDir":{"declarations":["nixos/modules/services/backup/restic-rest-server.nix"],"default":"/var/lib/restic","description":"The directory for storing the restic repository.","loc":["services","restic","server","dataDir"],"readOnly":false,"type":"path"},"services.restic.server.enable":{"declarations":["nixos/modules/services/backup/restic-rest-server.nix"],"default":false,"description":"Whether to enable Restic REST Server.","example":true,"loc":["services","restic","server","enable"],"readOnly":false,"type":"boolean"},"services.restic.server.extraFlags":{"declarations":["nixos/modules/services/backup/restic-rest-server.nix"],"default":[],"description":"Extra commandline options to pass to Restic REST server.\n","loc":["services","restic","server","extraFlags"],"readOnly":false,"type":"list of strings"},"services.restic.server.listenAddress":{"declarations":["nixos/modules/services/backup/restic-rest-server.nix"],"default":":8000","description":"Listen on a specific IP address and port.","example":"127.0.0.1:8080","loc":["services","restic","server","listenAddress"],"readOnly":false,"type":"string"},"services.restic.server.package":{"declarations":["nixos/modules/services/backup/restic-rest-server.nix"],"default":"pkgs.restic-rest-server","description":"Restic REST server package to use.","loc":["services","restic","server","package"],"readOnly":false,"type":"package"},"services.restic.server.privateRepos":{"declarations":["nixos/modules/services/backup/restic-rest-server.nix"],"default":false,"description":"Enable private repos.\nGrants access only when a subdirectory with the same name as the user is specified in the repository URL.\n","loc":["services","restic","server","privateRepos"],"readOnly":false,"type":"boolean"},"services.restic.server.prometheus":{"declarations":["nixos/modules/services/backup/restic-rest-server.nix"],"default":false,"description":"Enable Prometheus metrics at /metrics.","loc":["services","restic","server","prometheus"],"readOnly":false,"type":"boolean"},"services.restya-board.dataDir":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"/var/lib/restya-board","description":"Data of the application.\n","example":"/var/lib/restya-board","loc":["services","restya-board","dataDir"],"readOnly":false,"type":"path"},"services.restya-board.database.host":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":null,"description":"Host of the database. Leave 'null' to use a local PostgreSQL database.\nA local PostgreSQL database is initialized automatically.\n","loc":["services","restya-board","database","host"],"readOnly":false,"type":"null or string"},"services.restya-board.database.name":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"restya_board","description":"Name of the database. The database must exist.\n","loc":["services","restya-board","database","name"],"readOnly":false,"type":"string"},"services.restya-board.database.passwordFile":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":null,"description":"The database user's password. 'null' if no password is set.\n","loc":["services","restya-board","database","passwordFile"],"readOnly":false,"type":"null or string"},"services.restya-board.database.port":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":5432,"description":"The database's port.\n","loc":["services","restya-board","database","port"],"readOnly":false,"type":"null or signed integer"},"services.restya-board.database.user":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"restya_board","description":"The database user. The user must exist and have access to\nthe specified database.\n","loc":["services","restya-board","database","user"],"readOnly":false,"type":"string"},"services.restya-board.email.login":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"","description":"SMTP authentication login used when sending outgoing mail.\n","loc":["services","restya-board","email","login"],"readOnly":false,"type":"string"},"services.restya-board.email.password":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"","description":"SMTP authentication password used when sending outgoing mail.\n\nATTENTION: The password is stored world-readable in the nix-store!\n","loc":["services","restya-board","email","password"],"readOnly":false,"type":"string"},"services.restya-board.email.port":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":25,"description":"Port used to connect to SMTP server.\n","loc":["services","restya-board","email","port"],"readOnly":false,"type":"signed integer"},"services.restya-board.email.server":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":null,"description":"Hostname to send outgoing mail. Null to use the system MTA.\n","example":"localhost","loc":["services","restya-board","email","server"],"readOnly":false,"type":"null or string"},"services.restya-board.enable":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":false,"description":"Whether to enable restya-board.","example":true,"loc":["services","restya-board","enable"],"readOnly":false,"type":"boolean"},"services.restya-board.group":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"nginx","description":"Group account under which the web-application runs.\n","example":"nginx","loc":["services","restya-board","group"],"readOnly":false,"type":"string"},"services.restya-board.timezone":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"GMT","description":"Timezone the web-app runs in.\n","loc":["services","restya-board","timezone"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.restya-board.user":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"restya-board","description":"User account under which the web-application runs.\n","example":"restya-board","loc":["services","restya-board","user"],"readOnly":false,"type":"string"},"services.restya-board.virtualHost.listenHost":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"localhost","description":"Listen address for the virtualhost to use.\n","loc":["services","restya-board","virtualHost","listenHost"],"readOnly":false,"type":"string"},"services.restya-board.virtualHost.listenPort":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":3000,"description":"Listen port for the virtualhost to use.\n","loc":["services","restya-board","virtualHost","listenPort"],"readOnly":false,"type":"signed integer"},"services.restya-board.virtualHost.serverName":{"declarations":["nixos/modules/services/web-apps/restya-board.nix"],"default":"restya.board","description":"Name of the nginx virtualhost to use.\n","loc":["services","restya-board","virtualHost","serverName"],"readOnly":false,"type":"string"},"services.riak-cs.anonymousUserCreation":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":false,"description":"Anonymous user creation.\n","loc":["services","riak-cs","anonymousUserCreation"],"readOnly":false,"type":"boolean"},"services.riak-cs.dataDir":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"/var/db/riak-cs","description":"Data directory for Riak CS.\n","loc":["services","riak-cs","dataDir"],"readOnly":false,"type":"path"},"services.riak-cs.distributedCookie":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"riak","description":"Cookie for distributed node communication.  All nodes in the\nsame cluster should use the same cookie or they will not be able to\ncommunicate.\n","loc":["services","riak-cs","distributedCookie"],"readOnly":false,"type":"string"},"services.riak-cs.enable":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":false,"description":"Whether to enable riak-cs.","example":true,"loc":["services","riak-cs","enable"],"readOnly":false,"type":"boolean"},"services.riak-cs.extraAdvancedConfig":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"","description":"Additional text to be appended to <filename>advanced.config</filename>.\n","loc":["services","riak-cs","extraAdvancedConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.riak-cs.extraConfig":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"","description":"Additional text to be appended to <filename>riak-cs.conf</filename>.\n","loc":["services","riak-cs","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.riak-cs.listener":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"127.0.0.1:8080","description":"Name of Riak CS listening service.\n","loc":["services","riak-cs","listener"],"readOnly":false,"type":"string"},"services.riak-cs.logDir":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"/var/log/riak-cs","description":"Log directory for Riak CS.\n","loc":["services","riak-cs","logDir"],"readOnly":false,"type":"path"},"services.riak-cs.nodeName":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"riak-cs@127.0.0.1","description":"Name of the Erlang node.\n","loc":["services","riak-cs","nodeName"],"readOnly":false,"type":"string"},"services.riak-cs.package":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"pkgs.riak-cs","description":"Riak package to use.\n","example":{"_type":"literalExample","text":"pkgs.riak-cs"},"loc":["services","riak-cs","package"],"readOnly":false,"type":"package"},"services.riak-cs.riakHost":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"127.0.0.1:8087","description":"Name of riak hosting service.\n","loc":["services","riak-cs","riakHost"],"readOnly":false,"type":"string"},"services.riak-cs.stanchionHost":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":"127.0.0.1:8085","description":"Name of stanchion hosting service.\n","loc":["services","riak-cs","stanchionHost"],"readOnly":false,"type":"string"},"services.riak-cs.stanchionSsl":{"declarations":["nixos/modules/services/databases/riak-cs.nix"],"default":true,"description":"Tell stanchion to use SSL.\n","loc":["services","riak-cs","stanchionSsl"],"readOnly":false,"type":"boolean"},"services.riak.dataDir":{"declarations":["nixos/modules/services/databases/riak.nix"],"default":"/var/db/riak","description":"Data directory for Riak.\n","loc":["services","riak","dataDir"],"readOnly":false,"type":"path"},"services.riak.distributedCookie":{"declarations":["nixos/modules/services/databases/riak.nix"],"default":"riak","description":"Cookie for distributed node communication.  All nodes in the\nsame cluster should use the same cookie or they will not be able to\ncommunicate.\n","loc":["services","riak","distributedCookie"],"readOnly":false,"type":"Concatenated string"},"services.riak.enable":{"declarations":["nixos/modules/services/databases/riak.nix"],"default":false,"description":"Whether to enable riak.","example":true,"loc":["services","riak","enable"],"readOnly":false,"type":"boolean"},"services.riak.extraAdvancedConfig":{"declarations":["nixos/modules/services/databases/riak.nix"],"default":"","description":"Additional text to be appended to <filename>advanced.config</filename>.\n","loc":["services","riak","extraAdvancedConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.riak.extraConfig":{"declarations":["nixos/modules/services/databases/riak.nix"],"default":"","description":"Additional text to be appended to <filename>riak.conf</filename>.\n","loc":["services","riak","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.riak.logDir":{"declarations":["nixos/modules/services/databases/riak.nix"],"default":"/var/log/riak","description":"Log directory for Riak.\n","loc":["services","riak","logDir"],"readOnly":false,"type":"path"},"services.riak.nodeName":{"declarations":["nixos/modules/services/databases/riak.nix"],"default":"riak@127.0.0.1","description":"Name of the Erlang node.\n","loc":["services","riak","nodeName"],"readOnly":false,"type":"Concatenated string"},"services.riak.package":{"declarations":["nixos/modules/services/databases/riak.nix"],"default":"pkgs.riak","description":"Riak package to use.\n","example":{"_type":"literalExample","text":"pkgs.riak"},"loc":["services","riak","package"],"readOnly":false,"type":"package"},"services.riemann-dash.config":{"declarations":["nixos/modules/services/monitoring/riemann-dash.nix"],"description":"Contents added to the end of the riemann-dash configuration file.\n","loc":["services","riemann-dash","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.riemann-dash.dataDir":{"declarations":["nixos/modules/services/monitoring/riemann-dash.nix"],"default":"/var/riemann-dash","description":"Location of the riemann-base dir. The dashboard configuration file is\nis stored to this directory. The directory is created automatically on\nservice start, and owner is set to the riemanndash user.\n","loc":["services","riemann-dash","dataDir"],"readOnly":false,"type":"string"},"services.riemann-dash.enable":{"declarations":["nixos/modules/services/monitoring/riemann-dash.nix"],"default":false,"description":"Enable the riemann-dash dashboard daemon.\n","loc":["services","riemann-dash","enable"],"readOnly":false,"type":"boolean"},"services.riemann-tools.enableHealth":{"declarations":["nixos/modules/services/monitoring/riemann-tools.nix"],"default":false,"description":"Enable the riemann-health daemon.\n","loc":["services","riemann-tools","enableHealth"],"readOnly":false,"type":"boolean"},"services.riemann-tools.riemannHost":{"declarations":["nixos/modules/services/monitoring/riemann-tools.nix"],"default":"127.0.0.1","description":"Address of the host riemann node. Defaults to localhost.\n","loc":["services","riemann-tools","riemannHost"],"readOnly":false,"type":"string"},"services.riemann.config":{"declarations":["nixos/modules/services/monitoring/riemann.nix"],"description":"Contents of the Riemann configuration file. For more complicated\nconfig you should use configFile.\n","loc":["services","riemann","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.riemann.configFile":{"declarations":["nixos/modules/services/monitoring/riemann.nix"],"description":"A Riemann config file. Any files in the same directory as this file\nwill be added to the classpath by Riemann.\n","loc":["services","riemann","configFile"],"readOnly":false,"type":"string"},"services.riemann.configFiles":{"declarations":["nixos/modules/services/monitoring/riemann.nix"],"default":[],"description":"Extra files containing Riemann configuration. These files will be\nloaded at runtime by Riemann (with Clojure's\n<literal>load-file</literal> function) at the end of the\nconfiguration if you use the config option, this is ignored if you\nuse configFile.\n","loc":["services","riemann","configFiles"],"readOnly":false,"type":"list of paths"},"services.riemann.enable":{"declarations":["nixos/modules/services/monitoring/riemann.nix"],"default":false,"description":"Enable the Riemann network monitoring daemon.\n","loc":["services","riemann","enable"],"readOnly":false,"type":"boolean"},"services.riemann.extraClasspathEntries":{"declarations":["nixos/modules/services/monitoring/riemann.nix"],"default":[],"description":"Extra entries added to the Java classpath when running Riemann.\n","loc":["services","riemann","extraClasspathEntries"],"readOnly":false,"type":"list of strings"},"services.riemann.extraJavaOpts":{"declarations":["nixos/modules/services/monitoring/riemann.nix"],"default":[],"description":"Extra Java options used when launching Riemann.\n","loc":["services","riemann","extraJavaOpts"],"readOnly":false,"type":"list of strings"},"services.rippleDataApi.couchdb.create":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":true,"description":"Whether to create couchdb database needed by ripple data api.","loc":["services","rippleDataApi","couchdb","create"],"readOnly":false,"type":"boolean"},"services.rippleDataApi.couchdb.db":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":"rippled","description":"Ripple data api couchdb database.","loc":["services","rippleDataApi","couchdb","db"],"readOnly":false,"type":"string"},"services.rippleDataApi.couchdb.host":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":"localhost","description":"Ripple data api couchdb host.","loc":["services","rippleDataApi","couchdb","host"],"readOnly":false,"type":"string"},"services.rippleDataApi.couchdb.pass":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":"","description":"Ripple data api couchdb password.","loc":["services","rippleDataApi","couchdb","pass"],"readOnly":false,"type":"string"},"services.rippleDataApi.couchdb.port":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":5984,"description":"Ripple data api couchdb port.","loc":["services","rippleDataApi","couchdb","port"],"readOnly":false,"type":"signed integer"},"services.rippleDataApi.couchdb.user":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":"rippled","description":"Ripple data api couchdb username.","loc":["services","rippleDataApi","couchdb","user"],"readOnly":false,"type":"string"},"services.rippleDataApi.enable":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":false,"description":"Whether to enable ripple data api.","example":true,"loc":["services","rippleDataApi","enable"],"readOnly":false,"type":"boolean"},"services.rippleDataApi.importMode":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":"liveOnly","description":"Ripple data api import mode.","loc":["services","rippleDataApi","importMode"],"readOnly":false,"type":"one of \"live\", \"liveOnly\""},"services.rippleDataApi.maxLedger":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":null,"description":"Ripple data api maximal ledger to fetch.","loc":["services","rippleDataApi","maxLedger"],"readOnly":false,"type":"null or signed integer"},"services.rippleDataApi.minLedger":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":null,"description":"Ripple data api minimal ledger to fetch.","loc":["services","rippleDataApi","minLedger"],"readOnly":false,"type":"null or signed integer"},"services.rippleDataApi.port":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":5993,"description":"Ripple data api port","loc":["services","rippleDataApi","port"],"readOnly":false,"type":"signed integer"},"services.rippleDataApi.redis.enable":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":true,"description":"Whether to enable caching of ripple data to redis.","loc":["services","rippleDataApi","redis","enable"],"readOnly":false,"type":"boolean"},"services.rippleDataApi.redis.host":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":"localhost","description":"Ripple data api redis host.","loc":["services","rippleDataApi","redis","host"],"readOnly":false,"type":"string"},"services.rippleDataApi.redis.port":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":5984,"description":"Ripple data api redis port.","loc":["services","rippleDataApi","redis","port"],"readOnly":false,"type":"signed integer"},"services.rippleDataApi.rippleds":{"declarations":["nixos/modules/services/misc/ripple-data-api.nix"],"default":["http://s_east.ripple.com:51234","http://s_west.ripple.com:51234"],"description":"List of rippleds to be used by ripple data api.","loc":["services","rippleDataApi","rippleds"],"readOnly":false,"type":"list of strings"},"services.rippled.databasePath":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"/var/lib/rippled","description":"\t  Path to the ripple database.\n\t","loc":["services","rippled","databasePath"],"readOnly":false,"type":"path"},"services.rippled.enable":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":false,"description":"Whether to enable rippled.","example":true,"loc":["services","rippled","enable"],"readOnly":false,"type":"boolean"},"services.rippled.extraConfig":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"","description":"\t  Extra lines to be added verbatim to the rippled.cfg configuration file.\n\t","loc":["services","rippled","extraConfig"],"readOnly":false,"type":"unspecified"},"services.rippled.fetchDepth":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"full","description":"\t  The number of past ledgers to serve to other peers that request historical\n\t  ledger data (or \"full\" for no limit).\n\t","loc":["services","rippled","fetchDepth"],"readOnly":false,"type":"signed integer or one of \"full\""},"services.rippled.importDb":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"Settings for performing a one-time import.","loc":["services","rippled","importDb"],"readOnly":false,"type":"null or submodule"},"services.rippled.importDb.advisoryDelete":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"\t        If set, then require administrative RPC call \"can_delete\"\n\t        to enable online deletion of ledger records.\n","loc":["services","rippled","importDb","advisoryDelete"],"readOnly":false,"type":"null or boolean"},"services.rippled.importDb.compression":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"Whether to enable snappy compression.","loc":["services","rippled","importDb","compression"],"readOnly":false,"type":"null or boolean"},"services.rippled.importDb.extraOpts":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"","description":"Extra database options.","loc":["services","rippled","importDb","extraOpts"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rippled.importDb.onlineDelete":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":1296000,"description":"Enable automatic purging of older ledger information.","loc":["services","rippled","importDb","onlineDelete"],"readOnly":false,"type":"null or signed integer"},"services.rippled.importDb.path":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"/var/lib/rippled","description":"Location to store the database.","loc":["services","rippled","importDb","path"],"readOnly":false,"type":"path"},"services.rippled.importDb.type":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"rocksdb","description":"Rippled database type.","loc":["services","rippled","importDb","type"],"readOnly":false,"type":"one of \"rocksdb\", \"nudb\""},"services.rippled.ips":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":["r.ripple.com 51235"],"description":"\t  List of hostnames or ips where the Ripple protocol is served.\n\t  For a starter list, you can either copy entries from:\n\t  https://ripple.com/ripple.txt or if you prefer you can let it\n\t   default to r.ripple.com 51235\n\n\t  A port may optionally be specified after adding a space to the\n\t  address. By convention, if known, IPs are listed in from most\n\t  to least trusted.\n\t","loc":["services","rippled","ips"],"readOnly":false,"type":"list of strings"},"services.rippled.ipsFixed":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":[],"description":"\t  List of IP addresses or hostnames to which rippled should always\n\t  attempt to maintain peer connections with. This is useful for\n\t  manually forming private networks, for example to configure a\n\t  validation server that connects to the Ripple network through a\n\t  public-facing server, or for building a set of cluster peers.\n\n\t  A port may optionally be specified after adding a space to the address\n\t","loc":["services","rippled","ipsFixed"],"readOnly":false,"type":"list of strings"},"services.rippled.ledgerHistory":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":1296000,"description":"\t  The number of past ledgers to acquire on server startup and the minimum\n\t  to maintain while running.\n\t","loc":["services","rippled","ledgerHistory"],"readOnly":false,"type":"signed integer or one of \"full\""},"services.rippled.logLevel":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"error","description":"Logging verbosity.","loc":["services","rippled","logLevel"],"readOnly":false,"type":"one of \"debug\", \"error\", \"info\""},"services.rippled.nodeDb":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":{"extraOpts":"\t    open_files=2000\n\t    filter_bits=12\n\t    cache_mb=256\n\t    file_size_pb=8\n\t    file_size_mult=2;\n\t  ","type":"rocksdb"},"description":"Rippled main database options.","loc":["services","rippled","nodeDb"],"readOnly":false,"type":"null or submodule"},"services.rippled.nodeDb.advisoryDelete":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"\t        If set, then require administrative RPC call \"can_delete\"\n\t        to enable online deletion of ledger records.\n","loc":["services","rippled","nodeDb","advisoryDelete"],"readOnly":false,"type":"null or boolean"},"services.rippled.nodeDb.compression":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"Whether to enable snappy compression.","loc":["services","rippled","nodeDb","compression"],"readOnly":false,"type":"null or boolean"},"services.rippled.nodeDb.extraOpts":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"","description":"Extra database options.","loc":["services","rippled","nodeDb","extraOpts"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rippled.nodeDb.onlineDelete":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":1296000,"description":"Enable automatic purging of older ledger information.","loc":["services","rippled","nodeDb","onlineDelete"],"readOnly":false,"type":"null or signed integer"},"services.rippled.nodeDb.path":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"/var/lib/rippled","description":"Location to store the database.","loc":["services","rippled","nodeDb","path"],"readOnly":false,"type":"path"},"services.rippled.nodeDb.type":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"rocksdb","description":"Rippled database type.","loc":["services","rippled","nodeDb","type"],"readOnly":false,"type":"one of \"rocksdb\", \"nudb\""},"services.rippled.nodeSize":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"small","description":"\t  Rippled size of the node you are running.\n\t  \"tiny\", \"small\", \"medium\", \"large\", and \"huge\"\n\t","loc":["services","rippled","nodeSize"],"readOnly":false,"type":"one of \"tiny\", \"small\", \"medium\", \"large\", \"huge\""},"services.rippled.package":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"pkgs.rippled","description":"Which rippled package to use.","loc":["services","rippled","package"],"readOnly":false,"type":"package"},"services.rippled.ports":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":{"peer":{"ip":"0.0.0.0","port":51235,"protocol":["peer"]},"rpc":{"admin":["127.0.0.1"],"port":5005,"protocol":["http"]},"ws_public":{"ip":"0.0.0.0","port":5006,"protocol":["ws","wss"]}},"description":"Ports exposed by rippled","loc":["services","rippled","ports"],"readOnly":false,"type":"attribute set of submodules"},"services.rippled.ports.<name>.admin":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":["127.0.0.1"],"description":"A comma-separated list of admin IP addresses.","loc":["services","rippled","ports","<name>","admin"],"readOnly":false,"type":"list of strings"},"services.rippled.ports.<name>.ip":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"127.0.0.1","description":"Ip where rippled listens.","loc":["services","rippled","ports","<name>","ip"],"readOnly":false,"type":"string"},"services.rippled.ports.<name>.password":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"","description":"When set, these credentials will be required on HTTP/S requests.","loc":["services","rippled","ports","<name>","password"],"readOnly":false,"type":"string"},"services.rippled.ports.<name>.port":{"declarations":["nixos/modules/services/misc/rippled.nix"],"description":"Port where rippled listens.","loc":["services","rippled","ports","<name>","port"],"readOnly":false,"type":"signed integer"},"services.rippled.ports.<name>.protocol":{"declarations":["nixos/modules/services/misc/rippled.nix"],"description":"Protocols expose by rippled.","loc":["services","rippled","ports","<name>","protocol"],"readOnly":false,"type":"list of one of \"http\", \"https\", \"ws\", \"wss\", \"peer\"s"},"services.rippled.ports.<name>.ssl.cert":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"\t    Specifies the path to the SSL certificate file in PEM format.\n\t    This is not needed if the chain includes it.\n\t  ","loc":["services","rippled","ports","<name>","ssl","cert"],"readOnly":false,"type":"null or path"},"services.rippled.ports.<name>.ssl.chain":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"\t    If you need a certificate chain, specify the path to the\n\t    certificate chain here. The chain may include the end certificate.\n\t  ","loc":["services","rippled","ports","<name>","ssl","chain"],"readOnly":false,"type":"null or path"},"services.rippled.ports.<name>.ssl.key":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"\t    Specifies the filename holding the SSL key in PEM format.\n\t  ","loc":["services","rippled","ports","<name>","ssl","key"],"readOnly":false,"type":"null or path"},"services.rippled.ports.<name>.user":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"","description":"When set, these credentials will be required on HTTP/S requests.","loc":["services","rippled","ports","<name>","user"],"readOnly":false,"type":"string"},"services.rippled.sntpServers":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":["time.windows.com","time.apple.com","time.nist.gov","pool.ntp.org"],"description":"\t  IP address or domain of NTP servers to use for time synchronization.;\n\t","loc":["services","rippled","sntpServers"],"readOnly":false,"type":"list of strings"},"services.rippled.statsd.address":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"127.0.0.1:8125","description":"The UDP address and port of the listening StatsD server.","loc":["services","rippled","statsd","address"],"readOnly":false,"type":"string"},"services.rippled.statsd.enable":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":false,"description":"Whether to enable statsd monitoring for rippled.","example":true,"loc":["services","rippled","statsd","enable"],"readOnly":false,"type":"boolean"},"services.rippled.statsd.prefix":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"","description":"A string prepended to each collected metric.","loc":["services","rippled","statsd","prefix"],"readOnly":false,"type":"string"},"services.rippled.tempDb":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"Rippled temporary database options.","loc":["services","rippled","tempDb"],"readOnly":false,"type":"null or submodule"},"services.rippled.tempDb.advisoryDelete":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"\t        If set, then require administrative RPC call \"can_delete\"\n\t        to enable online deletion of ledger records.\n","loc":["services","rippled","tempDb","advisoryDelete"],"readOnly":false,"type":"null or boolean"},"services.rippled.tempDb.compression":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":null,"description":"Whether to enable snappy compression.","loc":["services","rippled","tempDb","compression"],"readOnly":false,"type":"null or boolean"},"services.rippled.tempDb.extraOpts":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"","description":"Extra database options.","loc":["services","rippled","tempDb","extraOpts"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rippled.tempDb.onlineDelete":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":1296000,"description":"Enable automatic purging of older ledger information.","loc":["services","rippled","tempDb","onlineDelete"],"readOnly":false,"type":"null or signed integer"},"services.rippled.tempDb.path":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"/var/lib/rippled","description":"Location to store the database.","loc":["services","rippled","tempDb","path"],"readOnly":false,"type":"path"},"services.rippled.tempDb.type":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":"rocksdb","description":"Rippled database type.","loc":["services","rippled","tempDb","type"],"readOnly":false,"type":"one of \"rocksdb\", \"nudb\""},"services.rippled.validationQuorum":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":3,"description":"\t  The minimum number of trusted validations a ledger must have before\n\t  the server considers it fully validated.\n\t","loc":["services","rippled","validationQuorum"],"readOnly":false,"type":"signed integer"},"services.rippled.validators":{"declarations":["nixos/modules/services/misc/rippled.nix"],"default":["n949f75evCHwgyP4fPVgaHqNHxUVN15PsJEZ3B3HnXPcPjcZAoy7  RL1","n9MD5h24qrQqiyBC8aeqqCWvpiBiYQ3jxSr91uiDvmrkyHRdYLUj  RL2","n9L81uNCaPgtUJfaHh89gmdvXKAmSt5Gdsw2g1iPWaPkAHW5Nm4C  RL3","n9KiYM9CgngLvtRCQHZwgC2gjpdaZcCcbt3VboxiNFcKuwFVujzS  RL4","n9LdgEtkmGB9E2h3K4Vp7iGUaKuq23Zr32ehxiU8FWY7xoxbWTSA  RL5"],"description":"\t  List of nodes to always accept as validators. Nodes are specified by domain\n\t  or public key.\n\t","loc":["services","rippled","validators"],"readOnly":false,"type":"list of strings"},"services.rmilter.bindSocket.address":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"::1","description":"Inet address to listen on.\n","example":"0.0.0.0","loc":["services","rmilter","bindSocket","address"],"readOnly":false,"type":"string"},"services.rmilter.bindSocket.path":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"/run/rmilter.sock","description":"Path to Unix domain socket to listen on.\n","loc":["services","rmilter","bindSocket","path"],"readOnly":false,"type":"string"},"services.rmilter.bindSocket.port":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":11990,"description":"Inet port to listen on.\n","loc":["services","rmilter","bindSocket","port"],"readOnly":false,"type":"signed integer"},"services.rmilter.bindSocket.type":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"unix","description":"What kind of socket rmilter should listen on. Either \"unix\"\nfor an Unix domain socket or \"inet\" for a TCP socket.\n","loc":["services","rmilter","bindSocket","type"],"readOnly":false,"type":"one of \"unix\", \"inet\""},"services.rmilter.debug":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":false,"description":"Whether to run the rmilter daemon in debug mode.","loc":["services","rmilter","debug"],"readOnly":false,"type":"boolean"},"services.rmilter.enable":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":false,"description":"Whether to run the rmilter daemon.","loc":["services","rmilter","enable"],"readOnly":false,"type":"boolean"},"services.rmilter.extraConfig":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"","description":"Custom snippet to append to rmilter config","loc":["services","rmilter","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rmilter.group":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"rmilter","description":"Group to use when no root privileges are required.\n","loc":["services","rmilter","group"],"readOnly":false,"type":"Concatenated string"},"services.rmilter.postfix.configFragment":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"smtpd_milters = unix:/run/rmilter.sock\nmilter_protocol = 6\nmilter_mail_macros = i {mail_addr} {client_addr} {client_name} {auth_authen}\n","description":"Addon to postfix configuration","loc":["services","rmilter","postfix","configFragment"],"readOnly":false,"type":"string"},"services.rmilter.postfix.enable":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":false,"description":"Add rmilter to postfix main.conf","loc":["services","rmilter","postfix","enable"],"readOnly":false,"type":"boolean"},"services.rmilter.rspamd.enable":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":false,"description":"Whether to use rspamd to filter mails","loc":["services","rmilter","rspamd","enable"],"readOnly":false,"type":"boolean"},"services.rmilter.rspamd.extraConfig":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"","description":"Custom snippet to append to end of `spamd' section","loc":["services","rmilter","rspamd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rmilter.rspamd.rejectMessage":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"Spam message rejected; If this is not spam contact abuse","description":"reject message for spam","loc":["services","rmilter","rspamd","rejectMessage"],"readOnly":false,"type":"string"},"services.rmilter.rspamd.servers":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":["r:/run/rspamd/rspamd.sock"],"description":"Spamd socket definitions.\nIs server name is prefixed with r: it is rspamd server.\n","loc":["services","rmilter","rspamd","servers"],"readOnly":false,"type":"list of strings"},"services.rmilter.rspamd.whitelist":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":[],"description":"list of ips or nets that should be not checked with spamd","loc":["services","rmilter","rspamd","whitelist"],"readOnly":false,"type":"list of strings"},"services.rmilter.socketActivation":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":true,"description":"Enable systemd socket activation for rmilter.\n\nDisabling socket activation is not recommended when a Unix\ndomain socket is used and could lead to incorrect\npermissions.\n","loc":["services","rmilter","socketActivation"],"readOnly":false,"type":"boolean"},"services.rmilter.user":{"declarations":["nixos/modules/services/mail/rmilter.nix"],"default":"rmilter","description":"User to use when no root privileges are required.\n","loc":["services","rmilter","user"],"readOnly":false,"type":"Concatenated string"},"services.rogue.enable":{"declarations":["nixos/modules/services/misc/rogue.nix"],"default":false,"description":"Whether to enable the Rogue game on one of the virtual\nconsoles.\n","loc":["services","rogue","enable"],"readOnly":false,"type":"boolean"},"services.rogue.tty":{"declarations":["nixos/modules/services/misc/rogue.nix"],"default":"tty9","description":"Virtual console on which to run Rogue.\n","loc":["services","rogue","tty"],"readOnly":false,"type":"string"},"services.rpcbind.enable":{"declarations":["nixos/modules/services/networking/rpcbind.nix"],"default":false,"description":"Whether to enable `rpcbind', an ONC RPC directory service\nnotably used by NFS and NIS, and which can be queried\nusing the rpcinfo(1) command. `rpcbind` is a replacement for\n`portmap`.\n","loc":["services","rpcbind","enable"],"readOnly":false,"type":"boolean"},"services.rsnapshot.cronIntervals":{"declarations":["nixos/modules/services/backup/rsnapshot.nix"],"default":{},"description":"Periodicity at which intervals should be run by cron.\nNote that the intervals also have to exist in configuration\nas retain options.\n","example":{"daily":"50 21 * * *","hourly":"0 * * * *"},"loc":["services","rsnapshot","cronIntervals"],"readOnly":false,"type":"attribute set of Concatenated strings"},"services.rsnapshot.enable":{"declarations":["nixos/modules/services/backup/rsnapshot.nix"],"default":false,"description":"Whether to enable rsnapshot backups.","example":true,"loc":["services","rsnapshot","enable"],"readOnly":false,"type":"boolean"},"services.rsnapshot.enableManualRsnapshot":{"declarations":["nixos/modules/services/backup/rsnapshot.nix"],"default":true,"description":"Whether to enable manual usage of the rsnapshot command with this module.","loc":["services","rsnapshot","enableManualRsnapshot"],"readOnly":false,"type":"boolean"},"services.rsnapshot.extraConfig":{"declarations":["nixos/modules/services/backup/rsnapshot.nix"],"default":"","description":"rsnapshot configuration option in addition to the defaults from\nrsnapshot and this module.\n\nNote that tabs are required to separate option arguments, and\ndirectory names require trailing slashes.\n\nThe \"extra\" in the option name might be a little misleading right\nnow, as it is required to get a functional configuration.\n","example":"retains\thourly\t24\nretain\tdaily\t365\nbackup\t/home/\tlocalhost/\n","loc":["services","rsnapshot","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rspamd.debug":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":false,"description":"Whether to run the rspamd daemon in debug mode.","loc":["services","rspamd","debug"],"readOnly":false,"type":"boolean"},"services.rspamd.enable":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":false,"description":"Whether to enable rspamd, the Rapid spam filtering system.","example":true,"loc":["services","rspamd","enable"],"readOnly":false,"type":"boolean"},"services.rspamd.extraConfig":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":"","description":"Extra configuration to add at the end of the rspamd configuration\nfile.\n","loc":["services","rspamd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rspamd.group":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":"rspamd","description":"Group to use when no root privileges are required.\n","loc":["services","rspamd","group"],"readOnly":false,"type":"Concatenated string"},"services.rspamd.user":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":"rspamd","description":"User to use when no root privileges are required.\n","loc":["services","rspamd","user"],"readOnly":false,"type":"Concatenated string"},"services.rspamd.workers":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":{"controller":{},"normal":{}},"description":"Attribute set of workers to start.\n","example":{"_type":"literalExample","text":"{\n  normal = {\n    includes = [ \"$CONFDIR/worker-normal.inc\" ];\n    bindSockets = [{\n      socket = \"/run/rspamd/rspamd.sock\";\n      mode = \"0660\";\n      owner = \"rspamd\";\n      group = \"rspamd\";\n    }];\n  };\n  controller = {\n    includes = [ \"$CONFDIR/worker-controller.inc\" ];\n    bindSockets = [ \"[::1]:11334\" ];\n  };\n}\n"},"loc":["services","rspamd","workers"],"readOnly":false,"type":"attribute set of submodules"},"services.rspamd.workers.<name>.bindSockets":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":[],"description":"List of sockets to listen, in format acceptable by rspamd\n","example":[{"mode":"0666","owner":"rspamd","socket":"/run/rspamd.sock"},"*:11333"],"loc":["services","rspamd","workers","<name>","bindSockets"],"readOnly":false,"type":"list of string or submodules"},"services.rspamd.workers.<name>.count":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":null,"description":"Number of worker instances to run\n","loc":["services","rspamd","workers","<name>","count"],"readOnly":false,"type":"null or signed integer"},"services.rspamd.workers.<name>.enable":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":null,"description":"Whether to run the rspamd worker.","loc":["services","rspamd","workers","<name>","enable"],"readOnly":false,"type":"null or boolean"},"services.rspamd.workers.<name>.extraConfig":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":"","description":"Additional entries to put verbatim into worker section of rspamd config file.","loc":["services","rspamd","workers","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rspamd.workers.<name>.includes":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":[],"description":"List of files to include in configuration\n","loc":["services","rspamd","workers","<name>","includes"],"readOnly":false,"type":"list of strings"},"services.rspamd.workers.<name>.name":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"default":"‹name›","description":"Name of the worker","loc":["services","rspamd","workers","<name>","name"],"readOnly":false,"type":"null or string"},"services.rspamd.workers.<name>.type":{"declarations":["nixos/modules/services/mail/rspamd.nix"],"description":"The type of this worker","loc":["services","rspamd","workers","<name>","type"],"readOnly":false,"type":"null or one of \"normal\", \"controller\", \"fuzzy_storage\", \"proxy\", \"lua\""},"services.rsyncd.address":{"declarations":["nixos/modules/services/network-filesystems/rsyncd.nix"],"default":"","description":"IP address the daemon will listen on; rsyncd will listen on\nall addresses if this is not specified.\n","example":"192.168.1.2","loc":["services","rsyncd","address"],"readOnly":false,"type":"unspecified"},"services.rsyncd.enable":{"declarations":["nixos/modules/services/network-filesystems/rsyncd.nix"],"default":false,"description":"Whether to enable the rsync daemon.","loc":["services","rsyncd","enable"],"readOnly":false,"type":"unspecified"},"services.rsyncd.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/rsyncd.nix"],"default":"","description":"Lines of configuration to add to rsyncd globally.\nSee <command>man rsyncd.conf</command> for options.\n","loc":["services","rsyncd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.rsyncd.group":{"declarations":["nixos/modules/services/network-filesystems/rsyncd.nix"],"default":"root","description":"The group to run the daemon as.\nBy default the daemon runs as root.\n","loc":["services","rsyncd","group"],"readOnly":false,"type":"string"},"services.rsyncd.modules":{"declarations":["nixos/modules/services/network-filesystems/rsyncd.nix"],"default":{},"description":"A set describing exported directories.\nSee <command>man rsyncd.conf</command> for options.\n","example":{"srv":{"comment":"Public rsync share.","path":"/srv","read only":"yes"}},"loc":["services","rsyncd","modules"],"readOnly":false,"type":"attribute set of attribute set of stringss"},"services.rsyncd.motd":{"declarations":["nixos/modules/services/network-filesystems/rsyncd.nix"],"default":"","description":"Message of the day to display to clients on each connect.\nThis usually contains site information and any legal notices.\n","loc":["services","rsyncd","motd"],"readOnly":false,"type":"Concatenated string"},"services.rsyncd.port":{"declarations":["nixos/modules/services/network-filesystems/rsyncd.nix"],"default":873,"description":"TCP port the daemon will listen on.","loc":["services","rsyncd","port"],"readOnly":false,"type":"signed integer"},"services.rsyncd.user":{"declarations":["nixos/modules/services/network-filesystems/rsyncd.nix"],"default":"root","description":"The user to run the daemon as.\nBy default the daemon runs as root.\n","loc":["services","rsyncd","user"],"readOnly":false,"type":"string"},"services.rsyslogd.defaultConfig":{"declarations":["nixos/modules/services/logging/rsyslogd.nix"],"default":"# \"local1\" is used for dhcpd messages.\nlocal1.*                     -/var/log/dhcpd\n\nmail.*                       -/var/log/mail\n\n*.=warning;*.=err            -/var/log/warn\n*.crit                        /var/log/warn\n\n*.*;mail.none;local1.none    -/var/log/messages\n","description":"The default <filename>syslog.conf</filename> file configures a\nfairly standard setup of log files, which can be extended by\nmeans of <varname>extraConfig</varname>.\n","loc":["services","rsyslogd","defaultConfig"],"readOnly":false,"type":"Concatenated string"},"services.rsyslogd.enable":{"declarations":["nixos/modules/services/logging/rsyslogd.nix"],"default":false,"description":"Whether to enable syslogd.  Note that systemd also logs\nsyslog messages, so you normally don't need to run syslogd.\n","loc":["services","rsyslogd","enable"],"readOnly":false,"type":"boolean"},"services.rsyslogd.extraConfig":{"declarations":["nixos/modules/services/logging/rsyslogd.nix"],"default":"","description":"Additional text appended to <filename>syslog.conf</filename>,\ni.e. the contents of <varname>defaultConfig</varname>.\n","example":"news.* -/var/log/news","loc":["services","rsyslogd","extraConfig"],"readOnly":false,"type":"Concatenated string"},"services.rsyslogd.extraParams":{"declarations":["nixos/modules/services/logging/rsyslogd.nix"],"default":[],"description":"Additional parameters passed to <command>rsyslogd</command>.\n","example":["-m 0"],"loc":["services","rsyslogd","extraParams"],"readOnly":false,"type":"list of strings"},"services.sabnzbd.configFile":{"declarations":["nixos/modules/services/networking/sabnzbd.nix"],"default":"/var/lib/sabnzbd/sabnzbd.ini","description":"Path to config file.","loc":["services","sabnzbd","configFile"],"readOnly":false,"type":"unspecified"},"services.sabnzbd.enable":{"declarations":["nixos/modules/services/networking/sabnzbd.nix"],"default":false,"description":"Whether to enable the sabnzbd server.","loc":["services","sabnzbd","enable"],"readOnly":false,"type":"unspecified"},"services.sabnzbd.group":{"declarations":["nixos/modules/services/networking/sabnzbd.nix"],"default":"sabnzbd","description":"Group to run the service as","loc":["services","sabnzbd","group"],"readOnly":false,"type":"unspecified"},"services.sabnzbd.user":{"declarations":["nixos/modules/services/networking/sabnzbd.nix"],"default":"sabnzbd","description":"User to run the service as","loc":["services","sabnzbd","user"],"readOnly":false,"type":"unspecified"},"services.safeeyes.enable":{"declarations":["nixos/modules/services/misc/safeeyes.nix"],"default":false,"description":"Whether to enable the safeeyes OSGi service","loc":["services","safeeyes","enable"],"readOnly":false,"type":"unspecified"},"services.salt.master.configuration":{"declarations":["nixos/modules/services/admin/salt/master.nix"],"default":{},"description":"Salt master configuration as Nix attribute set.","loc":["services","salt","master","configuration"],"readOnly":false,"type":"attribute set"},"services.salt.master.enable":{"declarations":["nixos/modules/services/admin/salt/master.nix"],"default":false,"description":"Whether to enable Salt master service.","example":true,"loc":["services","salt","master","enable"],"readOnly":false,"type":"boolean"},"services.salt.minion.configuration":{"declarations":["nixos/modules/services/admin/salt/minion.nix"],"default":{},"description":"Salt minion configuration as Nix attribute set.\nSee <link xlink:href=\"https://docs.saltstack.com/en/latest/ref/configuration/minion.html\"/>                                                                                                 \nfor details.          \n","loc":["services","salt","minion","configuration"],"readOnly":false,"type":"attribute set"},"services.salt.minion.enable":{"declarations":["nixos/modules/services/admin/salt/minion.nix"],"default":false,"description":"Whether to enable Salt minion service.","example":true,"loc":["services","salt","minion","enable"],"readOnly":false,"type":"boolean"},"services.samba.configText":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":null,"description":"Verbatim contents of smb.conf. If null (default), use the\nautogenerated file from NixOS instead.\n","loc":["services","samba","configText"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.samba.enable":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":false,"description":"Whether to enable Samba, which provides file and print\nservices to Windows clients through the SMB/CIFS protocol.\n\n<note>\n  <para>If you use the firewall consider adding the following:</para>\n  <programlisting>\n    networking.firewall.allowedTCPPorts = [ 139 445 ];\n    networking.firewall.allowedUDPPorts = [ 137 138 ];\n  </programlisting>\n</note>\n","loc":["services","samba","enable"],"readOnly":false,"type":"boolean"},"services.samba.enableNmbd":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":true,"description":"Whether to enable Samba's nmbd, which replies to NetBIOS over IP name\nservice requests. It also participates in the browsing protocols\nwhich make up the Windows \"Network Neighborhood\" view.\n","loc":["services","samba","enableNmbd"],"readOnly":false,"type":"boolean"},"services.samba.enableWinbindd":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":true,"description":"Whether to enable Samba's winbindd, which provides a number of services\nto the Name Service Switch capability found in most modern C libraries,\nto arbitrary applications via PAM and ntlm_auth and to Samba itself.\n","loc":["services","samba","enableWinbindd"],"readOnly":false,"type":"boolean"},"services.samba.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":"","description":"Additional global section and extra section lines go in here.\n","example":"guest account = nobody\nmap to guest = bad user\n","loc":["services","samba","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.samba.invalidUsers":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":["root"],"description":"List of users who are denied to login via Samba.\n","loc":["services","samba","invalidUsers"],"readOnly":false,"type":"list of strings"},"services.samba.nsswins":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":false,"description":"Whether to enable the WINS NSS (Name Service Switch) plug-in.\nEnabling it allows applications to resolve WINS/NetBIOS names (a.k.a.\nWindows machine names) by transparently querying the winbindd daemon.\n","loc":["services","samba","nsswins"],"readOnly":false,"type":"boolean"},"services.samba.package":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":"pkgs.samba","description":"Defines which package should be used for the samba server.\n","example":{"_type":"literalExample","text":"pkgs.samba3"},"loc":["services","samba","package"],"readOnly":false,"type":"package"},"services.samba.securityType":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":"user","description":"Samba security type","example":"share","loc":["services","samba","securityType"],"readOnly":false,"type":"string"},"services.samba.shares":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":{},"description":"A set describing shared resources.\nSee <command>man smb.conf</command> for options.\n","example":{"public":{"browseable":"yes","comment":"Public samba share.","guest ok":"yes","path":"/srv/public","read only":true}},"loc":["services","samba","shares"],"readOnly":false,"type":"attribute set of attribute set of unspecifiedss"},"services.samba.syncPasswordsByPam":{"declarations":["nixos/modules/services/network-filesystems/samba.nix"],"default":false,"description":"Enabling this will add a line directly after pam_unix.so.\nWhenever a password is changed the samba password will be updated as well.\nHowever, you still have to add the samba password once, using smbpasswd -a user.\nIf you don't want to maintain an extra password database, you still can send plain text\npasswords which is not secure.\n","loc":["services","samba","syncPasswordsByPam"],"readOnly":false,"type":"boolean"},"services.saned.enable":{"declarations":["nixos/modules/services/hardware/sane.nix"],"default":false,"description":"Enable saned network daemon for remote connection to scanners.\n\nsaned would be runned from <literal>scanner</literal> user; to allow\naccess to hardware that doesn't have <literal>scanner</literal> group\nyou should add needed groups to this user.\n","loc":["services","saned","enable"],"readOnly":false,"type":"boolean"},"services.saned.extraConfig":{"declarations":["nixos/modules/services/hardware/sane.nix"],"default":"","description":"Extra saned configuration lines.\n","example":"192.168.0.0/24","loc":["services","saned","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.saslauthd.config":{"declarations":["nixos/modules/services/system/saslauthd.nix"],"default":"","description":"Configuration to use for Cyrus SASL authentication daemon.","loc":["services","saslauthd","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.saslauthd.enable":{"declarations":["nixos/modules/services/system/saslauthd.nix"],"default":false,"description":"Whether to enable saslauthd, the Cyrus SASL authentication daemon.","example":true,"loc":["services","saslauthd","enable"],"readOnly":false,"type":"boolean"},"services.saslauthd.mechanism":{"declarations":["nixos/modules/services/system/saslauthd.nix"],"default":"pam","description":"Auth mechanism to use","loc":["services","saslauthd","mechanism"],"readOnly":false,"type":"string"},"services.saslauthd.package":{"declarations":["nixos/modules/services/system/saslauthd.nix"],"default":"pkgs.cyrus_sasl.bin","description":"Cyrus SASL package to use.","loc":["services","saslauthd","package"],"readOnly":false,"type":"package"},"services.scollector.bosunHost":{"declarations":["nixos/modules/services/monitoring/scollector.nix"],"default":"localhost:8070","description":"Host and port of the bosun server that will store the collected\ndata.\n","loc":["services","scollector","bosunHost"],"readOnly":false,"type":"Concatenated string"},"services.scollector.collectors":{"declarations":["nixos/modules/services/monitoring/scollector.nix"],"default":{},"description":"An attribute set mapping the frequency of collection to a list of\nbinaries that should be executed at that frequency. You can use \"0\"\nto run a binary forever.\n","example":{"_type":"literalExample","text":"{ \"0\" = [ \"${postgresStats}/bin/collect-stats\" ]; }"},"loc":["services","scollector","collectors"],"readOnly":false,"type":"attribute set of list of pathss"},"services.scollector.enable":{"declarations":["nixos/modules/services/monitoring/scollector.nix"],"default":false,"description":"Whether to run scollector.\n","loc":["services","scollector","enable"],"readOnly":false,"type":"boolean"},"services.scollector.extraConfig":{"declarations":["nixos/modules/services/monitoring/scollector.nix"],"default":"","description":"Extra scollector configuration added to the end of scollector.toml\n","loc":["services","scollector","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.scollector.extraOpts":{"declarations":["nixos/modules/services/monitoring/scollector.nix"],"default":[],"description":"Extra scollector command line options\n","example":["-d"],"loc":["services","scollector","extraOpts"],"readOnly":false,"type":"list of strings"},"services.scollector.group":{"declarations":["nixos/modules/services/monitoring/scollector.nix"],"default":"scollector","description":"Group account under which scollector runs.\n","loc":["services","scollector","group"],"readOnly":false,"type":"Concatenated string"},"services.scollector.package":{"declarations":["nixos/modules/services/monitoring/scollector.nix"],"default":"pkgs.scollector","description":"scollector binary to use.\n","example":{"_type":"literalExample","text":"pkgs.scollector"},"loc":["services","scollector","package"],"readOnly":false,"type":"package"},"services.scollector.user":{"declarations":["nixos/modules/services/monitoring/scollector.nix"],"default":"scollector","description":"User account under which scollector runs.\n","loc":["services","scollector","user"],"readOnly":false,"type":"Concatenated string"},"services.searx.configFile":{"declarations":["nixos/modules/services/networking/searx.nix"],"default":null,"description":"\n          The path of the Searx server configuration file. If no file\n          is specified, a default file is used (default config file has\n          debug mode enabled).\n        ","loc":["services","searx","configFile"],"readOnly":false,"type":"null or path"},"services.searx.enable":{"declarations":["nixos/modules/services/networking/searx.nix"],"default":false,"description":"Whether to enable the searx server. See https://github.com/asciimoo/searx.","example":true,"loc":["services","searx","enable"],"readOnly":false,"type":"boolean"},"services.searx.package":{"declarations":["nixos/modules/services/networking/searx.nix"],"default":"pkgs.searx","description":"searx package to use.","loc":["services","searx","package"],"readOnly":false,"type":"package"},"services.seeks.confDir":{"declarations":["nixos/modules/services/networking/seeks.nix"],"default":"","description":"\n          The Seeks server configuration. If it is not specified,\n          a default configuration is used.\n        ","loc":["services","seeks","confDir"],"readOnly":false,"type":"string"},"services.seeks.enable":{"declarations":["nixos/modules/services/networking/seeks.nix"],"default":false,"description":"\n          Whether to enable the Seeks server.\n        ","loc":["services","seeks","enable"],"readOnly":false,"type":"boolean"},"services.selfoss.database.host":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":"localhost","description":"Host of the database (has no effect if type is \"sqlite\").\n","loc":["services","selfoss","database","host"],"readOnly":false,"type":"string"},"services.selfoss.database.name":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":"tt_rss","description":"Name of the existing database (has no effect if type is \"sqlite\").\n","loc":["services","selfoss","database","name"],"readOnly":false,"type":"string"},"services.selfoss.database.password":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":null,"description":"The database user's password (has no effect if type is \"sqlite\").\n","loc":["services","selfoss","database","password"],"readOnly":false,"type":"null or string"},"services.selfoss.database.port":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":null,"description":"The database's port. If not set, the default ports will be\nprovided (5432 and 3306 for pgsql and mysql respectively)\n(has no effect if type is \"sqlite\").\n","loc":["services","selfoss","database","port"],"readOnly":false,"type":"null or signed integer"},"services.selfoss.database.type":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":"sqlite","description":"Database to store feeds. Supported are sqlite, pgsql and mysql.\n","loc":["services","selfoss","database","type"],"readOnly":false,"type":"one of \"pgsql\", \"mysql\", \"sqlite\""},"services.selfoss.database.user":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":"tt_rss","description":"The database user. The user must exist and has access to\nthe specified database (has no effect if type is \"sqlite\").\n","loc":["services","selfoss","database","user"],"readOnly":false,"type":"string"},"services.selfoss.enable":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":false,"description":"Whether to enable selfoss.","example":true,"loc":["services","selfoss","enable"],"readOnly":false,"type":"boolean"},"services.selfoss.extraConfig":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":"","description":"Extra configuration added to config.ini\n","loc":["services","selfoss","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.selfoss.pool":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":"selfoss_pool","description":"Name of existing phpfpm pool that is used to run web-application.\nIf not specified a pool will be created automatically with\ndefault values.\n","loc":["services","selfoss","pool"],"readOnly":false,"type":"string"},"services.selfoss.user":{"declarations":["nixos/modules/services/web-apps/selfoss.nix"],"default":"nginx","description":"User account under which both the service and the web-application run.\n","example":"nginx","loc":["services","selfoss","user"],"readOnly":false,"type":"string"},"services.serviio.dataDir":{"declarations":["nixos/modules/services/misc/serviio.nix"],"default":"/var/lib/serviio","description":"The directory where serviio stores its state, data, etc.\n","loc":["services","serviio","dataDir"],"readOnly":false,"type":"path"},"services.serviio.enable":{"declarations":["nixos/modules/services/misc/serviio.nix"],"default":false,"description":"Whether to enable the Serviio Media Server.\n","loc":["services","serviio","enable"],"readOnly":false,"type":"boolean"},"services.shadowsocks.enable":{"declarations":["nixos/modules/services/networking/shadowsocks.nix"],"default":false,"description":"Whether to run shadowsocks-libev shadowsocks server.\n","loc":["services","shadowsocks","enable"],"readOnly":false,"type":"boolean"},"services.shadowsocks.encryptionMethod":{"declarations":["nixos/modules/services/networking/shadowsocks.nix"],"default":"chacha20-ietf-poly1305","description":"Encryption method. See <link xlink:href=\"https://github.com/shadowsocks/shadowsocks-org/wiki/AEAD-Ciphers\"/>.\n","loc":["services","shadowsocks","encryptionMethod"],"readOnly":false,"type":"string"},"services.shadowsocks.localAddress":{"declarations":["nixos/modules/services/networking/shadowsocks.nix"],"default":"0.0.0.0","description":"Local address to which the server binds.\n","loc":["services","shadowsocks","localAddress"],"readOnly":false,"type":"string"},"services.shadowsocks.mode":{"declarations":["nixos/modules/services/networking/shadowsocks.nix"],"default":"tcp_and_udp","description":"Relay protocols.\n","loc":["services","shadowsocks","mode"],"readOnly":false,"type":"one of \"tcp_only\", \"tcp_and_udp\", \"udp_only\""},"services.shadowsocks.password":{"declarations":["nixos/modules/services/networking/shadowsocks.nix"],"default":null,"description":"Password for connecting clients.\n","loc":["services","shadowsocks","password"],"readOnly":false,"type":"null or string"},"services.shadowsocks.passwordFile":{"declarations":["nixos/modules/services/networking/shadowsocks.nix"],"default":null,"description":"Password file with a password for connecting clients.\n","loc":["services","shadowsocks","passwordFile"],"readOnly":false,"type":"null or path"},"services.shadowsocks.port":{"declarations":["nixos/modules/services/networking/shadowsocks.nix"],"default":8388,"description":"Port which the server uses.\n","loc":["services","shadowsocks","port"],"readOnly":false,"type":"signed integer"},"services.shairport-sync.arguments":{"declarations":["nixos/modules/services/networking/shairport-sync.nix"],"default":"-v -d pulse","description":"Arguments to pass to the daemon. Defaults to a local pulseaudio\nserver.\n","loc":["services","shairport-sync","arguments"],"readOnly":false,"type":"unspecified"},"services.shairport-sync.enable":{"declarations":["nixos/modules/services/networking/shairport-sync.nix"],"default":false,"description":"Enable the shairport-sync daemon.\n\nRunning with a local system-wide or remote pulseaudio server\nis recommended.\n","loc":["services","shairport-sync","enable"],"readOnly":false,"type":"unspecified"},"services.shairport-sync.user":{"declarations":["nixos/modules/services/networking/shairport-sync.nix"],"default":"shairport","description":"User account name under which to run shairport-sync. The account\nwill be created.\n","loc":["services","shairport-sync","user"],"readOnly":false,"type":"unspecified"},"services.shellinabox.certDirectory":{"declarations":["nixos/modules/services/web-servers/shellinabox.nix"],"default":null,"description":"The daemon will look in this directory far any certificates.\nIf the browser negotiated a Server Name Identification the daemon\nwill look for a matching certificate-SERVERNAME.pem file. If no SNI\nhandshake takes place, it will fall back on using the certificate in the\ncertificate.pem file.\n\nIf no suitable certificate is installed, shellinaboxd will attempt to\ncreate a new self-signed certificate. This will only succeed if, after\ndropping privileges, shellinaboxd has write permissions for this\ndirectory.\n","example":"/var/certs","loc":["services","shellinabox","certDirectory"],"readOnly":false,"type":"null or path"},"services.shellinabox.certFile":{"declarations":["nixos/modules/services/web-servers/shellinabox.nix"],"default":null,"description":"Path to server SSL certificate.","example":"/var/certificate.pem","loc":["services","shellinabox","certFile"],"readOnly":false,"type":"null or path"},"services.shellinabox.enable":{"declarations":["nixos/modules/services/web-servers/shellinabox.nix"],"default":false,"description":"Whether to enable shellinabox daemon.","example":true,"loc":["services","shellinabox","enable"],"readOnly":false,"type":"boolean"},"services.shellinabox.enableSSL":{"declarations":["nixos/modules/services/web-servers/shellinabox.nix"],"default":false,"description":"Whether or not to enable SSL (https) support.\n","loc":["services","shellinabox","enableSSL"],"readOnly":false,"type":"boolean"},"services.shellinabox.extraOptions":{"declarations":["nixos/modules/services/web-servers/shellinabox.nix"],"default":[],"description":"A list of strings to be appended to the command line arguments\nfor shellinaboxd. Please see the manual page\n<link xlink:href=\"https://code.google.com/p/shellinabox/wiki/shellinaboxd_man\"/>\nfor a full list of available arguments.\n","example":["--port=443","--service /:LOGIN"],"loc":["services","shellinabox","extraOptions"],"readOnly":false,"type":"list of strings"},"services.shellinabox.user":{"declarations":["nixos/modules/services/web-servers/shellinabox.nix"],"default":"root","description":"User to run shellinaboxd as. If started as root, the server drops\nprivileges by changing to nobody, unless overridden by the\n<literal>--user</literal> option.\n","loc":["services","shellinabox","user"],"readOnly":false,"type":"string"},"services.shibboleth-sp.configFile":{"declarations":["nixos/modules/services/security/shibboleth-sp.nix"],"description":"Path to shibboleth config file","example":"${pkgs.shibboleth-sp}/etc/shibboleth/shibboleth2.xml","loc":["services","shibboleth-sp","configFile"],"readOnly":false,"type":"path"},"services.shibboleth-sp.enable":{"declarations":["nixos/modules/services/security/shibboleth-sp.nix"],"default":false,"description":"Whether to enable the shibboleth service","loc":["services","shibboleth-sp","enable"],"readOnly":false,"type":"boolean"},"services.shibboleth-sp.fastcgi.enable":{"declarations":["nixos/modules/services/security/shibboleth-sp.nix"],"default":false,"description":"Whether to include the shibauthorizer and shibresponder FastCGI processes","loc":["services","shibboleth-sp","fastcgi","enable"],"readOnly":false,"type":"boolean"},"services.shibboleth-sp.fastcgi.shibAuthorizerPort":{"declarations":["nixos/modules/services/security/shibboleth-sp.nix"],"default":9100,"description":"Port for shibauthorizer FastCGI proccess to bind to","loc":["services","shibboleth-sp","fastcgi","shibAuthorizerPort"],"readOnly":false,"type":"signed integer"},"services.shibboleth-sp.fastcgi.shibResponderPort":{"declarations":["nixos/modules/services/security/shibboleth-sp.nix"],"default":9101,"description":"Port for shibauthorizer FastCGI proccess to bind to","loc":["services","shibboleth-sp","fastcgi","shibResponderPort"],"readOnly":false,"type":"signed integer"},"services.shout.config":{"declarations":["nixos/modules/services/networking/shout.nix"],"default":{},"description":"Shout <filename>config.js</filename> contents as attribute set (will be\nconverted to JSON to generate the configuration file).\n\nThe options defined here will be merged to the default configuration file.\n\nDocumentation: http://shout-irc.com/docs/server/configuration.html\n","example":{"defaults":{"host":"localhost","name":"Your Network","port":6697},"displayNetwork":false},"loc":["services","shout","config"],"readOnly":false,"type":"attribute set"},"services.shout.configFile":{"declarations":["nixos/modules/services/networking/shout.nix"],"default":null,"description":"Contents of Shout's <filename>config.js</filename> file.\n\nUsed for backward compatibility, recommended way is now to use\nthe <literal>config</literal> option.\n\nDocumentation: http://shout-irc.com/docs/server/configuration.html\n","loc":["services","shout","configFile"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.shout.enable":{"declarations":["nixos/modules/services/networking/shout.nix"],"default":false,"description":"Whether to enable Shout web IRC client.","example":true,"loc":["services","shout","enable"],"readOnly":false,"type":"boolean"},"services.shout.listenAddress":{"declarations":["nixos/modules/services/networking/shout.nix"],"default":"0.0.0.0","description":"IP interface to listen on for http connections.","loc":["services","shout","listenAddress"],"readOnly":false,"type":"Concatenated string"},"services.shout.port":{"declarations":["nixos/modules/services/networking/shout.nix"],"default":9000,"description":"TCP port to listen on for http connections.","loc":["services","shout","port"],"readOnly":false,"type":"signed integer"},"services.shout.private":{"declarations":["nixos/modules/services/networking/shout.nix"],"default":false,"description":"Make your shout instance private. You will need to configure user\naccounts by adding entries in <filename>/var/lib/shout/users</filename>.\n","loc":["services","shout","private"],"readOnly":false,"type":"boolean"},"services.sickbeard.configFile":{"declarations":["nixos/modules/services/misc/sickbeard.nix"],"default":"/var/lib/sickbeard/config.ini","description":"Path to config file.","loc":["services","sickbeard","configFile"],"readOnly":false,"type":"path"},"services.sickbeard.dataDir":{"declarations":["nixos/modules/services/misc/sickbeard.nix"],"default":"/var/lib/sickbeard","description":"Path where to store data files.","loc":["services","sickbeard","dataDir"],"readOnly":false,"type":"path"},"services.sickbeard.enable":{"declarations":["nixos/modules/services/misc/sickbeard.nix"],"default":false,"description":"Whether to enable the sickbeard server.","loc":["services","sickbeard","enable"],"readOnly":false,"type":"boolean"},"services.sickbeard.group":{"declarations":["nixos/modules/services/misc/sickbeard.nix"],"default":"sickbeard","description":"Group to run the service as","loc":["services","sickbeard","group"],"readOnly":false,"type":"string"},"services.sickbeard.package":{"declarations":["nixos/modules/services/misc/sickbeard.nix"],"default":"sickbeard-2016-03-21","description":"Enable <literal>pkgs.sickrage</literal> or <literal>pkgs.sickgear</literal>\nas an alternative to SickBeard\n","example":{"_type":"literalExample","text":"pkgs.sickrage"},"loc":["services","sickbeard","package"],"readOnly":false,"type":"package"},"services.sickbeard.port":{"declarations":["nixos/modules/services/misc/sickbeard.nix"],"default":8081,"description":"Port to bind to.","loc":["services","sickbeard","port"],"readOnly":false,"type":"16 bit unsigned integer; between 0 and 65535 (both inclusive)"},"services.sickbeard.user":{"declarations":["nixos/modules/services/misc/sickbeard.nix"],"default":"sickbeard","description":"User to run the service as","loc":["services","sickbeard","user"],"readOnly":false,"type":"string"},"services.siproxd.enable":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":false,"description":"          Whether to enable the Siproxd SIP \n\t  proxy/masquerading daemon.\n","loc":["services","siproxd","enable"],"readOnly":false,"type":"boolean"},"services.siproxd.extraConfig":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":"","description":"Extra configuration to add to siproxd configuration.\n","loc":["services","siproxd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.siproxd.hostsAllowReg":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":[],"description":"Acess control list for incoming SIP registrations.\n","example":["192.168.1.0/24","192.168.2.0/24"],"loc":["services","siproxd","hostsAllowReg"],"readOnly":false,"type":"list of strings"},"services.siproxd.hostsAllowSip":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":[],"description":"Acess control list for incoming SIP traffic.\n","example":["123.45.0.0/16","123.46.0.0/16"],"loc":["services","siproxd","hostsAllowSip"],"readOnly":false,"type":"list of strings"},"services.siproxd.hostsDenySip":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":[],"description":"          Acess control list for denying incoming\n\t   SIP registrations and traffic.\n","example":["10.0.0.0/8","11.0.0.0/8"],"loc":["services","siproxd","hostsDenySip"],"readOnly":false,"type":"list of strings"},"services.siproxd.ifInbound":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"description":"Local network interface","example":"eth0","loc":["services","siproxd","ifInbound"],"readOnly":false,"type":"string"},"services.siproxd.ifOutbound":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"description":"Public network interface","example":"ppp0","loc":["services","siproxd","ifOutbound"],"readOnly":false,"type":"string"},"services.siproxd.passwordFile":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":"","description":"Path to per-user password file.\n","loc":["services","siproxd","passwordFile"],"readOnly":false,"type":"string"},"services.siproxd.rtpDscp":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":46,"description":"DSCP (differentiated services) value to be assigned\nto RTP packets. Allows QOS aware routers to handle \ndifferent types traffic with different priorities.\n","loc":["services","siproxd","rtpDscp"],"readOnly":false,"type":"signed integer"},"services.siproxd.rtpPortHigh":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":7089,"description":"Top of UDP port range for incoming and outgoing RTP traffic\n","loc":["services","siproxd","rtpPortHigh"],"readOnly":false,"type":"signed integer"},"services.siproxd.rtpPortLow":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":7070,"description":"Bottom of UDP port range for incoming and outgoing RTP traffic\n","loc":["services","siproxd","rtpPortLow"],"readOnly":false,"type":"signed integer"},"services.siproxd.rtpTimeout":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":300,"description":"Timeout for an RTP stream. If for the specified \nnumber of seconds no data is relayed on an active\nstream, it is considered dead and will be killed.\n","loc":["services","siproxd","rtpTimeout"],"readOnly":false,"type":"signed integer"},"services.siproxd.sipDscp":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":0,"description":"DSCP (differentiated services) value to be assigned\nto SIP packets. Allows QOS aware routers to handle \ndifferent types traffic with different priorities.\n","loc":["services","siproxd","sipDscp"],"readOnly":false,"type":"signed integer"},"services.siproxd.sipListenPort":{"declarations":["nixos/modules/services/misc/siproxd.nix"],"default":5060,"description":"\t  Port to listen for incoming SIP messages.\n","loc":["services","siproxd","sipListenPort"],"readOnly":false,"type":"signed integer"},"services.sks.dataDir":{"declarations":["nixos/modules/services/security/sks.nix"],"default":"/var/db/sks","description":"Data directory (-basedir) for SKS, where the database and all\nconfiguration files are located (e.g. KDB, PTree, membership and\nsksconf).\n","example":"/var/lib/sks","loc":["services","sks","dataDir"],"readOnly":false,"type":"path"},"services.sks.enable":{"declarations":["nixos/modules/services/security/sks.nix"],"default":false,"description":"Whether to enable SKS (synchronizing key server for OpenPGP) and start the database\nserver. You need to create \"${dataDir}/dump/*.gpg\" for the initial\nimport.","example":true,"loc":["services","sks","enable"],"readOnly":false,"type":"boolean"},"services.sks.hkpAddress":{"declarations":["nixos/modules/services/security/sks.nix"],"default":["127.0.0.1","::1"],"description":"Domain names, IPv4 and/or IPv6 addresses to listen on for HKP\nrequests.\n","loc":["services","sks","hkpAddress"],"readOnly":false,"type":"list of strings"},"services.sks.hkpPort":{"declarations":["nixos/modules/services/security/sks.nix"],"default":11371,"description":"HKP port to listen on.","loc":["services","sks","hkpPort"],"readOnly":false,"type":"16 bit unsigned integer; between 0 and 65535 (both inclusive)"},"services.sks.package":{"declarations":["nixos/modules/services/security/sks.nix"],"default":"pkgs.sks","description":"Which SKS derivation to use.","loc":["services","sks","package"],"readOnly":false,"type":"package"},"services.sks.webroot":{"declarations":["nixos/modules/services/security/sks.nix"],"default":"${pkgs.sks.webSamples}/OpenPKG","description":"Source directory (will be symlinked, if not null) for the files the\nbuilt-in webserver should serve. SKS (${pkgs.sks.webSamples})\nprovides the following examples: \"HTML5\", \"OpenPKG\", and \"XHTML+ES\".\nThe index file can be named index.html, index.htm, index.xhtm, or\nindex.xhtml. Files with the extensions .css, .es, .js, .jpg, .jpeg,\n.png, or .gif are supported. Subdirectories and filenames with\nanything other than alphanumeric characters and the '.' character\nwill be ignored.\n","loc":["services","sks","webroot"],"readOnly":false,"type":"null or path"},"services.skydns.address":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":"0.0.0.0:53","description":"Skydns address to bind to.","loc":["services","skydns","address"],"readOnly":false,"type":"string"},"services.skydns.domain":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":"skydns.local.","description":"Skydns default domain if not specified by etcd config.","loc":["services","skydns","domain"],"readOnly":false,"type":"string"},"services.skydns.enable":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":false,"description":"Whether to enable skydns service.","example":true,"loc":["services","skydns","enable"],"readOnly":false,"type":"boolean"},"services.skydns.etcd.caCert":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":null,"description":"Skydns path of TLS certificate authority public key.","loc":["services","skydns","etcd","caCert"],"readOnly":false,"type":"null or path"},"services.skydns.etcd.machines":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":["http://127.0.0.1:2379"],"description":"Skydns list of etcd endpoints to connect to.","loc":["services","skydns","etcd","machines"],"readOnly":false,"type":"list of strings"},"services.skydns.etcd.tlsKey":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":null,"description":"Skydns path of TLS client certificate - private key.","loc":["services","skydns","etcd","tlsKey"],"readOnly":false,"type":"null or path"},"services.skydns.etcd.tlsPem":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":null,"description":"Skydns path of TLS client certificate - public key.","loc":["services","skydns","etcd","tlsPem"],"readOnly":false,"type":"null or path"},"services.skydns.extraConfig":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":{},"description":"Skydns attribute set of extra config options passed as environemnt variables.","loc":["services","skydns","extraConfig"],"readOnly":false,"type":"attribute set of strings"},"services.skydns.nameservers":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":[],"description":"Skydns list of nameservers to forward DNS requests to when not authoritative for a domain.","example":["8.8.8.8:53","8.8.4.4:53"],"loc":["services","skydns","nameservers"],"readOnly":false,"type":"list of strings"},"services.skydns.package":{"declarations":["nixos/modules/services/networking/skydns.nix"],"default":"pkgs.skydns","description":"Skydns package to use.","loc":["services","skydns","package"],"readOnly":false,"type":"package"},"services.slimserver.dataDir":{"declarations":["nixos/modules/services/audio/slimserver.nix"],"default":"/var/lib/slimserver","description":"The directory where slimserver stores its state, tag cache,\nplaylists etc.\n","loc":["services","slimserver","dataDir"],"readOnly":false,"type":"path"},"services.slimserver.enable":{"declarations":["nixos/modules/services/audio/slimserver.nix"],"default":false,"description":"Whether to enable slimserver.\n","loc":["services","slimserver","enable"],"readOnly":false,"type":"boolean"},"services.slimserver.package":{"declarations":["nixos/modules/services/audio/slimserver.nix"],"default":"pkgs.slimserver","description":"Slimserver package to use.","loc":["services","slimserver","package"],"readOnly":false,"type":"package"},"services.slurm.client.enable":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":false,"description":"Whether to enable slurm client daemon.","example":true,"loc":["services","slurm","client","enable"],"readOnly":false,"type":"boolean"},"services.slurm.clusterName":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":"default","description":"Necessary to distinguish accounting records in a multi-cluster environment.\n","example":"myCluster","loc":["services","slurm","clusterName"],"readOnly":false,"type":"string"},"services.slurm.controlAddr":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":null,"description":"Name that ControlMachine should be referred to in establishing a\ncommunications path.\n","example":null,"loc":["services","slurm","controlAddr"],"readOnly":false,"type":"null or string"},"services.slurm.controlMachine":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":null,"description":"The short hostname of the machine where SLURM control functions are\nexecuted (i.e. the name returned by the command \"hostname -s\", use \"tux001\"\nrather than \"tux001.my.com\").\n","example":null,"loc":["services","slurm","controlMachine"],"readOnly":false,"type":"null or string"},"services.slurm.enableSrunX11":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":false,"description":"If enabled srun will accept the option \"--x11\" to allow for X11 forwarding\nfrom within an interactive session or a batch job. This activates the\nslurm-spank-x11 module. Note that this option also enables\n'services.openssh.forwardX11' on the client.\n\nThis option requires slurm to be compiled without native X11 support.\n","loc":["services","slurm","enableSrunX11"],"readOnly":false,"type":"boolean"},"services.slurm.enableStools":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":false,"description":"Wether to provide a slurm.conf file.\nEnable this option if you do not run a slurm daemon on this host\n(i.e. <literal>server.enable</literal> and <literal>client.enable</literal> are <literal>false</literal>)\nbut you still want to run slurm commands from this host.\n","loc":["services","slurm","enableStools"],"readOnly":false,"type":"boolean"},"services.slurm.extraCgroupConfig":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":"","description":"Extra configuration for <literal>cgroup.conf</literal>. This file is\nused when <literal>procTrackType=proctrack/cgroup</literal>.\n","loc":["services","slurm","extraCgroupConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.slurm.extraConfig":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":"","description":"Extra configuration options that will be added verbatim at\nthe end of the slurm configuration file.\n","loc":["services","slurm","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.slurm.extraPlugstackConfig":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":"","description":"Extra configuration that will be added to the end of <literal>plugstack.conf</literal>.\n","loc":["services","slurm","extraPlugstackConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.slurm.nodeName":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":null,"description":"Name that SLURM uses to refer to a node (or base partition for BlueGene\nsystems). Typically this would be the string that \"/bin/hostname -s\"\nreturns. Note that now you have to write node's parameters after the name.\n","example":"linux[1-32] CPUs=1 State=UNKNOWN","loc":["services","slurm","nodeName"],"readOnly":false,"type":"null or string"},"services.slurm.package":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":"pkgs.slurm","description":"The package to use for slurm binaries.\n","example":{"_type":"literalExample","text":"pkgs.slurm-full"},"loc":["services","slurm","package"],"readOnly":false,"type":"package"},"services.slurm.partitionName":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":null,"description":"Name by which the partition may be referenced. Note that now you have\nto write the partition's parameters after the name.\n","example":"debug Nodes=linux[1-32] Default=YES MaxTime=INFINITE State=UP","loc":["services","slurm","partitionName"],"readOnly":false,"type":"null or string"},"services.slurm.procTrackType":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":"proctrack/linuxproc","description":"Plugin to be used for process tracking on a job step basis.\nThe slurmd daemon uses this mechanism to identify all processes\nwhich are children of processes it spawns for a user job step.\n","loc":["services","slurm","procTrackType"],"readOnly":false,"type":"Concatenated string"},"services.slurm.server.enable":{"declarations":["nixos/modules/services/computing/slurm/slurm.nix"],"default":false,"description":"Wether to enable the slurm control daemon.\nNote that the standard authentication method is \"munge\".\nThe \"munge\" service needs to be provided with a password file in order for\nslurm to work properly (see <literal>services.munge.password</literal>).\n","loc":["services","slurm","server","enable"],"readOnly":false,"type":"boolean"},"services.smartd.autodetect":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":true,"description":"Whenever smartd should monitor all devices connected to the\nmachine at the time it's being started (the default).\n\nSet to false to monitor the devices listed in\n<option>services.smartd.devices</option> only.\n","loc":["services","smartd","autodetect"],"readOnly":false,"type":"boolean"},"services.smartd.defaults.autodetected":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":"-a","description":"Like <option>services.smartd.defaults.monitored</option>, but for the\nautodetected devices.\n","loc":["services","smartd","defaults","autodetected"],"readOnly":false,"type":"strings concatenated with \" \""},"services.smartd.defaults.monitored":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":"-a","description":"Common default options for explicitly monitored (listed in\n<option>services.smartd.devices</option>) devices.\n\nThe default value turns on monitoring of all the things (see\n<literal>man 5 smartd.conf</literal>).\n\nThe example also turns on SMART Automatic Offline Testing on\nstartup, and schedules short self-tests daily, and long\nself-tests weekly.\n","example":"-a -o on -s (S/../.././02|L/../../7/04)","loc":["services","smartd","defaults","monitored"],"readOnly":false,"type":"strings concatenated with \" \""},"services.smartd.devices":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":[],"description":"List of devices to monitor.","example":[{"device":"/dev/sda"},{"device":"/dev/sdb","options":"-d sat"}],"loc":["services","smartd","devices"],"readOnly":false,"type":"list of submodules"},"services.smartd.devices.*.device":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"description":"Location of the device.","example":"/dev/sda","loc":["services","smartd","devices","*","device"],"readOnly":false,"type":"string"},"services.smartd.devices.*.options":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":"","description":"Options that determine how smartd monitors the device.","example":"-d sat","loc":["services","smartd","devices","*","options"],"readOnly":false,"type":"strings concatenated with \" \""},"services.smartd.enable":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":false,"description":"Whether to enable smartd daemon from <literal>smartmontools</literal> package.","example":true,"loc":["services","smartd","enable"],"readOnly":false,"type":"boolean"},"services.smartd.extraOptions":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":[],"description":"Extra command-line options passed to the <literal>smartd</literal>\ndaemon on startup.\n\n(See <literal>man 8 smartd</literal>.)\n","example":["-A /var/log/smartd/","--interval=3600"],"loc":["services","smartd","extraOptions"],"readOnly":false,"type":"list of strings"},"services.smartd.notifications.mail.enable":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":false,"description":"Whenever to send e-mail notifications.","loc":["services","smartd","notifications","mail","enable"],"readOnly":false,"type":"boolean"},"services.smartd.notifications.mail.mailer":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":"/run/wrappers/bin/sendmail","description":"Sendmail-compatible binary to be used to send the messages.\n\nYou should probably enable\n<option>services.postfix</option> or some other MTA for\nthis to work.\n","loc":["services","smartd","notifications","mail","mailer"],"readOnly":false,"type":"path"},"services.smartd.notifications.mail.recipient":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":"root","description":"Recipient of the notification messages.","loc":["services","smartd","notifications","mail","recipient"],"readOnly":false,"type":"string"},"services.smartd.notifications.test":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":false,"description":"Whenever to send a test notification on startup.","loc":["services","smartd","notifications","test"],"readOnly":false,"type":"boolean"},"services.smartd.notifications.wall.enable":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":true,"description":"Whenever to send wall notifications to all users.","loc":["services","smartd","notifications","wall","enable"],"readOnly":false,"type":"boolean"},"services.smartd.notifications.x11.display":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":":0","description":"DISPLAY to send X11 notifications to.","loc":["services","smartd","notifications","x11","display"],"readOnly":false,"type":"string"},"services.smartd.notifications.x11.enable":{"declarations":["nixos/modules/services/monitoring/smartd.nix"],"default":false,"description":"Whenever to send X11 xmessage notifications.","loc":["services","smartd","notifications","x11","enable"],"readOnly":false,"type":"boolean"},"services.smokeping.alertConfig":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"to = root@localhost\nfrom = smokeping@localhost\n","description":"Configuration for alerts.","example":{"_type":"literalExample","text":"to = alertee@address.somewhere\nfrom = smokealert@company.xy\n\n+someloss\ntype = loss\n# in percent\npattern = >0%,*12*,>0%,*12*,>0%\ncomment = loss 3 times  in a row;\n"},"loc":["services","smokeping","alertConfig"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.cgiUrl":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"http://nixos:8081/smokeping.cgi","description":"URL to the smokeping cgi.","example":"https://somewhere.example.com/smokeping.cgi","loc":["services","smokeping","cgiUrl"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.config":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":null,"description":"Full smokeping config supplied by the user. Overrides and replaces any other configuration supplied.","loc":["services","smokeping","config"],"readOnly":false,"type":"null or Concatenated string"},"services.smokeping.databaseConfig":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"step     = 300\npings    = 20\n# consfn mrhb steps total\nAVERAGE  0.5   1  1008\nAVERAGE  0.5  12  4320\n    MIN  0.5  12  4320\n    MAX  0.5  12  4320\nAVERAGE  0.5 144   720\n    MAX  0.5 144   720\n    MIN  0.5 144   720\n\n","description":"Configure the ping frequency and retention of the rrd files.\n          Once set, changing the interval will require deletion or migration of all\n          the collected data.","example":{"_type":"literalExample","text":"          # near constant pings.\n\t\t\t\t\tstep     = 30\n\t\t\t\t\tpings    = 20\n\t\t\t\t\t# consfn mrhb steps total\n\t\t\t\t\tAVERAGE  0.5   1  10080\n\t\t\t\t\tAVERAGE  0.5  12  43200\n\t\t\t\t\t\t\tMIN  0.5  12  43200\n\t\t\t\t\t\t\tMAX  0.5  12  43200\n\t\t\t\t\tAVERAGE  0.5 144   7200\n\t\t\t\t\t\t\tMAX  0.5 144   7200\n\t\t\t\t\t\t\tMIN  0.5 144   7200\n\t\t\t\t"},"loc":["services","smokeping","databaseConfig"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.enable":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":false,"description":"Enable the smokeping service","loc":["services","smokeping","enable"],"readOnly":false,"type":"boolean"},"services.smokeping.extraConfig":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"","description":"Any additional customization not already included.","loc":["services","smokeping","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.smokeping.hostName":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"nixos","description":"DNS name for the urls generated in the cgi.","example":"somewhere.example.com","loc":["services","smokeping","hostName"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.imgUrl":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"http://nixos:8081/cache","description":"Base url for images generated in the cgi.","example":"https://somewhere.example.com/cache","loc":["services","smokeping","imgUrl"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.linkStyle":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"relative","description":"DNS name for the urls generated in the cgi.","example":"absolute","loc":["services","smokeping","linkStyle"],"readOnly":false,"type":"one of \"original\", \"absolute\", \"relative\""},"services.smokeping.mailHost":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"","description":"Use this SMTP server to send alerts","example":"localhost","loc":["services","smokeping","mailHost"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.owner":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"nobody","description":"Real name of the owner of the instance","example":"Joe Admin","loc":["services","smokeping","owner"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.ownerEmail":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"no-reply@nixos","description":"Email contact for owner","example":"no-reply@yourdomain.com","loc":["services","smokeping","ownerEmail"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.package":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"pkgs.smokeping","description":"Specify a custom smokeping package","loc":["services","smokeping","package"],"readOnly":false,"type":"package"},"services.smokeping.port":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":8081,"description":"TCP port to use for the web server.","example":8081,"loc":["services","smokeping","port"],"readOnly":false,"type":"signed integer"},"services.smokeping.presentationConfig":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"+ charts\nmenu = Charts\ntitle = The most interesting destinations\n++ stddev\nsorter = StdDev(entries=>4)\ntitle = Top Standard Deviation\nmenu = Std Deviation\nformat = Standard Deviation %f\n++ max\nsorter = Max(entries=>5)\ntitle = Top Max Roundtrip Time\nmenu = by Max\nformat = Max Roundtrip Time %f seconds\n++ loss\nsorter = Loss(entries=>5)\ntitle = Top Packet Loss\nmenu = Loss\nformat = Packets Lost %f\n++ median\nsorter = Median(entries=>5)\ntitle = Top Median Roundtrip Time\nmenu = by Median\nformat = Median RTT %f seconds\n+ overview\nwidth = 600\nheight = 50\nrange = 10h\n+ detail\nwidth = 600\nheight = 200\nunison_tolerance = 2\n\"Last 3 Hours\"    3h\n\"Last 30 Hours\"   30h\n\"Last 10 Days\"    10d\n\"Last 360 Days\"   360d\n","description":"presentation graph style","loc":["services","smokeping","presentationConfig"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.presentationTemplate":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"${pkgs.smokeping}/etc/basepage.html.dist","description":"Default page layout for the web UI.","loc":["services","smokeping","presentationTemplate"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.probeConfig":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"+ FPing\nbinary = /run/wrappers/bin/fping\n","description":"Probe configuration","loc":["services","smokeping","probeConfig"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.sendmail":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":null,"description":"Use this sendmail compatible script to deliver alerts","example":"/run/wrappers/bin/sendmail","loc":["services","smokeping","sendmail"],"readOnly":false,"type":"null or path"},"services.smokeping.smokeMailTemplate":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"${pkgs.smokeping}/etc/smokemail.dist","description":"Specify the smokemail template for alerts.","loc":["services","smokeping","smokeMailTemplate"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.targetConfig":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"\t\t\t\t\tprobe = FPing\n\t\t\t\t\tmenu = Top\n\t\t\t\t\ttitle = Network Latency Grapher\n\t\t\t\t\tremark = Welcome to the SmokePing website of xxx Company. \\\n\t\t\t\t\t\t\t\t\t Here you will learn all about the latency of our network.\n\t\t\t\t\t+ Local\n\t\t\t\t\tmenu = Local\n\t\t\t\t\ttitle = Local Network\n\t\t\t\t\t++ LocalMachine\n\t\t\t\t\tmenu = Local Machine\n\t\t\t\t\ttitle = This host\n\t\t\t\t\thost = localhost\n","description":"Target configuration","loc":["services","smokeping","targetConfig"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.user":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":"smokeping","description":"User that runs smokeping and (optionally) thttpd","loc":["services","smokeping","user"],"readOnly":false,"type":"Concatenated string"},"services.smokeping.webService":{"declarations":["nixos/modules/services/networking/smokeping.nix"],"default":true,"description":"Enable a smokeping web interface","loc":["services","smokeping","webService"],"readOnly":false,"type":"boolean"},"services.snapper.cleanupInterval":{"declarations":["nixos/modules/services/misc/snapper.nix"],"default":"1d","description":"Cleanup interval.\n\nThe format is described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","loc":["services","snapper","cleanupInterval"],"readOnly":false,"type":"string"},"services.snapper.configs":{"declarations":["nixos/modules/services/misc/snapper.nix"],"default":{},"description":"Subvolume configuration\n","example":{"_type":"literalExample","text":{"home":{"extraConfig":"ALLOW_USERS=\"alice\"\n","subvolume":"/home"}}},"loc":["services","snapper","configs"],"readOnly":false,"type":"attribute set of submodules"},"services.snapper.configs.<name>.extraConfig":{"declarations":["nixos/modules/services/misc/snapper.nix"],"default":"","description":"Additional configuration next to SUBVOLUME and FSTYPE.\nSee man:snapper-configs(5).\n","loc":["services","snapper","configs","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.snapper.configs.<name>.fstype":{"declarations":["nixos/modules/services/misc/snapper.nix"],"default":"btrfs","description":"Filesystem type. Only btrfs is stable and tested.\n","loc":["services","snapper","configs","<name>","fstype"],"readOnly":false,"type":"one of \"btrfs\""},"services.snapper.configs.<name>.subvolume":{"declarations":["nixos/modules/services/misc/snapper.nix"],"description":"Path of the subvolume or mount point.\nThis path is a subvolume and has to contain a subvolume named\n.snapshots.\nSee also man:snapper(8) section PERMISSIONS.\n","loc":["services","snapper","configs","<name>","subvolume"],"readOnly":false,"type":"path"},"services.snapper.filters":{"declarations":["nixos/modules/services/misc/snapper.nix"],"default":null,"description":"Global display difference filter. See man:snapper(8) for more details.\n","loc":["services","snapper","filters"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.snapper.snapshotInterval":{"declarations":["nixos/modules/services/misc/snapper.nix"],"default":"hourly","description":"Snapshot interval.\n\nThe format is described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","loc":["services","snapper","snapshotInterval"],"readOnly":false,"type":"string"},"services.sniproxy.config":{"declarations":["nixos/modules/services/networking/sniproxy.nix"],"default":"","description":"sniproxy.conf configuration excluding the daemon username and pid file.","example":{"_type":"literalExample","text":"  error_log {\n    filename /var/log/sniproxy/error.log\n  }\n  access_log {\n    filename /var/log/sniproxy/access.log\n  }\n  listen 443 {\n    proto tls\n  }\n  table {\n    example.com 192.0.2.10\n    example.net 192.0.2.20\n}\n"},"loc":["services","sniproxy","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.sniproxy.enable":{"declarations":["nixos/modules/services/networking/sniproxy.nix"],"default":false,"description":"Whether to enable sniproxy server.","example":true,"loc":["services","sniproxy","enable"],"readOnly":false,"type":"boolean"},"services.sniproxy.group":{"declarations":["nixos/modules/services/networking/sniproxy.nix"],"default":"sniproxy","description":"Group under which sniproxy runs.","loc":["services","sniproxy","group"],"readOnly":false,"type":"string"},"services.sniproxy.logDir":{"declarations":["nixos/modules/services/networking/sniproxy.nix"],"default":"/var/log/sniproxy/","description":"Location of the log directory for sniproxy.","loc":["services","sniproxy","logDir"],"readOnly":false,"type":"string"},"services.sniproxy.user":{"declarations":["nixos/modules/services/networking/sniproxy.nix"],"default":"sniproxy","description":"User account under which sniproxy runs.","loc":["services","sniproxy","user"],"readOnly":false,"type":"string"},"services.softether.dataDir":{"declarations":["nixos/modules/services/networking/softether.nix"],"default":"/var/lib/softether","description":"Data directory for SoftEther VPN.\n","loc":["services","softether","dataDir"],"readOnly":false,"type":"Concatenated string"},"services.softether.enable":{"declarations":["nixos/modules/services/networking/softether.nix"],"default":false,"description":"Whether to enable SoftEther VPN services.","example":true,"loc":["services","softether","enable"],"readOnly":false,"type":"boolean"},"services.softether.package":{"declarations":["nixos/modules/services/networking/softether.nix"],"default":"pkgs.softether","description":"softether derivation to use.\n","loc":["services","softether","package"],"readOnly":false,"type":"package"},"services.softether.vpnbridge.enable":{"declarations":["nixos/modules/services/networking/softether.nix"],"default":false,"description":"Whether to enable SoftEther VPN Bridge.","example":true,"loc":["services","softether","vpnbridge","enable"],"readOnly":false,"type":"boolean"},"services.softether.vpnclient.down":{"declarations":["nixos/modules/services/networking/softether.nix"],"default":"","description":"Shell commands executed when the Virtual Network Adapter(s) is/are shutting down.\n","loc":["services","softether","vpnclient","down"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.softether.vpnclient.enable":{"declarations":["nixos/modules/services/networking/softether.nix"],"default":false,"description":"Whether to enable SoftEther VPN Client.","example":true,"loc":["services","softether","vpnclient","enable"],"readOnly":false,"type":"boolean"},"services.softether.vpnclient.up":{"declarations":["nixos/modules/services/networking/softether.nix"],"default":"","description":"Shell commands executed when the Virtual Network Adapter(s) is/are starting.\n","loc":["services","softether","vpnclient","up"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.softether.vpnserver.enable":{"declarations":["nixos/modules/services/networking/softether.nix"],"default":false,"description":"Whether to enable SoftEther VPN Server.","example":true,"loc":["services","softether","vpnserver","enable"],"readOnly":false,"type":"boolean"},"services.solr.enable":{"declarations":["nixos/modules/services/search/solr.nix"],"default":false,"description":"Enables the solr service.\n","loc":["services","solr","enable"],"readOnly":false,"type":"boolean"},"services.solr.extraJars":{"declarations":["nixos/modules/services/search/solr.nix"],"default":[],"description":"List of paths pointing to jars. Jars are copied to commonLibFolder to be available to java/solr.\n","loc":["services","solr","extraJars"],"readOnly":false,"type":"list of paths"},"services.solr.extraJavaOptions":{"declarations":["nixos/modules/services/search/solr.nix"],"default":[],"description":"Extra command line options given to the java process running\nsolr.\n","loc":["services","solr","extraJavaOptions"],"readOnly":false,"type":"list of strings"},"services.solr.extraWinstoneOptions":{"declarations":["nixos/modules/services/search/solr.nix"],"default":[],"description":"Extra command line options given to the Winstone, which is\nthe servlet container hosting solr.\n","loc":["services","solr","extraWinstoneOptions"],"readOnly":false,"type":"list of strings"},"services.solr.group":{"declarations":["nixos/modules/services/search/solr.nix"],"description":"The group that will own the working directory.\n","loc":["services","solr","group"],"readOnly":false,"type":"string"},"services.solr.javaPackage":{"declarations":["nixos/modules/services/search/solr.nix"],"default":"pkgs.jre","description":"Which Java derivation to use for running solr.\n","loc":["services","solr","javaPackage"],"readOnly":false,"type":"package"},"services.solr.log4jConfiguration":{"declarations":["nixos/modules/services/search/solr.nix"],"default":"log4j.rootLogger=INFO, stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target=System.out\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\n","description":"Contents of the <literal>log4j.properties</literal> used. By default,\neverything is logged to stdout (picked up by systemd) with level INFO.\n","loc":["services","solr","log4jConfiguration"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.solr.solrHome":{"declarations":["nixos/modules/services/search/solr.nix"],"description":"The solr home directory. It is your own responsibility to\nmake sure this directory contains a working solr configuration,\nand is writeable by the the user running the solr service.\nFailing to do so, the solr will not start properly.\n","loc":["services","solr","solrHome"],"readOnly":false,"type":"string"},"services.solr.solrPackage":{"declarations":["nixos/modules/services/search/solr.nix"],"default":"pkgs.solr","description":"Which solr derivation to use for running solr.\n","loc":["services","solr","solrPackage"],"readOnly":false,"type":"package"},"services.solr.user":{"declarations":["nixos/modules/services/search/solr.nix"],"description":"The user that should run the solr process and.\nthe working directories.\n","loc":["services","solr","user"],"readOnly":false,"type":"string"},"services.sonarr.enable":{"declarations":["nixos/modules/services/misc/sonarr.nix"],"default":false,"description":"Whether to enable Sonarr.","example":true,"loc":["services","sonarr","enable"],"readOnly":false,"type":"boolean"},"services.spamassassin.config":{"declarations":["nixos/modules/services/mail/spamassassin.nix"],"default":"","description":"The SpamAssassin local.cf config\n\nIf you are using this configuration:\n  add_header all Status _YESNO_, score=_SCORE_ required=_REQD_ tests=_TESTS_ autolearn=_AUTOLEARN_ version=_VERSION_\n\nThen you can Use this sieve filter:\n  require [\"fileinto\", \"reject\", \"envelope\"];\n\n  if header :contains \"X-Spam-Flag\" \"YES\" {\n    fileinto \"spam\";\n  }\n\nOr this procmail filter:\n  :0:\n  * ^X-Spam-Flag: YES\n  /var/vpopmail/domains/lastlog.de/js/.maildir/.spam/new\n\nTo filter your messages based on the additional mail headers added by spamassassin.\n","example":"#rewrite_header Subject [***** SPAM _SCORE_ *****]\nrequired_score          5.0\nuse_bayes               1\nbayes_auto_learn        1\nadd_header all Status _YESNO_, score=_SCORE_ required=_REQD_ tests=_TESTS_ autolearn=_AUTOLEARN_ version=_VERSION_\n","loc":["services","spamassassin","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.spamassassin.debug":{"declarations":["nixos/modules/services/mail/spamassassin.nix"],"default":false,"description":"Whether to run the SpamAssassin daemon in debug mode","loc":["services","spamassassin","debug"],"readOnly":false,"type":"unspecified"},"services.spamassassin.enable":{"declarations":["nixos/modules/services/mail/spamassassin.nix"],"default":false,"description":"Whether to run the SpamAssassin daemon","loc":["services","spamassassin","enable"],"readOnly":false,"type":"unspecified"},"services.spamassassin.initPreConf":{"declarations":["nixos/modules/services/mail/spamassassin.nix"],"default":"#\n# to update this list, run this command in the rules directory:\n# grep 'loadplugin.*Mail::SpamAssassin::Plugin::.*' -o -h * | sort | uniq\n#\n\n#loadplugin Mail::SpamAssassin::Plugin::AccessDB\n#loadplugin Mail::SpamAssassin::Plugin::AntiVirus\nloadplugin Mail::SpamAssassin::Plugin::AskDNS\n# loadplugin Mail::SpamAssassin::Plugin::ASN\nloadplugin Mail::SpamAssassin::Plugin::AutoLearnThreshold\n#loadplugin Mail::SpamAssassin::Plugin::AWL\nloadplugin Mail::SpamAssassin::Plugin::Bayes\nloadplugin Mail::SpamAssassin::Plugin::BodyEval\nloadplugin Mail::SpamAssassin::Plugin::Check\n#loadplugin Mail::SpamAssassin::Plugin::DCC\nloadplugin Mail::SpamAssassin::Plugin::DKIM\nloadplugin Mail::SpamAssassin::Plugin::DNSEval\nloadplugin Mail::SpamAssassin::Plugin::FreeMail\nloadplugin Mail::SpamAssassin::Plugin::Hashcash\nloadplugin Mail::SpamAssassin::Plugin::HeaderEval\nloadplugin Mail::SpamAssassin::Plugin::HTMLEval\nloadplugin Mail::SpamAssassin::Plugin::HTTPSMismatch\nloadplugin Mail::SpamAssassin::Plugin::ImageInfo\nloadplugin Mail::SpamAssassin::Plugin::MIMEEval\nloadplugin Mail::SpamAssassin::Plugin::MIMEHeader\n# loadplugin Mail::SpamAssassin::Plugin::PDFInfo\n#loadplugin Mail::SpamAssassin::Plugin::PhishTag\nloadplugin Mail::SpamAssassin::Plugin::Pyzor\nloadplugin Mail::SpamAssassin::Plugin::Razor2\n# loadplugin Mail::SpamAssassin::Plugin::RelayCountry\nloadplugin Mail::SpamAssassin::Plugin::RelayEval\nloadplugin Mail::SpamAssassin::Plugin::ReplaceTags\n# loadplugin Mail::SpamAssassin::Plugin::Rule2XSBody\n# loadplugin Mail::SpamAssassin::Plugin::Shortcircuit\nloadplugin Mail::SpamAssassin::Plugin::SpamCop\nloadplugin Mail::SpamAssassin::Plugin::SPF\n#loadplugin Mail::SpamAssassin::Plugin::TextCat\n# loadplugin Mail::SpamAssassin::Plugin::TxRep\nloadplugin Mail::SpamAssassin::Plugin::URIDetail\nloadplugin Mail::SpamAssassin::Plugin::URIDNSBL\nloadplugin Mail::SpamAssassin::Plugin::URIEval\n# loadplugin Mail::SpamAssassin::Plugin::URILocalBL\nloadplugin Mail::SpamAssassin::Plugin::VBounce\nloadplugin Mail::SpamAssassin::Plugin::WhiteListSubject\nloadplugin Mail::SpamAssassin::Plugin::WLBLEval\n","description":"The SpamAssassin init.pre config.","loc":["services","spamassassin","initPreConf"],"readOnly":false,"type":"string"},"services.spice-vdagentd.enable":{"declarations":["nixos/modules/services/misc/spice-vdagentd.nix"],"default":false,"description":"Whether to enable Spice guest vdagent daemon.","example":true,"loc":["services","spice-vdagentd","enable"],"readOnly":false,"type":"boolean"},"services.spiped.config":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":{},"description":"Configuration for a secure pipe daemon. The daemon can be\nstarted, stopped, or examined using\n<literal>systemctl</literal>, under the name\n<literal>spiped@foo</literal>.\n","example":{"_type":"literalExample","text":"{\n  pipe1 =\n    { keyfile = \"/var/lib/spiped/pipe1.key\";\n      encrypt = true;\n      source  = \"localhost:6000\";\n      target  = \"endpoint.example.com:7000\";\n    };\n  pipe2 =\n    { keyfile = \"/var/lib/spiped/pipe2.key\";\n      decrypt = true;\n      source  = \"0.0.0.0:7000\";\n      target  = \"localhost:3000\";\n    };\n}\n"},"loc":["services","spiped","config"],"readOnly":false,"type":"attribute set of submodules"},"services.spiped.config.<name>.decrypt":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":false,"description":"Take encrypted connections from the\n<literal>source</literal> socket and send unencrypted\nconnections to the <literal>target</literal> socket.\n","loc":["services","spiped","config","<name>","decrypt"],"readOnly":false,"type":"boolean"},"services.spiped.config.<name>.disableKeepalives":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":false,"description":"Disable transport layer keep-alives.","loc":["services","spiped","config","<name>","disableKeepalives"],"readOnly":false,"type":"boolean"},"services.spiped.config.<name>.disableReresolution":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":false,"description":"Disable target address re-resolution.","loc":["services","spiped","config","<name>","disableReresolution"],"readOnly":false,"type":"boolean"},"services.spiped.config.<name>.encrypt":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":false,"description":"Take unencrypted connections from the\n<literal>source</literal> socket and send encrypted\nconnections to the <literal>target</literal> socket.\n","loc":["services","spiped","config","<name>","encrypt"],"readOnly":false,"type":"boolean"},"services.spiped.config.<name>.keyfile":{"declarations":["nixos/modules/services/networking/spiped.nix"],"description":"Name of a file containing the spiped key. As the\ndaemon runs as the <literal>spiped</literal> user, the\nkey file must be somewhere owned by that user. By\ndefault, we recommend putting the keys for any spipe\nservices in <literal>/var/lib/spiped</literal>.\n","loc":["services","spiped","config","<name>","keyfile"],"readOnly":false,"type":"path"},"services.spiped.config.<name>.maxConns":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":100,"description":"Limit on the number of simultaneous connections allowed.\n","loc":["services","spiped","config","<name>","maxConns"],"readOnly":false,"type":"signed integer"},"services.spiped.config.<name>.resolveRefresh":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":60,"description":"Resolution refresh time for the target socket, in seconds.\n","loc":["services","spiped","config","<name>","resolveRefresh"],"readOnly":false,"type":"signed integer"},"services.spiped.config.<name>.source":{"declarations":["nixos/modules/services/networking/spiped.nix"],"description":"Address on which spiped should listen for incoming\nconnections.  Must be in one of the following formats:\n<literal>/absolute/path/to/unix/socket</literal>,\n<literal>host.name:port</literal>,\n<literal>[ip.v4.ad.dr]:port</literal> or\n<literal>[ipv6::addr]:port</literal> - note that\nhostnames are resolved when spiped is launched and are\nnot re-resolved later; thus if DNS entries change\nspiped will continue to connect to the expired\naddress.\n","loc":["services","spiped","config","<name>","source"],"readOnly":false,"type":"string"},"services.spiped.config.<name>.target":{"declarations":["nixos/modules/services/networking/spiped.nix"],"description":"Address to which spiped should connect.","loc":["services","spiped","config","<name>","target"],"readOnly":false,"type":"string"},"services.spiped.config.<name>.timeout":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":5,"description":"Timeout, in seconds, after which an attempt to connect to\nthe target or a protocol handshake will be aborted (and the\nconnection dropped) if not completed\n","loc":["services","spiped","config","<name>","timeout"],"readOnly":false,"type":"signed integer"},"services.spiped.config.<name>.waitForDNS":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":false,"description":"Wait for DNS. Normally when <literal>spiped</literal> is\nlaunched it resolves addresses and binds to its source\nsocket before the parent process returns; with this option\nit will daemonize first and retry failed DNS lookups until\nthey succeed. This allows <literal>spiped</literal> to\nlaunch even if DNS isn't set up yet, but at the expense of\nlosing the guarantee that once <literal>spiped</literal> has\nfinished launching it will be ready to create pipes.\n","loc":["services","spiped","config","<name>","waitForDNS"],"readOnly":false,"type":"boolean"},"services.spiped.config.<name>.weakHandshake":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":false,"description":"Use fast/weak handshaking: This reduces the CPU time spent\nin the initial connection setup, at the expense of losing\nperfect forward secrecy.\n","loc":["services","spiped","config","<name>","weakHandshake"],"readOnly":false,"type":"boolean"},"services.spiped.enable":{"declarations":["nixos/modules/services/networking/spiped.nix"],"default":false,"description":"Enable the spiped service module.","loc":["services","spiped","enable"],"readOnly":false,"type":"boolean"},"services.squeezelite.dataDir":{"declarations":["nixos/modules/services/audio/squeezelite.nix"],"default":"/var/lib/squeezelite","description":"The directory where Squeezelite stores its name file.\n","loc":["services","squeezelite","dataDir"],"readOnly":false,"type":"string"},"services.squeezelite.enable":{"declarations":["nixos/modules/services/audio/squeezelite.nix"],"default":false,"description":"Whether to enable Squeezelite, a software Squeezebox emulator.","example":true,"loc":["services","squeezelite","enable"],"readOnly":false,"type":"boolean"},"services.squeezelite.extraArguments":{"declarations":["nixos/modules/services/audio/squeezelite.nix"],"default":"","description":"Additional command line arguments to pass to Squeezelite.\n","loc":["services","squeezelite","extraArguments"],"readOnly":false,"type":"string"},"services.squid.configText":{"declarations":["nixos/modules/services/networking/squid.nix"],"default":null,"description":"Verbatim contents of squid.conf. If null (default), use the\nautogenerated file from NixOS instead.\n","loc":["services","squid","configText"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.squid.enable":{"declarations":["nixos/modules/services/networking/squid.nix"],"default":false,"description":"Whether to run squid web proxy.","loc":["services","squid","enable"],"readOnly":false,"type":"boolean"},"services.squid.extraConfig":{"declarations":["nixos/modules/services/networking/squid.nix"],"default":"","description":"Squid configuration. Contents will be added\nverbatim to the configuration file.\n","loc":["services","squid","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.squid.proxyPort":{"declarations":["nixos/modules/services/networking/squid.nix"],"default":3128,"description":"TCP port on which squid will listen.","loc":["services","squid","proxyPort"],"readOnly":false,"type":"signed integer"},"services.sshd.enable":{"declarations":["nixos/modules/rename.nix"],"description":"Alias of <option>services.openssh.enable</option>.","loc":["services","sshd","enable"],"readOnly":false,"type":"unspecified"},"services.sshguard.attack_threshold":{"declarations":["nixos/modules/services/security/sshguard.nix"],"default":30,"description":"Block attackers when their cumulative attack score exceeds threshold. Most attacks have a score of 10.\n","loc":["services","sshguard","attack_threshold"],"readOnly":false,"type":"signed integer"},"services.sshguard.blacklist_file":{"declarations":["nixos/modules/services/security/sshguard.nix"],"default":"/var/lib/sshguard/blacklist.db","description":"Blacklist an attacker when its score exceeds threshold. Blacklisted addresses are loaded from and added to blacklist-file.\n","loc":["services","sshguard","blacklist_file"],"readOnly":false,"type":"path"},"services.sshguard.blacklist_threshold":{"declarations":["nixos/modules/services/security/sshguard.nix"],"default":null,"description":"Blacklist an attacker when its score exceeds threshold. Blacklisted addresses are loaded from and added to blacklist-file.\n","example":120,"loc":["services","sshguard","blacklist_threshold"],"readOnly":false,"type":"null or signed integer"},"services.sshguard.blocktime":{"declarations":["nixos/modules/services/security/sshguard.nix"],"default":120,"description":"Block attackers for initially blocktime seconds after exceeding threshold. Subsequent blocks increase by a factor of 1.5.\n\nsshguard unblocks attacks at random intervals, so actual block times will be longer.\n","loc":["services","sshguard","blocktime"],"readOnly":false,"type":"signed integer"},"services.sshguard.detection_time":{"declarations":["nixos/modules/services/security/sshguard.nix"],"default":1800,"description":"Remember potential attackers for up to detection_time seconds before resetting their score.\n","loc":["services","sshguard","detection_time"],"readOnly":false,"type":"signed integer"},"services.sshguard.enable":{"declarations":["nixos/modules/services/security/sshguard.nix"],"default":false,"description":"Whether to enable the sshguard service.","loc":["services","sshguard","enable"],"readOnly":false,"type":"boolean"},"services.sshguard.services":{"declarations":["nixos/modules/services/security/sshguard.nix"],"default":["sshd"],"description":"Systemd services sshguard should receive logs of.\n","example":["sshd","exim"],"loc":["services","sshguard","services"],"readOnly":false,"type":"list of strings"},"services.sshguard.whitelist":{"declarations":["nixos/modules/services/security/sshguard.nix"],"default":[],"description":"Whitelist a list of addresses, hostnames, or address blocks.\n","example":["198.51.100.56","198.51.100.2"],"loc":["services","sshguard","whitelist"],"readOnly":false,"type":"list of strings"},"services.sslh.appendConfig":{"declarations":["nixos/modules/services/networking/sslh.nix"],"default":"protocols:\n(\n  { name: \"ssh\"; service: \"ssh\"; host: \"localhost\"; port: \"22\"; probe: \"builtin\"; },\n  { name: \"openvpn\"; host: \"localhost\"; port: \"1194\"; probe: \"builtin\"; },\n  { name: \"xmpp\"; host: \"localhost\"; port: \"5222\"; probe: \"builtin\"; },\n  { name: \"http\"; host: \"localhost\"; port: \"80\"; probe: \"builtin\"; },\n  { name: \"ssl\"; host: \"localhost\"; port: \"443\"; probe: \"builtin\"; },\n  { name: \"anyprot\"; host: \"localhost\"; port: \"443\"; probe: \"builtin\"; }\n);\n","description":"Verbatim configuration file.","loc":["services","sslh","appendConfig"],"readOnly":false,"type":"string"},"services.sslh.enable":{"declarations":["nixos/modules/services/networking/sslh.nix"],"default":false,"description":"Whether to enable sslh.","example":true,"loc":["services","sslh","enable"],"readOnly":false,"type":"boolean"},"services.sslh.listenAddress":{"declarations":["nixos/modules/services/networking/sslh.nix"],"default":"0.0.0.0","description":"Listening address or hostname.","loc":["services","sslh","listenAddress"],"readOnly":false,"type":"string"},"services.sslh.port":{"declarations":["nixos/modules/services/networking/sslh.nix"],"default":443,"description":"Listening port.","loc":["services","sslh","port"],"readOnly":false,"type":"signed integer"},"services.sslh.timeout":{"declarations":["nixos/modules/services/networking/sslh.nix"],"default":2,"description":"Timeout in seconds.","loc":["services","sslh","timeout"],"readOnly":false,"type":"signed integer"},"services.sslh.transparent":{"declarations":["nixos/modules/services/networking/sslh.nix"],"default":false,"description":"Will the services behind sslh (Apache, sshd and so on) see the external IP and ports as if the external world connected directly to them","loc":["services","sslh","transparent"],"readOnly":false,"type":"boolean"},"services.sslh.verbose":{"declarations":["nixos/modules/services/networking/sslh.nix"],"default":false,"description":"Verbose logs.","loc":["services","sslh","verbose"],"readOnly":false,"type":"boolean"},"services.ssm-agent.enable":{"declarations":["nixos/modules/services/misc/ssm-agent.nix"],"default":false,"description":"Whether to enable AWS SSM agent.","example":true,"loc":["services","ssm-agent","enable"],"readOnly":false,"type":"boolean"},"services.ssm-agent.package":{"declarations":["nixos/modules/services/misc/ssm-agent.nix"],"default":"pkgs.ssm-agent","description":"The SSM agent package to use","loc":["services","ssm-agent","package"],"readOnly":false,"type":"path"},"services.sssd.config":{"declarations":["nixos/modules/services/misc/sssd.nix"],"default":"[sssd]\nconfig_file_version = 2\nservices = nss, pam\ndomains = shadowutils\n\n[nss]\n\n[pam]\n\n[domain/shadowutils]\nid_provider = proxy\nproxy_lib_name = files\nauth_provider = proxy\nproxy_pam_target = sssd-shadowutils\nproxy_fast_alias = True\n","description":"Contents of <filename>sssd.conf</filename>.","loc":["services","sssd","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.sssd.enable":{"declarations":["nixos/modules/services/misc/sssd.nix"],"default":false,"description":"Whether to enable the System Security Services Daemon..","example":true,"loc":["services","sssd","enable"],"readOnly":false,"type":"boolean"},"services.sssd.sshAuthorizedKeysIntegration":{"declarations":["nixos/modules/services/misc/sssd.nix"],"default":false,"description":"Whether to make sshd look up authorized keys from SSS.\nFor this to work, the <literal>ssh</literal> SSS service must be enabled in the sssd configuration.\n","loc":["services","sssd","sshAuthorizedKeysIntegration"],"readOnly":false,"type":"boolean"},"services.stanchion.adminKey":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"","description":"Name of admin user.\n","loc":["services","stanchion","adminKey"],"readOnly":false,"type":"string"},"services.stanchion.adminSecret":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"","description":"Name of admin secret\n","loc":["services","stanchion","adminSecret"],"readOnly":false,"type":"string"},"services.stanchion.dataDir":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"/var/db/stanchion","description":"Data directory for Stanchion.\n","loc":["services","stanchion","dataDir"],"readOnly":false,"type":"path"},"services.stanchion.distributedCookie":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"riak","description":"Cookie for distributed node communication.  All nodes in the\nsame cluster should use the same cookie or they will not be able to\ncommunicate.\n","loc":["services","stanchion","distributedCookie"],"readOnly":false,"type":"string"},"services.stanchion.enable":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":false,"description":"Whether to enable stanchion.","example":true,"loc":["services","stanchion","enable"],"readOnly":false,"type":"boolean"},"services.stanchion.extraConfig":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"","description":"Additional text to be appended to <filename>stanchion.conf</filename>.\n","loc":["services","stanchion","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.stanchion.listener":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"127.0.0.1:8085","description":"Name of Riak CS listening service.\n","loc":["services","stanchion","listener"],"readOnly":false,"type":"string"},"services.stanchion.logDir":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"/var/log/stanchion","description":"Log directory for Stanchino.\n","loc":["services","stanchion","logDir"],"readOnly":false,"type":"path"},"services.stanchion.nodeName":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"stanchion@127.0.0.1","description":"Name of the Erlang node.\n","loc":["services","stanchion","nodeName"],"readOnly":false,"type":"string"},"services.stanchion.package":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"pkgs.stanchion","description":"Stanchion package to use.\n","example":{"_type":"literalExample","text":"pkgs.stanchion"},"loc":["services","stanchion","package"],"readOnly":false,"type":"package"},"services.stanchion.riakHost":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"127.0.0.1:8087","description":"Name of riak hosting service.\n","loc":["services","stanchion","riakHost"],"readOnly":false,"type":"string"},"services.stanchion.stanchionHost":{"declarations":["nixos/modules/services/databases/stanchion.nix"],"default":"127.0.0.1:8085","description":"Name of stanchion hosting service.\n","loc":["services","stanchion","stanchionHost"],"readOnly":false,"type":"string"},"services.statsd.backends":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":[],"description":"List of backends statsd will use for data persistence","example":["graphite","console","repeater","statsd-librato-backend","stackdriver-statsd-backend","statsd-influxdb-backend"],"loc":["services","statsd","backends"],"readOnly":false,"type":"list of strings"},"services.statsd.enable":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":false,"description":"Whether to enable statsd.","example":true,"loc":["services","statsd","enable"],"readOnly":false,"type":"boolean"},"services.statsd.extraConfig":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":"","description":"Extra configuration options for statsd","loc":["services","statsd","extraConfig"],"readOnly":false,"type":"null or string"},"services.statsd.graphiteHost":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":null,"description":"Hostname or IP of Graphite server","loc":["services","statsd","graphiteHost"],"readOnly":false,"type":"null or string"},"services.statsd.graphitePort":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":null,"description":"Port of Graphite server (i.e. carbon-cache).","loc":["services","statsd","graphitePort"],"readOnly":false,"type":"null or signed integer"},"services.statsd.listenAddress":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":"127.0.0.1","description":"Address that statsd listens on over UDP","loc":["services","statsd","listenAddress"],"readOnly":false,"type":"string"},"services.statsd.mgmt_address":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":"127.0.0.1","description":"Address to run management TCP interface on","loc":["services","statsd","mgmt_address"],"readOnly":false,"type":"string"},"services.statsd.mgmt_port":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":8126,"description":"Port to run the management TCP interface on","loc":["services","statsd","mgmt_port"],"readOnly":false,"type":"signed integer"},"services.statsd.port":{"declarations":["nixos/modules/services/monitoring/statsd.nix"],"default":8125,"description":"Port that stats listens for messages on over UDP","loc":["services","statsd","port"],"readOnly":false,"type":"signed integer"},"services.strongswan-swanctl.enable":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":false,"description":"Whether to enable strongswan-swanctl service.","example":true,"loc":["services","strongswan-swanctl","enable"],"readOnly":false,"type":"boolean"},"services.strongswan-swanctl.package":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":"pkgs.strongswan","description":"The strongswan derivation to use.\n","loc":["services","strongswan-swanctl","package"],"readOnly":false,"type":"package"},"services.strongswan-swanctl.strongswan.extraConfig":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":"","description":"Contents of the <literal>strongswan.conf</literal> file.\n","loc":["services","strongswan-swanctl","strongswan","extraConfig"],"readOnly":false,"type":"string"},"services.strongswan-swanctl.swanctl.authorities":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Section defining complementary attributes of certification authorities, each\nin its own subsection with an arbitrary yet unique name\n","loc":["services","strongswan-swanctl","swanctl","authorities"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.authorities.<name>.cacert":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"The certificates may use a relative path from the swanctl\n<literal>x509ca</literal> directory or an absolute path.\n</para><para>\nConfigure one of <option>cacert</option>,\n<option>file</option>, or\n<option>handle</option> per section.\n","loc":["services","strongswan-swanctl","swanctl","authorities","<name>","cacert"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.authorities.<name>.cert_uri_base":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Defines the base URI for the Hash and URL feature supported by\nIKEv2. Instead of exchanging complete certificates, IKEv2 allows one to\nsend an URI that resolves to the DER encoded certificate. The certificate\nURIs are built by appending the SHA1 hash of the DER encoded certificates\nto this base URI.\n","loc":["services","strongswan-swanctl","swanctl","authorities","<name>","cert_uri_base"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.authorities.<name>.crl_uris":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of CRL distribution points (ldap, http, or file URI).\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","authorities","<name>","crl_uris"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.authorities.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Absolute path to the certificate to load. Passed as-is to the daemon, so\nit must be readable by it.\n</para><para>\nConfigure either this or <option>handle</option>, but not both, in one section.\n","loc":["services","strongswan-swanctl","swanctl","authorities","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.authorities.<name>.handle":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Hex-encoded CKA_ID or handle of the certificate on a token or TPM,\nrespectively.\n</para><para>\nConfigure either this or <option>file</option>, but not both, in one section.\n","loc":["services","strongswan-swanctl","swanctl","authorities","<name>","handle"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.authorities.<name>.module":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional PKCS#11 module name.\n","loc":["services","strongswan-swanctl","swanctl","authorities","<name>","module"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.authorities.<name>.ocsp_uris":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of OCSP URIs.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","authorities","<name>","ocsp_uris"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.authorities.<name>.slot":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional slot number of the token that stores the certificate.\n","loc":["services","strongswan-swanctl","swanctl","authorities","<name>","slot"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Section defining IKE connection configurations, each in its own subsection\nwith an arbitrary yet unique name\n","loc":["services","strongswan-swanctl","swanctl","connections"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.connections.<name>.aggressive":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Enables Aggressive Mode instead of Main Mode with Identity\nProtection. Aggressive Mode is considered less secure, because the ID and\nHASH payloads are exchanged unprotected. This allows a passive attacker to\nsnoop peer identities, and even worse, start dictionary attacks on the\nPreshared Key.\n</para><para>\nStrongSwan default: <literal><![CDATA[false]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","aggressive"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.children":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"CHILD_SA configuration sub-section. Each connection definition may have\none or more sections in its <option>children</option> subsection. The\nsection name defines the name of the CHILD_SA configuration, which must be\nunique within the connection (denoted &#60;child&#62; below).\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.ah_proposals":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"AH proposals to offer for the CHILD_SA. A proposal is a set of\nalgorithms. For AH, this includes an integrity algorithm and an optional\nDiffie-Hellman group. If a DH group is specified, CHILD_SA/Quick Mode\nrekeying and initial negotiation uses a separate Diffie-Hellman exchange\nusing the specified group (refer to esp_proposals for details).\n</para><para>\nIn IKEv2, multiple algorithms of the same kind can be specified in a\nsingle proposal, from which one gets selected. In IKEv1, only one\nalgorithm per kind is allowed per proposal, more algorithms get\nimplicitly stripped. Use multiple proposals to offer different algorithms\ncombinations in IKEv1.\n</para><para>\nAlgorithm keywords get separated using dashes. Multiple proposals may be\nspecified in a list. The special value <literal>default</literal> forms\na default proposal of supported algorithms considered safe, and is\nusually a good choice for interoperability. By default no AH proposals\nare included, instead ESP is proposed.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","ah_proposals"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.close_action":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Action to perform after a CHILD_SA gets closed by the peer.\n<itemizedlist>\n<listitem><para>\nThe default of <literal>none</literal> does not take any action,\n</para></listitem>\n<listitem><para>\n<literal>trap</literal> installs a trap policy for the CHILD_SA.\n</para></listitem>\n<listitem><para>\n<literal>start</literal> tries to re-create the CHILD_SA.\n</para></listitem>\n</itemizedlist>\n</para><para>\n<option>close_action</option> does not provide any guarantee that the\nCHILD_SA is kept alive. It acts on explicit close messages only, but not\non negotiation failures. Use trap policies to reliably re-create failed\nCHILD_SAs.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"none\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","close_action"],"readOnly":false,"type":"null or one of \"none\", \"trap\", \"start\""},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.dpd_action":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Action to perform for this CHILD_SA on DPD timeout. The default clear\ncloses the CHILD_SA and does not take further action. trap installs a\ntrap policy, which will catch matching traffic and tries to re-negotiate\nthe tunnel on-demand. restart immediately tries to re-negotiate the\nCHILD_SA under a fresh IKE_SA.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"clear\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","dpd_action"],"readOnly":false,"type":"null or one of \"clear\", \"trap\", \"restart\""},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.esp_proposals":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"ESP proposals to offer for the CHILD_SA. A proposal is a set of\nalgorithms. For ESP non-AEAD proposals, this includes an integrity\nalgorithm, an encryption algorithm, an optional Diffie-Hellman group and\nan optional Extended Sequence Number Mode indicator. For AEAD proposals,\na combined mode algorithm is used instead of the separate\nencryption/integrity algorithms.\n</para><para>\nIf a DH group is specified, CHILD_SA/Quick Mode rekeying and initial\nnegotiation use a separate Diffie-Hellman exchange using the specified\ngroup. However, for IKEv2, the keys of the CHILD_SA created implicitly\nwith the IKE_SA will always be derived from the IKE_SA's key material. So\nany DH group specified here will only apply when the CHILD_SA is later\nrekeyed or is created with a separate CREATE_CHILD_SA exchange. A\nproposal mismatch might, therefore, not immediately be noticed when the\nSA is established, but may later cause rekeying to fail.\n</para><para>\nExtended Sequence Number support may be indicated with the\n<literal>esn</literal> and <literal>noesn</literal> values, both may be\nincluded to indicate support for both modes. If omitted,\n<literal>noesn</literal> is assumed.\n</para><para>\nIn IKEv2, multiple algorithms of the same kind can be specified in a\nsingle proposal, from which one gets selected. In IKEv1, only one\nalgorithm per kind is allowed per proposal, more algorithms get\nimplicitly stripped. Use multiple proposals to offer different algorithms\ncombinations in IKEv1.\n</para><para>\nAlgorithm keywords get separated using dashes. Multiple proposals may be\nspecified as a list. The special value <literal>default</literal> forms\na default proposal of supported algorithms considered safe, and is\nusually a good choice for interoperability. If no algorithms are\nspecified for AH nor ESP, the default set of algorithms for ESP is\nincluded.\n</para><para>\nStrongSwan default: <literal><![CDATA[[\"default\"]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","esp_proposals"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.hostaccess":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Hostaccess variable to pass to <literal>updown</literal> script.\n</para><para>\nStrongSwan default: <literal><![CDATA[true]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","hostaccess"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.hw_offload":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Enable hardware offload for this CHILD_SA, if supported by the IPsec\nimplementation. The value <literal>yes</literal> enforces offloading\nand the installation will fail if it's not supported by either kernel or\ndevice. The value <literal>auto</literal> enables offloading, if it's\nsupported, but the installation does not fail otherwise.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"no\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","hw_offload"],"readOnly":false,"type":"null or one of \"yes\", \"no\", \"auto\""},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.inactivity":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Timeout before closing CHILD_SA after inactivity. If no traffic has been\nprocessed in either direction for the configured timeout, the CHILD_SA\ngets closed due to inactivity. The default value of 0 disables inactivity\nchecks.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"0s\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","inactivity"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.interface":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional interface name to restrict outbound IPsec policies.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","interface"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.ipcomp":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Enable IPComp compression before encryption. If enabled, IKE tries to\nnegotiate IPComp compression to compress ESP payload data prior to\nencryption.\n</para><para>\nStrongSwan default: <literal><![CDATA[false]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","ipcomp"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.life_bytes":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Maximum bytes processed before CHILD_SA gets closed. Usually this hard\nvolume limit is never reached, because the CHILD_SA gets rekeyed\nbefore. If that fails for whatever reason, this limit closes the\nCHILD_SA.  The default is 10% more than <option>rekey_bytes</option>.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","life_bytes"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.life_packets":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Maximum number of packets processed before CHILD_SA gets closed. Usually\nthis hard packets limit is never reached, because the CHILD_SA gets\nrekeyed before. If that fails for whatever reason, this limit closes the\nCHILD_SA.\n</para><para>\nThe default is 10% more than <option>rekey_bytes</option>.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","life_packets"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.life_time":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Maximum lifetime before CHILD_SA gets closed. Usually this hard lifetime\nis never reached, because the CHILD_SA gets rekeyed before. If that fails\nfor whatever reason, this limit closes the CHILD_SA.  The default is 10%\nmore than the <option>rekey_time</option>.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","life_time"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.local_ts":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of local traffic selectors to include in CHILD_SA. Each selector is\na CIDR subnet definition, followed by an optional proto/port\nselector. The special value <literal>dynamic</literal> may be used\ninstead of a subnet definition, which gets replaced by the tunnel outer\naddress or the virtual IP, if negotiated. This is the default.\n</para><para>\nA protocol/port selector is surrounded by opening and closing square\nbrackets. Between these brackets, a numeric or getservent(3) protocol\nname may be specified. After the optional protocol restriction, an\noptional port restriction may be specified, separated by a slash. The\nport restriction may be numeric, a getservent(3) service name, or the\nspecial value <literal>opaque</literal> for RFC 4301 OPAQUE\nselectors. Port ranges may be specified as well, none of the kernel\nbackends currently support port ranges, though.\n</para><para>\nWhen IKEv1 is used only the first selector is interpreted, except if the\nCisco Unity extension plugin is used. This is due to a limitation of the\nIKEv1 protocol, which only allows a single pair of selectors per\nCHILD_SA. So to tunnel traffic matched by several pairs of selectors when\nusing IKEv1 several children (CHILD_SAs) have to be defined that cover\nthe selectors.  The IKE daemon uses traffic selector narrowing for IKEv1,\nthe same way it is standardized and implemented for IKEv2. However, this\nmay lead to problems with other implementations. To avoid that, configure\nidentical selectors in such scenarios.\n</para><para>\nStrongSwan default: <literal><![CDATA[[\"dynamic\"]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","local_ts"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.mark_in":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Netfilter mark and mask for input traffic. On Linux, Netfilter may\nrequire marks on each packet to match an SA/policy having that option\nset. This allows installing duplicate policies and enables Netfilter\nrules to select specific SAs/policies for incoming traffic. Note that\ninbound marks are only set on policies, by default, unless\n<option>mark_in_sa</option> is enabled. The special value\n<literal>%unique</literal> sets a unique mark on each CHILD_SA instance,\nbeyond that the value <literal>%unique-dir</literal> assigns a different\nunique mark for each\n</para><para>\nAn additional mask may be appended to the mark, separated by\n<literal>/</literal>. The default mask if omitted is\n<literal>0xffffffff</literal>.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"0/0x00000000\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","mark_in"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.mark_in_sa":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Whether to set <option>mark_in</option> on the inbound SA. By default,\nthe inbound mark is only set on the inbound policy. The tuple destination\naddress, protocol and SPI is unique and the mark is not required to find\nthe correct SA, allowing to mark traffic after decryption instead (where\nmore specific selectors may be used) to match different policies. Marking\npackets before decryption is still possible, even if no mark is set on\nthe SA.\n</para><para>\nStrongSwan default: <literal><![CDATA[false]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","mark_in_sa"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.mark_out":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Netfilter mark and mask for output traffic. On Linux, Netfilter may\nrequire marks on each packet to match a policy/SA having that option\nset. This allows installing duplicate policies and enables Netfilter\nrules to select specific policies/SAs for outgoing traffic. The special\nvalue <literal>%unique</literal> sets a unique mark on each CHILD_SA\ninstance, beyond that the value <literal>%unique-dir</literal> assigns a\ndifferent unique mark for each CHILD_SA direction (in/out).\n</para><para>\nAn additional mask may be appended to the mark, separated by\n<literal>/</literal>. The default mask if omitted is\n<literal>0xffffffff</literal>.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"0/0x00000000\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","mark_out"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.mode":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"IPsec Mode to establish CHILD_SA with.\n<itemizedlist>\n<listitem><para>\n<literal>tunnel</literal> negotiates the CHILD_SA in IPsec Tunnel Mode,\n</para></listitem>\n<listitem><para>\nwhereas <literal>transport</literal> uses IPsec Transport Mode.\n</para></listitem>\n<listitem><para>\n<literal>transport_proxy</literal> signifying the special Mobile IPv6\nTransport Proxy Mode.\n</para></listitem>\n<listitem><para>\n<literal>beet</literal> is the Bound End to End Tunnel mixture mode,\nworking with fixed inner addresses without the need to include them in\neach packet.\n</para></listitem>\n<listitem><para>\nBoth <literal>transport</literal> and <literal>beet</literal> modes are\nsubject to mode negotiation; <literal>tunnel</literal> mode is\nnegotiated if the preferred mode is not available.\n</para></listitem>\n<listitem><para>\n<literal>pass</literal> and <literal>drop</literal> are used to install\nshunt policies which explicitly bypass the defined traffic from IPsec\nprocessing or drop it, respectively.\n</para></listitem>\n</itemizedlist>\n</para><para>\nStrongSwan default: <literal><![CDATA[\"tunnel\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","mode"],"readOnly":false,"type":"null or one of \"tunnel\", \"transport\", \"transport_proxy\", \"beet\", \"pass\", \"drop\""},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.policies":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Whether to install IPsec policies or not. Disabling this can be useful in\nsome scenarios e.g. MIPv6, where policies are not managed by the IKE\ndaemon. Since 5.3.3.\n</para><para>\nStrongSwan default: <literal><![CDATA[true]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","policies"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.policies_fwd_out":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Whether to install outbound FWD IPsec policies or not. Enabling this is\nrequired in case there is a drop policy that would match and block\nforwarded traffic for this CHILD_SA. Since 5.5.1.\n</para><para>\nStrongSwan default: <literal><![CDATA[false]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","policies_fwd_out"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.priority":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional fixed priority for IPsec policies. This could be useful to\ninstall high-priority drop policies. The default of 0 uses dynamically\ncalculated priorities based on the size of the traffic selectors.\n</para><para>\nStrongSwan default: <literal><![CDATA[0]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","priority"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.rand_bytes":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Byte range from which to choose a random value to subtract from\n<option>rekey_bytes</option>. The default is the difference between\n<option>life_bytes</option> and <option>rekey_bytes</option>.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","rand_bytes"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.rand_packets":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Packet range from which to choose a random value to subtract from\n<option>rekey_packets</option>. The default is the difference between\n<option>life_packets</option> and <option>rekey_packets</option>.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","rand_packets"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.rand_time":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Time range from which to choose a random value to subtract from\n<option>rekey_time</option>. The default is the difference between\n<option>life_time</option> and <option>rekey_time</option>.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","rand_time"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.rekey_bytes":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Number of bytes processed before initiating CHILD_SA rekeying. CHILD_SA\nrekeying refreshes key material, optionally using a Diffie-Hellman\nexchange if a group is specified in the proposal.\n</para><para>\nTo avoid rekey collisions initiated by both ends simultaneously, a value\nin the range of <option>rand_bytes</option> gets subtracted to form the\neffective soft volume limit.\n</para><para>\nVolume based CHILD_SA rekeying is disabled by default.\n</para><para>\nStrongSwan default: <literal><![CDATA[0]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","rekey_bytes"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.rekey_packets":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Number of packets processed before initiating CHILD_SA rekeying. CHILD_SA\nrekeying refreshes key material, optionally using a Diffie-Hellman\nexchange if a group is specified in the proposal.\n</para><para>\nTo avoid rekey collisions initiated by both ends simultaneously, a value\nin the range of <option>rand_packets</option> gets subtracted to form\nthe effective soft packet count limit.\n</para><para>\nPacket count based CHILD_SA rekeying is disabled by default.\n</para><para>\nStrongSwan default: <literal><![CDATA[0]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","rekey_packets"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.rekey_time":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Time to schedule CHILD_SA rekeying. CHILD_SA rekeying refreshes key\nmaterial, optionally using a Diffie-Hellman exchange if a group is\nspecified in the proposal.  To avoid rekey collisions initiated by both\nends simultaneously, a value in the range of <option>rand_time</option>\ngets subtracted to form the effective soft lifetime.\n</para><para>\nBy default CHILD_SA rekeying is scheduled every hour, minus\n<option>rand_time</option>.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"1h\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","rekey_time"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.remote_ts":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of remote selectors to include in CHILD_SA. See\n<option>local_ts</option> for a description of the selector syntax.\n</para><para>\nStrongSwan default: <literal><![CDATA[[\"dynamic\"]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","remote_ts"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.replay_window":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"IPsec replay window to configure for this CHILD_SA. Larger values than\nthe default of <literal>32</literal> are supported using the Netlink\nbackend only, a value of <literal>0</literal> disables IPsec replay\nprotection.\n</para><para>\nStrongSwan default: <literal><![CDATA[32]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","replay_window"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.reqid":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Fixed reqid to use for this CHILD_SA. This might be helpful in some\nscenarios, but works only if each CHILD_SA configuration is instantiated\nnot more than once. The default of 0 uses dynamic reqids, allocated\nincrementally.\n</para><para>\nStrongSwan default: <literal><![CDATA[0]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","reqid"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.sha256_96":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"HMAC-SHA-256 is used with 128-bit truncation with IPsec. For\ncompatibility with implementations that incorrectly use 96-bit truncation\nthis option may be enabled to configure the shorter truncation length in\nthe kernel. This is not negotiated, so this only works with peers that\nuse the incorrect truncation length (or have this option enabled).\n</para><para>\nStrongSwan default: <literal><![CDATA[false]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","sha256_96"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.start_action":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Action to perform after loading the configuration.\n<itemizedlist>\n<listitem><para>\nThe default of <literal>none</literal> loads the connection only, which\nthen can be manually initiated or used as a responder configuration.\n</para></listitem>\n<listitem><para>\nThe value <literal>trap</literal> installs a trap policy, which triggers\nthe tunnel as soon as matching traffic has been detected.\n</para></listitem>\n<listitem><para>\nThe value <literal>start</literal> initiates the connection actively.\n</para></listitem>\n</itemizedlist>\nWhen unloading or replacing a CHILD_SA configuration having a\n<option>start_action</option> different from <literal>none</literal>,\nthe inverse action is performed. Configurations with\n<literal>start</literal> get closed, while such with\n<literal>trap</literal> get uninstalled.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"none\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","start_action"],"readOnly":false,"type":"null or one of \"none\", \"trap\", \"start\""},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.tfc_padding":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Pads ESP packets with additional data to have a consistent ESP packet\nsize for improved Traffic Flow Confidentiality. The padding defines the\nminimum size of all ESP packets sent.  The default value of\n<literal>0</literal> disables TFC padding, the special value\n<literal>mtu</literal> adds TFC padding to create a packet size equal to\nthe Path Maximum Transfer Unit.\n</para><para>\nStrongSwan default: <literal><![CDATA[0]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","tfc_padding"],"readOnly":false,"type":"null or signed integer or one of \"mtu\""},"services.strongswan-swanctl.swanctl.connections.<name>.children.<name>.updown":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Updown script to invoke on CHILD_SA up and down events.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","children","<name>","updown"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.dpd_delay":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Interval to check the liveness of a peer actively using IKEv2\nINFORMATIONAL exchanges or IKEv1 R_U_THERE messages. Active DPD checking\nis only enforced if no IKE or ESP/AH packet has been received for the\nconfigured DPD delay.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"0s\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","dpd_delay"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.dpd_timeout":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Charon by default uses the normal retransmission mechanism and timeouts to\ncheck the liveness of a peer, as all messages are used for liveness\nchecking. For compatibility reasons, with IKEv1 a custom interval may be\nspecified; this option has no effect on connections using IKEv2.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"0s\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","dpd_timeout"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.dscp":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Differentiated Services Field Codepoint to set on outgoing IKE packets for\nthis connection. The value is a six digit binary encoded string specifying\nthe Codepoint to set, as defined in RFC 2474.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"000000\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","dscp"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.encap":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"To enforce UDP encapsulation of ESP packets, the IKE daemon can fake the\nNAT detection payloads. This makes the peer believe that NAT takes place\non the path, forcing it to encapsulate ESP packets in UDP.\n</para><para>\nUsually this is not required, but it can help to work around connectivity\nissues with too restrictive intermediary firewalls.\n</para><para>\nStrongSwan default: <literal><![CDATA[false]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","encap"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.fragmentation":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Use IKE fragmentation (proprietary IKEv1 extension or RFC 7383 IKEv2\nfragmentation). Acceptable values are <literal>yes</literal> (the default\nsince 5.5.1), <literal>accept</literal> (since versions:5.5.3),\n<literal>force</literal> and <literal>no</literal>.\n<itemizedlist>\n<listitem><para>If set to <literal>yes</literal>, and the peer\nsupports it, oversized IKE messages will be sent in fragments.</para></listitem>\n<listitem><para>If set to\n<literal>accept</literal>, support for fragmentation is announced to the peer but the daemon\ndoes not send its own messages in fragments.</para></listitem>\n<listitem><para>If set to <literal>force</literal> (only\nsupported for IKEv1) the initial IKE message will already be fragmented if\nrequired.</para></listitem>\n<listitem><para>Finally, setting the option to <literal>no</literal> will disable announcing\nsupport for this feature.</para></listitem>\n</itemizedlist>\n</para><para>\nNote that fragmented IKE messages sent by a peer are always processed\nirrespective of the value of this option (even when set to no).\n</para><para>\nStrongSwan default: <literal><![CDATA[\"yes\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","fragmentation"],"readOnly":false,"type":"null or one of \"yes\", \"accept\", \"force\", \"no\""},"services.strongswan-swanctl.swanctl.connections.<name>.keyingtries":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Number of retransmission sequences to perform during initial\nconnect. Instead of giving up initiation after the first retransmission\nsequence with the default value of <literal>1</literal>, additional\nsequences may be started according to the configured value. A value of\n<literal>0</literal> initiates a new sequence until the connection\nestablishes or fails with a permanent error.\n</para><para>\nStrongSwan default: <literal><![CDATA[1]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","keyingtries"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.local":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Section for a local authentication round. A local authentication round\ndefines the rules how authentication is performed for the local\npeer. Multiple rounds may be defined to use IKEv2 RFC 4739 Multiple\nAuthentication or IKEv1 XAuth.\n</para><para>\nEach round is defined in a section having <literal>local</literal> as\nprefix, and an optional unique suffix. To define a single authentication\nround, the suffix may be omitted.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.aaa_id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Server side EAP-Identity to expect in the EAP method. Some EAP methods,\nsuch as EAP-TLS, use an identity for the server to perform mutual\nauthentication. This identity may differ from the IKE identity,\nespecially when EAP authentication is delegated from the IKE responder\nto an AAA backend.\n</para><para>\nFor EAP-(T)TLS, this defines the identity for which the server must\nprovide a certificate in the TLS exchange.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","aaa_id"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.auth":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Authentication to perform locally.\n<itemizedlist>\n<listitem><para>\nThe default <literal>pubkey</literal> uses public key authentication\nusing a private key associated to a usable certificate.\n</para></listitem>\n<listitem><para>\n<literal>psk</literal> uses pre-shared key authentication.\n</para></listitem>\n<listitem><para>\nThe IKEv1 specific <literal>xauth</literal> is used for XAuth or Hybrid\nauthentication,\n</para></listitem>\n<listitem><para>\nwhile the IKEv2 specific <literal>eap</literal> keyword defines EAP\nauthentication.\n</para></listitem>\n<listitem><para>\nFor <literal>xauth</literal>, a specific backend name may be appended,\nseparated by a dash. The appropriate <literal>xauth</literal> backend is\nselected to perform the XAuth exchange. For traditional XAuth, the\n<literal>xauth</literal> method is usually defined in the second\nauthentication round following an initial <literal>pubkey</literal> (or\n<literal>psk</literal>) round. Using <literal>xauth</literal> in the\nfirst round performs Hybrid Mode client authentication.\n</para></listitem>\n<listitem><para>\nFor <literal>eap</literal>, a specific EAP method name may be appended, separated by a\ndash. An EAP module implementing the appropriate method is selected to\nperform the EAP conversation.\n</para></listitem>\n<listitem><para>\nSince 5.4.0, if both peers support RFC 7427 (\"Signature Authentication\nin IKEv2\") specific hash algorithms to be used during IKEv2\nauthentication may be configured. To do so use <literal>ike:</literal>\nfollowed by a trust chain signature scheme constraint (see description\nof the <option>remote</option> section's <option>auth</option>\nkeyword). For example, with <literal>ike:pubkey-sha384-sha256</literal>\na public key signature scheme with either SHA-384 or SHA-256 would get\nused for authentication, in that order and depending on the hash\nalgorithms supported by the peer. If no specific hash algorithms are\nconfigured, the default is to prefer an algorithm that matches or\nexceeds the strength of the signature key. If no constraints with\n<literal>ike:</literal> prefix are configured any signature scheme\nconstraint (without <literal>ike:</literal> prefix) will also apply to\nIKEv2 authentication, unless this is disabled in\n<literal>strongswan.conf</literal>. To use RSASSA-PSS signatures use\n<literal>rsa/pss</literal> instead of <literal>pubkey</literal> or\n<literal>rsa</literal> as in e.g.\n<literal>ike:rsa/pss-sha256</literal>. If <literal>pubkey</literal> or\n<literal>rsa</literal> constraints are configured RSASSA-PSS signatures\nwill only be used if enabled in <literal>strongswan.conf</literal>(5).\n</para></listitem>\n</itemizedlist>\n</para><para>\nStrongSwan default: <literal><![CDATA[\"pubkey\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","auth"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.cert":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Section for a certificate candidate to use for\nauthentication. Certificates in certs are transmitted as binary blobs,\nthese sections offer more flexibility.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","cert"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.cert.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Absolute path to the certificate to load. Passed as-is to the daemon, so\nit must be readable by it.\n</para><para>\nConfigure either this or <option>handle</option>, but not both, in one section.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","cert","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.cert.<name>.handle":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Hex-encoded CKA_ID or handle of the certificate on a token or TPM,\nrespectively.\n</para><para>\nConfigure either this or <option>file</option>, but not both, in one section.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","cert","<name>","handle"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.cert.<name>.module":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional PKCS#11 module name.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","cert","<name>","module"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.cert.<name>.slot":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional slot number of the token that stores the certificate.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","cert","<name>","slot"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.certs":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of certificate candidates to use for\nauthentication. The certificates may use a relative path from the\nswanctl <literal>x509</literal> directory or an absolute path.\n</para><para>\nThe certificate used for authentication is selected based on the\nreceived certificate request payloads. If no appropriate CA can be\nlocated, the first certificate is used.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","certs"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.eap_id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Client EAP-Identity to use in EAP-Identity exchange and the EAP method.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","eap_id"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"IKE identity to use for authentication round. When using certificate\nauthentication, the IKE identity must be contained in the certificate,\neither as subject or as subjectAltName.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","id"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.pubkeys":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of raw public key candidates to use for\nauthentication. The public keys may use a relative path from the swanctl\n<literal>pubkey</literal> directory or an absolute path.\n</para><para>\nEven though multiple local public keys could be defined in principle,\nonly the first public key in the list is used for authentication.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","pubkeys"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.round":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional numeric identifier by which authentication rounds are\nsorted. If not specified rounds are ordered by their position in the\nconfig file/vici message.\n</para><para>\nStrongSwan default: <literal><![CDATA[0]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","round"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.local.<name>.xauth_id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Client XAuth username used in the XAuth exchange.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local","<name>","xauth_id"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.local_addrs":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Local address(es) to use for IKE communication. Takes\nsingle IPv4/IPv6 addresses, DNS names, CIDR subnets or IP address ranges.\n</para><para>\nAs initiator, the first non-range/non-subnet is used to initiate the\nconnection from. As responder, the local destination address must match at\nleast to one of the specified addresses, subnets or ranges.\n</para><para>\nIf FQDNs are assigned they are resolved every time a configuration lookup\nis done. If DNS resolution times out, the lookup is delayed for that time.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local_addrs"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.local_port":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Local UDP port for IKE communication. By default the port of the socket\nbackend is used, which is usually <literal>500</literal>. If port\n<literal>500</literal> is used, automatic IKE port floating to port\n<literal>4500</literal> is used to work around NAT issues.\n</para><para>\nUsing a non-default local IKE port requires support from the socket\nbackend in use (socket-dynamic).\n</para><para>\nStrongSwan default: <literal><![CDATA[500]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","local_port"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.mediated_by":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"The name of the connection to mediate this connection through. If given,\nthe connection will be mediated through the named mediation\nconnection. The mediation connection must have mediation enabled.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","mediated_by"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.mediation":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Whether this connection is a mediation connection, that is, whether this\nconnection is used to mediate other connections using the IKEv2 Mediation\nExtension. Mediation connections create no CHILD_SA.\n</para><para>\nStrongSwan default: <literal><![CDATA[false]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","mediation"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.mediation_peer":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Identity under which the peer is registered at the mediation server, that\nis, the IKE identity the other end of this connection uses as its local\nidentity on its connection to the mediation server. This is the identity\nwe request the mediation server to mediate us with. Only relevant on\nconnections that set mediated_by. If it is not given, the remote IKE\nidentity of the first authentication round of this connection will be\nused.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","mediation_peer"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.mobike":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Enables MOBIKE on IKEv2 connections. MOBIKE is enabled by default on IKEv2\nconnections, and allows mobility of clients and multi-homing on servers by\nmigrating active IPsec tunnels.\n</para><para>\nUsually keeping MOBIKE enabled is unproblematic, as it is not used if the\npeer does not indicate support for it. However, due to the design of\nMOBIKE, IKEv2 always floats to port 4500 starting from the second\nexchange. Some implementations don't like this behavior, hence it can be\ndisabled.\n</para><para>\nStrongSwan default: <literal><![CDATA[true]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","mobike"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.over_time":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Hard IKE_SA lifetime if rekey/reauth does not complete, as time. To avoid\nhaving an IKE/ISAKMP kept alive if IKE reauthentication or rekeying fails\nperpetually, a maximum hard lifetime may be specified. If the IKE_SA fails\nto rekey or reauthenticate within the specified time, the IKE_SA gets\nclosed.\n</para><para>\nIn contrast to CHILD_SA rekeying, over_time is relative in time to the\nrekey_time and reauth_time values, as it applies to both.\n</para><para>\nThe default is 10% of the longer of <option>rekey_time</option> and\n<option>reauth_time</option>.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","over_time"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.pools":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of named IP pools to allocate virtual IP addresses\nand other configuration attributes from. Each name references a pool by\nname from either the pools section or an external pool.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","pools"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.proposals":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"A proposal is a set of algorithms. For non-AEAD algorithms, this includes\nfor IKE an encryption algorithm, an integrity algorithm, a pseudo random\nfunction and a Diffie-Hellman group. For AEAD algorithms, instead of\nencryption and integrity algorithms, a combined algorithm is used.\n</para><para>\nIn IKEv2, multiple algorithms of the same kind can be specified in a\nsingle proposal, from which one gets selected. In IKEv1, only one\nalgorithm per kind is allowed per proposal, more algorithms get implicitly\nstripped. Use multiple proposals to offer different algorithms\ncombinations in IKEv1.\n</para><para>\nAlgorithm keywords get separated using dashes. Multiple proposals may be\nspecified in a list. The special value <literal>default</literal> forms a\ndefault proposal of supported algorithms considered safe, and is usually a\ngood choice for interoperability.\n</para><para>\nStrongSwan default: <literal><![CDATA[[\"default\"]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","proposals"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.pull":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"If the default of yes is used, Mode Config works in pull mode, where the\ninitiator actively requests a virtual IP. With no, push mode is used,\nwhere the responder pushes down a virtual IP to the initiating peer.\n</para><para>\nPush mode is currently supported for IKEv1, but not in IKEv2. It is used\nby a few implementations only, pull mode is recommended.\n</para><para>\nStrongSwan default: <literal><![CDATA[true]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","pull"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.rand_time":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Time range from which to choose a random value to subtract from\nrekey/reauth times. To avoid having both peers initiating the rekey/reauth\nprocedure simultaneously, a random time gets subtracted from the\nrekey/reauth times.\n</para><para>\nThe default is equal to the configured <option>over_time</option>.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","rand_time"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.reauth_time":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Time to schedule IKE reauthentication. IKE reauthentication recreates the\nIKE/ISAKMP SA from scratch and re-evaluates the credentials. In asymmetric\nconfigurations (with EAP or configuration payloads) it might not be\npossible to actively reauthenticate as responder. The IKEv2\nreauthentication lifetime negotiation can instruct the client to perform\nreauthentication.\n</para><para>\nReauthentication is disabled by default. Enabling it usually may lead to\nsmall connection interruptions, as strongSwan uses a break-before-make\npolicy with IKEv2 to avoid any conflicts with associated tunnel resources.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"0s\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","reauth_time"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.rekey_time":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"IKE rekeying refreshes key material using a Diffie-Hellman exchange, but\ndoes not re-check associated credentials. It is supported in IKEv2 only,\nIKEv1 performs a reauthentication procedure instead.\n</para><para>\nWith the default value IKE rekeying is scheduled every 4 hours, minus the\nconfigured rand_time. If a reauth_time is configured, rekey_time defaults\nto zero, disabling rekeying; explicitly set both to enforce rekeying and\nreauthentication.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"4h\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","rekey_time"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Section for a remote authentication round. A remote authentication round\ndefines the constraints how the peers must authenticate to use this\nconnection. Multiple rounds may be defined to use IKEv2 RFC 4739 Multiple\nAuthentication or IKEv1 XAuth.\n</para><para>\nEach round is defined in a section having <literal>remote</literal> as\nprefix, and an optional unique suffix. To define a single authentication\nround, the suffix may be omitted.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.auth":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Authentication to expect from remote. See the <option>local</option>\nsection's <option>auth</option> keyword description about the details of\nsupported mechanisms.\n</para><para>\nSince 5.4.0, to require a trustchain public key strength for the remote\nside, specify the key type followed by the minimum strength in bits (for\nexample <literal>ecdsa-384</literal> or\n<literal>rsa-2048-ecdsa-256</literal>). To limit the acceptable set of\nhashing algorithms for trustchain validation, append hash algorithms to\npubkey or a key strength definition (for example\n<literal>pubkey-sha256-sha512</literal>,\n<literal>rsa-2048-sha256-sha384-sha512</literal> or\n<literal>rsa-2048-sha256-ecdsa-256-sha256-sha384</literal>).\nUnless disabled in <literal>strongswan.conf</literal>, or explicit IKEv2\nsignature constraints are configured (refer to the description of the\n<option>local</option> section's <option>auth</option> keyword for\ndetails), such key types and hash algorithms are also applied as\nconstraints against IKEv2 signature authentication schemes used by the\nremote side. To require RSASSA-PSS signatures use\n<literal>rsa/pss</literal> instead of <literal>pubkey</literal> or\n<literal>rsa</literal> as in e.g. <literal>rsa/pss-sha256</literal>. If\n<literal>pubkey</literal> or <literal>rsa</literal> constraints are\nconfigured RSASSA-PSS signatures will only be accepted if enabled in\n<literal>strongswan.conf</literal>(5).\n</para><para>\nTo specify trust chain constraints for EAP-(T)TLS, append a colon to the\nEAP method, followed by the key type/size and hash algorithm as\ndiscussed above (e.g. <literal>eap-tls:ecdsa-384-sha384</literal>).\n</para><para>\nStrongSwan default: <literal><![CDATA[\"pubkey\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","auth"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cacert":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Section for a CA certificate to accept for authentication. Certificates\nin cacerts are transmitted as binary blobs, these sections offer more\nflexibility.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cacert"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cacert.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Absolute path to the certificate to load. Passed as-is to the daemon, so\nit must be readable by it.\n</para><para>\nConfigure either this or <option>handle</option>, but not both, in one section.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cacert","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cacert.<name>.handle":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Hex-encoded CKA_ID or handle of the certificate on a token or TPM,\nrespectively.\n</para><para>\nConfigure either this or <option>file</option>, but not both, in one section.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cacert","<name>","handle"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cacert.<name>.module":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional PKCS#11 module name.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cacert","<name>","module"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cacert.<name>.slot":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional slot number of the token that stores the certificate.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cacert","<name>","slot"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cacerts":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of CA certificates to accept for\nauthentication. The certificates may use a relative path from the\nswanctl <literal>x509ca</literal> directory or an absolute path.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cacerts"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cert":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Section for a certificate candidate to use for\nauthentication. Certificates in certs are transmitted as binary blobs,\nthese sections offer more flexibility.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cert"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cert.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Absolute path to the certificate to load. Passed as-is to the daemon, so\nit must be readable by it.\n</para><para>\nConfigure either this or <option>handle</option>, but not both, in one section.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cert","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cert.<name>.handle":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Hex-encoded CKA_ID or handle of the certificate on a token or TPM,\nrespectively.\n</para><para>\nConfigure either this or <option>file</option>, but not both, in one section.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cert","<name>","handle"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cert.<name>.module":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional PKCS#11 module name.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cert","<name>","module"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cert.<name>.slot":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional slot number of the token that stores the certificate.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cert","<name>","slot"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.cert_policy":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of certificate policy OIDs the peer's certificate\nmust have. OIDs are specified using the numerical dotted representation.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","cert_policy"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.certs":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of certificates to accept for authentication. The certificates may\nuse a relative path from the swanctl <literal>x509</literal> directory\nor an absolute path.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","certs"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.eap_id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Identity to use as peer identity during EAP authentication. If set to\n<literal>%any</literal> the EAP-Identity method will be used to ask the\nclient for an EAP identity.\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","eap_id"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.groups":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Authorization group memberships to require. The peer\nmust prove membership to at least one of the specified groups. Group\nmembership can be certified by different means, for example by\nappropriate Attribute Certificates or by an AAA backend involved in the\nauthentication.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","groups"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"IKE identity to expect for authentication round. When using certificate\nauthentication, the IKE identity must be contained in the certificate,\neither as subject or as subjectAltName.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"%any\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","id"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.pubkeys":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of raw public keys to accept for\nauthentication. The public keys may use a relative path from the swanctl\n<literal>pubkey</literal> directory or an absolute path.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","pubkeys"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.revocation":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Certificate revocation policy for CRL or OCSP revocation.\n<itemizedlist>\n<listitem><para>\nA <literal>strict</literal> revocation policy fails if no revocation information is\navailable, i.e. the certificate is not known to be unrevoked.\n</para></listitem>\n<listitem><para>\n<literal>ifuri</literal> fails only if a CRL/OCSP URI is available, but certificate\nrevocation checking fails, i.e. there should be revocation information\navailable, but it could not be obtained.\n</para></listitem>\n<listitem><para>\nThe default revocation policy <literal>relaxed</literal> fails only if a certificate is\nrevoked, i.e. it is explicitly known that it is bad.\n</para></listitem>\n</itemizedlist>\n</para><para>\nStrongSwan default: <literal><![CDATA[\"relaxed\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","revocation"],"readOnly":false,"type":"null or one of \"strict\", \"ifuri\", \"relaxed\""},"services.strongswan-swanctl.swanctl.connections.<name>.remote.<name>.round":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional numeric identifier by which authentication rounds are\nsorted. If not specified rounds are ordered by their position in the\nconfig file/vici message.\n</para><para>\nStrongSwan default: <literal><![CDATA[0]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote","<name>","round"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.remote_addrs":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Remote address(es) to use for IKE communication. Takes\nsingle IPv4/IPv6 addresses, DNS names, CIDR subnets or IP address ranges.\n</para><para>\nAs initiator, the first non-range/non-subnet is used to initiate the\nconnection to. As responder, the initiator source address must match at\nleast to one of the specified addresses, subnets or ranges.\n</para><para>\nIf FQDNs are assigned they are resolved every time a configuration lookup\nis done. If DNS resolution times out, the lookup is delayed for that time.\nTo initiate a connection, at least one specific address or DNS name must\nbe specified.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote_addrs"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.connections.<name>.remote_port":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Remote UDP port for IKE communication. If the default of port\n<literal>500</literal> is used, automatic IKE port floating to port\n<literal>4500</literal> is used to work around NAT issues.\n</para><para>\nStrongSwan default: <literal><![CDATA[500]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","remote_port"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.send_cert":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Send certificate payloads when using certificate authentication.\n<itemizedlist>\n<listitem><para>With the default of <literal>ifasked</literal> the daemon sends\ncertificate payloads only if certificate requests have been received.</para></listitem>\n<listitem><para><literal>never</literal> disables sending of certificate payloads\naltogether,</para></listitem>\n<listitem><para><literal>always</literal> causes certificate payloads to be sent\nunconditionally whenever certificate authentication is used.</para></listitem>\n</itemizedlist>\n</para><para>\nStrongSwan default: <literal><![CDATA[\"ifasked\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","send_cert"],"readOnly":false,"type":"null or one of \"always\", \"never\", \"ifasked\""},"services.strongswan-swanctl.swanctl.connections.<name>.send_certreq":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Send certificate request payloads to offer trusted root CA certificates to\nthe peer. Certificate requests help the peer to choose an appropriate\ncertificate/private key for authentication and are enabled by default.\nDisabling certificate requests can be useful if too many trusted root CA\ncertificates are installed, as each certificate request increases the size\nof the initial IKE packets.\n</para><para>\nStrongSwan default: <literal><![CDATA[true]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","send_certreq"],"readOnly":false,"type":"null or boolean"},"services.strongswan-swanctl.swanctl.connections.<name>.unique":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Connection uniqueness policy to enforce. To avoid multiple connections\nfrom the same user, a uniqueness policy can be enforced.\n</para><para>\n<itemizedlist>\n<listitem><para>\nThe value <literal>never</literal> does never enforce such a policy, even\nif a peer included INITIAL_CONTACT notification messages,\n</para></listitem>\n<listitem><para>\nwhereas <literal>no</literal> replaces existing connections for the same\nidentity if a new one has the INITIAL_CONTACT notify.\n</para></listitem>\n<listitem><para>\n<literal>keep</literal> rejects new connection attempts if the same user\nalready has an active connection,\n</para></listitem>\n<listitem><para>\n<literal>replace</literal> deletes any existing connection if a new one\nfor the same user gets established.\n</para></listitem>\n</itemizedlist>\nTo compare connections for uniqueness, the remote IKE identity is used. If\nEAP or XAuth authentication is involved, the EAP-Identity or XAuth\nusername is used to enforce the uniqueness policy instead.\n</para><para>\nOn initiators this setting specifies whether an INITIAL_CONTACT notify is\nsent during IKE_AUTH if no existing connection is found with the remote\npeer (determined by the identities of the first authentication\nround). Unless set to <literal>never</literal> the client will send a notify.\n</para><para>\nStrongSwan default: <literal><![CDATA[\"no\"]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","unique"],"readOnly":false,"type":"null or one of \"no\", \"never\", \"keep\", \"replace\""},"services.strongswan-swanctl.swanctl.connections.<name>.version":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"IKE major version to use for connection.\n<itemizedlist>\n<listitem><para>1 uses IKEv1 aka ISAKMP,</para></listitem>\n<listitem><para>2 uses IKEv2.</para></listitem>\n<listitem><para>A connection using the default of 0 accepts both IKEv1 and IKEv2 as\nresponder, and initiates the connection actively with IKEv2.</para></listitem>\n</itemizedlist>\n</para><para>\nStrongSwan default: <literal><![CDATA[0]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","version"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.connections.<name>.vips":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"List of virtual IPs to request in IKEv2 configuration payloads or IKEv1\nMode Config. The wildcard addresses <literal>0.0.0.0</literal> and\n<literal>::</literal> request an arbitrary address, specific addresses may\nbe defined. The responder may return a different address, though, or none\nat all.\n</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","connections","<name>","vips"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.pools":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Section defining named pools. Named pools may be referenced by connections\nwith the pools option to assign virtual IPs and other configuration\nattributes. Each pool must have a unique name (denoted &#60;name&#62; below).\n","loc":["services","strongswan-swanctl","swanctl","pools"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.pools.<name>.addrs":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Subnet or range defining addresses allocated in pool. Accepts a single\nCIDR subnet defining the pool to allocate addresses from or an address\nrange (&#60;from&#62;-&#60;to&#62;). Pools must be unique and non-overlapping.\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","addrs"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.pools.<name>.dhcp":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Address or CIDR subnets</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","dhcp"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.pools.<name>.dns":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Address or CIDR subnets</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","dns"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.pools.<name>.nbns":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Address or CIDR subnets</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","nbns"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.pools.<name>.netmask":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Address or CIDR subnets</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","netmask"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.pools.<name>.server":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Address or CIDR subnets</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","server"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.pools.<name>.split_exclude":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Address or CIDR subnets</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","split_exclude"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.pools.<name>.split_include":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Address or CIDR subnets</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","split_include"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.pools.<name>.subnet":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Address or CIDR subnets</para><para>\nStrongSwan default: <literal><![CDATA[[]]]></literal>\n","loc":["services","strongswan-swanctl","swanctl","pools","<name>","subnet"],"readOnly":false,"type":"null or list of strings"},"services.strongswan-swanctl.swanctl.secrets.eap":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"EAP secret section for a specific secret. Each EAP secret is defined in a\nunique section having the <literal>eap</literal> prefix. EAP secrets are\nused for XAuth authentication as well.\n","loc":["services","strongswan-swanctl","swanctl","secrets","eap"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.eap.<name>.id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Identity the EAP/XAuth secret belongs to. Multiple unique identities may\nbe specified, each having an <literal>id</literal> prefix, if a secret\nis shared between multiple users.\n","loc":["services","strongswan-swanctl","swanctl","secrets","eap","<name>","id"],"readOnly":false,"type":"attribute set of null or strings"},"services.strongswan-swanctl.swanctl.secrets.eap.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of the EAP/XAuth secret. It may either be an ASCII string, a hex\nencoded string if it has a 0x prefix or a Base64 encoded string if it\nhas a 0s prefix in its value.\n","loc":["services","strongswan-swanctl","swanctl","secrets","eap","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.ecdsa":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Private key decryption passphrase for a key in the\n<literal>ecdsa</literal> folder.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ecdsa"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.ecdsa.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"File name in the <literal>ecdsa</literal> folder for which this\npassphrase should be used.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ecdsa","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.ecdsa.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of decryption passphrase for ECDSA key.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ecdsa","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.ike":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"IKE preshared secret section for a specific secret. Each IKE PSK is\ndefined in a unique section having the <literal>ike</literal> prefix.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ike"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.ike.<name>.id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"IKE identity the IKE preshared secret belongs to. Multiple unique\nidentities may be specified, each having an <literal>id</literal>\nprefix, if a secret is shared between multiple peers.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ike","<name>","id"],"readOnly":false,"type":"attribute set of null or strings"},"services.strongswan-swanctl.swanctl.secrets.ike.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of the IKE preshared secret. It may either be an ASCII string, a\nhex encoded string if it has a 0x prefix or a Base64 encoded string if\nit has a 0s prefix in its value.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ike","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.ntlm":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"NTLM secret section for a specific secret. Each NTLM secret is defined in\na unique section having the <literal>ntlm</literal> prefix. NTLM secrets\nmay only be used for EAP-MSCHAPv2 authentication.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ntlm"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.ntlm.<name>.id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Identity the NTLM secret belongs to. Multiple unique identities may be\nspecified, each having an id prefix, if a secret is shared between\nmultiple users.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ntlm","<name>","id"],"readOnly":false,"type":"attribute set of null or strings"},"services.strongswan-swanctl.swanctl.secrets.ntlm.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of the NTLM secret, which is the NT Hash of the actual secret,\nthat is, MD4(UTF-16LE(secret)). The resulting 16-byte value may either\nbe given as a hex encoded string with a 0x prefix or as a Base64 encoded\nstring with a 0s prefix.\n","loc":["services","strongswan-swanctl","swanctl","secrets","ntlm","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.pkcs12":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"PKCS#12 decryption passphrase for a container in the\n<literal>pkcs12</literal> folder.\n","loc":["services","strongswan-swanctl","swanctl","secrets","pkcs12"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.pkcs12.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"File name in the <literal>pkcs12</literal> folder for which this\npassphrase should be used.\n","loc":["services","strongswan-swanctl","swanctl","secrets","pkcs12","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.pkcs12.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of decryption passphrase for PKCS#12 container.\n","loc":["services","strongswan-swanctl","swanctl","secrets","pkcs12","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.pkcs8":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Private key decryption passphrase for a key in the\n<literal>pkcs8</literal> folder.\n","loc":["services","strongswan-swanctl","swanctl","secrets","pkcs8"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.pkcs8.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"File name in the <literal>pkcs8</literal> folder for which this\npassphrase should be used.\n","loc":["services","strongswan-swanctl","swanctl","secrets","pkcs8","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.pkcs8.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of decryption passphrase for PKCS#8 key.\n","loc":["services","strongswan-swanctl","swanctl","secrets","pkcs8","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.private":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Private key decryption passphrase for a key in the\n<literal>private</literal> folder.\n","loc":["services","strongswan-swanctl","swanctl","secrets","private"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.private.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"File name in the private folder for which this passphrase should be used.\n","loc":["services","strongswan-swanctl","swanctl","secrets","private","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.private.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of decryption passphrase for private key.\n","loc":["services","strongswan-swanctl","swanctl","secrets","private","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.rsa":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Private key decryption passphrase for a key in the <literal>rsa</literal>\nfolder.\n","loc":["services","strongswan-swanctl","swanctl","secrets","rsa"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.rsa.<name>.file":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"File name in the <literal>rsa</literal> folder for which this passphrase\nshould be used.\n","loc":["services","strongswan-swanctl","swanctl","secrets","rsa","<name>","file"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.rsa.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of decryption passphrase for RSA key.\n","loc":["services","strongswan-swanctl","swanctl","secrets","rsa","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.token":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Definition for a private key that's stored on a token/smartcard/TPM.","loc":["services","strongswan-swanctl","swanctl","secrets","token"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.token.<name>.handle":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Hex-encoded CKA_ID or handle of the private key on the token or TPM,\nrespectively.\n","loc":["services","strongswan-swanctl","swanctl","secrets","token","<name>","handle"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.token.<name>.module":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional PKCS#11 module name to access the token.\n","loc":["services","strongswan-swanctl","swanctl","secrets","token","<name>","module"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.token.<name>.pin":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional PIN required to access the key on the token. If none is\nprovided the user is prompted during an interactive\n<literal>--load-creds</literal> call.\n","loc":["services","strongswan-swanctl","swanctl","secrets","token","<name>","pin"],"readOnly":false,"type":"null or string"},"services.strongswan-swanctl.swanctl.secrets.token.<name>.slot":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Optional slot number to access the token.\n","loc":["services","strongswan-swanctl","swanctl","secrets","token","<name>","slot"],"readOnly":false,"type":"null or signed integer"},"services.strongswan-swanctl.swanctl.secrets.xauth":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"EAP secret section for a specific secret. Each EAP secret is defined in a\nunique section having the <literal>eap</literal> prefix. EAP secrets are\nused for XAuth authentication as well.\n","loc":["services","strongswan-swanctl","swanctl","secrets","xauth"],"readOnly":false,"type":"attribute set of submodules"},"services.strongswan-swanctl.swanctl.secrets.xauth.<name>.id":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":{},"description":"Identity the EAP/XAuth secret belongs to. Multiple unique identities may\nbe specified, each having an <literal>id</literal> prefix, if a secret\nis shared between multiple users.\n","loc":["services","strongswan-swanctl","swanctl","secrets","xauth","<name>","id"],"readOnly":false,"type":"attribute set of null or strings"},"services.strongswan-swanctl.swanctl.secrets.xauth.<name>.secret":{"declarations":["nixos/modules/services/networking/strongswan-swanctl/module.nix"],"default":null,"description":"Value of the EAP/XAuth secret. It may either be an ASCII string, a hex\nencoded string if it has a 0x prefix or a Base64 encoded string if it\nhas a 0s prefix in its value.\n","loc":["services","strongswan-swanctl","swanctl","secrets","xauth","<name>","secret"],"readOnly":false,"type":"null or string"},"services.strongswan.ca":{"declarations":["nixos/modules/services/networking/strongswan.nix"],"default":{},"description":"A set of CAs (certification authorities) and their options for\nthe ‘ca xxx’ sections of the <filename>ipsec.conf</filename>\nfile.\n","example":{"strongswan":{"auto":"add","cacert":"/run/keys/strongswanCert.pem","crluri":"http://crl2.strongswan.org/strongswan.crl"}},"loc":["services","strongswan","ca"],"readOnly":false,"type":"attribute set of attribute set of stringss"},"services.strongswan.connections":{"declarations":["nixos/modules/services/networking/strongswan.nix"],"default":{},"description":"A set of connections and their options for the ‘conn xxx’\nsections of the <filename>ipsec.conf</filename> file.\n","example":{"%default":{"keyexchange":"ikev2","keyingtries":"1"},"roadwarrior":{"auto":"add","leftcert":"/run/keys/moonCert.pem","leftid":"@moon.strongswan.org","leftsubnet":"10.1.0.0/16","right":"%any"}},"loc":["services","strongswan","connections"],"readOnly":false,"type":"attribute set of attribute set of stringss"},"services.strongswan.enable":{"declarations":["nixos/modules/services/networking/strongswan.nix"],"default":false,"description":"Whether to enable strongSwan.","example":true,"loc":["services","strongswan","enable"],"readOnly":false,"type":"boolean"},"services.strongswan.enabledPlugins":{"declarations":["nixos/modules/services/networking/strongswan.nix"],"default":[],"description":"A list of additional plugins to enable if\n<option>managePlugins</option> is true.\n","loc":["services","strongswan","enabledPlugins"],"readOnly":false,"type":"list of strings"},"services.strongswan.managePlugins":{"declarations":["nixos/modules/services/networking/strongswan.nix"],"default":false,"description":"If set to true, this option will disable automatic plugin loading and\nthen tell strongSwan to enable the plugins specified in the\n<option>enabledPlugins</option> option.\n","loc":["services","strongswan","managePlugins"],"readOnly":false,"type":"boolean"},"services.strongswan.secrets":{"declarations":["nixos/modules/services/networking/strongswan.nix"],"default":[],"description":"A list of paths to IPSec secret files. These\nfiles will be included into the main ipsec.secrets file with\nthe <literal>include</literal> directive. It is safer if these\npaths are absolute.\n","example":["/run/keys/ipsec-foo.secret"],"loc":["services","strongswan","secrets"],"readOnly":false,"type":"list of paths"},"services.strongswan.setup":{"declarations":["nixos/modules/services/networking/strongswan.nix"],"default":{},"description":"A set of options for the ‘config setup’ section of the\n<filename>ipsec.conf</filename> file. Defines general\nconfiguration parameters.\n","example":{"cachecrls":"yes","strictcrlpolicy":"yes"},"loc":["services","strongswan","setup"],"readOnly":false,"type":"attribute set of strings"},"services.stubby.authenticationMode":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":"GETDNS_AUTHENTICATION_REQUIRED","description":"Selects the Strict or Opportunistic usage profile.\nFor strict, set to <literal>GETDNS_AUTHENTICATION_REQUIRED</literal>.\nfor opportunistic, use <literal>GETDNS_AUTHENTICATION_NONE</literal>.\n","loc":["services","stubby","authenticationMode"],"readOnly":false,"type":"one of \"GETDNS_AUTHENTICATION_REQUIRED\", \"GETDNS_AUTHENTICATION_NONE\""},"services.stubby.debugLogging":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":false,"description":"Enable or disable debug level logging.","loc":["services","stubby","debugLogging"],"readOnly":false,"type":"boolean"},"services.stubby.enable":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":false,"description":"Whether to enable Stubby DNS resolver.","example":true,"loc":["services","stubby","enable"],"readOnly":false,"type":"boolean"},"services.stubby.extraConfig":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":"","description":"Add additional configuration options. see <citerefentry>\n<refentrytitle>stubby</refentrytitle><manvolnum>1</manvolnum>\n</citerefentry>for more options.\n","loc":["services","stubby","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.stubby.fallbackProtocols":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":["GETDNS_TRANSPORT_TLS"],"description":"Ordered list composed of one or more transport protocols.\nStrict mode should only use <literal>GETDNS_TRANSPORT_TLS</literal>.\nOther options are <literal>GETDNS_TRANSPORT_UDP</literal> and\n<literal>GETDNS_TRANSPORT_TCP</literal>.\n","loc":["services","stubby","fallbackProtocols"],"readOnly":false,"type":"list of one of \"GETDNS_TRANSPORT_TLS\", \"GETDNS_TRANSPORT_TCP\", \"GETDNS_TRANSPORT_UDP\"s"},"services.stubby.idleTimeout":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":10000,"description":"EDNS0 option for keepalive idle timeout expressed in\n        milliseconds.","loc":["services","stubby","idleTimeout"],"readOnly":false,"type":"signed integer"},"services.stubby.listenAddresses":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":["127.0.0.1","0::1"],"description":"Sets the listen address for the stubby daemon.\nUses port 53 by default.\nIse IP@port to specify a different port.\n","loc":["services","stubby","listenAddresses"],"readOnly":false,"type":"list of strings"},"services.stubby.queryPaddingBlocksize":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":128,"description":"EDNS0 option to pad the size of the DNS query to the given blocksize.\n","loc":["services","stubby","queryPaddingBlocksize"],"readOnly":false,"type":"signed integer"},"services.stubby.roundRobinUpstreams":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":true,"description":"Instructs stubby to distribute queries across all available name\nservers. Default is <literal>true</literal>. Set to\n<literal>false</literal> in order to use the first available.\n","loc":["services","stubby","roundRobinUpstreams"],"readOnly":false,"type":"boolean"},"services.stubby.subnetPrivate":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":true,"description":"EDNS0 option for ECS client privacy. Default is\n<literal>true</literal>. If set, this option prevents the client\nsubnet from being sent to authoritative nameservers.\n","loc":["services","stubby","subnetPrivate"],"readOnly":false,"type":"boolean"},"services.stubby.upstreamServers":{"declarations":["nixos/modules/services/networking/stubby.nix"],"default":"- address_data: 145.100.185.15\n  tls_auth_name: \"dnsovertls.sinodun.com\"\n  tls_pubkey_pinset:\n    - digest: \"sha256\"\n      value: 62lKu9HsDVbyiPenApnc4sfmSYTHOVfFgL3pyB+cBL4=\n- address_data: 145.100.185.16\n  tls_auth_name: \"dnsovertls1.sinodun.com\"\n  tls_pubkey_pinset:\n    - digest: \"sha256\"\n      value: cE2ecALeE5B+urJhDrJlVFmf38cJLAvqekONvjvpqUA=\n- address_data: 185.49.141.37\n  tls_auth_name: \"getdnsapi.net\"\n  tls_pubkey_pinset:\n    - digest: \"sha256\"\n      value: foxZRnIh9gZpWnl+zEiKa0EJ2rdCGroMWm02gaxSc9Q=\n- address_data: 2001:610:1:40ba:145:100:185:15\n  tls_auth_name: \"dnsovertls.sinodun.com\"\n  tls_pubkey_pinset:\n    - digest: \"sha256\"\n      value: 62lKu9HsDVbyiPenApnc4sfmSYTHOVfFgL3pyB+cBL4=\n- address_data: 2001:610:1:40ba:145:100:185:16\n  tls_auth_name: \"dnsovertls1.sinodun.com\"\n  tls_pubkey_pinset:\n    - digest: \"sha256\"\n      value: cE2ecALeE5B+urJhDrJlVFmf38cJLAvqekONvjvpqUA=\n- address_data: 2a04:b900:0:100::38\n  tls_auth_name: \"getdnsapi.net\"\n  tls_pubkey_pinset:\n    - digest: \"sha256\"\n      value: foxZRnIh9gZpWnl+zEiKa0EJ2rdCGroMWm02gaxSc9Q=\n","description":"Add additional upstreams. See <citerefentry><refentrytitle>stubby\n</refentrytitle><manvolnum>1</manvolnum></citerefentry> for an\nexample of the entry formatting. In Strict mode, at least one of the\nfollowing settings must be supplied for each nameserver:\n<literal>tls_auth_name</literal> or\n<literal>tls_pubkey_pinset</literal>.\n","loc":["services","stubby","upstreamServers"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.stunnel.clients":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":{},"description":"Define the client configurations.","example":{"foobar":{"accept":"0.0.0.0:8080","connect":"nixos.org:443","verifyChain":false}},"loc":["services","stunnel","clients"],"readOnly":false,"type":"attribute set of submodules"},"services.stunnel.clients.<name>.CAPath":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":"${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt","description":"Path to a file containing certificates to validate against.","loc":["services","stunnel","clients","<name>","CAPath"],"readOnly":false,"type":"path"},"services.stunnel.clients.<name>.accept":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"description":"IP:Port on which connections should be accepted.","loc":["services","stunnel","clients","<name>","accept"],"readOnly":false,"type":"Concatenated string"},"services.stunnel.clients.<name>.connect":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"description":"IP:Port destination to connect to.","loc":["services","stunnel","clients","<name>","connect"],"readOnly":false,"type":"Concatenated string"},"services.stunnel.clients.<name>.verifyChain":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":true,"description":"Check if the provided certificate has a valid certificate chain (against CAPath).","loc":["services","stunnel","clients","<name>","verifyChain"],"readOnly":false,"type":"boolean"},"services.stunnel.clients.<name>.verifyHostname":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":null,"description":"If set, stunnel checks if the provided certificate is valid for the given hostname.","loc":["services","stunnel","clients","<name>","verifyHostname"],"readOnly":false,"type":"null or Concatenated string"},"services.stunnel.clients.<name>.verifyPeer":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":false,"description":"Check if the provided certificate is contained in CAPath.","loc":["services","stunnel","clients","<name>","verifyPeer"],"readOnly":false,"type":"boolean"},"services.stunnel.enable":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":false,"description":"Whether to enable the stunnel TLS tunneling service.","loc":["services","stunnel","enable"],"readOnly":false,"type":"boolean"},"services.stunnel.enableInsecureSSLv3":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":false,"description":"Enable support for the insecure SSLv3 protocol.","loc":["services","stunnel","enableInsecureSSLv3"],"readOnly":false,"type":"boolean"},"services.stunnel.fipsMode":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":false,"description":"Enable FIPS 140-2 mode required for compliance.","loc":["services","stunnel","fipsMode"],"readOnly":false,"type":"boolean"},"services.stunnel.group":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":"nogroup","description":"The group under which stunnel runs.","loc":["services","stunnel","group"],"readOnly":false,"type":"null or Concatenated string"},"services.stunnel.logLevel":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":"info","description":"Verbosity of stunnel output.","loc":["services","stunnel","logLevel"],"readOnly":false,"type":"one of \"emerg\", \"alert\", \"crit\", \"err\", \"warning\", \"notice\", \"info\", \"debug\""},"services.stunnel.servers":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":{},"description":"Define the server configuations.","example":{"fancyWebserver":{"accept":443,"cert":"/path/to/pem/file","connect":8080,"enable":true}},"loc":["services","stunnel","servers"],"readOnly":false,"type":"attribute set of submodules"},"services.stunnel.servers.<name>.accept":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"description":"On which port stunnel should listen for incoming TLS connections.","loc":["services","stunnel","servers","<name>","accept"],"readOnly":false,"type":"signed integer"},"services.stunnel.servers.<name>.cert":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"description":"File containing both the private and public keys.","loc":["services","stunnel","servers","<name>","cert"],"readOnly":false,"type":"path"},"services.stunnel.servers.<name>.connect":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"description":"To which port the decrypted connection should be forwarded.","loc":["services","stunnel","servers","<name>","connect"],"readOnly":false,"type":"signed integer"},"services.stunnel.user":{"declarations":["nixos/modules/services/networking/stunnel.nix"],"default":"nobody","description":"The user under which stunnel runs.","loc":["services","stunnel","user"],"readOnly":false,"type":"null or Concatenated string"},"services.subsonic.contextPath":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":"/","description":"The context path, i.e., the last part of the Subsonic\nURL. Typically '/' or '/subsonic'. Default '/'\n","loc":["services","subsonic","contextPath"],"readOnly":false,"type":"path"},"services.subsonic.defaultMusicFolder":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":"/var/music","description":"Configure Subsonic to use this folder for music.  This option\nonly has effect the first time Subsonic is started.\n","loc":["services","subsonic","defaultMusicFolder"],"readOnly":false,"type":"path"},"services.subsonic.defaultPlaylistFolder":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":"/var/playlists","description":"Configure Subsonic to use this folder for playlists.  This option\nonly has effect the first time Subsonic is started.\n","loc":["services","subsonic","defaultPlaylistFolder"],"readOnly":false,"type":"path"},"services.subsonic.defaultPodcastFolder":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":"/var/music/Podcast","description":"Configure Subsonic to use this folder for Podcasts.  This option\nonly has effect the first time Subsonic is started.\n","loc":["services","subsonic","defaultPodcastFolder"],"readOnly":false,"type":"path"},"services.subsonic.enable":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":false,"description":"Whether to enable Subsonic daemon.","example":true,"loc":["services","subsonic","enable"],"readOnly":false,"type":"boolean"},"services.subsonic.home":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":"/var/lib/subsonic","description":"The directory where Subsonic will create files.\nMake sure it is writable.\n","loc":["services","subsonic","home"],"readOnly":false,"type":"path"},"services.subsonic.httpsPort":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":0,"description":"The port on which Subsonic will listen for\nincoming HTTPS traffic. Set to 0 to disable.\n","loc":["services","subsonic","httpsPort"],"readOnly":false,"type":"signed integer"},"services.subsonic.listenAddress":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":"0.0.0.0","description":"The host name or IP address on which to bind Subsonic.\nOnly relevant if you have multiple network interfaces and want\nto make Subsonic available on only one of them. The default value\nwill bind Subsonic to all available network interfaces.\n","loc":["services","subsonic","listenAddress"],"readOnly":false,"type":"Concatenated string"},"services.subsonic.maxMemory":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":100,"description":"The memory limit (max Java heap size) in megabytes.\nDefault: 100\n","loc":["services","subsonic","maxMemory"],"readOnly":false,"type":"signed integer"},"services.subsonic.port":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":4040,"description":"The port on which Subsonic will listen for\nincoming HTTP traffic. Set to 0 to disable.\n","loc":["services","subsonic","port"],"readOnly":false,"type":"signed integer"},"services.subsonic.transcoders":{"declarations":["nixos/modules/services/misc/subsonic.nix"],"default":["${pkgs.ffmpeg.bin}/bin/ffmpeg"],"description":"List of paths to transcoder executables that should be accessible\nfrom Subsonic. Symlinks will be created to each executable inside\n/var/lib/subsonic/transcoders.\n","loc":["services","subsonic","transcoders"],"readOnly":false,"type":"list of paths"},"services.sundtek.enable":{"declarations":["nixos/modules/services/misc/sundtek.nix"],"default":false,"description":"Whether to enable Sundtek driver.","example":true,"loc":["services","sundtek","enable"],"readOnly":false,"type":"boolean"},"services.supybot.configFile":{"declarations":["nixos/modules/services/networking/supybot.nix"],"description":"Path to a supybot config file. This can be generated by\nrunning supybot-wizard.\n\nNote: all paths should include the full path to the stateDir\ndirectory (backup conf data logs logs/plugins plugins tmp web).\n","loc":["services","supybot","configFile"],"readOnly":false,"type":"path"},"services.supybot.enable":{"declarations":["nixos/modules/services/networking/supybot.nix"],"default":false,"description":"Enable Supybot, an IRC bot","loc":["services","supybot","enable"],"readOnly":false,"type":"unspecified"},"services.supybot.stateDir":{"declarations":["nixos/modules/services/networking/supybot.nix"],"default":"/home/supybot","description":"The root directory, logs and plugins are stored here","loc":["services","supybot","stateDir"],"readOnly":false,"type":"unspecified"},"services.svnserve.enable":{"declarations":["nixos/modules/services/misc/svnserve.nix"],"default":false,"description":"Whether to enable svnserve to serve Subversion repositories through the SVN protocol.","loc":["services","svnserve","enable"],"readOnly":false,"type":"unspecified"},"services.svnserve.svnBaseDir":{"declarations":["nixos/modules/services/misc/svnserve.nix"],"default":"/repos","description":"Base directory from which Subversion repositories are accessed.","loc":["services","svnserve","svnBaseDir"],"readOnly":false,"type":"unspecified"},"services.syncthing.all_proxy":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":null,"description":"Overwrites all_proxy environment variable for the syncthing process to\nthe given value. This is normaly used to let relay client connect\nthrough SOCKS5 proxy server.\n","example":"socks5://address.com:1234","loc":["services","syncthing","all_proxy"],"readOnly":false,"type":"null or string"},"services.syncthing.dataDir":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":"/var/lib/syncthing","description":"Path where the settings and keys will exist.\n","loc":["services","syncthing","dataDir"],"readOnly":false,"type":"path"},"services.syncthing.enable":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":false,"description":"Whether to enable Syncthing - the self-hosted open-source alternative\nto Dropbox and Bittorrent Sync. Initial interface will be\navailable on http://127.0.0.1:8384/.\n.","example":true,"loc":["services","syncthing","enable"],"readOnly":false,"type":"boolean"},"services.syncthing.group":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":"nogroup","description":"Syncthing will be run under this group (group will not be created if it doesn't exist.\nThis can be your user name).\n","loc":["services","syncthing","group"],"readOnly":false,"type":"string"},"services.syncthing.guiAddress":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":"127.0.0.1:8384","description":"Address to serve the GUI.\n","loc":["services","syncthing","guiAddress"],"readOnly":false,"type":"string"},"services.syncthing.openDefaultPorts":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":false,"description":"Open the default ports in the firewall:\n  - TCP 22000 for transfers\n  - UDP 21027 for discovery\nIf multiple users are running syncthing on this machine, you will need to manually open a set of ports for each instance and leave this disabled.\nAlternatively, if are running only a single instance on this machine using the default ports, enable this.\n","example":{"_type":"literalExample","text":"true"},"loc":["services","syncthing","openDefaultPorts"],"readOnly":false,"type":"boolean"},"services.syncthing.package":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":"pkgs.syncthing","description":"Syncthing package to use.\n","example":{"_type":"literalExample","text":"pkgs.syncthing"},"loc":["services","syncthing","package"],"readOnly":false,"type":"package"},"services.syncthing.systemService":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":true,"description":"Auto launch Syncthing as a system service.","loc":["services","syncthing","systemService"],"readOnly":false,"type":"boolean"},"services.syncthing.user":{"declarations":["nixos/modules/services/networking/syncthing.nix"],"default":"syncthing","description":"Syncthing will be run under this user (user will be created if it doesn't exist.\nThis can be your user name).\n","loc":["services","syncthing","user"],"readOnly":false,"type":"string"},"services.synergy.client.autoStart":{"declarations":["nixos/modules/services/misc/synergy.nix"],"default":true,"description":"Whether the Synergy client should be started automatically.","loc":["services","synergy","client","autoStart"],"readOnly":false,"type":"boolean"},"services.synergy.client.enable":{"declarations":["nixos/modules/services/misc/synergy.nix"],"default":false,"description":"\n            Whether to enable the Synergy client (receive keyboard and mouse events from a Synergy server).\n          ","loc":["services","synergy","client","enable"],"readOnly":false,"type":"unspecified"},"services.synergy.client.screenName":{"declarations":["nixos/modules/services/misc/synergy.nix"],"default":"","description":"Use the given name instead of the hostname to identify\nourselves to the server.\n","loc":["services","synergy","client","screenName"],"readOnly":false,"type":"unspecified"},"services.synergy.client.serverAddress":{"declarations":["nixos/modules/services/misc/synergy.nix"],"description":"The server address is of the form: [hostname][:port].  The\nhostname must be the address or hostname of the server.  The\nport overrides the default port, 24800.\n","loc":["services","synergy","client","serverAddress"],"readOnly":false,"type":"unspecified"},"services.synergy.server.address":{"declarations":["nixos/modules/services/misc/synergy.nix"],"default":"","description":"Address on which to listen for clients.","loc":["services","synergy","server","address"],"readOnly":false,"type":"unspecified"},"services.synergy.server.autoStart":{"declarations":["nixos/modules/services/misc/synergy.nix"],"default":true,"description":"Whether the Synergy server should be started automatically.","loc":["services","synergy","server","autoStart"],"readOnly":false,"type":"boolean"},"services.synergy.server.configFile":{"declarations":["nixos/modules/services/misc/synergy.nix"],"default":"/etc/synergy-server.conf","description":"The Synergy server configuration file.","loc":["services","synergy","server","configFile"],"readOnly":false,"type":"unspecified"},"services.synergy.server.enable":{"declarations":["nixos/modules/services/misc/synergy.nix"],"default":false,"description":"Whether to enable the Synergy server (send keyboard and mouse events).\n","loc":["services","synergy","server","enable"],"readOnly":false,"type":"unspecified"},"services.synergy.server.screenName":{"declarations":["nixos/modules/services/misc/synergy.nix"],"default":"","description":"Use the given name instead of the hostname to identify\nthis screen in the configuration.\n","loc":["services","synergy","server","screenName"],"readOnly":false,"type":"unspecified"},"services.syslog-ng.configHeader":{"declarations":["nixos/modules/services/logging/syslog-ng.nix"],"default":"@version: 3.6\n@include \"scl.conf\"\n","description":"The very first lines of the configuration file. Should usually contain\nthe syslog-ng version header.\n","loc":["services","syslog-ng","configHeader"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.syslog-ng.enable":{"declarations":["nixos/modules/services/logging/syslog-ng.nix"],"default":false,"description":"Whether to enable the syslog-ng daemon.\n","loc":["services","syslog-ng","enable"],"readOnly":false,"type":"boolean"},"services.syslog-ng.extraConfig":{"declarations":["nixos/modules/services/logging/syslog-ng.nix"],"default":"","description":"Configuration added to the end of <literal>syslog-ng.conf</literal>.\n","loc":["services","syslog-ng","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.syslog-ng.extraModulePaths":{"declarations":["nixos/modules/services/logging/syslog-ng.nix"],"default":[],"description":"A list of paths that should be included in syslog-ng's\n<literal>--module-path</literal> option. They should usually\nend in <literal>/lib/syslog-ng</literal>\n","example":{"_type":"literalExample","text":"[ \"${pkgs.syslogng_incubator}/lib/syslog-ng\" ]\n"},"loc":["services","syslog-ng","extraModulePaths"],"readOnly":false,"type":"list of strings"},"services.syslog-ng.package":{"declarations":["nixos/modules/services/logging/syslog-ng.nix"],"default":"pkgs.syslogng","description":"The package providing syslog-ng binaries.\n","loc":["services","syslog-ng","package"],"readOnly":false,"type":"package"},"services.syslogd.defaultConfig":{"declarations":["nixos/modules/services/logging/syslogd.nix"],"default":"# Send emergency messages to all users.\n*.emerg                       *\n\n# \"local1\" is used for dhcpd messages.\nlocal1.*                     -/var/log/dhcpd\n\nmail.*                       -/var/log/mail\n\n*.=warning;*.=err            -/var/log/warn\n*.crit                        /var/log/warn\n\n*.*;mail.none;local1.none    -/var/log/messages\n","description":"The default <filename>syslog.conf</filename> file configures a\nfairly standard setup of log files, which can be extended by\nmeans of <varname>extraConfig</varname>.\n","loc":["services","syslogd","defaultConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.syslogd.enable":{"declarations":["nixos/modules/services/logging/syslogd.nix"],"default":false,"description":"Whether to enable syslogd.  Note that systemd also logs\nsyslog messages, so you normally don't need to run syslogd.\n","loc":["services","syslogd","enable"],"readOnly":false,"type":"boolean"},"services.syslogd.enableNetworkInput":{"declarations":["nixos/modules/services/logging/syslogd.nix"],"default":false,"description":"Accept logging through UDP. Option -r of syslogd(8).\n","loc":["services","syslogd","enableNetworkInput"],"readOnly":false,"type":"boolean"},"services.syslogd.extraConfig":{"declarations":["nixos/modules/services/logging/syslogd.nix"],"default":"","description":"Additional text appended to <filename>syslog.conf</filename>,\ni.e. the contents of <varname>defaultConfig</varname>.\n","example":"news.* -/var/log/news","loc":["services","syslogd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.syslogd.extraParams":{"declarations":["nixos/modules/services/logging/syslogd.nix"],"default":[],"description":"Additional parameters passed to <command>syslogd</command>.\n","example":["-m 0"],"loc":["services","syslogd","extraParams"],"readOnly":false,"type":"list of strings"},"services.syslogd.tty":{"declarations":["nixos/modules/services/logging/syslogd.nix"],"default":"tty10","description":"The tty device on which syslogd will print important log\nmessages. Leave this option blank to disable tty logging.\n","loc":["services","syslogd","tty"],"readOnly":false,"type":"string"},"services.sysprof.enable":{"declarations":["nixos/modules/services/misc/sysprof.nix"],"default":false,"description":"Whether to enable sysprof profiling daemon.","example":true,"loc":["services","sysprof","enable"],"readOnly":false,"type":"boolean"},"services.sysstat.collect-args":{"declarations":["nixos/modules/services/monitoring/sysstat.nix"],"default":"1 1","description":"Arguments to pass sa1 when collecting statistics\n","loc":["services","sysstat","collect-args"],"readOnly":false,"type":"unspecified"},"services.sysstat.collect-frequency":{"declarations":["nixos/modules/services/monitoring/sysstat.nix"],"default":"*:00/10","description":"OnCalendar specification for sysstat-collect\n","loc":["services","sysstat","collect-frequency"],"readOnly":false,"type":"unspecified"},"services.sysstat.enable":{"declarations":["nixos/modules/services/monitoring/sysstat.nix"],"default":false,"description":"Whether to enable sar system activity collection.\n","loc":["services","sysstat","enable"],"readOnly":false,"type":"boolean"},"services.systemhealth.drives":{"declarations":["nixos/modules/services/monitoring/systemhealth.nix"],"default":[],"description":"Drives to monitor.\n","example":[{"name":"root","path":"/"}],"loc":["services","systemhealth","drives"],"readOnly":false,"type":"unspecified"},"services.systemhealth.enable":{"declarations":["nixos/modules/services/monitoring/systemhealth.nix"],"default":false,"description":"Enable the system health monitor and its generation of graphs.\n","loc":["services","systemhealth","enable"],"readOnly":false,"type":"unspecified"},"services.systemhealth.interfaces":{"declarations":["nixos/modules/services/monitoring/systemhealth.nix"],"default":["lo"],"description":"Interfaces to monitor (minimum one).\n","example":["lo","eth0","eth1"],"loc":["services","systemhealth","interfaces"],"readOnly":false,"type":"unspecified"},"services.systemhealth.urlPrefix":{"declarations":["nixos/modules/services/monitoring/systemhealth.nix"],"default":"/health","description":"The URL prefix under which the System Health web pages appear in httpd.\n","loc":["services","systemhealth","urlPrefix"],"readOnly":false,"type":"unspecified"},"services.tahoe.introducers":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":{},"description":"The Tahoe introducers.\n","loc":["services","tahoe","introducers"],"readOnly":false,"type":"attribute set of submodules"},"services.tahoe.introducers.<name>.nickname":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"description":"The nickname of this Tahoe introducer.\n","loc":["services","tahoe","introducers","<name>","nickname"],"readOnly":false,"type":"string"},"services.tahoe.introducers.<name>.package":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":"pkgs.tahoelafs","description":"The package to use for the Tahoe LAFS daemon.\n","example":{"_type":"literalExample","text":"pkgs.tahoelafs"},"loc":["services","tahoe","introducers","<name>","package"],"readOnly":false,"type":"package"},"services.tahoe.introducers.<name>.tub.location":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"The external location that the introducer should listen on.\n\nIf specified, the port should be included.\n","loc":["services","tahoe","introducers","<name>","tub","location"],"readOnly":false,"type":"null or string"},"services.tahoe.introducers.<name>.tub.port":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":3458,"description":"The port on which the introducer will listen.\n","loc":["services","tahoe","introducers","<name>","tub","port"],"readOnly":false,"type":"signed integer"},"services.tahoe.nodes":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":{},"description":"The Tahoe nodes.\n","loc":["services","tahoe","nodes"],"readOnly":false,"type":"attribute set of submodules"},"services.tahoe.nodes.<name>.client.helper":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"The furl for a Tahoe helper node.\n\nLike all furls, keep this safe and don't share it.\n","loc":["services","tahoe","nodes","<name>","client","helper"],"readOnly":false,"type":"null or string"},"services.tahoe.nodes.<name>.client.introducer":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"The furl for a Tahoe introducer node.\n\nLike all furls, keep this safe and don't share it.\n","loc":["services","tahoe","nodes","<name>","client","introducer"],"readOnly":false,"type":"null or string"},"services.tahoe.nodes.<name>.client.shares.happy":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":7,"description":"The number of distinct storage nodes required to store\na file.\n","loc":["services","tahoe","nodes","<name>","client","shares","happy"],"readOnly":false,"type":"signed integer"},"services.tahoe.nodes.<name>.client.shares.needed":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":3,"description":"The number of shares required to reconstitute a file.\n","loc":["services","tahoe","nodes","<name>","client","shares","needed"],"readOnly":false,"type":"signed integer"},"services.tahoe.nodes.<name>.client.shares.total":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":10,"description":"The number of shares required to store a file.\n","loc":["services","tahoe","nodes","<name>","client","shares","total"],"readOnly":false,"type":"signed integer"},"services.tahoe.nodes.<name>.helper.enable":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":false,"description":"Whether to enable helper service.","example":true,"loc":["services","tahoe","nodes","<name>","helper","enable"],"readOnly":false,"type":"boolean"},"services.tahoe.nodes.<name>.nickname":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"description":"The nickname of this Tahoe node.\n","loc":["services","tahoe","nodes","<name>","nickname"],"readOnly":false,"type":"string"},"services.tahoe.nodes.<name>.package":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":"pkgs.tahoelafs","description":"The package to use for the Tahoe LAFS daemon.\n","example":{"_type":"literalExample","text":"pkgs.tahoelafs"},"loc":["services","tahoe","nodes","<name>","package"],"readOnly":false,"type":"package"},"services.tahoe.nodes.<name>.sftpd.accounts.file":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"Path to the accounts file.\n","loc":["services","tahoe","nodes","<name>","sftpd","accounts","file"],"readOnly":false,"type":"null or path"},"services.tahoe.nodes.<name>.sftpd.accounts.url":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"URL of the accounts server.\n","loc":["services","tahoe","nodes","<name>","sftpd","accounts","url"],"readOnly":false,"type":"null or string"},"services.tahoe.nodes.<name>.sftpd.enable":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":false,"description":"Whether to enable SFTP service.","example":true,"loc":["services","tahoe","nodes","<name>","sftpd","enable"],"readOnly":false,"type":"boolean"},"services.tahoe.nodes.<name>.sftpd.hostPrivateKeyFile":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"Path to the SSH host private key.\n","loc":["services","tahoe","nodes","<name>","sftpd","hostPrivateKeyFile"],"readOnly":false,"type":"null or path"},"services.tahoe.nodes.<name>.sftpd.hostPublicKeyFile":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"Path to the SSH host public key.\n","loc":["services","tahoe","nodes","<name>","sftpd","hostPublicKeyFile"],"readOnly":false,"type":"null or path"},"services.tahoe.nodes.<name>.sftpd.port":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"The port on which the SFTP server will listen.\n\nThis is the correct setting to tweak if you want Tahoe's SFTP\ndaemon to listen on a different port.\n","loc":["services","tahoe","nodes","<name>","sftpd","port"],"readOnly":false,"type":"null or signed integer"},"services.tahoe.nodes.<name>.storage.enable":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":false,"description":"Whether to enable storage service.","example":true,"loc":["services","tahoe","nodes","<name>","storage","enable"],"readOnly":false,"type":"boolean"},"services.tahoe.nodes.<name>.storage.reservedSpace":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":"1G","description":"The amount of filesystem space to not use for storage.\n","loc":["services","tahoe","nodes","<name>","storage","reservedSpace"],"readOnly":false,"type":"string"},"services.tahoe.nodes.<name>.tub.location":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":null,"description":"The external location that the node should listen on.\n\nThis is the setting to tweak if there are multiple interfaces\nand you want to alter which interface Tahoe is advertising.\n\nIf specified, the port should be included.\n","loc":["services","tahoe","nodes","<name>","tub","location"],"readOnly":false,"type":"null or string"},"services.tahoe.nodes.<name>.tub.port":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":3457,"description":"The port on which the tub will listen.\n\nThis is the correct setting to tweak if you want Tahoe's storage\nsystem to listen on a different port.\n","loc":["services","tahoe","nodes","<name>","tub","port"],"readOnly":false,"type":"signed integer"},"services.tahoe.nodes.<name>.web.port":{"declarations":["nixos/modules/services/network-filesystems/tahoe.nix"],"default":3456,"description":"The port on which the Web server will listen.\n\nThis is the correct setting to tweak if you want Tahoe's WUI to\nlisten on a different port.\n","loc":["services","tahoe","nodes","<name>","web","port"],"readOnly":false,"type":"signed integer"},"services.tarsnap.archives":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":{},"description":"Tarsnap archive configurations. Each attribute names an archive\nto be created at a given time interval, according to the options\nassociated with it. When uploading to the tarsnap server,\narchive names are suffixed by a 1 second resolution timestamp.\n\nFor each member of the set is created a timer which triggers the\ninstanced <literal>tarsnap-archive-name</literal> service unit. You may use\n<command>systemctl start tarsnap-archive-name</command> to\nmanually trigger creation of <literal>archive-name</literal> at\nany time.\n","example":{"_type":"literalExample","text":"{\n  nixos =\n    { directories = [ \"/home\" \"/root/ssl\" ];\n    };\n\n  gamedata =\n    { directories = [ \"/var/lib/minecraft\" ];\n      period      = \"*:30\";\n    };\n}\n"},"loc":["services","tarsnap","archives"],"readOnly":false,"type":"attribute set of submodules"},"services.tarsnap.archives.<name>.aggressiveNetworking":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":false,"description":"Upload data over multiple TCP connections, potentially\nincreasing tarsnap's bandwidth utilisation at the cost\nof slowing down all other network traffic. Not\nrecommended unless TCP congestion is the dominant\nlimiting factor.\n","loc":["services","tarsnap","archives","<name>","aggressiveNetworking"],"readOnly":false,"type":"boolean"},"services.tarsnap.archives.<name>.cachedir":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":"/var/cache/tarsnap/root-tarsnap.key","description":"The cache allows tarsnap to identify previously stored data\nblocks, reducing archival time and bandwidth usage.\n\nShould the cache become desynchronized or corrupted, tarsnap\nwill refuse to run until you manually rebuild the cache with\n<command>tarsnap --fsck</command>.\n\nSet to <literal>null</literal> to disable caching.\n","loc":["services","tarsnap","archives","<name>","cachedir"],"readOnly":false,"type":"null or path"},"services.tarsnap.archives.<name>.checkpointBytes":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":"1GB","description":"Create a checkpoint every <literal>checkpointBytes</literal>\nof uploaded data (optionally specified using an SI prefix).\n\n1GB is the minimum value. A higher value is recommended,\nas checkpointing is expensive.\n\nSet to <literal>null</literal> to disable checkpointing.\n","loc":["services","tarsnap","archives","<name>","checkpointBytes"],"readOnly":false,"type":"null or string"},"services.tarsnap.archives.<name>.directories":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":[],"description":"List of filesystem paths to archive.","loc":["services","tarsnap","archives","<name>","directories"],"readOnly":false,"type":"list of paths"},"services.tarsnap.archives.<name>.excludes":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":[],"description":"Exclude files and directories matching these patterns.\n","loc":["services","tarsnap","archives","<name>","excludes"],"readOnly":false,"type":"list of strings"},"services.tarsnap.archives.<name>.explicitSymlinks":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":false,"description":"Whether to follow symlinks specified as archives.\n","loc":["services","tarsnap","archives","<name>","explicitSymlinks"],"readOnly":false,"type":"boolean"},"services.tarsnap.archives.<name>.followSymlinks":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":false,"description":"Whether to follow all symlinks in archive trees.\n","loc":["services","tarsnap","archives","<name>","followSymlinks"],"readOnly":false,"type":"boolean"},"services.tarsnap.archives.<name>.includes":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":[],"description":"Include only files and directories matching these\npatterns (the empty list includes everything).\n\nExclusions have precedence over inclusions.\n","loc":["services","tarsnap","archives","<name>","includes"],"readOnly":false,"type":"list of strings"},"services.tarsnap.archives.<name>.keyfile":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":"/root/tarsnap.key","description":"Set a specific keyfile for this archive. This defaults to\n<literal>\"/root/tarsnap.key\"</literal> if left unspecified.\n\nUse this option if you want to run multiple backups\nconcurrently - each archive must have a unique key. You can\ngenerate a write-only key derived from your master key (which\nis recommended) using <literal>tarsnap-keymgmt(1)</literal>.\n\nNote: every archive must have an individual master key. You\nmust generate multiple keys with\n<literal>tarsnap-keygen(1)</literal>, and then generate write\nonly keys from those.\n\nThe keyfile name should be given as a string and not a path, to\navoid the key being copied into the Nix store.\n","loc":["services","tarsnap","archives","<name>","keyfile"],"readOnly":false,"type":"string"},"services.tarsnap.archives.<name>.lowmem":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":false,"description":"Reduce memory consumption by not caching small files.\nPossibly beneficial if the average file size is smaller\nthan 1 MB and the number of files is lower than the\ntotal amount of RAM in KB.\n","loc":["services","tarsnap","archives","<name>","lowmem"],"readOnly":false,"type":"boolean"},"services.tarsnap.archives.<name>.maxbw":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":null,"description":"Abort archival if upstream bandwidth usage in bytes\nexceeds this threshold.\n","loc":["services","tarsnap","archives","<name>","maxbw"],"readOnly":false,"type":"null or signed integer"},"services.tarsnap.archives.<name>.maxbwRateDown":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":null,"description":"Download bandwidth rate limit in bytes.\n","example":{"_type":"literalExample","text":"50 * 1000"},"loc":["services","tarsnap","archives","<name>","maxbwRateDown"],"readOnly":false,"type":"null or signed integer"},"services.tarsnap.archives.<name>.maxbwRateUp":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":null,"description":"Upload bandwidth rate limit in bytes.\n","example":{"_type":"literalExample","text":"25 * 1000"},"loc":["services","tarsnap","archives","<name>","maxbwRateUp"],"readOnly":false,"type":"null or signed integer"},"services.tarsnap.archives.<name>.nodump":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":true,"description":"Exclude files with the <literal>nodump</literal> flag.\n","loc":["services","tarsnap","archives","<name>","nodump"],"readOnly":false,"type":"boolean"},"services.tarsnap.archives.<name>.period":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":"01:15","description":"Create archive at this interval.\n\nThe format is described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","example":"hourly","loc":["services","tarsnap","archives","<name>","period"],"readOnly":false,"type":"string"},"services.tarsnap.archives.<name>.printStats":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":true,"description":"Print global archive statistics upon completion.\nThe output is available via\n<command>systemctl status tarsnap-archive-name</command>.\n","loc":["services","tarsnap","archives","<name>","printStats"],"readOnly":false,"type":"boolean"},"services.tarsnap.archives.<name>.verbose":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":false,"description":"Whether to produce verbose logging output.\n","loc":["services","tarsnap","archives","<name>","verbose"],"readOnly":false,"type":"boolean"},"services.tarsnap.archives.<name>.verylowmem":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":false,"description":"Reduce memory consumption by a factor of 2 beyond what\n<literal>lowmem</literal> does, at the cost of significantly\nslowing down the archiving process.\n","loc":["services","tarsnap","archives","<name>","verylowmem"],"readOnly":false,"type":"boolean"},"services.tarsnap.enable":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":false,"description":"Enable periodic tarsnap backups.\n","loc":["services","tarsnap","enable"],"readOnly":false,"type":"boolean"},"services.tarsnap.keyfile":{"declarations":["nixos/modules/services/backup/tarsnap.nix"],"default":"/root/tarsnap.key","description":"The keyfile which associates this machine with your tarsnap\naccount.\nCreate the keyfile with <command>tarsnap-keygen</command>.\n\nNote that each individual archive (specified below) may also have its\nown individual keyfile specified. Tarsnap does not allow multiple\nconcurrent backups with the same cache directory and key (starting a\nnew backup will cause another one to fail). If you have multiple\narchives specified, you should either spread out your backups to be\nfar apart, or specify a separate key for each archive. By default\nevery archive defaults to using\n<literal>\"/root/tarsnap.key\"</literal>.\n\nIt's recommended for backups that you generate a key for every archive\nusing <literal>tarsnap-keygen(1)</literal>, and then generate a\nwrite-only tarsnap key using <literal>tarsnap-keymgmt(1)</literal>,\nand keep your master key(s) for a particular machine off-site.\n\nThe keyfile name should be given as a string and not a path, to\navoid the key being copied into the Nix store.\n","loc":["services","tarsnap","keyfile"],"readOnly":false,"type":"string"},"services.taskserver.allowedClientIDs":{"declarations":["nixos/modules/services/misc/taskserver"],"default":[],"description":"A list of regular expressions that are matched against the reported\nclient id (such as <literal>task 2.3.0</literal>).\n\nThe values <literal>all</literal> or <literal>none</literal> have\nspecial meaning. Overidden by any entry in the option\n<option>services.taskserver.disallowedClientIDs</option>.\n","example":["[Tt]ask [2-9]+"],"loc":["services","taskserver","allowedClientIDs"],"readOnly":false,"type":"string or list of strings"},"services.taskserver.ciphers":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"List of GnuTLS ciphers to use. See the GnuTLS documentation about\npriority strings at <link xlink:href=\"https://gnutls.org/manual/html_node/Priority-Strings.html\"/> for full details.\n","example":"NORMAL:-VERS-SSL3.0","loc":["services","taskserver","ciphers"],"readOnly":false,"type":"null or strings concatenated with \":\""},"services.taskserver.config":{"declarations":["nixos/modules/services/misc/taskserver"],"description":"Configuration options to pass to Taskserver.\n\nThe options here are the same as described in <citerefentry>\n  <refentrytitle>taskdrc</refentrytitle>\n  <manvolnum>5</manvolnum>\n</citerefentry>, but with one difference:\n\nThe <literal>server</literal> option is\n<literal>server.listen</literal> here, because the\n<literal>server</literal> option would collide with other options\nlike <literal>server.cert</literal> and we would run in a type error\n(attribute set versus string).\n\nNix types like integers or booleans are automatically converted to\nthe right values Taskserver would expect.\n","example":{"client":{"cert":"/tmp/debugging.cert"}},"loc":["services","taskserver","config"],"readOnly":false,"type":"attribute set"},"services.taskserver.confirmation":{"declarations":["nixos/modules/services/misc/taskserver"],"default":true,"description":"Determines whether certain commands are confirmed.\n","loc":["services","taskserver","confirmation"],"readOnly":false,"type":"boolean"},"services.taskserver.dataDir":{"declarations":["nixos/modules/services/misc/taskserver"],"default":"/var/lib/taskserver","description":"Data directory for Taskserver.","loc":["services","taskserver","dataDir"],"readOnly":false,"type":"path"},"services.taskserver.debug":{"declarations":["nixos/modules/services/misc/taskserver"],"default":false,"description":"Logs debugging information.\n","loc":["services","taskserver","debug"],"readOnly":false,"type":"boolean"},"services.taskserver.disallowedClientIDs":{"declarations":["nixos/modules/services/misc/taskserver"],"default":[],"description":"A list of regular expressions that are matched against the reported\nclient id (such as <literal>task 2.3.0</literal>).\n\nThe values <literal>all</literal> or <literal>none</literal> have\nspecial meaning. Any entry here overrides those in\n<option>services.taskserver.allowedClientIDs</option>.\n","example":["[Tt]ask [2-9]+"],"loc":["services","taskserver","disallowedClientIDs"],"readOnly":false,"type":"string or list of strings"},"services.taskserver.enable":{"declarations":["nixos/modules/services/misc/taskserver"],"default":false,"description":"Whether to enable the Taskwarrior server.\n\nMore instructions about NixOS in conjuction with Taskserver can be\nfound in the NixOS manual at\n<olink targetdoc=\"manual\" targetptr=\"module-taskserver\"/>.\n","loc":["services","taskserver","enable"],"readOnly":false,"type":"boolean"},"services.taskserver.extensions":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"Fully qualified path of the Taskserver extension scripts.\nCurrently there are none.\n","loc":["services","taskserver","extensions"],"readOnly":false,"type":"null or path"},"services.taskserver.fqdn":{"declarations":["nixos/modules/services/misc/taskserver"],"default":"localhost","description":"The fully qualified domain name of this server, which is also used\nas the common name in the certificates.\n","loc":["services","taskserver","fqdn"],"readOnly":false,"type":"string"},"services.taskserver.group":{"declarations":["nixos/modules/services/misc/taskserver"],"default":"taskd","description":"Group for Taskserver.","loc":["services","taskserver","group"],"readOnly":false,"type":"string"},"services.taskserver.ipLog":{"declarations":["nixos/modules/services/misc/taskserver"],"default":false,"description":"Logs the IP addresses of incoming requests.\n","loc":["services","taskserver","ipLog"],"readOnly":false,"type":"boolean"},"services.taskserver.listenHost":{"declarations":["nixos/modules/services/misc/taskserver"],"default":"localhost","description":"The address (IPv4, IPv6 or DNS) to listen on.\n\nIf the value is something else than <literal>localhost</literal> the\nport defined by <option>listenPort</option> is automatically added to\n<option>networking.firewall.allowedTCPPorts</option>.\n","example":"::","loc":["services","taskserver","listenHost"],"readOnly":false,"type":"string"},"services.taskserver.listenPort":{"declarations":["nixos/modules/services/misc/taskserver"],"default":53589,"description":"Port number of the Taskserver.\n","loc":["services","taskserver","listenPort"],"readOnly":false,"type":"signed integer"},"services.taskserver.organisations":{"declarations":["nixos/modules/services/misc/taskserver"],"default":{},"description":"An attribute set where the keys name the organisation and the values\nare a set of lists of <option>users</option> and\n<option>groups</option>.\n","example":{"myShinyOrganisation":{"groups":["staff","outsiders"],"users":["alice","bob"]},"yetAnotherOrganisation":{"users":["foo","bar"]}},"loc":["services","taskserver","organisations"],"readOnly":false,"type":"attribute set of submodules"},"services.taskserver.organisations.<name>.groups":{"declarations":["nixos/modules/services/misc/taskserver"],"default":[],"description":"A list of group names that belong to the organization.\n","example":["workers","slackers"],"loc":["services","taskserver","organisations","<name>","groups"],"readOnly":false,"type":"list of strings"},"services.taskserver.organisations.<name>.users":{"declarations":["nixos/modules/services/misc/taskserver"],"default":[],"description":"A list of user names that belong to the organization.\n","example":["alice","bob"],"loc":["services","taskserver","organisations","<name>","users"],"readOnly":false,"type":"list of strings"},"services.taskserver.pki.auto.bits":{"declarations":["nixos/modules/services/misc/taskserver"],"default":4096,"description":"The bit size for generated keys.\n\n<note><para>\nThis option is for the automatically handled CA and will be ignored if any\nof the <option>services.taskserver.pki.manual.*</option> options are set.\n</para></note>\n","example":2048,"loc":["services","taskserver","pki","auto","bits"],"readOnly":false,"type":"signed integer"},"services.taskserver.pki.auto.expiration.ca":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"The expiration time of the CA certificate in days or <literal>null</literal> for no\nexpiration time.\n\n\n<note><para>\nThis option is for the automatically handled CA and will be ignored if any\nof the <option>services.taskserver.pki.manual.*</option> options are set.\n</para></note>\n","example":365,"loc":["services","taskserver","pki","auto","expiration","ca"],"readOnly":false,"type":"null or signed integer"},"services.taskserver.pki.auto.expiration.client":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"The expiration time of client certificates in days or <literal>null</literal> for no\nexpiration time.\n\n\n<note><para>\nThis option is for the automatically handled CA and will be ignored if any\nof the <option>services.taskserver.pki.manual.*</option> options are set.\n</para></note>\n","example":365,"loc":["services","taskserver","pki","auto","expiration","client"],"readOnly":false,"type":"null or signed integer"},"services.taskserver.pki.auto.expiration.crl":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"The expiration time of the certificate revocation list (CRL) in days or <literal>null</literal> for no\nexpiration time.\n\n\n<note><para>\nThis option is for the automatically handled CA and will be ignored if any\nof the <option>services.taskserver.pki.manual.*</option> options are set.\n</para></note>\n","example":365,"loc":["services","taskserver","pki","auto","expiration","crl"],"readOnly":false,"type":"null or signed integer"},"services.taskserver.pki.auto.expiration.server":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"The expiration time of the server certificate in days or <literal>null</literal> for no\nexpiration time.\n\n\n<note><para>\nThis option is for the automatically handled CA and will be ignored if any\nof the <option>services.taskserver.pki.manual.*</option> options are set.\n</para></note>\n","example":365,"loc":["services","taskserver","pki","auto","expiration","server"],"readOnly":false,"type":"null or signed integer"},"services.taskserver.pki.manual.ca.cert":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"Fully qualified path to the CA certificate.\n<note><para>\nSetting this option will prevent automatic CA creation and handling.\n</para></note>\n","loc":["services","taskserver","pki","manual","ca","cert"],"readOnly":false,"type":"null or path"},"services.taskserver.pki.manual.server.cert":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"Fully qualified path to the server certificate.\n<note><para>\nSetting this option will prevent automatic CA creation and handling.\n</para></note>\n","loc":["services","taskserver","pki","manual","server","cert"],"readOnly":false,"type":"null or path"},"services.taskserver.pki.manual.server.crl":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"Fully qualified path to the server certificate revocation list.\n<note><para>\nSetting this option will prevent automatic CA creation and handling.\n</para></note>\n","loc":["services","taskserver","pki","manual","server","crl"],"readOnly":false,"type":"null or path"},"services.taskserver.pki.manual.server.key":{"declarations":["nixos/modules/services/misc/taskserver"],"default":null,"description":"Fully qualified path to the server key.\n<note><para>\nSetting this option will prevent automatic CA creation and handling.\n</para></note>\n","loc":["services","taskserver","pki","manual","server","key"],"readOnly":false,"type":"null or path"},"services.taskserver.queueSize":{"declarations":["nixos/modules/services/misc/taskserver"],"default":10,"description":"Size of the connection backlog, see <citerefentry>\n  <refentrytitle>listen</refentrytitle>\n  <manvolnum>2</manvolnum>\n</citerefentry>.\n","loc":["services","taskserver","queueSize"],"readOnly":false,"type":"signed integer"},"services.taskserver.requestLimit":{"declarations":["nixos/modules/services/misc/taskserver"],"default":1048576,"description":"Size limit of incoming requests, in bytes.\n","loc":["services","taskserver","requestLimit"],"readOnly":false,"type":"signed integer"},"services.taskserver.trust":{"declarations":["nixos/modules/services/misc/taskserver"],"default":"strict","description":"Determines how client certificates are validated.\n\nThe value <literal>allow all</literal> performs no client\ncertificate validation. This is not recommended. The value\n<literal>strict</literal> causes the client certificate to be\nvalidated against a CA.\n","loc":["services","taskserver","trust"],"readOnly":false,"type":"one of \"allow all\", \"strict\""},"services.taskserver.user":{"declarations":["nixos/modules/services/misc/taskserver"],"default":"taskd","description":"User for Taskserver.","loc":["services","taskserver","user"],"readOnly":false,"type":"string"},"services.tcsd.conformanceCred":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":"/var/lib/tpm/conformance.cert","description":"Path to the conformance credential for your TPM.\nSee also the platformCred option","loc":["services","tcsd","conformanceCred"],"readOnly":false,"type":"path"},"services.tcsd.enable":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":false,"description":"Whether to enable tcsd, a Trusted Computing management service\nthat provides TCG Software Stack (TSS).  The tcsd daemon is\nthe only portal to the Trusted Platform Module (TPM), a hardware\nchip on the motherboard.\n","loc":["services","tcsd","enable"],"readOnly":false,"type":"boolean"},"services.tcsd.endorsementCred":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":"/var/lib/tpm/endorsement.cert","description":"Path to the endorsement credential for your TPM.\nSee also the platformCred option","loc":["services","tcsd","endorsementCred"],"readOnly":false,"type":"path"},"services.tcsd.firmwarePCRs":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":"0,1,2,3,4,5,6,7","description":"PCR indices used in the TPM for firmware measurements.","loc":["services","tcsd","firmwarePCRs"],"readOnly":false,"type":"Concatenated string"},"services.tcsd.group":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":"tss","description":"Group account under which tcsd runs.","loc":["services","tcsd","group"],"readOnly":false,"type":"Concatenated string"},"services.tcsd.kernelPCRs":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":"8,9,10,11,12","description":"PCR indices used in the TPM for kernel measurements.","loc":["services","tcsd","kernelPCRs"],"readOnly":false,"type":"Concatenated string"},"services.tcsd.platformCred":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":"/var/lib/tpm/platform.cert","description":"Path to the platform credential for your TPM. Your TPM\nmanufacturer may have provided you with a set of credentials\n(certificates) that should be used when creating identities\nusing your TPM. When a user of your TPM makes an identity,\nthis credential will be encrypted as part of that process.\nSee the 1.1b TPM Main specification section 9.3 for information\non this process. ","loc":["services","tcsd","platformCred"],"readOnly":false,"type":"path"},"services.tcsd.stateDir":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":"/var/lib/tpm","description":"The location of the system persistent storage file.\nThe system persistent storage file holds keys and data across\nrestarts of the TCSD and system reboots. \n","loc":["services","tcsd","stateDir"],"readOnly":false,"type":"path"},"services.tcsd.user":{"declarations":["nixos/modules/services/hardware/tcsd.nix"],"default":"tss","description":"User account under which tcsd runs.","loc":["services","tcsd","user"],"readOnly":false,"type":"Concatenated string"},"services.teamspeak3.dataDir":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":"/var/lib/teamspeak3-server","description":"Directory to store TS3 database and other state/data files.\n","loc":["services","teamspeak3","dataDir"],"readOnly":false,"type":"path"},"services.teamspeak3.defaultVoicePort":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":9987,"description":"Default UDP port for clients to connect to virtual servers - used for first virtual server, subsequent ones will open on incrementing port numbers by default.\n","loc":["services","teamspeak3","defaultVoicePort"],"readOnly":false,"type":"signed integer"},"services.teamspeak3.enable":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":false,"description":"Whether to run the Teamspeak3 voice communication server daemon.\n","loc":["services","teamspeak3","enable"],"readOnly":false,"type":"boolean"},"services.teamspeak3.fileTransferIP":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":"0.0.0.0","description":"IP on which the server instance will listen for incoming file transfer connections. Defaults to any IP.\n","loc":["services","teamspeak3","fileTransferIP"],"readOnly":false,"type":"string"},"services.teamspeak3.fileTransferPort":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":30033,"description":"TCP port opened for file transfers.\n","loc":["services","teamspeak3","fileTransferPort"],"readOnly":false,"type":"signed integer"},"services.teamspeak3.logPath":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":"/var/log/teamspeak3-server/","description":"Directory to store log files in.\n","loc":["services","teamspeak3","logPath"],"readOnly":false,"type":"path"},"services.teamspeak3.queryIP":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":"0.0.0.0","description":"IP on which the server instance will listen for incoming ServerQuery connections. Defaults to any IP.\n","loc":["services","teamspeak3","queryIP"],"readOnly":false,"type":"string"},"services.teamspeak3.queryPort":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":10011,"description":"TCP port opened for ServerQuery connections.\n","loc":["services","teamspeak3","queryPort"],"readOnly":false,"type":"signed integer"},"services.teamspeak3.voiceIP":{"declarations":["nixos/modules/services/networking/teamspeak3.nix"],"default":"0.0.0.0","description":"IP on which the server instance will listen for incoming voice connections. Defaults to any IP.\n","loc":["services","teamspeak3","voiceIP"],"readOnly":false,"type":"string"},"services.teamviewer.enable":{"declarations":["nixos/modules/services/monitoring/teamviewer.nix"],"default":false,"description":"Whether to enable TeamViewer daemon.","example":true,"loc":["services","teamviewer","enable"],"readOnly":false,"type":"boolean"},"services.telegraf.enable":{"declarations":["nixos/modules/services/monitoring/telegraf.nix"],"default":false,"description":"Whether to enable telegraf server.","example":true,"loc":["services","telegraf","enable"],"readOnly":false,"type":"boolean"},"services.telegraf.extraConfig":{"declarations":["nixos/modules/services/monitoring/telegraf.nix"],"default":{},"description":"Extra configuration options for telegraf","example":{"inputs":{"statsd":{"delete_timings":true,"service_address":":8125"}},"outputs":{"influxdb":{"database":"telegraf","urls":["http://localhost:8086"]}}},"loc":["services","telegraf","extraConfig"],"readOnly":false,"type":"attribute set"},"services.telegraf.package":{"declarations":["nixos/modules/services/monitoring/telegraf.nix"],"default":"pkgs.telegraf","description":"Which telegraf derivation to use","loc":["services","telegraf","package"],"readOnly":false,"type":"package"},"services.telepathy.enable":{"declarations":["nixos/modules/services/desktops/telepathy.nix"],"default":false,"description":"Whether to enable Telepathy service, a communications framework\nthat enables real-time communication via pluggable protocol backends.\n","loc":["services","telepathy","enable"],"readOnly":false,"type":"boolean"},"services.terraria.autoCreatedWorldSize":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":"medium","description":"Specifies the size of the auto-created world if <literal>worldPath</literal> does not\npoint to an existing world.\n","loc":["services","terraria","autoCreatedWorldSize"],"readOnly":false,"type":"one of \"small\", \"medium\", \"large\""},"services.terraria.banListPath":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":null,"description":"The path to the ban list.\n","loc":["services","terraria","banListPath"],"readOnly":false,"type":"null or path"},"services.terraria.enable":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":false,"description":"If enabled, starts a Terraria server. The server can be connected to via <literal>tmux -S /var/lib/terraria/terraria.sock attach</literal>\nfor administration by users who are a part of the <literal>terraria</literal> group (use <literal>C-b d</literal> shortcut to detach again).\n","loc":["services","terraria","enable"],"readOnly":false,"type":"boolean"},"services.terraria.maxPlayers":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":255,"description":"Sets the max number of players (between 1 and 255).\n","loc":["services","terraria","maxPlayers"],"readOnly":false,"type":"signed integer"},"services.terraria.messageOfTheDay":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":null,"description":"Set the server message of the day text.\n","loc":["services","terraria","messageOfTheDay"],"readOnly":false,"type":"null or string"},"services.terraria.noUPnP":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":false,"description":"Disables automatic Universal Plug and Play.","loc":["services","terraria","noUPnP"],"readOnly":false,"type":"boolean"},"services.terraria.password":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":null,"description":"Sets the server password. Leave <literal>null</literal> for no password.\n","loc":["services","terraria","password"],"readOnly":false,"type":"null or string"},"services.terraria.port":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":7777,"description":"Specifies the port to listen on.\n","loc":["services","terraria","port"],"readOnly":false,"type":"signed integer"},"services.terraria.secure":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":false,"description":"Adds additional cheat protection to the server.","loc":["services","terraria","secure"],"readOnly":false,"type":"boolean"},"services.terraria.worldPath":{"declarations":["nixos/modules/services/games/terraria.nix"],"default":null,"description":"The path to the world file (<literal>.wld</literal>) which should be loaded.\nIf no world exists at this path, one will be created with the size\nspecified by <literal>autoCreatedWorldSize</literal>.\n","loc":["services","terraria","worldPath"],"readOnly":false,"type":"null or path"},"services.tftpd.enable":{"declarations":["nixos/modules/services/networking/tftpd.nix"],"default":false,"description":"Whether to enable tftpd, a Trivial File Transfer Protocol server.\nThe server will be run as an xinetd service.\n","loc":["services","tftpd","enable"],"readOnly":false,"type":"boolean"},"services.tftpd.path":{"declarations":["nixos/modules/services/networking/tftpd.nix"],"default":"/srv/tftp","description":"Where the tftp server files are stored.\n","loc":["services","tftpd","path"],"readOnly":false,"type":"path"},"services.thermald.configFile":{"declarations":["nixos/modules/services/hardware/thermald.nix"],"default":null,"description":"the thermald manual configuration file.","loc":["services","thermald","configFile"],"readOnly":false,"type":"null or path"},"services.thermald.debug":{"declarations":["nixos/modules/services/hardware/thermald.nix"],"default":false,"description":"Whether to enable debug logging.\n","loc":["services","thermald","debug"],"readOnly":false,"type":"boolean"},"services.thermald.enable":{"declarations":["nixos/modules/services/hardware/thermald.nix"],"default":false,"description":"Whether to enable thermald, the temperature management daemon.\n","loc":["services","thermald","enable"],"readOnly":false,"type":"unspecified"},"services.thinkfan.enable":{"declarations":["nixos/modules/services/hardware/thinkfan.nix"],"default":false,"description":"Whether to enable thinkfan, fan controller for IBM/Lenovo ThinkPads.\n","loc":["services","thinkfan","enable"],"readOnly":false,"type":"boolean"},"services.thinkfan.fan":{"declarations":["nixos/modules/services/hardware/thinkfan.nix"],"default":"tp_fan /proc/acpi/ibm/fan","description":"Specifies the fan we want to use.\nOn anything other than a Thinkpad you'll probably\nuse some PWM control file in /sys/class/hwmon.\nA sysfs fan would be specified like this:\n  pwm_fan /sys/class/hwmon/hwmon2/device/pwm1\n","loc":["services","thinkfan","fan"],"readOnly":false,"type":"string"},"services.thinkfan.levels":{"declarations":["nixos/modules/services/hardware/thinkfan.nix"],"default":"(0,     0,      55)\n(1,     48,     60)\n(2,     50,     61)\n(3,     52,     63)\n(6,     56,     65)\n(7,     60,     85)\n(127,   80,     32767)\n","description":"(LEVEL, LOW, HIGH)\nLEVEL is the fan level to use (0-7 with thinkpad_acpi).\nLOW is the temperature at which to step down to the previous level.\nHIGH is the temperature at which to step up to the next level.\nAll numbers are integers.\n","loc":["services","thinkfan","levels"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.thinkfan.sensors":{"declarations":["nixos/modules/services/hardware/thinkfan.nix"],"default":"tp_thermal /proc/acpi/ibm/thermal (0,0,10)\n","description":"thinkfan can read temperatures from three possible sources:\n\n  /proc/acpi/ibm/thermal\n    Which is provided by the thinkpad_acpi kernel\n    module (keyword tp_thermal)\n\n  /sys/class/hwmon/*/temp*_input\n    Which may be provided by any hwmon drivers (keyword\n    hwmon)\n\n  S.M.A.R.T. (since 0.9 and requires the USE_ATASMART compilation flag)\n    Which reads the temperature directly from the hard\n    disk using libatasmart (keyword atasmart)\n\nMultiple sensors may be added, in which case they will be\nnumbered in their order of appearance.\n","loc":["services","thinkfan","sensors"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.timesyncd.enable":{"declarations":["nixos/modules/system/boot/timesyncd.nix"],"default":true,"description":"Enables the systemd NTP client daemon.\n","loc":["services","timesyncd","enable"],"readOnly":false,"type":"boolean"},"services.timesyncd.servers":{"declarations":["nixos/modules/system/boot/timesyncd.nix"],"default":["0.nixos.pool.ntp.org","1.nixos.pool.ntp.org","2.nixos.pool.ntp.org","3.nixos.pool.ntp.org"],"description":"The set of NTP servers from which to synchronise.\n","loc":["services","timesyncd","servers"],"readOnly":false,"type":"unspecified"},"services.tinc.networks":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":{},"description":"Defines the tinc networks which will be started.\nEach network invokes a different daemon.\n","loc":["services","tinc","networks"],"readOnly":false,"type":"attribute set of submodules"},"services.tinc.networks.<name>.bindToAddress":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":null,"description":"The ip address to bind to (both listen on and send packets from).\n","loc":["services","tinc","networks","<name>","bindToAddress"],"readOnly":false,"type":"null or string"},"services.tinc.networks.<name>.chroot":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":true,"description":"Change process root directory to the directory where the config file is located (/etc/tinc/netname/), for added security.\nThe chroot is performed after all the initialization is done, after writing pid files and opening network sockets.\n\nNote that tinc can't run scripts anymore (such as tinc-down or host-up), unless it is setup to be runnable inside chroot environment.\n","loc":["services","tinc","networks","<name>","chroot"],"readOnly":false,"type":"boolean"},"services.tinc.networks.<name>.debugLevel":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":0,"description":"The amount of debugging information to add to the log. 0 means little\nlogging while 5 is the most logging. <command>man tincd</command> for\nmore details.\n","loc":["services","tinc","networks","<name>","debugLevel"],"readOnly":false,"type":"signed integer"},"services.tinc.networks.<name>.ed25519PrivateKeyFile":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":null,"description":"Path of the private ed25519 keyfile.\n","loc":["services","tinc","networks","<name>","ed25519PrivateKeyFile"],"readOnly":false,"type":"null or path"},"services.tinc.networks.<name>.extraConfig":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":"","description":"Extra lines to add to the tinc service configuration file.\n","loc":["services","tinc","networks","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.tinc.networks.<name>.hosts":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":{},"description":"The name of the host in the network as well as the configuration for that host.\nThis name should only contain alphanumerics and underscores.\n","loc":["services","tinc","networks","<name>","hosts"],"readOnly":false,"type":"attribute set of strings concatenated with \"\\n\"s"},"services.tinc.networks.<name>.interfaceType":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":"tun","description":"The type of virtual interface used for the network connection\n","loc":["services","tinc","networks","<name>","interfaceType"],"readOnly":false,"type":"one of \"tun\", \"tap\""},"services.tinc.networks.<name>.listenAddress":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":null,"description":"The ip address to listen on for incoming connections.\n","loc":["services","tinc","networks","<name>","listenAddress"],"readOnly":false,"type":"null or string"},"services.tinc.networks.<name>.name":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":null,"description":"The name of the node which is used as an identifier when communicating\nwith the remote nodes in the mesh. If null then the hostname of the system\nis used to derive a name (note that tinc may replace non-alphanumeric characters in\nhostnames by underscores).\n","loc":["services","tinc","networks","<name>","name"],"readOnly":false,"type":"null or string"},"services.tinc.networks.<name>.package":{"declarations":["nixos/modules/services/networking/tinc.nix"],"default":"pkgs.tinc_pre","description":"The package to use for the tinc daemon's binary.\n","loc":["services","tinc","networks","<name>","package"],"readOnly":false,"type":"package"},"services.tinydns.data":{"declarations":["nixos/modules/services/networking/tinydns.nix"],"default":"","description":"The DNS data to serve, in the format described by tinydns-data(8)","loc":["services","tinydns","data"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.tinydns.enable":{"declarations":["nixos/modules/services/networking/tinydns.nix"],"default":false,"description":"Whether to run the tinydns dns server","loc":["services","tinydns","enable"],"readOnly":false,"type":"boolean"},"services.tinydns.ip":{"declarations":["nixos/modules/services/networking/tinydns.nix"],"default":"0.0.0.0","description":"IP address on which to listen for connections","loc":["services","tinydns","ip"],"readOnly":false,"type":"string"},"services.tlp.enable":{"declarations":["nixos/modules/services/hardware/tlp.nix"],"default":false,"description":"Whether to enable the TLP daemon.","loc":["services","tlp","enable"],"readOnly":false,"type":"boolean"},"services.tlp.extraConfig":{"declarations":["nixos/modules/services/hardware/tlp.nix"],"default":"","description":"Additional configuration variables for TLP","loc":["services","tlp","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.tomcat.axis2.enable":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":false,"description":"Whether to enable an Apache Axis2 container","loc":["services","tomcat","axis2","enable"],"readOnly":false,"type":"boolean"},"services.tomcat.axis2.services":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"List containing AAR files or directories with AAR files which are web services to be deployed on Axis2","loc":["services","tomcat","axis2","services"],"readOnly":false,"type":"list of strings"},"services.tomcat.baseDir":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"/var/tomcat","description":"Location where Tomcat stores configuration files, webapplications and logfiles","loc":["services","tomcat","baseDir"],"readOnly":false,"type":"path"},"services.tomcat.catalinaOpts":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"","description":"Parameters to pass to the Java Virtual Machine which spawns the Catalina servlet container","loc":["services","tomcat","catalinaOpts"],"readOnly":false,"type":"list of strings or string"},"services.tomcat.commonLibs":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"List containing JAR files or directories with JAR files which are libraries shared by the web applications and the servlet container","loc":["services","tomcat","commonLibs"],"readOnly":false,"type":"list of strings"},"services.tomcat.enable":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":false,"description":"Whether to enable Apache Tomcat.","example":true,"loc":["services","tomcat","enable"],"readOnly":false,"type":"boolean"},"services.tomcat.extraConfigFiles":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"Extra configuration files to pull into the tomcat conf directory","loc":["services","tomcat","extraConfigFiles"],"readOnly":false,"type":"list of paths"},"services.tomcat.extraEnvironment":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"Environment Variables to pass to the tomcat service","example":["ENVIRONMENT=production"],"loc":["services","tomcat","extraEnvironment"],"readOnly":false,"type":"list of strings"},"services.tomcat.extraGroups":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"Defines extra groups to which the tomcat user belongs.","example":["users"],"loc":["services","tomcat","extraGroups"],"readOnly":false,"type":"unspecified"},"services.tomcat.group":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"tomcat","description":"Group account under which Apache Tomcat runs.","loc":["services","tomcat","group"],"readOnly":false,"type":"string"},"services.tomcat.javaOpts":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"","description":"Parameters to pass to the Java Virtual Machine which spawns Apache Tomcat","loc":["services","tomcat","javaOpts"],"readOnly":false,"type":"list of strings or string"},"services.tomcat.jdk":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"pkgs.jdk","description":"Which JDK to use.","loc":["services","tomcat","jdk"],"readOnly":false,"type":"package"},"services.tomcat.logDirs":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"Directories to create in baseDir/logs/","loc":["services","tomcat","logDirs"],"readOnly":false,"type":"list of paths"},"services.tomcat.logPerVirtualHost":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":false,"description":"Whether to enable logging per virtual host.","loc":["services","tomcat","logPerVirtualHost"],"readOnly":false,"type":"boolean"},"services.tomcat.package":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"pkgs.tomcat85","description":"Which tomcat package to use.\n","example":{"_type":"literalExample","text":"pkgs.tomcat9"},"loc":["services","tomcat","package"],"readOnly":false,"type":"package"},"services.tomcat.serverXml":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"","description":"\n          Verbatim server.xml configuration.\n          This is mutually exclusive with the virtualHosts options.\n        ","loc":["services","tomcat","serverXml"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.tomcat.sharedLibs":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"List containing JAR files or directories with JAR files which are libraries shared by the web applications","loc":["services","tomcat","sharedLibs"],"readOnly":false,"type":"list of strings"},"services.tomcat.user":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"tomcat","description":"User account under which Apache Tomcat runs.","loc":["services","tomcat","user"],"readOnly":false,"type":"string"},"services.tomcat.virtualHosts":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"List consisting of a virtual host name and a list of web applications to deploy on each virtual host","loc":["services","tomcat","virtualHosts"],"readOnly":false,"type":"list of submodules"},"services.tomcat.virtualHosts.*.name":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"description":"name of the virtualhost","loc":["services","tomcat","virtualHosts","*","name"],"readOnly":false,"type":"string"},"services.tomcat.virtualHosts.*.webapps":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":[],"description":"List containing web application WAR files and/or directories containing\nweb applications and configuration files for the virtual host.\n","loc":["services","tomcat","virtualHosts","*","webapps"],"readOnly":false,"type":"list of paths"},"services.tomcat.webapps":{"declarations":["nixos/modules/services/web-servers/tomcat.nix"],"default":"[ pkgs.tomcat85.webapps ]","description":"List containing WAR files or directories with WAR files which are web applications to be deployed on Tomcat","loc":["services","tomcat","webapps"],"readOnly":false,"type":"list of paths"},"services.tor.client.dns.automapHostsSuffixes":{"declarations":["nixos/modules/services/security/tor.nix"],"default":[".onion",".exit"],"description":"List of suffixes to use with automapHostsOnResolve","example":[".onion"],"loc":["services","tor","client","dns","automapHostsSuffixes"],"readOnly":false,"type":"list of strings"},"services.tor.client.dns.enable":{"declarations":["nixos/modules/services/security/tor.nix"],"default":false,"description":"Whether to enable tor dns resolver","loc":["services","tor","client","dns","enable"],"readOnly":false,"type":"boolean"},"services.tor.client.dns.isolationOptions":{"declarations":["nixos/modules/services/security/tor.nix"],"default":[],"description":"Tor isolation options","example":["IsolateClientAddr","IsolateSOCKSAuth","IsolateClientProtocol","IsolateDestPort","IsolateDestAddr"],"loc":["services","tor","client","dns","isolationOptions"],"readOnly":false,"type":"list of one of \"IsolateClientAddr\", \"IsolateSOCKSAuth\", \"IsolateClientProtocol\", \"IsolateDestPort\", \"IsolateDestAddr\"s"},"services.tor.client.dns.listenAddress":{"declarations":["nixos/modules/services/security/tor.nix"],"default":"127.0.0.1:9053","description":"Bind tor dns to this address.\n","example":"192.168.0.1:9053","loc":["services","tor","client","dns","listenAddress"],"readOnly":false,"type":"string"},"services.tor.client.enable":{"declarations":["nixos/modules/services/security/tor.nix"],"default":false,"description":"Whether to enable Tor daemon to route application\nconnections.  You might want to disable this if you plan\nrunning a dedicated Tor relay.\n","loc":["services","tor","client","enable"],"readOnly":false,"type":"boolean"},"services.tor.client.privoxy.enable":{"declarations":["nixos/modules/services/security/tor.nix"],"default":true,"description":"Whether to enable and configure the system Privoxy to use Tor's\nfaster port, suitable for HTTP.\n\nTo have anonymity, protocols need to be scrubbed of identifying\ninformation, and this can be accomplished for HTTP by Privoxy.\n\nPrivoxy can also be useful for KDE torification. A good setup would be:\nsetting SOCKS proxy to the default Tor port, providing maximum\ncircuit isolation where possible; and setting HTTP proxy to Privoxy\nto route HTTP traffic over faster, but less isolated port.\n","loc":["services","tor","client","privoxy","enable"],"readOnly":false,"type":"boolean"},"services.tor.client.socksIsolationOptions":{"declarations":["nixos/modules/services/security/tor.nix"],"default":["IsolateDestAddr"],"description":"Tor isolation options","example":["IsolateClientAddr","IsolateSOCKSAuth","IsolateClientProtocol","IsolateDestPort","IsolateDestAddr"],"loc":["services","tor","client","socksIsolationOptions"],"readOnly":false,"type":"list of one of \"IsolateClientAddr\", \"IsolateSOCKSAuth\", \"IsolateClientProtocol\", \"IsolateDestPort\", \"IsolateDestAddr\"s"},"services.tor.client.socksListenAddress":{"declarations":["nixos/modules/services/security/tor.nix"],"default":"127.0.0.1:9050","description":"Bind to this address to listen for connections from\nSocks-speaking applications. Provides strong circuit\nisolation, separate circuit per IP address.\n","example":"192.168.0.1:9100","loc":["services","tor","client","socksListenAddress"],"readOnly":false,"type":"string"},"services.tor.client.socksListenAddressFaster":{"declarations":["nixos/modules/services/security/tor.nix"],"default":"127.0.0.1:9063","description":"Bind to this address to listen for connections from\nSocks-speaking applications. Same as\n<option>socksListenAddress</option> but uses weaker\ncircuit isolation to provide performance suitable for a\nweb browser.\n","example":"192.168.0.1:9101","loc":["services","tor","client","socksListenAddressFaster"],"readOnly":false,"type":"string"},"services.tor.client.socksPolicy":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"Entry policies to allow/deny SOCKS requests based on IP\naddress. First entry that matches wins. If no SocksPolicy\nis set, we accept all (and only) requests from\n<option>socksListenAddress</option>.\n","example":"accept 192.168.0.0/16, reject *","loc":["services","tor","client","socksPolicy"],"readOnly":false,"type":"null or string"},"services.tor.client.transparentProxy.enable":{"declarations":["nixos/modules/services/security/tor.nix"],"default":false,"description":"Whether to enable tor transparent proxy","loc":["services","tor","client","transparentProxy","enable"],"readOnly":false,"type":"boolean"},"services.tor.client.transparentProxy.isolationOptions":{"declarations":["nixos/modules/services/security/tor.nix"],"default":[],"description":"Tor isolation options","example":["IsolateClientAddr","IsolateSOCKSAuth","IsolateClientProtocol","IsolateDestPort","IsolateDestAddr"],"loc":["services","tor","client","transparentProxy","isolationOptions"],"readOnly":false,"type":"list of one of \"IsolateClientAddr\", \"IsolateSOCKSAuth\", \"IsolateClientProtocol\", \"IsolateDestPort\", \"IsolateDestAddr\"s"},"services.tor.client.transparentProxy.listenAddress":{"declarations":["nixos/modules/services/security/tor.nix"],"default":"127.0.0.1:9040","description":"Bind transparent proxy to this address.\n","example":"192.168.0.1:9040","loc":["services","tor","client","transparentProxy","listenAddress"],"readOnly":false,"type":"string"},"services.tor.controlPort":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"If set, Tor will accept connections on the specified port\nand allow them to control the tor process.\n","example":9051,"loc":["services","tor","controlPort"],"readOnly":false,"type":"null or signed integer or string"},"services.tor.controlSocket.enable":{"declarations":["nixos/modules/services/security/tor.nix"],"default":false,"description":"Wheter to enable Tor control socket. Control socket is created\nin <literal>/run/tor/control</literal>\n","loc":["services","tor","controlSocket","enable"],"readOnly":false,"type":"boolean"},"services.tor.enable":{"declarations":["nixos/modules/services/security/tor.nix"],"default":false,"description":"Enable the Tor daemon. By default, the daemon is run without\nrelay, exit, bridge or client connectivity.\n","loc":["services","tor","enable"],"readOnly":false,"type":"boolean"},"services.tor.enableGeoIP":{"declarations":["nixos/modules/services/security/tor.nix"],"default":true,"description":"Whenever to configure Tor daemon to use GeoIP databases.\n\nDisabling this will disable by-country statistics for\nbridges and relays and some client and third-party software\nfunctionality.\n","loc":["services","tor","enableGeoIP"],"readOnly":false,"type":"boolean"},"services.tor.extraConfig":{"declarations":["nixos/modules/services/security/tor.nix"],"default":"","description":"Extra configuration. Contents will be added verbatim to the\nconfiguration file at the end.\n","loc":["services","tor","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.tor.hiddenServices":{"declarations":["nixos/modules/services/security/tor.nix"],"default":{},"description":"A set of static hidden services that terminate their Tor\ncircuits at this node.\n\nEvery element in this set declares a virtual onion host.\n\nYou can specify your onion address by putting corresponding\nprivate key to an appropriate place in /var/lib/tor.\n\nFor services without private keys in /var/lib/tor Tor\ndaemon will generate random key pairs (which implies random\nonion addresses) on restart. The latter could take a while,\nplease be patient.\n\n<note><para>\n  Hidden services can be useful even if you don't intend to\n  actually <emphasis>hide</emphasis> them, since they can\n  also be seen as a kind of NAT traversal mechanism.\n\n  E.g. the example will make your sshd, whatever runs on\n  \"8080\" and your mail server available from anywhere where\n  the Tor network is available (which, with the help from\n  bridges, is pretty much everywhere), even if both client\n  and server machines are behind NAT you have no control\n  over.\n</para></note>\n","example":{"_type":"literalExample","text":"{ \"my-hidden-service-example\".map = [\n    { port = 22; }                # map ssh port to this machine's ssh\n    { port = 80; toPort = 8080; } # map http port to whatever runs on 8080\n    { port = \"sip\"; toHost = \"mail.example.com\"; toPort = \"imap\"; } # because we can\n  ];\n}\n"},"loc":["services","tor","hiddenServices"],"readOnly":false,"type":"list or attribute set of submodules"},"services.tor.hiddenServices.<name?>.authorizeClient":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"If configured, the hidden service is accessible for authorized clients only.","loc":["services","tor","hiddenServices","<name?>","authorizeClient"],"readOnly":false,"type":"null or submodule"},"services.tor.hiddenServices.<name?>.authorizeClient.authType":{"declarations":["nixos/modules/services/security/tor.nix"],"description":"Either <literal>\"basic\"</literal> for a general-purpose authorization protocol\nor <literal>\"stealth\"</literal> for a less scalable protocol\nthat also hides service activity from unauthorized clients.\n","loc":["services","tor","hiddenServices","<name?>","authorizeClient","authType"],"readOnly":false,"type":"one of \"basic\", \"stealth\""},"services.tor.hiddenServices.<name?>.authorizeClient.clientNames":{"declarations":["nixos/modules/services/security/tor.nix"],"description":"Only clients that are listed here are authorized to access the hidden service.\nGenerated authorization data can be found in <filename>/var/lib/tor/onion/$name/hostname</filename>.\nClients need to put this authorization data in their configuration file using <literal>HidServAuth</literal>.\n","loc":["services","tor","hiddenServices","<name?>","authorizeClient","clientNames"],"readOnly":false,"type":"non-empty list of string matching the pattern [A-Za-z0-9+-_]+s"},"services.tor.hiddenServices.<name?>.map":{"declarations":["nixos/modules/services/security/tor.nix"],"default":[],"description":"Port mapping for this hidden service.","loc":["services","tor","hiddenServices","<name?>","map"],"readOnly":false,"type":"list of submodules"},"services.tor.hiddenServices.<name?>.map.*.port":{"declarations":["nixos/modules/services/security/tor.nix"],"description":"Hidden service port to \"bind to\".\n","example":80,"loc":["services","tor","hiddenServices","<name?>","map","*","port"],"readOnly":false,"type":"signed integer or string"},"services.tor.hiddenServices.<name?>.map.*.toHost":{"declarations":["nixos/modules/services/security/tor.nix"],"default":"127.0.0.1","description":"Mapping destination host.","loc":["services","tor","hiddenServices","<name?>","map","*","toHost"],"readOnly":false,"type":"string"},"services.tor.hiddenServices.<name?>.map.*.toPort":{"declarations":["nixos/modules/services/security/tor.nix"],"description":"Mapping destination port.","example":8080,"loc":["services","tor","hiddenServices","<name?>","map","*","toPort"],"readOnly":false,"type":"signed integer or string"},"services.tor.hiddenServices.<name?>.name":{"declarations":["nixos/modules/services/security/tor.nix"],"description":"Name of this tor hidden service.\n\nThis is purely descriptive.\n\nAfter restarting Tor daemon you should be able to\nfind your .onion address in\n<literal>/var/lib/tor/onion/$name/hostname</literal>.\n","loc":["services","tor","hiddenServices","<name?>","name"],"readOnly":false,"type":"string"},"services.tor.relay.accountingMax":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"Specify maximum bandwidth allowed during an accounting period. This\nallows you to limit overall tor bandwidth over some time period.\nSee the <literal>AccountingMax</literal> option by looking at the\ntor manual <citerefentry><refentrytitle>tor</refentrytitle>\n<manvolnum>1</manvolnum></citerefentry> for more.\n\nNote this limit applies individually to upload and\ndownload; if you specify <literal>\"500 GBytes\"</literal>\nhere, then you may transfer up to 1 TBytes of overall\nbandwidth (500 GB upload, 500 GB download).\n","example":"450 GBytes","loc":["services","tor","relay","accountingMax"],"readOnly":false,"type":"null or string"},"services.tor.relay.accountingStart":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"Specify length of an accounting period. This allows you to limit\noverall tor bandwidth over some time period. See the\n<literal>AccountingStart</literal> option by looking at the tor\nmanual <citerefentry><refentrytitle>tor</refentrytitle>\n<manvolnum>1</manvolnum></citerefentry> for more.\n","example":"month 1 1:00","loc":["services","tor","relay","accountingStart"],"readOnly":false,"type":"null or string"},"services.tor.relay.address":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"The IP address or full DNS name for advertised address of your relay.\nLeave unset and Tor will guess.\n","example":"noname.example.com","loc":["services","tor","relay","address"],"readOnly":false,"type":"null or string"},"services.tor.relay.bandwidthBurst":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"Specify this to allow bursts of the bandwidth usage of relayed (server)\ntraffic. The average usage will still be as specified in relayBandwidthRate.\nYour own traffic is still unthrottled. Units: bytes/second.\n","example":200,"loc":["services","tor","relay","bandwidthBurst"],"readOnly":false,"type":"null or signed integer"},"services.tor.relay.bandwidthRate":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"Specify this to limit the bandwidth usage of relayed (server)\ntraffic. Your own traffic is still unthrottled. Units: bytes/second.\n","example":100,"loc":["services","tor","relay","bandwidthRate"],"readOnly":false,"type":"null or signed integer"},"services.tor.relay.contactInfo":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"Contact information for the relay owner (e.g. a mail\naddress and GPG key ID).\n","example":"admin@relay.com","loc":["services","tor","relay","contactInfo"],"readOnly":false,"type":"null or string"},"services.tor.relay.enable":{"declarations":["nixos/modules/services/security/tor.nix"],"default":false,"description":"Whether to enable relaying TOR traffic for others.\n\nSee <link xlink:href=\"https://www.torproject.org/docs/tor-doc-relay\" />\nfor details.\n\nSetting this to true requires setting\n<option>services.tor.relay.role</option>\nand\n<option>services.tor.relay.port</option>\noptions.\n","loc":["services","tor","relay","enable"],"readOnly":false,"type":"boolean"},"services.tor.relay.exitPolicy":{"declarations":["nixos/modules/services/security/tor.nix"],"default":null,"description":"A comma-separated list of exit policies. They're\nconsidered first to last, and the first match wins. If you\nwant to _replace_ the default exit policy, end this with\neither a reject *:* or an accept *:*. Otherwise, you're\n_augmenting_ (prepending to) the default exit policy.\nLeave commented to just use the default, which is\navailable in the man page or at\n<link xlink:href=\"https://www.torproject.org/documentation.html\" />.\n\nLook at\n<link xlink:href=\"https://www.torproject.org/faq-abuse.html#TypicalAbuses\" />\nfor issues you might encounter if you use the default\nexit policy.\n\nIf certain IPs and ports are blocked externally, e.g. by\nyour firewall, you should update your exit policy to\nreflect this -- otherwise Tor users will be told that\nthose destinations are down.\n","example":"accept *:6660-6667,reject *:*","loc":["services","tor","relay","exitPolicy"],"readOnly":false,"type":"null or string"},"services.tor.relay.nickname":{"declarations":["nixos/modules/services/security/tor.nix"],"default":"anonymous","description":"A unique handle for your TOR relay.\n","loc":["services","tor","relay","nickname"],"readOnly":false,"type":"string"},"services.tor.relay.port":{"declarations":["nixos/modules/services/security/tor.nix"],"description":"What port to advertise for Tor connections. This corresponds to the\n<literal>ORPort</literal> section in the Tor manual; see\n<citerefentry><refentrytitle>tor</refentrytitle>\n<manvolnum>1</manvolnum></citerefentry> for more details.\n\nAt a minimum, you should just specify the port for the\nrelay to listen on; a common one like 143, 22, 80, or 443\nto help Tor users who may have very restrictive port-based\nfirewalls.\n","example":143,"loc":["services","tor","relay","port"],"readOnly":false,"type":"signed integer or string"},"services.tor.relay.role":{"declarations":["nixos/modules/services/security/tor.nix"],"description":"Your role in Tor network. There're several options:\n\n<variablelist>\n<varlistentry>\n  <term><literal>exit</literal></term>\n  <listitem>\n    <para>\n      An exit relay. This allows Tor users to access regular\n      Internet services through your public IP.\n    </para>\n\n    <important><para>\n      Running an exit relay may expose you to abuse\n      complaints. See\n      <link xlink:href=\"https://www.torproject.org/faq.html.en#ExitPolicies\" />\n      for more info.\n    </para></important>\n\n    <para>\n      You can specify which services Tor users may access via\n      your exit relay using <option>exitPolicy</option> option.\n    </para>\n  </listitem>\n</varlistentry>\n\n<varlistentry>\n  <term><literal>relay</literal></term>\n  <listitem>\n    <para>\n      Regular relay. This allows Tor users to relay onion\n      traffic to other Tor nodes, but not to public\n      Internet.\n    </para>\n\n    <important><para>\n      Note that some misconfigured and/or disrespectful\n      towards privacy sites will block you even if your\n      relay is not an exit relay. That is, just being listed\n      in a public relay directory can have unwanted\n      consequences.\n\n      Which means you might not want to use\n      this role if you browse public Internet from the same\n      network as your relay, unless you want to write\n      e-mails to those sites (you should!).\n    </para></important>\n\n    <para>\n      See\n      <link xlink:href=\"https://www.torproject.org/docs/tor-doc-relay.html.en\" />\n      for more info.\n    </para>\n  </listitem>\n</varlistentry>\n\n<varlistentry>\n  <term><literal>bridge</literal></term>\n  <listitem>\n    <para>\n      Regular bridge. Works like a regular relay, but\n      doesn't list you in the public relay directory and\n      hides your Tor node behind obfsproxy.\n    </para>\n\n    <para>\n      Using this option will make Tor advertise your bridge\n      to users through various mechanisms like\n      <link xlink:href=\"https://bridges.torproject.org/\" />, though.\n    </para>\n\n    <important>\n      <para>\n        WARNING: THE FOLLOWING PARAGRAPH IS NOT LEGAL ADVICE.\n        Consult with your lawer when in doubt.\n      </para>\n\n      <para>\n        This role should be safe to use in most situations\n        (unless the act of forwarding traffic for others is\n        a punishable offence under your local laws, which\n        would be pretty insane as it would make ISP\n        illegal).\n      </para>\n    </important>\n\n    <para>\n      See <link xlink:href=\"https://www.torproject.org/docs/bridges.html.en\" />\n      for more info.\n    </para>\n  </listitem>\n</varlistentry>\n\n<varlistentry>\n  <term><literal>private-bridge</literal></term>\n  <listitem>\n    <para>\n      Private bridge. Works like regular bridge, but does\n      not advertise your node in any way.\n    </para>\n\n    <para>\n      Using this role means that you won't contribute to Tor\n      network in any way unless you advertise your node\n      yourself in some way.\n    </para>\n\n    <para>\n      Use this if you want to run a private bridge, for\n      example because you'll give out your bridge address\n      manually to your friends.\n    </para>\n\n    <para>\n      Switching to this role after measurable time in\n      \"bridge\" role is pretty useless as some Tor users\n      would have learned about your node already. In the\n      latter case you can still change\n      <option>port</option> option.\n    </para>\n\n    <para>\n      See <link xlink:href=\"https://www.torproject.org/docs/bridges.html.en\" />\n      for more info.\n    </para>\n  </listitem>\n</varlistentry>\n</variablelist>\n","loc":["services","tor","relay","role"],"readOnly":false,"type":"one of \"exit\", \"relay\", \"bridge\", \"private-bridge\""},"services.tor.torsocks.allowInbound":{"declarations":["nixos/modules/services/security/torsocks.nix"],"default":false,"description":"Set Torsocks to accept inbound connections. If set to\n<literal>true</literal>, listen() and accept() will be\nallowed to be used with non localhost address.\n","loc":["services","tor","torsocks","allowInbound"],"readOnly":false,"type":"boolean"},"services.tor.torsocks.enable":{"declarations":["nixos/modules/services/security/torsocks.nix"],"default":false,"description":"Whether to build <literal>/etc/tor/torsocks.conf</literal>\ncontaining the specified global torsocks configuration.\n","loc":["services","tor","torsocks","enable"],"readOnly":false,"type":"boolean"},"services.tor.torsocks.fasterServer":{"declarations":["nixos/modules/services/security/torsocks.nix"],"default":"127.0.0.1:9063","description":"IP/Port of the Tor SOCKS server for torsocks-faster wrapper suitable for HTTP.\nCurrently, hostnames are NOT supported by torsocks.\n","example":"192.168.0.20:1234","loc":["services","tor","torsocks","fasterServer"],"readOnly":false,"type":"string"},"services.tor.torsocks.onionAddrRange":{"declarations":["nixos/modules/services/security/torsocks.nix"],"default":"127.42.42.0/24","description":"Tor hidden sites do not have real IP addresses. This\nspecifies what range of IP addresses will be handed to the\napplication as \"cookies\" for .onion names.  Of course, you\nshould pick a block of addresses which you aren't going to\never need to actually connect to. This is similar to the\nMapAddress feature of the main tor daemon.\n","loc":["services","tor","torsocks","onionAddrRange"],"readOnly":false,"type":"string"},"services.tor.torsocks.server":{"declarations":["nixos/modules/services/security/torsocks.nix"],"default":"127.0.0.1:9050","description":"IP/Port of the Tor SOCKS server. Currently, hostnames are\nNOT supported by torsocks.\n","example":"192.168.0.20:1234","loc":["services","tor","torsocks","server"],"readOnly":false,"type":"string"},"services.tor.torsocks.socks5Password":{"declarations":["nixos/modules/services/security/torsocks.nix"],"default":null,"description":"SOCKS5 password. The <literal>TORSOCKS_PASSWORD</literal>\nenvironment variable overrides this option if it is set.\n","example":"sekret","loc":["services","tor","torsocks","socks5Password"],"readOnly":false,"type":"null or string"},"services.tor.torsocks.socks5Username":{"declarations":["nixos/modules/services/security/torsocks.nix"],"default":null,"description":"SOCKS5 username. The <literal>TORSOCKS_USERNAME</literal>\nenvironment variable overrides this option if it is set.\n","example":"bob","loc":["services","tor","torsocks","socks5Username"],"readOnly":false,"type":"null or string"},"services.tor.tsocks.config":{"declarations":["nixos/modules/services/security/torify.nix"],"default":"","description":"Extra configuration. Contents will be added verbatim to TSocks\nconfiguration file.\n","loc":["services","tor","tsocks","config"],"readOnly":false,"type":"unspecified"},"services.tor.tsocks.enable":{"declarations":["nixos/modules/services/security/torify.nix"],"default":false,"description":"Whether to build tsocks wrapper script to relay application traffic via Tor.\n\n<important>\n  <para>You shouldn't use this unless you know what you're\n  doing because your installation of Tor already comes with\n  its own superior (doesn't leak DNS queries)\n  <literal>torsocks</literal> wrapper which does pretty much\n  exactly the same thing as this.</para>\n</important>\n","loc":["services","tor","tsocks","enable"],"readOnly":false,"type":"unspecified"},"services.tor.tsocks.server":{"declarations":["nixos/modules/services/security/torify.nix"],"default":"localhost:9050","description":"IP address of TOR client to use.\n","example":"192.168.0.20","loc":["services","tor","tsocks","server"],"readOnly":false,"type":"unspecified"},"services.torque.mom.enable":{"declarations":["nixos/modules/services/computing/torque/mom.nix"],"default":false,"description":"Whether to enable torque computing node.","example":true,"loc":["services","torque","mom","enable"],"readOnly":false,"type":"boolean"},"services.torque.mom.serverNode":{"declarations":["nixos/modules/services/computing/torque/mom.nix"],"description":"Hostname running pbs server.","loc":["services","torque","mom","serverNode"],"readOnly":false,"type":"string"},"services.torque.server.enable":{"declarations":["nixos/modules/services/computing/torque/server.nix"],"default":false,"description":"Whether to enable torque server.","example":true,"loc":["services","torque","server","enable"],"readOnly":false,"type":"boolean"},"services.toxBootstrapd.enable":{"declarations":["nixos/modules/services/networking/tox-bootstrapd.nix"],"default":false,"description":"Whether to enable the Tox DHT bootstrap daemon.\n","loc":["services","toxBootstrapd","enable"],"readOnly":false,"type":"boolean"},"services.toxBootstrapd.extraConfig":{"declarations":["nixos/modules/services/networking/tox-bootstrapd.nix"],"default":"","description":"Configuration for bootstrap daemon.\nSee <link xlink:href=\"https://github.com/irungentoo/toxcore/blob/master/other/bootstrap_daemon/tox-bootstrapd.conf\"/>\nand <link xlink:href=\"http://wiki.tox.im/Nodes\"/>.\n","loc":["services","toxBootstrapd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.toxBootstrapd.keysFile":{"declarations":["nixos/modules/services/networking/tox-bootstrapd.nix"],"default":"/var/lib/tox-bootstrapd/keys","description":"Node key file.","loc":["services","toxBootstrapd","keysFile"],"readOnly":false,"type":"string"},"services.toxBootstrapd.port":{"declarations":["nixos/modules/services/networking/tox-bootstrapd.nix"],"default":33445,"description":"Listening port (UDP).","loc":["services","toxBootstrapd","port"],"readOnly":false,"type":"signed integer"},"services.toxvpn.auto_add_peers":{"declarations":["nixos/modules/services/networking/toxvpn.nix"],"default":[],"description":"peers to automacally connect to on startup","example":"[ \"toxid1\" \"toxid2\" ]","loc":["services","toxvpn","auto_add_peers"],"readOnly":false,"type":"list of Concatenated strings"},"services.toxvpn.enable":{"declarations":["nixos/modules/services/networking/toxvpn.nix"],"default":false,"description":"Whether to enable enable toxvpn running on startup.","example":true,"loc":["services","toxvpn","enable"],"readOnly":false,"type":"boolean"},"services.toxvpn.localip":{"declarations":["nixos/modules/services/networking/toxvpn.nix"],"default":"10.123.123.1","description":"your ip on the vpn","loc":["services","toxvpn","localip"],"readOnly":false,"type":"Concatenated string"},"services.toxvpn.port":{"declarations":["nixos/modules/services/networking/toxvpn.nix"],"default":33445,"description":"udp port for toxcore, port-forward to help with connectivity if you run many nodes behind one NAT","loc":["services","toxvpn","port"],"readOnly":false,"type":"signed integer"},"services.traefik.configFile":{"declarations":["nixos/modules/services/web-servers/traefik.nix"],"default":null,"description":"Path to verbatim traefik.toml to use.\n(Using that option has precedence over <literal>configOptions</literal>)\n","example":{"_type":"literalExample","text":"/path/to/config.toml"},"loc":["services","traefik","configFile"],"readOnly":false,"type":"null or path"},"services.traefik.configOptions":{"declarations":["nixos/modules/services/web-servers/traefik.nix"],"default":{"defaultEntryPoints":["http"],"entryPoints":{"http":{"address":":80"}}},"description":"Config for Traefik.\n","example":{"backends":{"backend1":{"servers":{"server1":{"url":"http://localhost:8000"}}}},"defaultEntrypoints":["http"],"entryPoints":{"http":{"address":":80"}},"file":{},"frontends":{"frontend1":{"backend":"backend1","routes":{"test_1":{"rule":"Host:localhost"}}}},"web":{"address":":8080"}},"loc":["services","traefik","configOptions"],"readOnly":false,"type":"attribute set"},"services.traefik.dataDir":{"declarations":["nixos/modules/services/web-servers/traefik.nix"],"default":"/var/lib/traefik","description":"Location for any persistent data traefik creates, ie. acme\n","loc":["services","traefik","dataDir"],"readOnly":false,"type":"path"},"services.traefik.enable":{"declarations":["nixos/modules/services/web-servers/traefik.nix"],"default":false,"description":"Whether to enable Traefik web server.","example":true,"loc":["services","traefik","enable"],"readOnly":false,"type":"boolean"},"services.traefik.group":{"declarations":["nixos/modules/services/web-servers/traefik.nix"],"default":"traefik","description":"Set the group that traefik runs under.\nFor the docker backend this needs to be set to <literal>docker</literal> instead.\n","example":"docker","loc":["services","traefik","group"],"readOnly":false,"type":"Concatenated string"},"services.traefik.package":{"declarations":["nixos/modules/services/web-servers/traefik.nix"],"default":"pkgs.traefik","description":"Traefik package to use.","loc":["services","traefik","package"],"readOnly":false,"type":"package"},"services.transmission.enable":{"declarations":["nixos/modules/services/torrent/transmission.nix"],"default":false,"description":"Whether or not to enable the headless Transmission BitTorrent daemon.\n\nTransmission daemon can be controlled via the RPC interface using\ntransmission-remote or the WebUI (http://localhost:9091/ by default).\n\nTorrents are downloaded to /var/lib/transmission/Downloads by default and are\naccessible to users in the \"transmission\" group.\n","loc":["services","transmission","enable"],"readOnly":false,"type":"boolean"},"services.transmission.home":{"declarations":["nixos/modules/services/torrent/transmission.nix"],"default":"/var/lib/transmission","description":"The directory where transmission will create files.\n","loc":["services","transmission","home"],"readOnly":false,"type":"path"},"services.transmission.port":{"declarations":["nixos/modules/services/torrent/transmission.nix"],"default":9091,"description":"TCP port number to run the RPC/web interface.","loc":["services","transmission","port"],"readOnly":false,"type":"signed integer"},"services.transmission.settings":{"declarations":["nixos/modules/services/torrent/transmission.nix"],"default":{"download-dir":"/var/lib/transmission/Downloads","incomplete-dir":"/var/lib/transmission/.incomplete","incomplete-dir-enabled":true},"description":"Attribute set whos fields overwrites fields in settings.json (each\ntime the service starts). String values must be quoted, integer and\nboolean values must not.\n\nSee https://github.com/transmission/transmission/wiki/Editing-Configuration-Files\nfor documentation.\n","example":{"download-dir":"/srv/torrents/","incomplete-dir":"/srv/torrents/.incomplete/","incomplete-dir-enabled":true,"rpc-whitelist":"127.0.0.1,192.168.*.*"},"loc":["services","transmission","settings"],"readOnly":false,"type":"attribute set"},"services.trezord.enable":{"declarations":["nixos/modules/services/hardware/trezord.nix"],"default":false,"description":"Enable Trezor bridge daemon, for use with Trezor hardware bitcoin wallets.\n","loc":["services","trezord","enable"],"readOnly":false,"type":"boolean"},"services.triggerhappy.bindings":{"declarations":["nixos/modules/services/hardware/triggerhappy.nix"],"default":[],"description":"Key bindings for <command>triggerhappy</command>.\n","example":{"_type":"literalExample","text":"[ { keys = [\"PLAYPAUSE\"];  cmd = \"${pkgs.mpc_cli}/bin/mpc -q toggle\"; } ]\n"},"loc":["services","triggerhappy","bindings"],"readOnly":false,"type":"list of submodules"},"services.triggerhappy.bindings.*.cmd":{"declarations":["nixos/modules/services/hardware/triggerhappy.nix"],"description":"What to run.","loc":["services","triggerhappy","bindings","*","cmd"],"readOnly":false,"type":"string"},"services.triggerhappy.bindings.*.event":{"declarations":["nixos/modules/services/hardware/triggerhappy.nix"],"default":"press","description":"Event to match.","loc":["services","triggerhappy","bindings","*","event"],"readOnly":false,"type":"one of \"press\", \"hold\", \"release\""},"services.triggerhappy.bindings.*.keys":{"declarations":["nixos/modules/services/hardware/triggerhappy.nix"],"description":"List of keys to match.  Key names as defined in linux/input-event-codes.h","loc":["services","triggerhappy","bindings","*","keys"],"readOnly":false,"type":"list of strings"},"services.triggerhappy.enable":{"declarations":["nixos/modules/services/hardware/triggerhappy.nix"],"default":false,"description":"Whether to enable the <command>triggerhappy</command> hotkey daemon.\n","loc":["services","triggerhappy","enable"],"readOnly":false,"type":"boolean"},"services.triggerhappy.extraConfig":{"declarations":["nixos/modules/services/hardware/triggerhappy.nix"],"default":"","description":"Literal contents to append to the end of <command>triggerhappy</command> configuration file.\n","loc":["services","triggerhappy","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.tt-rss.auth.autoCreate":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":true,"description":"Allow authentication modules to auto-create users in tt-rss internal\ndatabase when authenticated successfully.\n","loc":["services","tt-rss","auth","autoCreate"],"readOnly":false,"type":"boolean"},"services.tt-rss.auth.autoLogin":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":true,"description":"Automatically login user on remote or other kind of externally supplied\nauthentication, otherwise redirect to login form as normal.\nIf set to true, users won't be able to set application language\nand settings profile.\n","loc":["services","tt-rss","auth","autoLogin"],"readOnly":false,"type":"boolean"},"services.tt-rss.checkForUpdates":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":true,"description":"Check for updates automatically if running Git version\n","loc":["services","tt-rss","checkForUpdates"],"readOnly":false,"type":"boolean"},"services.tt-rss.database.host":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":null,"description":"Host of the database. Leave null to use Unix domain socket.\n","loc":["services","tt-rss","database","host"],"readOnly":false,"type":"null or string"},"services.tt-rss.database.name":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"tt_rss","description":"Name of the existing database.\n","loc":["services","tt-rss","database","name"],"readOnly":false,"type":"string"},"services.tt-rss.database.password":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":null,"description":"The database user's password.\n","loc":["services","tt-rss","database","password"],"readOnly":false,"type":"null or string"},"services.tt-rss.database.port":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":null,"description":"The database's port. If not set, the default ports will be provided (5432\nand 3306 for pgsql and mysql respectively).\n","loc":["services","tt-rss","database","port"],"readOnly":false,"type":"null or signed integer"},"services.tt-rss.database.type":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"pgsql","description":"Database to store feeds. Supported are pgsql and mysql.\n","loc":["services","tt-rss","database","type"],"readOnly":false,"type":"one of \"pgsql\", \"mysql\""},"services.tt-rss.database.user":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"tt_rss","description":"The database user. The user must exist and has access to\nthe specified database.\n","loc":["services","tt-rss","database","user"],"readOnly":false,"type":"string"},"services.tt-rss.email.digestSubject":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"[tt-rss] New headlines for last 24 hours","description":"Subject line for email digests.\n","loc":["services","tt-rss","email","digestSubject"],"readOnly":false,"type":"string"},"services.tt-rss.email.fromAddress":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"Address for sending outgoing mail. This applies to password reset\nnotifications, digest emails and any other mail.\n","loc":["services","tt-rss","email","fromAddress"],"readOnly":false,"type":"string"},"services.tt-rss.email.fromName":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"Tiny Tiny RSS","description":"Name for sending outgoing mail. This applies to password reset\nnotifications, digest emails and any other mail.\n","loc":["services","tt-rss","email","fromName"],"readOnly":false,"type":"string"},"services.tt-rss.email.login":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"SMTP authentication login used when sending outgoing mail.\n","loc":["services","tt-rss","email","login"],"readOnly":false,"type":"string"},"services.tt-rss.email.password":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"SMTP authentication password used when sending outgoing mail.\n","loc":["services","tt-rss","email","password"],"readOnly":false,"type":"string"},"services.tt-rss.email.security":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"Used to select a secure SMTP connection. Allowed values: ssl, tls,\nor empty.\n","loc":["services","tt-rss","email","security"],"readOnly":false,"type":"one of \"\", \"ssl\", \"tls\""},"services.tt-rss.email.server":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"Hostname:port combination to send outgoing mail. Blank - use system\nMTA.\n","example":"localhost:25","loc":["services","tt-rss","email","server"],"readOnly":false,"type":"string"},"services.tt-rss.enable":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":false,"description":"Whether to enable tt-rss.","example":true,"loc":["services","tt-rss","enable"],"readOnly":false,"type":"boolean"},"services.tt-rss.enableGZipOutput":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":true,"description":"Selectively gzip output to improve wire performance. This requires\nPHP Zlib extension on the server.\nEnabling this can break tt-rss in several httpd/php configurations,\nif you experience weird errors and tt-rss failing to start, blank pages\nafter login, or content encoding errors, disable it.\n","loc":["services","tt-rss","enableGZipOutput"],"readOnly":false,"type":"boolean"},"services.tt-rss.extraConfig":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"Additional lines to append to <literal>config.php</literal>.\n","loc":["services","tt-rss","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.tt-rss.feedCryptKey":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"Key used for encryption of passwords for password-protected feeds\nin the database. A string of 24 random characters. If left blank, encryption\nis not used. Requires mcrypt functions.\nWarning: changing this key will make your stored feed passwords impossible\nto decrypt.\n","loc":["services","tt-rss","feedCryptKey"],"readOnly":false,"type":"string"},"services.tt-rss.forceArticlePurge":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":0,"description":"When this option is not 0, users ability to control feed purging\nintervals is disabled and all articles (which are not starred)\nolder than this amount of days are purged.\n","loc":["services","tt-rss","forceArticlePurge"],"readOnly":false,"type":"signed integer"},"services.tt-rss.logDestination":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"sql","description":"Log destination to use. Possible values: sql (uses internal logging\nyou can read in Preferences -> System), syslog - logs to system log.\nSetting this to blank uses PHP logging (usually to http server\nerror.log).\n","loc":["services","tt-rss","logDestination"],"readOnly":false,"type":"one of \"\", \"sql\", \"syslog\""},"services.tt-rss.pluginPackages":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":[],"description":"List of plugins to install. The list elements are expected to\nbe derivations. All elements in this derivation are automatically\ncopied to the <literal>plugins.local</literal> directory.\n","loc":["services","tt-rss","pluginPackages"],"readOnly":false,"type":"list of packages"},"services.tt-rss.plugins":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":["auth_internal","note"],"description":"List of plugins to load automatically for all users.\nSystem plugins have to be specified here. Please enable at least one\nauthentication plugin here (auth_*).\nUsers may enable other user plugins from Preferences/Plugins but may not\ndisable plugins specified in this list.\nDisabling auth_internal in this list would automatically disable\nreset password link on the login form.\n","loc":["services","tt-rss","plugins"],"readOnly":false,"type":"list of strings"},"services.tt-rss.pool":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"tt-rss","description":"Name of existing phpfpm pool that is used to run web-application.\nIf not specified a pool will be created automatically with\ndefault values.\n","loc":["services","tt-rss","pool"],"readOnly":false,"type":"string"},"services.tt-rss.pubSubHubbub.enable":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":false,"description":"Enable client PubSubHubbub support in tt-rss. When disabled, tt-rss\nwon't try to subscribe to PUSH feed updates.\n","loc":["services","tt-rss","pubSubHubbub","enable"],"readOnly":false,"type":"boolean"},"services.tt-rss.pubSubHubbub.hub":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"URL to a PubSubHubbub-compatible hub server. If defined, \"Published\narticles\" generated feed would automatically become PUSH-enabled.\n","loc":["services","tt-rss","pubSubHubbub","hub"],"readOnly":false,"type":"string"},"services.tt-rss.registration.enable":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":false,"description":"Allow users to register themselves. Please be aware that allowing\nrandom people to access your tt-rss installation is a security risk\nand potentially might lead to data loss or server exploit. Disabled\nby default.\n","loc":["services","tt-rss","registration","enable"],"readOnly":false,"type":"boolean"},"services.tt-rss.registration.maxUsers":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":0,"description":"Maximum amount of users which will be allowed to register on this\nsystem. 0 - no limit.\n","loc":["services","tt-rss","registration","maxUsers"],"readOnly":false,"type":"signed integer"},"services.tt-rss.registration.notifyAddress":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"","description":"Email address to send new user notifications to.\n","loc":["services","tt-rss","registration","notifyAddress"],"readOnly":false,"type":"string"},"services.tt-rss.root":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"/var/lib/tt-rss","description":"Root of the application.\n","example":"/var/lib/tt-rss","loc":["services","tt-rss","root"],"readOnly":false,"type":"path"},"services.tt-rss.selfUrlPath":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"description":"Full URL of your tt-rss installation. This should be set to the\nlocation of tt-rss directory, e.g. http://example.org/tt-rss/\nYou need to set this option correctly otherwise several features\nincluding PUSH, bookmarklets and browser integration will not work properly.\n","example":"http://localhost","loc":["services","tt-rss","selfUrlPath"],"readOnly":false,"type":"string"},"services.tt-rss.sessionCookieLifetime":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":86400,"description":"Default lifetime of a session (e.g. login) cookie. In seconds,\n0 means cookie will be deleted when browser closes.\n","loc":["services","tt-rss","sessionCookieLifetime"],"readOnly":false,"type":"signed integer"},"services.tt-rss.simpleUpdateMode":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":false,"description":"Enables fallback update mode where tt-rss tries to update feeds in\nbackground while tt-rss is open in your browser.\nIf you don't have a lot of feeds and don't want to or can't run\nbackground processes while not running tt-rss, this method is generally\nviable to keep your feeds up to date.\nStill, there are more robust (and recommended) updating methods\navailable, you can read about them here: http://tt-rss.org/wiki/UpdatingFeeds\n","loc":["services","tt-rss","simpleUpdateMode"],"readOnly":false,"type":"boolean"},"services.tt-rss.singleUserMode":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":false,"description":"Operate in single user mode, disables all functionality related to\nmultiple users and authentication. Enabling this assumes you have\nyour tt-rss directory protected by other means (e.g. http auth).\n","loc":["services","tt-rss","singleUserMode"],"readOnly":false,"type":"boolean"},"services.tt-rss.sphinx.index":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":["ttrss","delta"],"description":"Index names in Sphinx configuration. Example configuration\nfiles are available on tt-rss wiki.\n","loc":["services","tt-rss","sphinx","index"],"readOnly":false,"type":"list of strings"},"services.tt-rss.sphinx.server":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"localhost:9312","description":"Hostname:port combination for the Sphinx server.\n","loc":["services","tt-rss","sphinx","server"],"readOnly":false,"type":"string"},"services.tt-rss.themePackages":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":[],"description":"List of themes to install. The list elements are expected to\nbe derivations. All elements in this derivation are automatically\ncopied to the <literal>themes.local</literal> directory.\n","loc":["services","tt-rss","themePackages"],"readOnly":false,"type":"list of packages"},"services.tt-rss.user":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"tt_rss","description":"User account under which both the update daemon and the web-application run.\n","example":"tt_rss","loc":["services","tt-rss","user"],"readOnly":false,"type":"string"},"services.tt-rss.virtualHost":{"declarations":["nixos/modules/services/web-apps/tt-rss.nix"],"default":"tt-rss","description":"Name of the nginx virtualhost to use and setup. If null, do not setup any virtualhost.\n","loc":["services","tt-rss","virtualHost"],"readOnly":false,"type":"null or string"},"services.tvheadend.enable":{"declarations":["nixos/modules/services/networking/tvheadend.nix"],"default":false,"description":"Whether to enable Tvheadend.","example":true,"loc":["services","tvheadend","enable"],"readOnly":false,"type":"boolean"},"services.tvheadend.htspPort":{"declarations":["nixos/modules/services/networking/tvheadend.nix"],"default":9982,"description":"Port to bind HTSP to.","loc":["services","tvheadend","htspPort"],"readOnly":false,"type":"signed integer"},"services.tvheadend.httpPort":{"declarations":["nixos/modules/services/networking/tvheadend.nix"],"default":9981,"description":"Port to bind HTTP to.","loc":["services","tvheadend","httpPort"],"readOnly":false,"type":"signed integer"},"services.tzupdate.enable":{"declarations":["nixos/modules/services/misc/tzupdate.nix"],"default":false,"description":"Enable the tzupdate timezone updating service. This provides\na one-shot service which can be activated with systemctl to \nupdate the timezone.\n","loc":["services","tzupdate","enable"],"readOnly":false,"type":"boolean"},"services.u9fs.enable":{"declarations":["nixos/modules/services/network-filesystems/u9fs.nix"],"default":false,"description":"Whether to run the u9fs 9P server for Unix.","loc":["services","u9fs","enable"],"readOnly":false,"type":"boolean"},"services.u9fs.extraArgs":{"declarations":["nixos/modules/services/network-filesystems/u9fs.nix"],"default":"","description":"Extra arguments to pass on invocation,\nsee <command>man 4 u9fs</command>\n","example":"-a none","loc":["services","u9fs","extraArgs"],"readOnly":false,"type":"string"},"services.u9fs.listenStreams":{"declarations":["nixos/modules/services/network-filesystems/u9fs.nix"],"default":["564"],"description":"Sockets to listen for clients on.\nSee <command>man 5 systemd.socket</command> for socket syntax.\n","example":["192.168.16.1:564"],"loc":["services","u9fs","listenStreams"],"readOnly":false,"type":"list of strings"},"services.u9fs.user":{"declarations":["nixos/modules/services/network-filesystems/u9fs.nix"],"default":"nobody","description":"User to run u9fs under.","loc":["services","u9fs","user"],"readOnly":false,"type":"string"},"services.udev.extraHwdb":{"declarations":["nixos/modules/services/hardware/udev.nix"],"default":"","description":"Additional <command>hwdb</command> files. They'll be written\ninto file <filename>10-local.hwdb</filename>. Thus they are\nread before all other files.\n","example":"evdev:input:b0003v05AFp8277*\n  KEYBOARD_KEY_70039=leftalt\n  KEYBOARD_KEY_700e2=leftctrl\n","loc":["services","udev","extraHwdb"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.udev.extraRules":{"declarations":["nixos/modules/services/hardware/udev.nix"],"default":"","description":"Additional <command>udev</command> rules. They'll be written\ninto file <filename>99-local.rules</filename>. Thus they are\nread and applied after all other rules.\n","example":"KERNEL==\"eth*\", ATTR{address}==\"00:1D:60:B9:6D:4F\", NAME=\"my_fast_network_card\"\n","loc":["services","udev","extraRules"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.udev.packages":{"declarations":["nixos/modules/services/hardware/udev.nix"],"default":[],"description":"List of packages containing <command>udev</command> rules.\nAll files found in\n<filename><replaceable>pkg</replaceable>/etc/udev/rules.d</filename> and\n<filename><replaceable>pkg</replaceable>/lib/udev/rules.d</filename>\nwill be included.\n","loc":["services","udev","packages"],"readOnly":false,"type":"list of paths"},"services.udev.path":{"declarations":["nixos/modules/services/hardware/udev.nix"],"default":[],"description":"Packages added to the <envar>PATH</envar> environment variable when\nexecuting programs from Udev rules.\n","loc":["services","udev","path"],"readOnly":false,"type":"list of paths"},"services.udisks2.enable":{"declarations":["nixos/modules/services/hardware/udisks2.nix"],"default":true,"description":"Whether to enable Udisks, a DBus service that allows\napplications to query and manipulate storage devices.\n","loc":["services","udisks2","enable"],"readOnly":false,"type":"boolean"},"services.uhub.aclConfig":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":"","description":"Contents of user ACL configuration file.","loc":["services","uhub","aclConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.uhub.address":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":"any","description":"Address to bind the hub to.","loc":["services","uhub","address"],"readOnly":false,"type":"Concatenated string"},"services.uhub.enable":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":false,"description":"Whether to enable the uhub ADC hub.","loc":["services","uhub","enable"],"readOnly":false,"type":"boolean"},"services.uhub.enableTLS":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":false,"description":"Whether to enable TLS support.","loc":["services","uhub","enableTLS"],"readOnly":false,"type":"boolean"},"services.uhub.hubConfig":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":"","description":"Contents of uhub configuration file.","loc":["services","uhub","hubConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.uhub.plugins.authSqlite.enable":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":false,"description":"Whether to enable the Sqlite authentication database plugin","loc":["services","uhub","plugins","authSqlite","enable"],"readOnly":false,"type":"boolean"},"services.uhub.plugins.authSqlite.file":{"declarations":["nixos/modules/services/misc/uhub.nix"],"description":"Path to user database. Use the uhub-passwd utility to create the database and add/remove users.","example":"/var/db/uhub-users","loc":["services","uhub","plugins","authSqlite","file"],"readOnly":false,"type":"Concatenated string"},"services.uhub.plugins.history.connect":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":5,"description":"The number of chat history messages to send when users connect (0 = do not send any history).","loc":["services","uhub","plugins","history","connect"],"readOnly":false,"type":"signed integer"},"services.uhub.plugins.history.default":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":10,"description":"When !history is provided without arguments, then this default number of messages are returned.","loc":["services","uhub","plugins","history","default"],"readOnly":false,"type":"signed integer"},"services.uhub.plugins.history.enable":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":false,"description":"Whether to enable the history plugin.","loc":["services","uhub","plugins","history","enable"],"readOnly":false,"type":"boolean"},"services.uhub.plugins.history.max":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":200,"description":"The maximum number of messages to keep in history","loc":["services","uhub","plugins","history","max"],"readOnly":false,"type":"signed integer"},"services.uhub.plugins.logging.enable":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":false,"description":"Whether to enable the logging plugin.","loc":["services","uhub","plugins","logging","enable"],"readOnly":false,"type":"boolean"},"services.uhub.plugins.logging.file":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":"","description":"Path of log file.","loc":["services","uhub","plugins","logging","file"],"readOnly":false,"type":"Concatenated string"},"services.uhub.plugins.logging.syslog":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":false,"description":"If true then the system log is used instead of writing to file.","loc":["services","uhub","plugins","logging","syslog"],"readOnly":false,"type":"boolean"},"services.uhub.plugins.welcome.enable":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":false,"description":"Whether to enable the welcome plugin.","loc":["services","uhub","plugins","welcome","enable"],"readOnly":false,"type":"boolean"},"services.uhub.plugins.welcome.motd":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":"","description":"Welcome message displayed to clients after connecting \nand with the <literal>!motd</literal> command.\n","loc":["services","uhub","plugins","welcome","motd"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.uhub.plugins.welcome.rules":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":"","description":"Rules message, displayed to clients with the <literal>!rules</literal> command.\n","loc":["services","uhub","plugins","welcome","rules"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.uhub.port":{"declarations":["nixos/modules/services/misc/uhub.nix"],"default":1511,"description":"TCP port to bind the hub to.","loc":["services","uhub","port"],"readOnly":false,"type":"signed integer"},"services.unbound.allowedAccess":{"declarations":["nixos/modules/services/networking/unbound.nix"],"default":["127.0.0.0/24"],"description":"What networks are allowed to use unbound as a resolver.","loc":["services","unbound","allowedAccess"],"readOnly":false,"type":"list of strings"},"services.unbound.enable":{"declarations":["nixos/modules/services/networking/unbound.nix"],"default":false,"description":"Whether to enable Unbound domain name server.","example":true,"loc":["services","unbound","enable"],"readOnly":false,"type":"boolean"},"services.unbound.enableRootTrustAnchor":{"declarations":["nixos/modules/services/networking/unbound.nix"],"default":true,"description":"Use and update root trust anchor for DNSSEC validation.","loc":["services","unbound","enableRootTrustAnchor"],"readOnly":false,"type":"boolean"},"services.unbound.extraConfig":{"declarations":["nixos/modules/services/networking/unbound.nix"],"default":"","description":"Extra unbound config. See\n<citerefentry><refentrytitle>unbound.conf</refentrytitle><manvolnum>8\n</manvolnum></citerefentry>.\n","loc":["services","unbound","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.unbound.forwardAddresses":{"declarations":["nixos/modules/services/networking/unbound.nix"],"default":[],"description":"What servers to forward queries to.","loc":["services","unbound","forwardAddresses"],"readOnly":false,"type":"list of strings"},"services.unbound.interfaces":{"declarations":["nixos/modules/services/networking/unbound.nix"],"default":["127.0.0.1","::1"],"description":"What addresses the server should listen on.","loc":["services","unbound","interfaces"],"readOnly":false,"type":"list of strings"},"services.unclutter-xfixes.enable":{"declarations":["nixos/modules/services/x11/unclutter-xfixes.nix"],"default":false,"description":"Enable unclutter-xfixes to hide your mouse cursor when inactive.","loc":["services","unclutter-xfixes","enable"],"readOnly":false,"type":"boolean"},"services.unclutter-xfixes.extraOptions":{"declarations":["nixos/modules/services/x11/unclutter-xfixes.nix"],"default":[],"description":"More arguments to pass to the unclutter-xfixes command.","example":["exclude-root","ignore-scrolling","fork"],"loc":["services","unclutter-xfixes","extraOptions"],"readOnly":false,"type":"list of strings"},"services.unclutter-xfixes.package":{"declarations":["nixos/modules/services/x11/unclutter-xfixes.nix"],"default":"pkgs.unclutter-xfixes","description":"unclutter-xfixes derivation to use.","loc":["services","unclutter-xfixes","package"],"readOnly":false,"type":"package"},"services.unclutter-xfixes.threshold":{"declarations":["nixos/modules/services/x11/unclutter-xfixes.nix"],"default":1,"description":"Minimum number of pixels considered cursor movement.","loc":["services","unclutter-xfixes","threshold"],"readOnly":false,"type":"signed integer"},"services.unclutter-xfixes.timeout":{"declarations":["nixos/modules/services/x11/unclutter-xfixes.nix"],"default":1,"description":"Number of seconds before the cursor is marked inactive.","loc":["services","unclutter-xfixes","timeout"],"readOnly":false,"type":"signed integer"},"services.unclutter.enable":{"declarations":["nixos/modules/services/x11/unclutter.nix"],"default":false,"description":"Enable unclutter to hide your mouse cursor when inactive","loc":["services","unclutter","enable"],"readOnly":false,"type":"boolean"},"services.unclutter.excluded":{"declarations":["nixos/modules/services/x11/unclutter.nix"],"default":[],"description":"Names of windows where unclutter should not apply","example":[""],"loc":["services","unclutter","excluded"],"readOnly":false,"type":"list of strings"},"services.unclutter.extraOptions":{"declarations":["nixos/modules/services/x11/unclutter.nix"],"default":[],"description":"More arguments to pass to the unclutter command","example":["noevent","grab"],"loc":["services","unclutter","extraOptions"],"readOnly":false,"type":"list of strings"},"services.unclutter.keystroke":{"declarations":["nixos/modules/services/x11/unclutter.nix"],"default":false,"description":"Wait for a keystroke before hiding the cursor","loc":["services","unclutter","keystroke"],"readOnly":false,"type":"boolean"},"services.unclutter.package":{"declarations":["nixos/modules/services/x11/unclutter.nix"],"default":"pkgs.unclutter","description":"unclutter derivation to use.","loc":["services","unclutter","package"],"readOnly":false,"type":"package"},"services.unclutter.threeshold":{"declarations":["nixos/modules/services/x11/unclutter.nix"],"default":1,"description":"Minimum number of pixels considered cursor movement","loc":["services","unclutter","threeshold"],"readOnly":false,"type":"signed integer"},"services.unclutter.timeout":{"declarations":["nixos/modules/services/x11/unclutter.nix"],"default":1,"description":"Number of seconds before the cursor is marked inactive","loc":["services","unclutter","timeout"],"readOnly":false,"type":"signed integer"},"services.undervolt.analogioOffset":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":null,"description":"The amount of voltage to offset analogio by. Accepts a floating point number.\n","loc":["services","undervolt","analogioOffset"],"readOnly":false,"type":"null or string"},"services.undervolt.coreOffset":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":null,"description":"The amount of voltage to offset the CPU cores by. Accepts a floating point number.\n","loc":["services","undervolt","coreOffset"],"readOnly":false,"type":"null or string"},"services.undervolt.enable":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":false,"description":"Whether to undervolt intel cpus.\n","loc":["services","undervolt","enable"],"readOnly":false,"type":"boolean"},"services.undervolt.gpuOffset":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":null,"description":"The amount of voltage to offset the GPU by. Accepts a floating point number.\n","loc":["services","undervolt","gpuOffset"],"readOnly":false,"type":"null or string"},"services.undervolt.package":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":"pkgs.undervolt","description":"undervolt derivation to use.\n","loc":["services","undervolt","package"],"readOnly":false,"type":"package"},"services.undervolt.temp":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":null,"description":"The temperature target. Accepts a floating point number.\n","loc":["services","undervolt","temp"],"readOnly":false,"type":"null or string"},"services.undervolt.tempAc":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":null,"description":"The temperature target on AC power. Accepts a floating point number.\n","loc":["services","undervolt","tempAc"],"readOnly":false,"type":"null or string"},"services.undervolt.tempBat":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":null,"description":"The temperature target on battery power. Accepts a floating point number.\n","loc":["services","undervolt","tempBat"],"readOnly":false,"type":"null or string"},"services.undervolt.uncoreOffset":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":null,"description":"The amount of voltage to offset uncore by. Accepts a floating point number.\n","loc":["services","undervolt","uncoreOffset"],"readOnly":false,"type":"null or string"},"services.undervolt.verbose":{"declarations":["nixos/modules/services/hardware/undervolt.nix"],"default":false,"description":"Whether to enable verbose logging.\n","loc":["services","undervolt","verbose"],"readOnly":false,"type":"boolean"},"services.unifi.dataDir":{"declarations":["nixos/modules/services/networking/unifi.nix"],"default":"/var/lib/unifi/data","description":"Where to store the database and other data.\n\nThis directory will be bind-mounted to /var/lib/unifi/data as part of the service startup.\n","loc":["services","unifi","dataDir"],"readOnly":false,"type":"string"},"services.unifi.enable":{"declarations":["nixos/modules/services/networking/unifi.nix"],"default":false,"description":"Whether or not to enable the unifi controller service.\n","loc":["services","unifi","enable"],"readOnly":false,"type":"boolean"},"services.unifi.initialJavaHeapSize":{"declarations":["nixos/modules/services/networking/unifi.nix"],"default":null,"description":"Set the initial heap size for the JVM in MB. If this option isn't set, the\nJVM will decide this value at runtime.\n","example":1024,"loc":["services","unifi","initialJavaHeapSize"],"readOnly":false,"type":"null or signed integer"},"services.unifi.jrePackage":{"declarations":["nixos/modules/services/networking/unifi.nix"],"default":"pkgs.jre8","description":"The JRE package to use. Check the release notes to ensure it is supported.\n","loc":["services","unifi","jrePackage"],"readOnly":false,"type":"package"},"services.unifi.maximumJavaHeapSize":{"declarations":["nixos/modules/services/networking/unifi.nix"],"default":null,"description":"Set the maximimum heap size for the JVM in MB. If this option isn't set, the\nJVM will decide this value at runtime.\n","example":4096,"loc":["services","unifi","maximumJavaHeapSize"],"readOnly":false,"type":"null or signed integer"},"services.unifi.mongodbPackage":{"declarations":["nixos/modules/services/networking/unifi.nix"],"default":"pkgs.mongodb","description":"The mongodb package to use.\n","loc":["services","unifi","mongodbPackage"],"readOnly":false,"type":"package"},"services.unifi.openPorts":{"declarations":["nixos/modules/services/networking/unifi.nix"],"default":true,"description":"Whether or not to open the minimum required ports on the firewall.\n\nThis is necessary to allow firmware upgrades and device discovery to\nwork. For remote login, you should additionally open (or forward) port\n8443.\n","loc":["services","unifi","openPorts"],"readOnly":false,"type":"boolean"},"services.unifi.unifiPackage":{"declarations":["nixos/modules/services/networking/unifi.nix"],"default":"pkgs.unifiLTS","description":"The unifi package to use.\n","loc":["services","unifi","unifiPackage"],"readOnly":false,"type":"package"},"services.upower.enable":{"declarations":["nixos/modules/services/hardware/upower.nix"],"default":false,"description":"Whether to enable Upower, a DBus service that provides power\nmanagement support to applications.\n","loc":["services","upower","enable"],"readOnly":false,"type":"boolean"},"services.upower.package":{"declarations":["nixos/modules/services/hardware/upower.nix"],"default":"pkgs.upower","description":"Which upower package to use.\n","example":{"_type":"literalExample","text":"pkgs.upower"},"loc":["services","upower","package"],"readOnly":false,"type":"package"},"services.uptime.configFile":{"declarations":["nixos/modules/services/monitoring/uptime.nix"],"default":null,"description":"The uptime configuration file\n\nIf mongodb: server != localhost, please set usesRemoteMongo = true\n\nIf you only want to run the monitor, please set enableWebService = false\nand enableSeparateMonitoringService = true\n\nIf autoStartMonitor: false (recommended) and you want to run both\nservices, please set enableSeparateMonitoringService = true\n","loc":["services","uptime","configFile"],"readOnly":false,"type":"null or path"},"services.uptime.enableSeparateMonitoringService":{"declarations":["nixos/modules/services/monitoring/uptime.nix"],"default":false,"description":"Whether to enable the uptime monitoring service.","example":true,"loc":["services","uptime","enableSeparateMonitoringService"],"readOnly":false,"type":"boolean"},"services.uptime.enableWebService":{"declarations":["nixos/modules/services/monitoring/uptime.nix"],"default":false,"description":"Whether to enable the uptime monitoring program web service.","example":true,"loc":["services","uptime","enableWebService"],"readOnly":false,"type":"boolean"},"services.uptime.nodeEnv":{"declarations":["nixos/modules/services/monitoring/uptime.nix"],"default":"production","description":"The node environment to run in (development, production, etc.)","loc":["services","uptime","nodeEnv"],"readOnly":false,"type":"Concatenated string"},"services.uptime.usesRemoteMongo":{"declarations":["nixos/modules/services/monitoring/uptime.nix"],"default":false,"description":"Whether the configuration file specifies a remote mongo instance","loc":["services","uptime","usesRemoteMongo"],"readOnly":false,"type":"boolean"},"services.uptimed.enable":{"declarations":["nixos/modules/services/system/uptimed.nix"],"default":false,"description":"Enable <literal>uptimed</literal>, allowing you to track\nyour highest uptimes.\n","loc":["services","uptimed","enable"],"readOnly":false,"type":"unspecified"},"services.urxvtd.enable":{"declarations":["nixos/modules/services/x11/urxvtd.nix"],"default":false,"description":"Enable urxvtd, the urxvt terminal daemon. To use urxvtd, run\n\"urxvtc\".\n","loc":["services","urxvtd","enable"],"readOnly":false,"type":"boolean"},"services.usbguard.IPCAccessControlFiles":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":"/var/lib/usbguard/IPCAccessControl.d/","description":"The files at this location will be interpreted by the daemon as IPC\naccess control definition files. See the IPC ACCESS CONTROL section\nin <citerefentry><refentrytitle>usbguard-daemon.conf</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for more details.\n","loc":["services","usbguard","IPCAccessControlFiles"],"readOnly":false,"type":"path"},"services.usbguard.IPCAllowedGroups":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":[],"description":"A list of groupnames that the daemon will accept IPC connections\nfrom.\n","example":["wheel"],"loc":["services","usbguard","IPCAllowedGroups"],"readOnly":false,"type":"list of strings"},"services.usbguard.IPCAllowedUsers":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":["root"],"description":"A list of usernames that the daemon will accept IPC connections from.\n","example":["root","yourusername"],"loc":["services","usbguard","IPCAllowedUsers"],"readOnly":false,"type":"list of strings"},"services.usbguard.auditFilePath":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":"/var/log/usbguard/usbguard-audit.log","description":"USBGuard audit events log file path.\n","loc":["services","usbguard","auditFilePath"],"readOnly":false,"type":"path"},"services.usbguard.deviceRulesWithPort":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":false,"description":"Generate device specific rules including the \"via-port\" attribute.\n","loc":["services","usbguard","deviceRulesWithPort"],"readOnly":false,"type":"boolean"},"services.usbguard.enable":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":false,"description":"Whether to enable USBGuard daemon.","example":true,"loc":["services","usbguard","enable"],"readOnly":false,"type":"boolean"},"services.usbguard.implictPolicyTarget":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":"block","description":"How to treat USB devices that don't match any rule in the policy.\nTarget should be one of allow, block or reject (logically remove the\ndevice node from the system).\n","loc":["services","usbguard","implictPolicyTarget"],"readOnly":false,"type":"one of \"allow\", \"block\", \"reject\", \"keep\", \"apply-policy\""},"services.usbguard.insertedDevicePolicy":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":"apply-policy","description":"How to treat USB devices that are already connected after the daemon\nstarts. One of block, reject, apply-policy.\n","loc":["services","usbguard","insertedDevicePolicy"],"readOnly":false,"type":"one of \"allow\", \"block\", \"reject\", \"keep\", \"apply-policy\""},"services.usbguard.presentControllerPolicy":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":"keep","description":"How to treat USB controller devices that are already connected when\nthe daemon starts. One of allow, block, reject, keep or apply-policy.\n","loc":["services","usbguard","presentControllerPolicy"],"readOnly":false,"type":"one of \"allow\", \"block\", \"reject\", \"keep\", \"apply-policy\""},"services.usbguard.presentDevicePolicy":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":"apply-policy","description":"How to treat USB devices that are already connected when the daemon\nstarts. Policy should be one of allow, block, reject, keep (keep\nwhatever state the device is currently in) or apply-policy (evaluate\nthe rule set for every present device).\n","loc":["services","usbguard","presentDevicePolicy"],"readOnly":false,"type":"one of \"allow\", \"block\", \"reject\", \"keep\", \"apply-policy\""},"services.usbguard.restoreControllerDeviceState":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":false,"description":"The  USBGuard  daemon  modifies  some attributes of controller\ndevices like the default authorization state of new child device\ninstances. Using this setting, you can controll whether the daemon\nwill try to restore the attribute values to the state before\nmodificaton on shutdown.\n","loc":["services","usbguard","restoreControllerDeviceState"],"readOnly":false,"type":"boolean"},"services.usbguard.ruleFile":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":"/var/lib/usbguard/rules.conf","description":"The USBGuard daemon will use this file to load the policy rule set\nfrom it and to write new rules received via the IPC interface.\n\nRunning the command <literal>usbguard generate-policy</literal> as\nroot will generate a config for your currently plugged in devices.\nFor a in depth guide consult the official documentation.\n\nSetting the <literal>rules</literal> option will ignore the\n<literal>ruleFile</literal> option.\n","loc":["services","usbguard","ruleFile"],"readOnly":false,"type":"path"},"services.usbguard.rules":{"declarations":["nixos/modules/services/security/usbguard.nix"],"default":null,"description":"The USBGuard daemon will load this policy rule set. Modifying it via\nthe IPC interface won't work if you use this option, since the\ncontents of this option will be written into the nix-store it will be\nread-only.\n\nYou can still use <literal> usbguard generate-policy</literal> to\ngenerate rules, but you would have to insert them here.\n\nSetting the <literal>rules</literal> option will ignore the\n<literal>ruleFile</literal> option.\n","example":"allow with-interface equals { 08:*:* }\n","loc":["services","usbguard","rules"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.usbmuxd.enable":{"declarations":["nixos/modules/services/hardware/usbmuxd.nix"],"default":false,"description":"Enable the usbmuxd (\"USB multiplexing daemon\") service. This daemon is\nin charge of multiplexing connections over USB to an iOS device. This is\nneeded for transferring data from and to iOS devices (see ifuse). Also\nthis may enable plug-n-play tethering for iPhones.\n","loc":["services","usbmuxd","enable"],"readOnly":false,"type":"boolean"},"services.usbmuxd.group":{"declarations":["nixos/modules/services/hardware/usbmuxd.nix"],"default":"usbmux","description":"The group usbmuxd should use to run after startup.\n","loc":["services","usbmuxd","group"],"readOnly":false,"type":"string"},"services.usbmuxd.user":{"declarations":["nixos/modules/services/hardware/usbmuxd.nix"],"default":"usbmux","description":"The user usbmuxd should use to run after startup.\n","loc":["services","usbmuxd","user"],"readOnly":false,"type":"string"},"services.uvcvideo.dynctrl.enable":{"declarations":["nixos/modules/hardware/video/uvcvideo/default.nix"],"default":false,"description":"Whether to enable <command>uvcvideo</command> dynamic controls.\n\nNote that enabling this brings the <command>uvcdynctrl</command> tool\ninto your environement and register all dynamic controls from\nspecified <command>packages</command> to the <command>uvcvideo</command> driver.\n","loc":["services","uvcvideo","dynctrl","enable"],"readOnly":false,"type":"boolean"},"services.uvcvideo.dynctrl.packages":{"declarations":["nixos/modules/hardware/video/uvcvideo/default.nix"],"description":"List of packages containing <command>uvcvideo</command> dynamic controls\nrules. All files found in\n<filename><replaceable>pkg</replaceable>/share/uvcdynctrl/data</filename>\nwill be included.\n\nNote that these will serve as input to the <command>libwebcam</command>\npackage which through its own <command>udev</command> rule will register\nthe dynamic controls from specified packages to the <command>uvcvideo</command>\ndriver.\n","example":{"_type":"literalExample","text":"[ pkgs.tiscamera ]"},"loc":["services","uvcvideo","dynctrl","packages"],"readOnly":false,"type":"list of paths"},"services.uwsgi.enable":{"declarations":["nixos/modules/services/web-servers/uwsgi.nix"],"default":false,"description":"Enable uWSGI","loc":["services","uwsgi","enable"],"readOnly":false,"type":"boolean"},"services.uwsgi.group":{"declarations":["nixos/modules/services/web-servers/uwsgi.nix"],"default":"uwsgi","description":"Group account under which uwsgi runs.","loc":["services","uwsgi","group"],"readOnly":false,"type":"string"},"services.uwsgi.instance":{"declarations":["nixos/modules/services/web-servers/uwsgi.nix"],"default":{"type":"normal"},"description":"uWSGI configuration. It awaits an attribute <literal>type</literal> inside which can be either\n<literal>normal</literal> or <literal>emperor</literal>.\n\nFor <literal>normal</literal> mode you can specify <literal>pythonPackages</literal> as a function\nfrom libraries set into a list of libraries. <literal>pythonpath</literal> will be set accordingly.\n\nFor <literal>emperor</literal> mode, you should use <literal>vassals</literal> attribute\nwhich should be either a set of names and configurations or a path to a directory.\n\nOther attributes will be used in configuration file as-is. Notice that you can redefine\n<literal>plugins</literal> setting here.\n","example":{"_type":"literalExample","text":"{\n  type = \"emperor\";\n  vassals = {\n    moin = {\n      type = \"normal\";\n      pythonPackages = self: with self; [ moinmoin ];\n      socket = \"/run/uwsgi/uwsgi.sock\";\n    };\n  };\n}\n"},"loc":["services","uwsgi","instance"],"readOnly":false,"type":"attribute set"},"services.uwsgi.plugins":{"declarations":["nixos/modules/services/web-servers/uwsgi.nix"],"default":[],"description":"Plugins used with uWSGI","loc":["services","uwsgi","plugins"],"readOnly":false,"type":"list of strings"},"services.uwsgi.runDir":{"declarations":["nixos/modules/services/web-servers/uwsgi.nix"],"default":"/run/uwsgi","description":"Where uWSGI communication sockets can live","loc":["services","uwsgi","runDir"],"readOnly":false,"type":"Concatenated string"},"services.uwsgi.user":{"declarations":["nixos/modules/services/web-servers/uwsgi.nix"],"default":"uwsgi","description":"User account under which uwsgi runs.","loc":["services","uwsgi","user"],"readOnly":false,"type":"string"},"services.varnish.config":{"declarations":["nixos/modules/services/web-servers/varnish/default.nix"],"description":"\n          Verbatim default.vcl configuration.\n        ","loc":["services","varnish","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.varnish.enable":{"declarations":["nixos/modules/services/web-servers/varnish/default.nix"],"default":false,"description":"Whether to enable Varnish Server.","example":true,"loc":["services","varnish","enable"],"readOnly":false,"type":"boolean"},"services.varnish.extraCommandLine":{"declarations":["nixos/modules/services/web-servers/varnish/default.nix"],"default":"","description":"\n          Command line switches for varnishd (run 'varnishd -?' to get list of options)\n        ","example":"-s malloc,256M","loc":["services","varnish","extraCommandLine"],"readOnly":false,"type":"string"},"services.varnish.extraModules":{"declarations":["nixos/modules/services/web-servers/varnish/default.nix"],"default":[],"description":"\n          Varnish modules (except 'std').\n        ","example":{"_type":"literalExample","text":"[ pkgs.varnish5Packages.geoip ]"},"loc":["services","varnish","extraModules"],"readOnly":false,"type":"list of packages"},"services.varnish.http_address":{"declarations":["nixos/modules/services/web-servers/varnish/default.nix"],"default":"*:6081","description":"\n          HTTP listen address and port.\n        ","loc":["services","varnish","http_address"],"readOnly":false,"type":"string"},"services.varnish.package":{"declarations":["nixos/modules/services/web-servers/varnish/default.nix"],"default":"pkgs.varnish5","description":"The package to use\n","loc":["services","varnish","package"],"readOnly":false,"type":"package"},"services.varnish.stateDir":{"declarations":["nixos/modules/services/web-servers/varnish/default.nix"],"default":"/var/spool/varnish/nixos","description":"\n          Directory holding all state for Varnish to run.\n        ","loc":["services","varnish","stateDir"],"readOnly":false,"type":"path"},"services.vault.address":{"declarations":["nixos/modules/services/security/vault.nix"],"default":"127.0.0.1:8200","description":"The name of the ip interface to listen to","loc":["services","vault","address"],"readOnly":false,"type":"string"},"services.vault.enable":{"declarations":["nixos/modules/services/security/vault.nix"],"default":false,"description":"Whether to enable Vault daemon.","example":true,"loc":["services","vault","enable"],"readOnly":false,"type":"boolean"},"services.vault.extraConfig":{"declarations":["nixos/modules/services/security/vault.nix"],"default":"","description":"Extra text appended to <filename>vault.hcl</filename>.","loc":["services","vault","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.vault.listenerExtraConfig":{"declarations":["nixos/modules/services/security/vault.nix"],"default":"tls_min_version = \"tls12\"\n","description":"Extra text appended to the listener section.","loc":["services","vault","listenerExtraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.vault.package":{"declarations":["nixos/modules/services/security/vault.nix"],"default":"pkgs.vault","description":"This option specifies the vault package to use.","loc":["services","vault","package"],"readOnly":false,"type":"package"},"services.vault.storageBackend":{"declarations":["nixos/modules/services/security/vault.nix"],"default":"inmem","description":"The name of the type of storage backend","loc":["services","vault","storageBackend"],"readOnly":false,"type":"one of \"inmem\", \"file\", \"consul\", \"zookeeper\", \"s3\", \"azure\", \"dynamodb\", \"etcd\", \"mssql\", \"mysql\", \"postgresql\", \"swift\", \"gcs\""},"services.vault.storageConfig":{"declarations":["nixos/modules/services/security/vault.nix"],"default":null,"description":"Storage configuration","loc":["services","vault","storageConfig"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"services.vault.storagePath":{"declarations":["nixos/modules/services/security/vault.nix"],"default":null,"description":"Data directory for file backend","loc":["services","vault","storagePath"],"readOnly":false,"type":"null or path"},"services.vault.telemetryConfig":{"declarations":["nixos/modules/services/security/vault.nix"],"default":"","description":"Telemetry configuration","loc":["services","vault","telemetryConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.vault.tlsCertFile":{"declarations":["nixos/modules/services/security/vault.nix"],"default":null,"description":"TLS certificate file. TLS will be disabled unless this option is set","example":"/path/to/your/cert.pem","loc":["services","vault","tlsCertFile"],"readOnly":false,"type":"null or string"},"services.vault.tlsKeyFile":{"declarations":["nixos/modules/services/security/vault.nix"],"default":null,"description":"TLS private key file. TLS will be disabled unless this option is set","example":"/path/to/your/key.pem","loc":["services","vault","tlsKeyFile"],"readOnly":false,"type":"null or string"},"services.venus.cacheDirectory":{"declarations":["nixos/modules/programs/venus.nix"],"default":"/var/cache/venus","description":"Where cached feeds are stored.\n","loc":["services","venus","cacheDirectory"],"readOnly":false,"type":"path"},"services.venus.dates":{"declarations":["nixos/modules/programs/venus.nix"],"default":"*:0/15","description":"Specification (in the format described by\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>) of the time at\nwhich the Venus will collect feeds.\n","loc":["services","venus","dates"],"readOnly":false,"type":"string"},"services.venus.enable":{"declarations":["nixos/modules/programs/venus.nix"],"default":false,"description":"Planet Venus is an awesome ‘river of news’ feed reader. It downloads\nnews feeds published by web sites and aggregates their content\ntogether into a single combined feed, latest news first.\n","loc":["services","venus","enable"],"readOnly":false,"type":"boolean"},"services.venus.feeds":{"declarations":["nixos/modules/programs/venus.nix"],"default":[],"description":"List of feeds.\n","example":[{"feedUrl":"http://url/to/rss/feed.xml","homepageUrl":"http://garbas.si","name":"Rok Garbas"}],"loc":["services","venus","feeds"],"readOnly":false,"type":"unspecified"},"services.venus.group":{"declarations":["nixos/modules/programs/venus.nix"],"default":"root","description":"Group for running venus script.\n","loc":["services","venus","group"],"readOnly":false,"type":"string"},"services.venus.itemsPerPage":{"declarations":["nixos/modules/programs/venus.nix"],"default":15,"description":"How many items to put on each page.\n","loc":["services","venus","itemsPerPage"],"readOnly":false,"type":"signed integer"},"services.venus.link":{"declarations":["nixos/modules/programs/venus.nix"],"default":"http://planet.nixos.org","description":"Link to the main page.\n","loc":["services","venus","link"],"readOnly":false,"type":"string"},"services.venus.name":{"declarations":["nixos/modules/programs/venus.nix"],"default":"NixOS Planet","description":"Your planet's name.\n","loc":["services","venus","name"],"readOnly":false,"type":"string"},"services.venus.outputDirectory":{"declarations":["nixos/modules/programs/venus.nix"],"description":"Directory to place output files.\n","loc":["services","venus","outputDirectory"],"readOnly":false,"type":"path"},"services.venus.outputTheme":{"declarations":["nixos/modules/programs/venus.nix"],"default":"${pkgs.venus}/themes/classic_fancy","description":"Directory containing a config.ini file which is merged with this one.\nThis is typically used to specify templating and bill of material\ninformation.\n","loc":["services","venus","outputTheme"],"readOnly":false,"type":"path"},"services.venus.ownerEmail":{"declarations":["nixos/modules/programs/venus.nix"],"default":"some@example.com","description":"Your e-mail address.\n","loc":["services","venus","ownerEmail"],"readOnly":false,"type":"string"},"services.venus.ownerName":{"declarations":["nixos/modules/programs/venus.nix"],"default":"Rok Garbas","description":"Your name.\n","loc":["services","venus","ownerName"],"readOnly":false,"type":"string"},"services.venus.user":{"declarations":["nixos/modules/programs/venus.nix"],"default":"root","description":"User for running venus script.\n","loc":["services","venus","user"],"readOnly":false,"type":"string"},"services.virtlyst.adminPassword":{"declarations":["nixos/modules/services/web-apps/virtlyst.nix"],"description":"Initial admin password with which the database will be seeded.\n","loc":["services","virtlyst","adminPassword"],"readOnly":false,"type":"string"},"services.virtlyst.enable":{"declarations":["nixos/modules/services/web-apps/virtlyst.nix"],"default":false,"description":"Whether to enable Virtlyst libvirt web interface.","example":true,"loc":["services","virtlyst","enable"],"readOnly":false,"type":"boolean"},"services.virtlyst.httpSocket":{"declarations":["nixos/modules/services/web-apps/virtlyst.nix"],"default":"localhost:3000","description":"IP and/or port to which to bind the http socket.\n","loc":["services","virtlyst","httpSocket"],"readOnly":false,"type":"string"},"services.virtuoso.config":{"declarations":["nixos/modules/services/databases/virtuoso.nix"],"default":"","description":"Extra options to put into Virtuoso configuration file.","loc":["services","virtuoso","config"],"readOnly":false,"type":"unspecified"},"services.virtuoso.dirsAllowed":{"declarations":["nixos/modules/services/databases/virtuoso.nix"],"default":null,"description":"A list of directories Virtuoso is allowed to access","example":"/www, /home/","loc":["services","virtuoso","dirsAllowed"],"readOnly":false,"type":"unspecified"},"services.virtuoso.enable":{"declarations":["nixos/modules/services/databases/virtuoso.nix"],"default":false,"description":"Whether to enable Virtuoso Opensource database server.","loc":["services","virtuoso","enable"],"readOnly":false,"type":"unspecified"},"services.virtuoso.httpListenAddress":{"declarations":["nixos/modules/services/databases/virtuoso.nix"],"default":null,"description":"ip:port or port for Virtuoso HTTP server to listen on.","example":"myserver:8080","loc":["services","virtuoso","httpListenAddress"],"readOnly":false,"type":"unspecified"},"services.virtuoso.listenAddress":{"declarations":["nixos/modules/services/databases/virtuoso.nix"],"default":"1111","description":"ip:port or port to listen on.","example":"myserver:1323","loc":["services","virtuoso","listenAddress"],"readOnly":false,"type":"unspecified"},"services.virtuoso.parameters":{"declarations":["nixos/modules/services/databases/virtuoso.nix"],"default":"","description":"Extra options to put into [Parameters] section of Virtuoso configuration file.","loc":["services","virtuoso","parameters"],"readOnly":false,"type":"unspecified"},"services.vmwareGuest.enable":{"declarations":["nixos/modules/virtualisation/vmware-guest.nix"],"default":false,"description":"Whether to enable VMWare Guest Support.","example":true,"loc":["services","vmwareGuest","enable"],"readOnly":false,"type":"boolean"},"services.vmwareGuest.headless":{"declarations":["nixos/modules/virtualisation/vmware-guest.nix"],"default":false,"description":"Whether to disable X11-related features.","loc":["services","vmwareGuest","headless"],"readOnly":false,"type":"boolean"},"services.vnstat.enable":{"declarations":["nixos/modules/services/monitoring/vnstat.nix"],"default":false,"description":"Whether to enable update of network usage statistics via vnstatd.\n","loc":["services","vnstat","enable"],"readOnly":false,"type":"boolean"},"services.vsftpd.anonymousMkdirEnable":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether any uploads are permitted to anonymous users.\n","loc":["services","vsftpd","anonymousMkdirEnable"],"readOnly":false,"type":"boolean"},"services.vsftpd.anonymousUmask":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":"077","description":"Anonymous write umask.","example":"002","loc":["services","vsftpd","anonymousUmask"],"readOnly":false,"type":"Concatenated string"},"services.vsftpd.anonymousUploadEnable":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether any uploads are permitted to anonymous users.\n","loc":["services","vsftpd","anonymousUploadEnable"],"readOnly":false,"type":"boolean"},"services.vsftpd.anonymousUser":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether to enable the anonymous FTP user.\n","loc":["services","vsftpd","anonymousUser"],"readOnly":false,"type":"boolean"},"services.vsftpd.anonymousUserHome":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":"/home/ftp/","description":"Directory to consider the HOME of the anonymous user.\n","loc":["services","vsftpd","anonymousUserHome"],"readOnly":false,"type":"path"},"services.vsftpd.anonymousUserNoPassword":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether to disable the password for the anonymous FTP user.\n","loc":["services","vsftpd","anonymousUserNoPassword"],"readOnly":false,"type":"boolean"},"services.vsftpd.chrootlocalUser":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether local users are confined to their home directory.\n","loc":["services","vsftpd","chrootlocalUser"],"readOnly":false,"type":"boolean"},"services.vsftpd.enable":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether to enable the vsftpd FTP server.","loc":["services","vsftpd","enable"],"readOnly":false,"type":"unspecified"},"services.vsftpd.extraConfig":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":"","description":"Extra configuration to add at the bottom of the generated configuration file.","example":"ftpd_banner=Hello","loc":["services","vsftpd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.vsftpd.forceLocalDataSSL":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Only applies if <option>sslEnable</option> is true. Non anonymous (local) users\nmust use a secure SSL connection for sending/receiving data on data connection.\n","loc":["services","vsftpd","forceLocalDataSSL"],"readOnly":false,"type":"boolean"},"services.vsftpd.forceLocalLoginsSSL":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Only applies if <option>sslEnable</option> is true. Non anonymous (local) users\nmust use a secure SSL connection to send a password.\n","loc":["services","vsftpd","forceLocalLoginsSSL"],"readOnly":false,"type":"boolean"},"services.vsftpd.localUsers":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether to enable FTP for local users.\n","loc":["services","vsftpd","localUsers"],"readOnly":false,"type":"boolean"},"services.vsftpd.portPromiscuous":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Set to YES if you want to disable the PORT security check that ensures that\noutgoing data connections can only connect to the client. Only enable if you\nknow what you are doing!\n","loc":["services","vsftpd","portPromiscuous"],"readOnly":false,"type":"boolean"},"services.vsftpd.rsaCertFile":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":null,"description":"RSA certificate file.","loc":["services","vsftpd","rsaCertFile"],"readOnly":false,"type":"null or path"},"services.vsftpd.rsaKeyFile":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":null,"description":"RSA private key file.","loc":["services","vsftpd","rsaKeyFile"],"readOnly":false,"type":"null or path"},"services.vsftpd.ssl_sslv2":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"","loc":["services","vsftpd","ssl_sslv2"],"readOnly":false,"type":"boolean"},"services.vsftpd.ssl_sslv3":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"","loc":["services","vsftpd","ssl_sslv3"],"readOnly":false,"type":"boolean"},"services.vsftpd.ssl_tlsv1":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":true,"description":"","loc":["services","vsftpd","ssl_tlsv1"],"readOnly":false,"type":"boolean"},"services.vsftpd.userlist":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":[],"description":"See <option>userlistFile</option>.","loc":["services","vsftpd","userlist"],"readOnly":false,"type":"unspecified"},"services.vsftpd.userlistDeny":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Specifies whether <option>userlistFile</option> is a list of user\nnames to allow or deny access.\nThe default <literal>false</literal> means whitelist/allow.\n","loc":["services","vsftpd","userlistDeny"],"readOnly":false,"type":"boolean"},"services.vsftpd.userlistEnable":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether users are included.\n","loc":["services","vsftpd","userlistEnable"],"readOnly":false,"type":"boolean"},"services.vsftpd.userlistFile":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":"pkgs.writeText \"userlist\" (concatMapStrings (x: \"${x}\n\") cfg.userlist)","description":"Newline separated list of names to be allowed/denied if <option>userlistEnable</option>\nis <literal>true</literal>. Meaning see <option>userlistDeny</option>.\n\nThe default is a file containing the users from <option>userlist</option>.\n\nIf explicitely set to null userlist_file will not be set in vsftpd's config file.\n","loc":["services","vsftpd","userlistFile"],"readOnly":false,"type":"path"},"services.vsftpd.writeEnable":{"declarations":["nixos/modules/services/networking/vsftpd.nix"],"default":false,"description":"Whether any write activity is permitted to users.\n","loc":["services","vsftpd","writeEnable"],"readOnly":false,"type":"boolean"},"services.wakeonlan.interfaces":{"declarations":["nixos/modules/services/networking/wakeonlan.nix"],"default":[],"description":"Interfaces where to enable Wake-On-LAN, and how. Two methods available:\n\"magicpacket\" and \"password\". The password has the shape of six bytes\nin hexadecimal separated by a colon each. For more information,\ncheck the ethtool manual.\n","example":[{"interface":"eth0","method":"password","password":"00:11:22:33:44:55"}],"loc":["services","wakeonlan","interfaces"],"readOnly":false,"type":"unspecified"},"services.weechat.binary":{"declarations":["nixos/modules/services/misc/weechat.nix"],"default":"${pkgs.weechat}/bin/weechat","description":"Binary to execute (by default ${weechat}/bin/weechat).","example":{"_type":"literalExample","text":"${pkgs.weechat}/bin/weechat-headless\n"},"loc":["services","weechat","binary"],"readOnly":false,"type":"unspecified"},"services.weechat.enable":{"declarations":["nixos/modules/services/misc/weechat.nix"],"default":false,"description":"Whether to enable weechat.","example":true,"loc":["services","weechat","enable"],"readOnly":false,"type":"boolean"},"services.weechat.root":{"declarations":["nixos/modules/services/misc/weechat.nix"],"default":"/var/lib/weechat","description":"Weechat state directory.","loc":["services","weechat","root"],"readOnly":false,"type":"string"},"services.weechat.sessionName":{"declarations":["nixos/modules/services/misc/weechat.nix"],"default":"weechat-screen","description":"Name of the `screen' session for weechat.","loc":["services","weechat","sessionName"],"readOnly":false,"type":"string"},"services.winstone":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"default":{},"description":"Defines independent Winstone services, each serving one WAR-file.\n","loc":["services","winstone"],"readOnly":false,"type":"attribute set of submodules"},"services.winstone.<name>.extraJavaOptions":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"default":[],"description":"Extra command line options given to the java process running\nWinstone.\n","loc":["services","winstone","<name>","extraJavaOptions"],"readOnly":false,"type":"list of strings"},"services.winstone.<name>.extraOptions":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"default":[],"description":"Extra command line options given to the Winstone process.\n","loc":["services","winstone","<name>","extraOptions"],"readOnly":false,"type":"list of strings"},"services.winstone.<name>.group":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"description":"The group that will own the working directory.\n","loc":["services","winstone","<name>","group"],"readOnly":false,"type":"string"},"services.winstone.<name>.javaPackage":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"default":"pkgs.jre","description":"Which Java derivation to use for running Winstone.\n","loc":["services","winstone","<name>","javaPackage"],"readOnly":false,"type":"package"},"services.winstone.<name>.serviceName":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"description":"The name of the systemd service. By default, it is\nderived from the winstone instance name.\n","loc":["services","winstone","<name>","serviceName"],"readOnly":false,"type":"string"},"services.winstone.<name>.user":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"description":"The user that should run this Winstone process and\nown the working directory.\n","loc":["services","winstone","<name>","user"],"readOnly":false,"type":"string"},"services.winstone.<name>.warFile":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"description":"The WAR file that Winstone should serve.\n","loc":["services","winstone","<name>","warFile"],"readOnly":false,"type":"string"},"services.winstone.<name>.workDir":{"declarations":["nixos/modules/services/web-servers/winstone.nix"],"description":"The working directory for this Winstone instance. Will\ncontain extracted webapps etc. The directory will be\ncreated if it doesn't exist.\n","loc":["services","winstone","<name>","workDir"],"readOnly":false,"type":"string"},"services.xbanish.arguments":{"declarations":["nixos/modules/services/x11/xbanish.nix"],"default":"","description":"Arguments to pass to xbanish command","example":"-d -i shift","loc":["services","xbanish","arguments"],"readOnly":false,"type":"string"},"services.xbanish.enable":{"declarations":["nixos/modules/services/x11/xbanish.nix"],"default":false,"description":"Whether to enable xbanish.","example":true,"loc":["services","xbanish","enable"],"readOnly":false,"type":"boolean"},"services.xe-guest-utilities.enable":{"declarations":["nixos/modules/virtualisation/xe-guest-utilities.nix"],"default":false,"description":"Whether to enable the Xen guest utilities daemon.","example":true,"loc":["services","xe-guest-utilities","enable"],"readOnly":false,"type":"boolean"},"services.xfs.enable":{"declarations":["nixos/modules/services/x11/xfs.nix"],"default":false,"description":"Whether to enable the X Font Server.","loc":["services","xfs","enable"],"readOnly":false,"type":"boolean"},"services.xinetd.enable":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":false,"description":"Whether to enable the xinetd super-server daemon.\n","loc":["services","xinetd","enable"],"readOnly":false,"type":"unspecified"},"services.xinetd.extraDefaults":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":"","description":"Additional configuration lines added to the default section of xinetd's configuration.\n","loc":["services","xinetd","extraDefaults"],"readOnly":false,"type":"Concatenated string"},"services.xinetd.services":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":[],"description":"A list of services provided by xinetd.\n","loc":["services","xinetd","services"],"readOnly":false,"type":"list of submodules"},"services.xinetd.services.*.extraConfig":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":"","description":"Extra configuration-lines added to the section of the service.","loc":["services","xinetd","services","*","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xinetd.services.*.flags":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":"","description":"","loc":["services","xinetd","services","*","flags"],"readOnly":false,"type":"Concatenated string"},"services.xinetd.services.*.name":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"description":"Name of the service.","example":"login","loc":["services","xinetd","services","*","name"],"readOnly":false,"type":"Concatenated string"},"services.xinetd.services.*.port":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":0,"description":"Port number of the service.","example":123,"loc":["services","xinetd","services","*","port"],"readOnly":false,"type":"signed integer"},"services.xinetd.services.*.protocol":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":"tcp","description":"Protocol of the service.  Usually <literal>tcp</literal> or <literal>udp</literal>.","loc":["services","xinetd","services","*","protocol"],"readOnly":false,"type":"Concatenated string"},"services.xinetd.services.*.server":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"description":"Path of the program that implements the service.","example":"/foo/bin/ftpd","loc":["services","xinetd","services","*","server"],"readOnly":false,"type":"Concatenated string"},"services.xinetd.services.*.serverArgs":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":"","description":"Command-line arguments for the server program.","loc":["services","xinetd","services","*","serverArgs"],"readOnly":false,"type":"Concatenated string"},"services.xinetd.services.*.unlisted":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":false,"description":"Whether this server is listed in\n<filename>/etc/services</filename>.  If so, the port\nnumber can be omitted.\n","loc":["services","xinetd","services","*","unlisted"],"readOnly":false,"type":"boolean"},"services.xinetd.services.*.user":{"declarations":["nixos/modules/services/networking/xinetd.nix"],"default":"nobody","description":"User account for the service","loc":["services","xinetd","services","*","user"],"readOnly":false,"type":"Concatenated string"},"services.xl2tpd.clientIpRange":{"declarations":["nixos/modules/services/networking/xl2tpd.nix"],"default":"10.125.125.2-11","description":"The range from which client IPs are drawn.","loc":["services","xl2tpd","clientIpRange"],"readOnly":false,"type":"Concatenated string"},"services.xl2tpd.enable":{"declarations":["nixos/modules/services/networking/xl2tpd.nix"],"default":false,"description":"Whether to enable xl2tpd, the Layer 2 Tunnelling Protocol Daemon.","example":true,"loc":["services","xl2tpd","enable"],"readOnly":false,"type":"boolean"},"services.xl2tpd.extraPppdOptions":{"declarations":["nixos/modules/services/networking/xl2tpd.nix"],"default":"","description":"Adds extra lines to the pppd options file.","example":"ms-dns 8.8.8.8\nms-dns 8.8.4.4\n","loc":["services","xl2tpd","extraPppdOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xl2tpd.extraXl2tpOptions":{"declarations":["nixos/modules/services/networking/xl2tpd.nix"],"default":"","description":"Adds extra lines to the xl2tpd configuration file.","loc":["services","xl2tpd","extraXl2tpOptions"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xl2tpd.serverIp":{"declarations":["nixos/modules/services/networking/xl2tpd.nix"],"default":"10.125.125.1","description":"The server-side IP address.","loc":["services","xl2tpd","serverIp"],"readOnly":false,"type":"Concatenated string"},"services.xmr-stak.configFiles":{"declarations":["nixos/modules/services/misc/xmr-stak.nix"],"default":{},"description":"Content of config files like config.txt, pools.txt or cpu.txt.\n","example":{"_type":"literalExample","text":"{\n  \"config.txt\" = ''\n    \"verbose_level\" : 4,\n    \"h_print_time\" : 60,\n    \"tls_secure_algo\" : true,\n  '';\n  \"pools.txt\" = ''\n    \"currency\" : \"monero7\",\n    \"pool_list\" :\n    [ { \"pool_address\" : \"pool.supportxmr.com:443\",\n        \"wallet_address\" : \"my-wallet-address\",\n        \"rig_id\" : \"\",\n        \"pool_password\" : \"nixos\",\n        \"use_nicehash\" : false,\n        \"use_tls\" : true,\n        \"tls_fingerprint\" : \"\",\n        \"pool_weight\" : 23\n      },\n    ],\n  '';\n}\n"},"loc":["services","xmr-stak","configFiles"],"readOnly":false,"type":"attribute set of strings"},"services.xmr-stak.cudaSupport":{"declarations":["nixos/modules/services/misc/xmr-stak.nix"],"default":false,"description":"Whether to enable support for CUDA (NVidia graphics cards).","example":true,"loc":["services","xmr-stak","cudaSupport"],"readOnly":false,"type":"boolean"},"services.xmr-stak.enable":{"declarations":["nixos/modules/services/misc/xmr-stak.nix"],"default":false,"description":"Whether to enable xmr-stak miner.","example":true,"loc":["services","xmr-stak","enable"],"readOnly":false,"type":"boolean"},"services.xmr-stak.extraArgs":{"declarations":["nixos/modules/services/misc/xmr-stak.nix"],"default":[],"description":"List of parameters to pass to xmr-stak.","example":["--noCPU","--currency monero"],"loc":["services","xmr-stak","extraArgs"],"readOnly":false,"type":"list of strings"},"services.xmr-stak.openclSupport":{"declarations":["nixos/modules/services/misc/xmr-stak.nix"],"default":false,"description":"Whether to enable support for OpenCL (AMD/ATI graphics cards).","example":true,"loc":["services","xmr-stak","openclSupport"],"readOnly":false,"type":"boolean"},"services.xrdp.defaultWindowManager":{"declarations":["nixos/modules/services/networking/xrdp.nix"],"default":"xterm","description":"The script to run when user log in, usually a window manager, e.g. \"icewm\", \"xfce4-session\"\nThis is per-user overridable, if file ~/startwm.sh exists it will be used instead.\n","example":"xfce4-session","loc":["services","xrdp","defaultWindowManager"],"readOnly":false,"type":"string"},"services.xrdp.enable":{"declarations":["nixos/modules/services/networking/xrdp.nix"],"default":false,"description":"Whether to enable xrdp, the Remote Desktop Protocol server.","example":true,"loc":["services","xrdp","enable"],"readOnly":false,"type":"boolean"},"services.xrdp.package":{"declarations":["nixos/modules/services/networking/xrdp.nix"],"default":"pkgs.xrdp","description":"The package to use for the xrdp daemon's binary.\n","loc":["services","xrdp","package"],"readOnly":false,"type":"package"},"services.xrdp.port":{"declarations":["nixos/modules/services/networking/xrdp.nix"],"default":3389,"description":"Specifies on which port the xrdp daemon listens.\n","loc":["services","xrdp","port"],"readOnly":false,"type":"signed integer"},"services.xrdp.sslCert":{"declarations":["nixos/modules/services/networking/xrdp.nix"],"default":"/etc/xrdp/cert.pem","description":"ssl certificate path\nA self-signed certificate will be generated if file not exists.\n","example":"/path/to/your/cert.pem","loc":["services","xrdp","sslCert"],"readOnly":false,"type":"string"},"services.xrdp.sslKey":{"declarations":["nixos/modules/services/networking/xrdp.nix"],"default":"/etc/xrdp/key.pem","description":"ssl private key path\nA self-signed certificate will be generated if file not exists.\n","example":"/path/to/your/key.pem","loc":["services","xrdp","sslKey"],"readOnly":false,"type":"string"},"services.xserver.autoRepeatDelay":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":null,"description":"Sets the autorepeat delay (length of time in milliseconds that a key must be depressed before autorepeat starts).\n","loc":["services","xserver","autoRepeatDelay"],"readOnly":false,"type":"null or signed integer"},"services.xserver.autoRepeatInterval":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":null,"description":"Sets the autorepeat interval (length of time in milliseconds that should elapse between autorepeat-generated keystrokes).\n","loc":["services","xserver","autoRepeatInterval"],"readOnly":false,"type":"null or signed integer"},"services.xserver.autorun":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":true,"description":"Whether to start the X server automatically.\n","loc":["services","xserver","autorun"],"readOnly":false,"type":"boolean"},"services.xserver.config":{"declarations":["nixos/modules/services/x11/xserver.nix"],"description":"The contents of the configuration file of the X server\n(<filename>xorg.conf</filename>).\n","loc":["services","xserver","config"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.defaultDepth":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":0,"description":"Default colour depth.","example":8,"loc":["services","xserver","defaultDepth"],"readOnly":false,"type":"signed integer"},"services.xserver.desktopManager.default":{"declarations":["nixos/modules/services/x11/desktop-managers/default.nix"],"default":"","description":"Default desktop manager loaded if none have been chosen.","example":"none","loc":["services","xserver","desktopManager","default"],"readOnly":false,"type":"string"},"services.xserver.desktopManager.enlightenment.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/enlightenment.nix"],"default":false,"description":"Enable the Enlightenment desktop environment.","loc":["services","xserver","desktopManager","enlightenment","enable"],"readOnly":false,"type":"unspecified"},"services.xserver.desktopManager.gnome3.debug":{"declarations":["nixos/modules/services/x11/desktop-managers/gnome3.nix"],"default":false,"description":"Whether to enable gnome-session debug messages.","example":true,"loc":["services","xserver","desktopManager","gnome3","debug"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.gnome3.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/gnome3.nix"],"default":false,"description":"Enable Gnome 3 desktop manager.","loc":["services","xserver","desktopManager","gnome3","enable"],"readOnly":false,"type":"unspecified"},"services.xserver.desktopManager.gnome3.extraGSettingsOverridePackages":{"declarations":["nixos/modules/services/x11/desktop-managers/gnome3.nix"],"default":[],"description":"List of packages for which gsettings are overridden.","loc":["services","xserver","desktopManager","gnome3","extraGSettingsOverridePackages"],"readOnly":false,"type":"list of paths"},"services.xserver.desktopManager.gnome3.extraGSettingsOverrides":{"declarations":["nixos/modules/services/x11/desktop-managers/gnome3.nix"],"default":"","description":"Additional gsettings overrides.","loc":["services","xserver","desktopManager","gnome3","extraGSettingsOverrides"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.desktopManager.gnome3.sessionPath":{"declarations":["nixos/modules/services/x11/desktop-managers/gnome3.nix"],"default":[],"description":"Additional list of packages to be added to the session search path.\nUseful for GNOME Shell extensions or GSettings-conditional autostart.\n\nNote that this should be a last resort; patching the package is preferred (see GPaste).\n","example":{"_type":"literalExample","text":"[ pkgs.gnome3.gpaste ]"},"loc":["services","xserver","desktopManager","gnome3","sessionPath"],"readOnly":false,"type":"unspecified"},"services.xserver.desktopManager.kodi.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/kodi.nix"],"default":false,"description":"Enable the kodi multimedia center.","loc":["services","xserver","desktopManager","kodi","enable"],"readOnly":false,"type":"unspecified"},"services.xserver.desktopManager.lumina.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/lumina.nix"],"default":false,"description":"Enable the Lumina desktop manager","loc":["services","xserver","desktopManager","lumina","enable"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.lxqt.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/lxqt.nix"],"default":false,"description":"Enable the LXQt desktop manager","loc":["services","xserver","desktopManager","lxqt","enable"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.mate.debug":{"declarations":["nixos/modules/services/x11/desktop-managers/mate.nix"],"default":false,"description":"Whether to enable mate-session debug messages.","example":true,"loc":["services","xserver","desktopManager","mate","debug"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.mate.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/mate.nix"],"default":false,"description":"Enable the MATE desktop environment","loc":["services","xserver","desktopManager","mate","enable"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.maxx.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/maxx.nix"],"default":false,"description":"Whether to enable MaXX desktop environment.","example":true,"loc":["services","xserver","desktopManager","maxx","enable"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.plasma5.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/plasma5.nix"],"default":false,"description":"Enable the Plasma 5 (KDE 5) desktop environment.","loc":["services","xserver","desktopManager","plasma5","enable"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.plasma5.enableQt4Support":{"declarations":["nixos/modules/services/x11/desktop-managers/plasma5.nix"],"default":true,"description":"Enable support for Qt 4-based applications. Particularly, install a\ndefault backend for Phonon.\n","loc":["services","xserver","desktopManager","plasma5","enableQt4Support"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.wallpaper.combineScreens":{"declarations":["nixos/modules/services/x11/desktop-managers/default.nix"],"default":false,"description":"When set to <literal>true</literal> the wallpaper will stretch across all screens.\nWhen set to <literal>false</literal> the wallpaper is duplicated to all screens.\n","loc":["services","xserver","desktopManager","wallpaper","combineScreens"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.wallpaper.mode":{"declarations":["nixos/modules/services/x11/desktop-managers/default.nix"],"default":"scale","description":"The file <filename>~/.background-image</filename> is used as a background image.\nThis option specifies the placement of this image onto your desktop.\n\nPossible values:\n<literal>center</literal>: Center the image on the background. If it is too small, it will be surrounded by a black border.\n<literal>fill</literal>: Like <literal>scale</literal>, but preserves aspect ratio by zooming the image until it fits. Either a horizontal or a vertical part of the image will be cut off.\n<literal>max</literal>: Like <literal>fill</literal>, but scale the image to the maximum size that fits the screen with black borders on one side.\n<literal>scale</literal>: Fit the file into the background without repeating it, cutting off stuff or using borders. But the aspect ratio is not preserved either.\n<literal>tile</literal>: Tile (repeat) the image in case it is too small for the screen.\n","example":"fill","loc":["services","xserver","desktopManager","wallpaper","mode"],"readOnly":false,"type":"one of \"center\", \"fill\", \"max\", \"scale\", \"tile\""},"services.xserver.desktopManager.xfce.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/xfce.nix"],"default":false,"description":"Enable the Xfce desktop environment.","loc":["services","xserver","desktopManager","xfce","enable"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.xfce.enableXfwm":{"declarations":["nixos/modules/services/x11/desktop-managers/xfce.nix"],"default":true,"description":"Enable the XFWM (default) window manager.","loc":["services","xserver","desktopManager","xfce","enableXfwm"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.xfce.extraSessionCommands":{"declarations":["nixos/modules/services/x11/desktop-managers/xfce.nix"],"default":"","description":"Shell commands executed just before XFCE is started.\n","loc":["services","xserver","desktopManager","xfce","extraSessionCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.desktopManager.xfce.noDesktop":{"declarations":["nixos/modules/services/x11/desktop-managers/xfce.nix"],"default":false,"description":"Don't install XFCE desktop components (xfdesktop, panel and notification daemon).","loc":["services","xserver","desktopManager","xfce","noDesktop"],"readOnly":false,"type":"boolean"},"services.xserver.desktopManager.xfce.thunarPlugins":{"declarations":["nixos/modules/services/x11/desktop-managers/xfce.nix"],"default":[],"description":"A list of plugin that should be installed with Thunar.\n","example":{"_type":"literalExample","text":"[ pkgs.xfce.thunar-archive-plugin ]"},"loc":["services","xserver","desktopManager","xfce","thunarPlugins"],"readOnly":false,"type":"list of packages"},"services.xserver.desktopManager.xterm.enable":{"declarations":["nixos/modules/services/x11/desktop-managers/xterm.nix"],"default":true,"description":"Enable a xterm terminal as a desktop manager.","loc":["services","xserver","desktopManager","xterm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.deviceSection":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Contents of the first Device section of the X server configuration file.","example":"VideoRAM 131072","loc":["services","xserver","deviceSection"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.display":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":0,"description":"Display number for the X server.","loc":["services","xserver","display"],"readOnly":false,"type":"null or signed integer"},"services.xserver.displayManager.auto.enable":{"declarations":["nixos/modules/services/x11/display-managers/auto.nix"],"default":false,"description":"Whether to enable the fake \"auto\" display manager, which\nautomatically logs in the user specified in the\n<option>user</option> option.  This is mostly useful for\nautomated tests.\n","loc":["services","xserver","displayManager","auto","enable"],"readOnly":false,"type":"unspecified"},"services.xserver.displayManager.auto.user":{"declarations":["nixos/modules/services/x11/display-managers/auto.nix"],"default":"root","description":"The user account to login automatically.","loc":["services","xserver","displayManager","auto","user"],"readOnly":false,"type":"unspecified"},"services.xserver.displayManager.extraSessionFilePackages":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":[],"description":"A list of packages containing xsession files to be passed to the display manager.\n","loc":["services","xserver","displayManager","extraSessionFilePackages"],"readOnly":false,"type":"list of packages"},"services.xserver.displayManager.gdm.autoLogin":{"declarations":["nixos/modules/services/x11/display-managers/gdm.nix"],"default":{},"description":"Auto login configuration attrset.\n","loc":["services","xserver","displayManager","gdm","autoLogin"],"readOnly":false,"type":"submodule"},"services.xserver.displayManager.gdm.autoLogin.delay":{"declarations":["nixos/modules/services/x11/display-managers/gdm.nix"],"default":0,"description":"Seconds of inactivity after which the autologin will be performed.\n","loc":["services","xserver","displayManager","gdm","autoLogin","delay"],"readOnly":false,"type":"signed integer"},"services.xserver.displayManager.gdm.autoLogin.enable":{"declarations":["nixos/modules/services/x11/display-managers/gdm.nix"],"default":false,"description":"Automatically log in as the sepecified <option>autoLogin.user</option>.\n","loc":["services","xserver","displayManager","gdm","autoLogin","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.gdm.autoLogin.user":{"declarations":["nixos/modules/services/x11/display-managers/gdm.nix"],"default":null,"description":"User to be used for the autologin.\n","loc":["services","xserver","displayManager","gdm","autoLogin","user"],"readOnly":false,"type":"null or string"},"services.xserver.displayManager.gdm.debug":{"declarations":["nixos/modules/services/x11/display-managers/gdm.nix"],"default":false,"description":"Whether to enable debugging messages in GDM\n.","example":true,"loc":["services","xserver","displayManager","gdm","debug"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.gdm.enable":{"declarations":["nixos/modules/services/x11/display-managers/gdm.nix"],"default":false,"description":"Whether to enable GDM as the display manager.\n<emphasis>GDM in NixOS is not well-tested with desktops other\nthan GNOME, so use with caution, as it could render the\nsystem unusable.</emphasis>\n.","example":true,"loc":["services","xserver","displayManager","gdm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.gdm.wayland":{"declarations":["nixos/modules/services/x11/display-managers/gdm.nix"],"default":true,"description":"Allow GDM run on Wayland instead of Xserver\n","loc":["services","xserver","displayManager","gdm","wayland"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.hiddenUsers":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":["nobody"],"description":"A list of users which will not be shown in the display manager.\n","loc":["services","xserver","displayManager","hiddenUsers"],"readOnly":false,"type":"list of strings"},"services.xserver.displayManager.job.environment":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":{},"description":"Additional environment variables needed by the display manager.","example":{"SLIM_CFGFILE":"/etc/slim.conf"},"loc":["services","xserver","displayManager","job","environment"],"readOnly":false,"type":"attribute set of unspecifieds"},"services.xserver.displayManager.job.execCmd":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"description":"Command to start the display manager.","example":{"_type":"literalExample","text":"\"${pkgs.slim}/bin/slim\"\n"},"loc":["services","xserver","displayManager","job","execCmd"],"readOnly":false,"type":"string"},"services.xserver.displayManager.job.logToFile":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":false,"description":"Whether the display manager redirects the output of the\nsession script to <filename>~/.xsession-errors</filename>.\n","loc":["services","xserver","displayManager","job","logToFile"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.job.logToJournal":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":true,"description":"Whether the display manager redirects the output of the\nsession script to the systemd journal.\n","loc":["services","xserver","displayManager","job","logToJournal"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.job.preStart":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":"","description":"Script executed before the display manager is started.","example":"rm -f /var/log/my-display-manager.log","loc":["services","xserver","displayManager","job","preStart"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.lightdm.autoLogin":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":{},"description":"Configuration for automatic login.\n","loc":["services","xserver","displayManager","lightdm","autoLogin"],"readOnly":false,"type":"submodule"},"services.xserver.displayManager.lightdm.autoLogin.enable":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":false,"description":"Automatically log in as the specified <option>autoLogin.user</option>.\n","loc":["services","xserver","displayManager","lightdm","autoLogin","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.lightdm.autoLogin.timeout":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":0,"description":"Show the greeter for this many seconds before automatic login occurs.\n","loc":["services","xserver","displayManager","lightdm","autoLogin","timeout"],"readOnly":false,"type":"signed integer"},"services.xserver.displayManager.lightdm.autoLogin.user":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":null,"description":"User to be used for the automatic login.\n","loc":["services","xserver","displayManager","lightdm","autoLogin","user"],"readOnly":false,"type":"null or string"},"services.xserver.displayManager.lightdm.background":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":"${pkgs.nixos-artwork.wallpapers.simple-dark-gray-bottom}/share/artwork/gnome/nix-wallpaper-simple-dark-gray_bottom.png","description":"The background image or color to use.\n","loc":["services","xserver","displayManager","lightdm","background"],"readOnly":false,"type":"string"},"services.xserver.displayManager.lightdm.enable":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":false,"description":"Whether to enable lightdm as the display manager.\n","loc":["services","xserver","displayManager","lightdm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.lightdm.extraConfig":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":"","description":"Extra lines to append to LightDM section.","example":"user-authority-in-system-dir = true\n","loc":["services","xserver","displayManager","lightdm","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.lightdm.extraSeatDefaults":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":"","description":"Extra lines to append to SeatDefaults section.","example":"greeter-show-manual-login=true\n","loc":["services","xserver","displayManager","lightdm","extraSeatDefaults"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.lightdm.greeter.enable":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"default":true,"description":"If set to false, run lightdm in greeterless mode. This only works if autologin\nis enabled and autoLogin.timeout is zero.\n","loc":["services","xserver","displayManager","lightdm","greeter","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.lightdm.greeter.name":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"description":"The name of a .desktop file in the directory specified\nin the 'package' option.\n","loc":["services","xserver","displayManager","lightdm","greeter","name"],"readOnly":false,"type":"Concatenated string"},"services.xserver.displayManager.lightdm.greeter.package":{"declarations":["nixos/modules/services/x11/display-managers/lightdm.nix"],"description":"The LightDM greeter to login via. The package should be a directory\ncontaining a .desktop file matching the name in the 'name' option.\n","loc":["services","xserver","displayManager","lightdm","greeter","package"],"readOnly":false,"type":"package"},"services.xserver.displayManager.lightdm.greeters.enso.blur":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":false,"description":"Whether or not to enable blur\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","blur"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.lightdm.greeters.enso.brightness":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":7,"description":"Brightness\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","brightness"],"readOnly":false,"type":"signed integer"},"services.xserver.displayManager.lightdm.greeters.enso.cursorTheme.name":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":"capitane-cursors","description":"Name of the cursor theme to use for the lightdm-enso-os-greeter\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","cursorTheme","name"],"readOnly":false,"type":"string"},"services.xserver.displayManager.lightdm.greeters.enso.cursorTheme.package":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":"pkgs.capitaine-cursors","description":"The package path that contains the cursor theme given in the name option.\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","cursorTheme","package"],"readOnly":false,"type":"package"},"services.xserver.displayManager.lightdm.greeters.enso.enable":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":false,"description":"Whether to enable enso-os-greeter as the lightdm greeter\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.lightdm.greeters.enso.extraConfig":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":"","description":"Extra configuration that should be put in the greeter.conf\nconfiguration file\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.lightdm.greeters.enso.iconTheme.name":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":"ePapirus","description":"Name of the icon theme to use for the lightdm-enso-os-greeter\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","iconTheme","name"],"readOnly":false,"type":"string"},"services.xserver.displayManager.lightdm.greeters.enso.iconTheme.package":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":"pkgs.papirus-icon-theme","description":"The package path that contains the icon theme given in the name option.\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","iconTheme","package"],"readOnly":false,"type":"package"},"services.xserver.displayManager.lightdm.greeters.enso.theme.name":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":"Adwaita","description":"Name of the theme to use for the lightdm-enso-os-greeter\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","theme","name"],"readOnly":false,"type":"string"},"services.xserver.displayManager.lightdm.greeters.enso.theme.package":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/enso-os.nix"],"default":"pkgs.gnome3.gnome-themes-extra","description":"The package path that contains the theme given in the name option.\n","loc":["services","xserver","displayManager","lightdm","greeters","enso","theme","package"],"readOnly":false,"type":"package"},"services.xserver.displayManager.lightdm.greeters.gtk.clock-format":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/gtk.nix"],"default":null,"description":"Clock format string (as expected by strftime, e.g. \"%H:%M\")\nto use with the lightdm gtk greeter panel.\n\nIf set to null the default clock format is used.\n","example":"%F","loc":["services","xserver","displayManager","lightdm","greeters","gtk","clock-format"],"readOnly":false,"type":"null or string"},"services.xserver.displayManager.lightdm.greeters.gtk.enable":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/gtk.nix"],"default":true,"description":"Whether to enable lightdm-gtk-greeter as the lightdm greeter.\n","loc":["services","xserver","displayManager","lightdm","greeters","gtk","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.lightdm.greeters.gtk.extraConfig":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/gtk.nix"],"default":"","description":"Extra configuration that should be put in the lightdm-gtk-greeter.conf\nconfiguration file.\n","loc":["services","xserver","displayManager","lightdm","greeters","gtk","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.lightdm.greeters.gtk.iconTheme.name":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/gtk.nix"],"default":"Adwaita","description":"Name of the icon theme to use for the lightdm-gtk-greeter.\n","loc":["services","xserver","displayManager","lightdm","greeters","gtk","iconTheme","name"],"readOnly":false,"type":"string"},"services.xserver.displayManager.lightdm.greeters.gtk.iconTheme.package":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/gtk.nix"],"default":"pkgs.gnome3.defaultIconTheme","description":"The package path that contains the icon theme given in the name option.\n","loc":["services","xserver","displayManager","lightdm","greeters","gtk","iconTheme","package"],"readOnly":false,"type":"package"},"services.xserver.displayManager.lightdm.greeters.gtk.indicators":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/gtk.nix"],"default":null,"description":"List of allowed indicator modules to use for the lightdm gtk\ngreeter panel.\n\nBuilt-in indicators include \"~a11y\", \"~language\", \"~session\",\n\"~power\", \"~clock\", \"~host\", \"~spacer\". Unity indicators can be\nrepresented by short name (e.g. \"sound\", \"power\"), service file name,\nor absolute path.\n\nIf set to null the default indicators are used.\n","example":["~host","~spacer","~clock","~spacer","~session","~language","~a11y","~power"],"loc":["services","xserver","displayManager","lightdm","greeters","gtk","indicators"],"readOnly":false,"type":"null or list of strings"},"services.xserver.displayManager.lightdm.greeters.gtk.theme.name":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/gtk.nix"],"default":"Adwaita","description":"Name of the theme to use for the lightdm-gtk-greeter.\n","loc":["services","xserver","displayManager","lightdm","greeters","gtk","theme","name"],"readOnly":false,"type":"string"},"services.xserver.displayManager.lightdm.greeters.gtk.theme.package":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/gtk.nix"],"default":"pkgs.gnome3.gnome-themes-extra","description":"The package path that contains the theme given in the name option.\n","loc":["services","xserver","displayManager","lightdm","greeters","gtk","theme","package"],"readOnly":false,"type":"package"},"services.xserver.displayManager.lightdm.greeters.mini.enable":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/mini.nix"],"default":false,"description":"Whether to enable lightdm-mini-greeter as the lightdm greeter.\n\nNote that this greeter starts only the default X session.\nYou can configure the default X session by\n<option>services.xserver.desktopManager.default</option> and\n<option>services.xserver.windowManager.default</option>.\n","loc":["services","xserver","displayManager","lightdm","greeters","mini","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.lightdm.greeters.mini.extraConfig":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/mini.nix"],"default":"","description":"Extra configuration that should be put in the lightdm-mini-greeter.conf\nconfiguration file.\n","loc":["services","xserver","displayManager","lightdm","greeters","mini","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.lightdm.greeters.mini.user":{"declarations":["nixos/modules/services/x11/display-managers/lightdm-greeters/mini.nix"],"default":"root","description":"The user to login as.\n","loc":["services","xserver","displayManager","lightdm","greeters","mini","user"],"readOnly":false,"type":"string"},"services.xserver.displayManager.sddm.autoLogin":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":{},"description":"Configuration for automatic login.\n","loc":["services","xserver","displayManager","sddm","autoLogin"],"readOnly":false,"type":"submodule"},"services.xserver.displayManager.sddm.autoLogin.enable":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":false,"description":"Automatically log in as <option>autoLogin.user</option>.\n","loc":["services","xserver","displayManager","sddm","autoLogin","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.sddm.autoLogin.relogin":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":false,"description":"If true automatic login will kick in again on session exit (logout), otherwise it\nwill only log in automatically when the display-manager is started.\n","loc":["services","xserver","displayManager","sddm","autoLogin","relogin"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.sddm.autoLogin.user":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":null,"description":"User to be used for the automatic login.\n","loc":["services","xserver","displayManager","sddm","autoLogin","user"],"readOnly":false,"type":"null or string"},"services.xserver.displayManager.sddm.autoNumlock":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":false,"description":"Enable numlock at login.\n","loc":["services","xserver","displayManager","sddm","autoNumlock"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.sddm.enable":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":false,"description":"Whether to enable sddm as the display manager.\n","loc":["services","xserver","displayManager","sddm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.sddm.enableHidpi":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":true,"description":"Whether to enable automatic HiDPI mode.\n</para>\n<para>\nVersions up to 0.17 are broken so this only works from 0.18 onwards.\n","loc":["services","xserver","displayManager","sddm","enableHidpi"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.sddm.extraConfig":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":"","description":"Extra lines appended to the configuration of SDDM.\n","example":"[Autologin]\nUser=john\nSession=plasma.desktop\n","loc":["services","xserver","displayManager","sddm","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.sddm.setupScript":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":"","description":"A script to execute when starting the display server. DEPRECATED, please\nuse <option>services.xserver.displayManager.setupCommands</option>.\n","example":"# workaround for using NVIDIA Optimus without Bumblebee\nxrandr --setprovideroutputsource modesetting NVIDIA-0\nxrandr --auto\n","loc":["services","xserver","displayManager","sddm","setupScript"],"readOnly":false,"type":"string"},"services.xserver.displayManager.sddm.stopScript":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":"","description":"A script to execute when stopping the display server.\n","loc":["services","xserver","displayManager","sddm","stopScript"],"readOnly":false,"type":"string"},"services.xserver.displayManager.sddm.theme":{"declarations":["nixos/modules/services/x11/display-managers/sddm.nix"],"default":"","description":"Greeter theme to use.\n","loc":["services","xserver","displayManager","sddm","theme"],"readOnly":false,"type":"string"},"services.xserver.displayManager.session":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":[],"description":"List of sessions supported with the command used to start each\nsession.  Each session script can set the\n<varname>waitPID</varname> shell variable to make this script\nwait until the end of the user session.  Each script is used\nto define either a window manager or a desktop manager.  These\ncan be differentiated by setting the attribute\n<varname>manage</varname> either to <literal>\"window\"</literal>\nor <literal>\"desktop\"</literal>.\n\nThe list of desktop manager and window manager should appear\ninside the display manager with the desktop manager name\nfollowed by the window manager name.\n","example":{"_type":"literalExample","text":"[ { manage = \"desktop\";\n    name = \"xterm\";\n    start = ''\n      ${pkgs.xterm}/bin/xterm -ls &\n      waitPID=$!\n    '';\n  }\n]\n"},"loc":["services","xserver","displayManager","session"],"readOnly":false,"type":"unspecified"},"services.xserver.displayManager.sessionCommands":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":"","description":"Shell commands executed just before the window or desktop manager is started.","example":"xmessage \"Hello World!\" &\n","loc":["services","xserver","displayManager","sessionCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.setupCommands":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":"","description":"Shell commands executed just after the X server has started.\n\nThis option is only effective for display managers for which this feature\nis supported; currently these are LightDM, GDM and SDDM.\n","loc":["services","xserver","displayManager","setupCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.slim.autoLogin":{"declarations":["nixos/modules/services/x11/display-managers/slim.nix"],"default":false,"description":"Automatically log in as the default user.\n","loc":["services","xserver","displayManager","slim","autoLogin"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.slim.consoleCmd":{"declarations":["nixos/modules/services/x11/display-managers/slim.nix"],"default":"${pkgs.xterm}/bin/xterm -C -fg white -bg black +sb -T \"Console login\" -e ${pkgs.shadow}/bin/login\n","description":"The command to run when \"console\" is given as the username.\n","loc":["services","xserver","displayManager","slim","consoleCmd"],"readOnly":false,"type":"null or string"},"services.xserver.displayManager.slim.defaultUser":{"declarations":["nixos/modules/services/x11/display-managers/slim.nix"],"default":null,"description":"The default user to load. If you put a username here you\nget it automatically loaded into the username field, and\nthe focus is placed on the password.\n","example":"login","loc":["services","xserver","displayManager","slim","defaultUser"],"readOnly":false,"type":"null or string"},"services.xserver.displayManager.slim.enable":{"declarations":["nixos/modules/services/x11/display-managers/slim.nix"],"default":false,"description":"Whether to enable SLiM as the display manager.\n","loc":["services","xserver","displayManager","slim","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.slim.extraConfig":{"declarations":["nixos/modules/services/x11/display-managers/slim.nix"],"default":"","description":"Extra configuration options for SLiM login manager. Do not\nadd options that can be configured directly.\n","loc":["services","xserver","displayManager","slim","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.displayManager.slim.theme":{"declarations":["nixos/modules/services/x11/display-managers/slim.nix"],"default":"pkgs.fetchurl {\n          url = \"https://github.com/jagajaga/nixos-slim-theme/archive/2.0.tar.gz\";\n          sha256 = \"0lldizhigx7bjhxkipii87y432hlf5wdvamnfxrryf9z7zkfypc8\";\n        }","description":"The theme for the SLiM login manager.  If not specified, SLiM's\ndefault theme is used.  See <link\nxlink:href='http://slim.berlios.de/themes01.php'/> for a\ncollection of themes. TODO: berlios shut down.\n","example":{"_type":"literalExample","text":"pkgs.fetchurl {\n  url = \"mirror://sourceforge/slim.berlios/slim-wave.tar.gz\";\n  sha256 = \"0ndr419i5myzcylvxb89m9grl2xyq6fbnyc3lkd711mzlmnnfxdy\";\n}\n"},"loc":["services","xserver","displayManager","slim","theme"],"readOnly":false,"type":"null or path"},"services.xserver.displayManager.startx.enable":{"declarations":["nixos/modules/services/x11/display-managers/startx.nix"],"default":false,"description":"Whether to enable the dummy \"startx\" pseudo-display manager,\nwhich allows users to start X manually via the \"startx\" command\nfrom a vt shell. The X server runs under the user's id, not as root.\nThe user must provide a ~/.xinintrc file containing session startup\ncommands, see startx(1). This is not autmatically generated\nfrom the desktopManager and windowManager settings.\n","loc":["services","xserver","displayManager","startx","enable"],"readOnly":false,"type":"unspecified"},"services.xserver.displayManager.xpra.auth":{"declarations":["nixos/modules/services/x11/display-managers/xpra.nix"],"default":"pam","description":"Authentication to use when connecting to xpra","example":"password:value=mysecret","loc":["services","xserver","displayManager","xpra","auth"],"readOnly":false,"type":"string"},"services.xserver.displayManager.xpra.bindTcp":{"declarations":["nixos/modules/services/x11/display-managers/xpra.nix"],"default":"127.0.0.1:10000","description":"Bind xpra to TCP","example":"0.0.0.0:10000","loc":["services","xserver","displayManager","xpra","bindTcp"],"readOnly":false,"type":"null or string"},"services.xserver.displayManager.xpra.enable":{"declarations":["nixos/modules/services/x11/display-managers/xpra.nix"],"default":false,"description":"Whether to enable xpra as display manager.","loc":["services","xserver","displayManager","xpra","enable"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.xpra.extraOptions":{"declarations":["nixos/modules/services/x11/display-managers/xpra.nix"],"default":[],"description":"Extra xpra options","loc":["services","xserver","displayManager","xpra","extraOptions"],"readOnly":false,"type":"list of strings"},"services.xserver.displayManager.xpra.pulseaudio":{"declarations":["nixos/modules/services/x11/display-managers/xpra.nix"],"default":false,"description":"Whether to enable pulseaudio audio streaming..","example":true,"loc":["services","xserver","displayManager","xpra","pulseaudio"],"readOnly":false,"type":"boolean"},"services.xserver.displayManager.xserverArgs":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"default":[],"description":"List of arguments for the X server.","example":["-ac","-logverbose","-verbose","-nolisten tcp"],"loc":["services","xserver","displayManager","xserverArgs"],"readOnly":false,"type":"list of strings"},"services.xserver.displayManager.xserverBin":{"declarations":["nixos/modules/services/x11/display-managers/default.nix"],"description":"Path to the X server used by display managers.","loc":["services","xserver","displayManager","xserverBin"],"readOnly":false,"type":"path"},"services.xserver.dpi":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":null,"description":"DPI resolution to use for X server.","loc":["services","xserver","dpi"],"readOnly":false,"type":"null or signed integer"},"services.xserver.enable":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":false,"description":"Whether to enable the X server.\n","loc":["services","xserver","enable"],"readOnly":false,"type":"boolean"},"services.xserver.enableCtrlAltBackspace":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":false,"description":"Whether to enable the DontZap option, which binds Ctrl+Alt+Backspace\nto forcefully kill X. This can lead to data loss and is disabled\nby default.\n","loc":["services","xserver","enableCtrlAltBackspace"],"readOnly":false,"type":"boolean"},"services.xserver.enableTCP":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":false,"description":"Whether to allow the X server to accept TCP connections.\n","loc":["services","xserver","enableTCP"],"readOnly":false,"type":"boolean"},"services.xserver.exportConfiguration":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":false,"description":"Whether to symlink the X server configuration under\n<filename>/etc/X11/xorg.conf</filename>.\n","loc":["services","xserver","exportConfiguration"],"readOnly":false,"type":"boolean"},"services.xserver.extraConfig":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Additional contents (sections) included in the X server configuration file","loc":["services","xserver","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.extraDisplaySettings":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Lines to be added to every Display subsection of the Screen section.","example":"Virtual 2048 2048","loc":["services","xserver","extraDisplaySettings"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.gdk-pixbuf.modulePackages":{"declarations":["nixos/modules/services/x11/gdk-pixbuf.nix"],"default":[],"description":"Packages providing GDK-Pixbuf modules, for cache generation.","loc":["services","xserver","gdk-pixbuf","modulePackages"],"readOnly":false,"type":"list of packages"},"services.xserver.inputClassSections":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":[],"description":"Content of additional InputClass sections of the X server configuration file.","example":{"_type":"literalExample","text":"[ ''\n    Identifier      \"Trackpoint Wheel Emulation\"\n    MatchProduct    \"ThinkPad USB Keyboard with TrackPoint\"\n    Option          \"EmulateWheel\"          \"true\"\n    Option          \"EmulateWheelButton\"    \"2\"\n    Option          \"Emulate3Buttons\"       \"false\"\n  ''\n]\n"},"loc":["services","xserver","inputClassSections"],"readOnly":false,"type":"list of strings concatenated with \"\\n\"s"},"services.xserver.layout":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"us","description":"Keyboard layout, or multiple keyboard layouts separated by commas.\n","loc":["services","xserver","layout"],"readOnly":false,"type":"string"},"services.xserver.libinput.accelProfile":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":"adaptive","description":"Sets  the pointer acceleration profile to the given profile.\nPermitted values are adaptive, flat.\nNot all devices support this option or all profiles.\nIf a profile is unsupported, the default profile for this is used.\n<literal>flat</literal>: Pointer motion is accelerated by a constant\n(device-specific) factor, depending on the current speed.\n<literal>adaptive</literal>: Pointer acceleration depends on the input speed.\nThis is the default profile for most devices.\n","example":"flat","loc":["services","xserver","libinput","accelProfile"],"readOnly":false,"type":"one of \"flat\", \"adaptive\""},"services.xserver.libinput.accelSpeed":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":null,"description":"Cursor acceleration (how fast speed increases from minSpeed to maxSpeed).","loc":["services","xserver","libinput","accelSpeed"],"readOnly":false,"type":"null or Concatenated string"},"services.xserver.libinput.additionalOptions":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":"","description":"Additional options for libinput touchpad driver.","example":"Option \"DragLockButtons\" \"L1 B1 L2 B2\"\n","loc":["services","xserver","libinput","additionalOptions"],"readOnly":false,"type":"string"},"services.xserver.libinput.buttonMapping":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":null,"description":"Sets the logical button mapping for this device, see XSetPointerMapping(3). The string  must\nbe  a  space-separated  list  of  button mappings in the order of the logical buttons on the\ndevice, starting with button 1.  The default mapping is \"1 2 3 ... 32\". A mapping of 0 deac‐\ntivates the button. Multiple buttons can have the same mapping.  Invalid mapping strings are\ndiscarded and the default mapping is used for all buttons.  Buttons  not  specified  in  the\nuser's mapping use the default mapping. See section BUTTON MAPPING for more details.\n","loc":["services","xserver","libinput","buttonMapping"],"readOnly":false,"type":"null or Concatenated string"},"services.xserver.libinput.calibrationMatrix":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":null,"description":"A  string  of  9 space-separated floating point numbers.  Sets the calibration matrix to the\n3x3 matrix where the first row is (abc), the second row is (def) and the third row is (ghi).\n","loc":["services","xserver","libinput","calibrationMatrix"],"readOnly":false,"type":"null or Concatenated string"},"services.xserver.libinput.clickMethod":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":null,"description":"Enables a click method. Permitted values are <literal>none</literal>,\n<literal>buttonareas</literal>, <literal>clickfinger</literal>.\nNot all devices support all methods, if an option is unsupported,\nthe default click method for this device is used.\n","loc":["services","xserver","libinput","clickMethod"],"readOnly":false,"type":"null or one of \"none\", \"buttonareas\", \"clickfinger\""},"services.xserver.libinput.dev":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":null,"description":"Path for touchpad device.  Set to null to apply to any\nauto-detected touchpad.\n","example":"/dev/input/event0","loc":["services","xserver","libinput","dev"],"readOnly":false,"type":"null or string"},"services.xserver.libinput.disableWhileTyping":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":false,"description":"Disable input method while typing.\n","loc":["services","xserver","libinput","disableWhileTyping"],"readOnly":false,"type":"boolean"},"services.xserver.libinput.enable":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":false,"description":"Whether to enable libinput.","example":true,"loc":["services","xserver","libinput","enable"],"readOnly":false,"type":"boolean"},"services.xserver.libinput.horizontalScrolling":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":true,"description":"Disables horizontal scrolling. When disabled, this driver will discard any horizontal scroll\nevents from libinput. Note that this does not disable horizontal scrolling, it merely\ndiscards the horizontal axis from any scroll events.\n","loc":["services","xserver","libinput","horizontalScrolling"],"readOnly":false,"type":"boolean"},"services.xserver.libinput.leftHanded":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":false,"description":"Enables left-handed button orientation, i.e. swapping left and right buttons.","loc":["services","xserver","libinput","leftHanded"],"readOnly":false,"type":"boolean"},"services.xserver.libinput.middleEmulation":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":true,"description":"Enables middle button emulation. When enabled, pressing the left and right buttons\nsimultaneously produces a middle mouse button click.\n","loc":["services","xserver","libinput","middleEmulation"],"readOnly":false,"type":"boolean"},"services.xserver.libinput.naturalScrolling":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":false,"description":"Enables or disables natural scrolling behavior.","loc":["services","xserver","libinput","naturalScrolling"],"readOnly":false,"type":"boolean"},"services.xserver.libinput.scrollButton":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":null,"description":"Designates a button as scroll button. If the ScrollMethod is button and the button is logically\nheld down, x/y axis movement is converted into scroll events.\n","example":1,"loc":["services","xserver","libinput","scrollButton"],"readOnly":false,"type":"null or signed integer"},"services.xserver.libinput.scrollMethod":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":"twofinger","description":"Specify the scrolling method: <literal>twofinger</literal>, <literal>edge</literal>,\nor <literal>none</literal>\n","example":"edge","loc":["services","xserver","libinput","scrollMethod"],"readOnly":false,"type":"one of \"twofinger\", \"edge\", \"button\", \"none\""},"services.xserver.libinput.sendEventsMode":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":"enabled","description":"Sets the send events mode to <literal>disabled</literal>, <literal>enabled</literal>,\nor <literal>disabled-on-external-mouse</literal>\n","example":"disabled","loc":["services","xserver","libinput","sendEventsMode"],"readOnly":false,"type":"one of \"disabled\", \"enabled\", \"disabled-on-external-mouse\""},"services.xserver.libinput.tapping":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":true,"description":"Enables or disables tap-to-click behavior.\n","loc":["services","xserver","libinput","tapping"],"readOnly":false,"type":"boolean"},"services.xserver.libinput.tappingDragLock":{"declarations":["nixos/modules/services/x11/hardware/libinput.nix"],"default":true,"description":"Enables or disables drag lock during tapping behavior. When enabled, a finger up during tap-\nand-drag will not immediately release the button. If the finger is set down again within the\ntimeout, the draging process continues.\n","loc":["services","xserver","libinput","tappingDragLock"],"readOnly":false,"type":"boolean"},"services.xserver.moduleSection":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Contents of the Module section of the X server configuration file.","example":"SubSection \"extmod\"\nEndSubsection\n","loc":["services","xserver","moduleSection"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.modules":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":[],"description":"Packages to be added to the module search path of the X server.","example":{"_type":"literalExample","text":"[ pkgs.xf86_input_wacom ]"},"loc":["services","xserver","modules"],"readOnly":false,"type":"list of paths"},"services.xserver.monitorSection":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Contents of the first Monitor section of the X server configuration file.","example":"HorizSync 28-49","loc":["services","xserver","monitorSection"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.multitouch.additionalOptions":{"declarations":["nixos/modules/services/x11/hardware/multitouch.nix"],"default":"","description":"Additional options for mtrack touchpad driver.\n","example":"Option \"ScaleDistance\" \"50\"\nOption \"RotateDistance\" \"60\"\n","loc":["services","xserver","multitouch","additionalOptions"],"readOnly":false,"type":"string"},"services.xserver.multitouch.buttonsMap":{"declarations":["nixos/modules/services/x11/hardware/multitouch.nix"],"default":[3,2,0],"description":"Remap touchpad buttons.","example":[1,3,2],"loc":["services","xserver","multitouch","buttonsMap"],"readOnly":false,"type":"list of signed integers"},"services.xserver.multitouch.enable":{"declarations":["nixos/modules/services/x11/hardware/multitouch.nix"],"default":false,"description":"Whether to enable multitouch touchpad support.","loc":["services","xserver","multitouch","enable"],"readOnly":false,"type":"unspecified"},"services.xserver.multitouch.ignorePalm":{"declarations":["nixos/modules/services/x11/hardware/multitouch.nix"],"default":false,"description":"Whether to ignore touches detected as being the palm (i.e when typing)","loc":["services","xserver","multitouch","ignorePalm"],"readOnly":false,"type":"boolean"},"services.xserver.multitouch.invertScroll":{"declarations":["nixos/modules/services/x11/hardware/multitouch.nix"],"default":false,"description":"Whether to invert scrolling direction à la OSX Lion","loc":["services","xserver","multitouch","invertScroll"],"readOnly":false,"type":"boolean"},"services.xserver.multitouch.tapButtons":{"declarations":["nixos/modules/services/x11/hardware/multitouch.nix"],"default":true,"description":"Whether to enable tap buttons.","loc":["services","xserver","multitouch","tapButtons"],"readOnly":false,"type":"boolean"},"services.xserver.resolutions":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":[],"description":"The screen resolutions for the X server.  The first element\nis the default resolution.  If this list is empty, the X\nserver will automatically configure the resolution.\n","example":[{"x":1600,"y":1200},{"x":1024,"y":786}],"loc":["services","xserver","resolutions"],"readOnly":false,"type":"list of attribute sets"},"services.xserver.screenSection":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Contents of the first Screen section of the X server configuration file.","example":"Option \"RandRRotation\" \"on\"\n","loc":["services","xserver","screenSection"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.serverFlagsSection":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Contents of the ServerFlags section of the X server configuration file.","example":"Option \"BlankTime\" \"0\"\nOption \"StandbyTime\" \"0\"\nOption \"SuspendTime\" \"0\"\nOption \"OffTime\" \"0\"\n","loc":["services","xserver","serverFlagsSection"],"readOnly":false,"type":"unspecified"},"services.xserver.serverLayoutSection":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Contents of the ServerLayout section of the X server configuration file.","example":"Option \"AIGLX\" \"true\"\n","loc":["services","xserver","serverLayoutSection"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.startDbusSession":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":true,"description":"Whether to start a new DBus session when you log in with dbus-launch.\n","loc":["services","xserver","startDbusSession"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.accelFactor":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":"0.001","description":"Cursor acceleration (how fast speed increases from minSpeed to maxSpeed).","loc":["services","xserver","synaptics","accelFactor"],"readOnly":false,"type":"null or Concatenated string"},"services.xserver.synaptics.additionalOptions":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":"","description":"Additional options for synaptics touchpad driver.\n","example":"Option \"RTCornerButton\" \"2\"\nOption \"RBCornerButton\" \"3\"\n","loc":["services","xserver","synaptics","additionalOptions"],"readOnly":false,"type":"string"},"services.xserver.synaptics.buttonsMap":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":[1,2,3],"description":"Remap touchpad buttons.","example":[1,3,2],"loc":["services","xserver","synaptics","buttonsMap"],"readOnly":false,"type":"list of signed integers"},"services.xserver.synaptics.dev":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":null,"description":"Path for touchpad device.  Set to null to apply to any\nauto-detected touchpad.\n","example":"/dev/input/event0","loc":["services","xserver","synaptics","dev"],"readOnly":false,"type":"null or string"},"services.xserver.synaptics.enable":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":false,"description":"Whether to enable touchpad support. Deprecated: Consider services.xserver.libinput.enable.","loc":["services","xserver","synaptics","enable"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.fingersMap":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":[1,2,3],"description":"Remap several-fingers taps.","example":[1,3,2],"loc":["services","xserver","synaptics","fingersMap"],"readOnly":false,"type":"list of signed integers"},"services.xserver.synaptics.horizEdgeScroll":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":true,"description":"Whether to enable horizontal edge drag-scrolling.","loc":["services","xserver","synaptics","horizEdgeScroll"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.horizTwoFingerScroll":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":false,"description":"Whether to enable horizontal two-finger drag-scrolling.","loc":["services","xserver","synaptics","horizTwoFingerScroll"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.horizontalScroll":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":true,"description":"Whether to enable horizontal scrolling (on touchpad)","loc":["services","xserver","synaptics","horizontalScroll"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.maxSpeed":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":"1.0","description":"Cursor speed factor for highest-speed finger motion.","loc":["services","xserver","synaptics","maxSpeed"],"readOnly":false,"type":"null or Concatenated string"},"services.xserver.synaptics.minSpeed":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":"0.6","description":"Cursor speed factor for precision finger motion.","loc":["services","xserver","synaptics","minSpeed"],"readOnly":false,"type":"null or Concatenated string"},"services.xserver.synaptics.palmDetect":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":false,"description":"Whether to enable palm detection (hardware support required)","loc":["services","xserver","synaptics","palmDetect"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.palmMinWidth":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":null,"description":"Minimum finger width at which touch is considered a palm","example":5,"loc":["services","xserver","synaptics","palmMinWidth"],"readOnly":false,"type":"null or signed integer"},"services.xserver.synaptics.palmMinZ":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":null,"description":"Minimum finger pressure at which touch is considered a palm","example":20,"loc":["services","xserver","synaptics","palmMinZ"],"readOnly":false,"type":"null or signed integer"},"services.xserver.synaptics.scrollDelta":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":null,"description":"Move distance of the finger for a scroll event.","example":75,"loc":["services","xserver","synaptics","scrollDelta"],"readOnly":false,"type":"null or signed integer"},"services.xserver.synaptics.tapButtons":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":true,"description":"Whether to enable tap buttons.","loc":["services","xserver","synaptics","tapButtons"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.twoFingerScroll":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":false,"description":"Whether to enable two-finger drag-scrolling. Overridden by horizTwoFingerScroll and vertTwoFingerScroll.","loc":["services","xserver","synaptics","twoFingerScroll"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.vertEdgeScroll":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":true,"description":"Whether to enable vertical edge drag-scrolling.","loc":["services","xserver","synaptics","vertEdgeScroll"],"readOnly":false,"type":"boolean"},"services.xserver.synaptics.vertTwoFingerScroll":{"declarations":["nixos/modules/services/x11/hardware/synaptics.nix"],"default":false,"description":"Whether to enable vertical two-finger drag-scrolling.","loc":["services","xserver","synaptics","vertTwoFingerScroll"],"readOnly":false,"type":"boolean"},"services.xserver.terminateOnReset":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":true,"description":"Whether to terminate X upon server reset.\n","loc":["services","xserver","terminateOnReset"],"readOnly":false,"type":"boolean"},"services.xserver.tty":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":7,"description":"Virtual console for the X server.","loc":["services","xserver","tty"],"readOnly":false,"type":"null or signed integer"},"services.xserver.updateDbusEnvironment":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":false,"description":"Whether to update the DBus activation environment after launching the\ndesktop manager.\n","loc":["services","xserver","updateDbusEnvironment"],"readOnly":false,"type":"boolean"},"services.xserver.useGlamor":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":false,"description":"Whether to use the Glamor module for 2D acceleration,\nif possible.\n","loc":["services","xserver","useGlamor"],"readOnly":false,"type":"boolean"},"services.xserver.useXFS":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":false,"description":"Determines how to connect to the X Font Server.","example":"unix/:7100","loc":["services","xserver","useXFS"],"readOnly":false,"type":"unspecified"},"services.xserver.verbose":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":3,"description":"Controls verbosity of X logging.\n","example":7,"loc":["services","xserver","verbose"],"readOnly":false,"type":"null or signed integer"},"services.xserver.videoDriver":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":null,"description":"The name of the video driver for your graphics card.  This\noption is obsolete; please set the\n<option>services.xserver.videoDrivers</option> instead.\n","example":"i810","loc":["services","xserver","videoDriver"],"readOnly":false,"type":"null or string"},"services.xserver.videoDrivers":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":["ati","cirrus","intel","vesa","vmware","modesetting"],"description":"The names of the video drivers the configuration\nsupports. They will be tried in order until one that\nsupports your card is found.\n","example":["ati_unfree","amdgpu","amdgpu-pro","nv","nvidia","nvidiaLegacy340","nvidiaLegacy304"],"loc":["services","xserver","videoDrivers"],"readOnly":false,"relatedPackages":"<itemizedlist><listitem><para><literal>amdgpu aka pkgs.xorg.xf86videoamdgpu (xf86-video-amdgpu-1.4.0)</literal>: ???.</para></listitem>\n<listitem><para><literal>ark aka pkgs.xorg.xf86videoark (xf86-video-ark-0.7.5)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>ast aka pkgs.xorg.xf86videoast (xf86-video-ast-1.1.5)</literal>: ???.</para></listitem>\n<listitem><para><literal>ati aka pkgs.xorg.xf86videoati (xf86-video-ati-18.0.1)</literal>: ???.</para></listitem>\n<listitem><para><literal>chips aka pkgs.xorg.xf86videochips (xf86-video-chips-1.2.7)</literal>: ???.</para></listitem>\n<listitem><para><literal>cirrus aka pkgs.xorg.xf86videocirrus (xf86-video-cirrus-1.5.3)</literal>: ???.</para></listitem>\n<listitem><para><literal>dummy aka pkgs.xorg.xf86videodummy (xf86-video-dummy-0.3.8)</literal>: ???.</para></listitem>\n<listitem><para><literal>fbdev aka pkgs.xorg.xf86videofbdev (xf86-video-fbdev-0.4.4)</literal>: ???.</para></listitem>\n<listitem><para><literal>geode aka pkgs.xorg.xf86videogeode (xf86-video-geode-2.11.17)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>glide aka pkgs.xorg.xf86videoglide (xf86-video-glide-1.2.2)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>glint aka pkgs.xorg.xf86videoglint (xf86-video-glint-1.2.9)</literal>: ???.</para></listitem>\n<listitem><para><literal>i128 aka pkgs.xorg.xf86videoi128 (xf86-video-i128-1.3.6)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>i740 aka pkgs.xorg.xf86videoi740 (xf86-video-i740-1.3.6)</literal>: ???.</para></listitem>\n<listitem><para><literal>intel aka pkgs.xorg.xf86videointel (xf86-video-intel-2017-10-19)</literal>: ???.</para></listitem>\n<listitem><para><literal>mach64 aka pkgs.xorg.xf86videomach64 (xf86-video-mach64-6.9.5)</literal>: ???.</para></listitem>\n<listitem><para><literal>mga aka pkgs.xorg.xf86videomga (xf86-video-mga-1.6.5)</literal>: ???.</para></listitem>\n<listitem><para><literal>neomagic aka pkgs.xorg.xf86videoneomagic (xf86-video-neomagic-1.2.9)</literal>: ???.</para></listitem>\n<listitem><para><literal>newport aka pkgs.xorg.xf86videonewport (xf86-video-newport-0.2.4)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>nouveau aka pkgs.xorg.xf86videonouveau (xf86-video-nouveau-1.0.15)</literal>: ???.</para></listitem>\n<listitem><para><literal>nv aka pkgs.xorg.xf86videonv (xf86-video-nv-2.1.21)</literal>: ???.</para></listitem>\n<listitem><para><literal>openchrome aka pkgs.xorg.xf86videoopenchrome (xf86-video-openchrome-0.6.0)</literal>: ???.</para></listitem>\n<listitem><para><literal>qxl aka pkgs.xorg.xf86videoqxl (xf86-video-qxl-0.1.5)</literal>: ???.</para></listitem>\n<listitem><para><literal>r128 aka pkgs.xorg.xf86videor128 (xf86-video-r128-6.10.2)</literal>: ???.</para></listitem>\n<listitem><para><literal>rendition aka pkgs.xorg.xf86videorendition (xf86-video-rendition-4.2.6)</literal>: ???.</para></listitem>\n<listitem><para><literal>s3virge aka pkgs.xorg.xf86videos3virge (xf86-video-s3virge-1.10.7)</literal>: ???.</para></listitem>\n<listitem><para><literal>savage aka pkgs.xorg.xf86videosavage (xf86-video-savage-2.3.9)</literal>: ???.</para></listitem>\n<listitem><para><literal>siliconmotion aka pkgs.xorg.xf86videosiliconmotion (xf86-video-siliconmotion-1.7.9)</literal>: ???.</para></listitem>\n<listitem><para><literal>sis aka pkgs.xorg.xf86videosis (xf86-video-sis-0.10.9)</literal>: ???.</para></listitem>\n<listitem><para><literal>sisusb aka pkgs.xorg.xf86videosisusb (xf86-video-sisusb-0.9.7)</literal>: ???.</para></listitem>\n<listitem><para><literal>suncg6 aka pkgs.xorg.xf86videosuncg6 (xf86-video-suncg6-1.1.2)</literal>: ???.</para></listitem>\n<listitem><para><literal>sunffb aka pkgs.xorg.xf86videosunffb (xf86-video-sunffb-1.2.2)</literal>: ???.</para></listitem>\n<listitem><para><literal>sunleo aka pkgs.xorg.xf86videosunleo (xf86-video-sunleo-1.2.2)</literal>: ???.</para></listitem>\n<listitem><para><literal>tdfx aka pkgs.xorg.xf86videotdfx (xf86-video-tdfx-1.4.7)</literal>: ???.</para></listitem>\n<listitem><para><literal>tga aka pkgs.xorg.xf86videotga (xf86-video-tga-1.2.2)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>trident aka pkgs.xorg.xf86videotrident (xf86-video-trident-1.3.8)</literal>: ???.</para></listitem>\n<listitem><para><literal>v4l aka pkgs.xorg.xf86videov4l (xf86-video-v4l-0.2.0)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>vesa aka pkgs.xorg.xf86videovesa (xf86-video-vesa-2.4.0)</literal>: ???.</para></listitem>\n<listitem><para><literal>vmware aka pkgs.xorg.xf86videovmware (xf86-video-vmware-13.2.1)</literal>: ???.</para></listitem>\n<listitem><para><literal>voodoo aka pkgs.xorg.xf86videovoodoo (xf86-video-voodoo-1.2.5)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>wsfb aka pkgs.xorg.xf86videowsfb (xf86-video-wsfb-0.4.0)</literal> <emphasis>[UNAVAILABLE]</emphasis>: ???.</para></listitem>\n<listitem><para><literal>xgi aka pkgs.xorg.xf86videoxgi (xf86-video-xgi-1.6.1)</literal>: ???.</para></listitem></itemizedlist>","type":"list of strings"},"services.xserver.virtualScreen":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":null,"description":"Virtual screen size for Xrandr.\n","example":{"x":2048,"y":2048},"loc":["services","xserver","virtualScreen"],"readOnly":false,"type":"null or attribute set"},"services.xserver.wacom.enable":{"declarations":["nixos/modules/services/x11/hardware/wacom.nix"],"default":false,"description":"Whether to enable the Wacom touchscreen/digitizer/tablet.\nIf you ever have any issues such as, try switching to terminal (ctrl-alt-F1) and back\nwhich will make Xorg reconfigure the device ?\n\nIf you're not satisfied by the default behaviour you can override\n<option>environment.etc.\"X11/xorg.conf.d/70-wacom.conf\"</option> in\nconfiguration.nix easily.\n","loc":["services","xserver","wacom","enable"],"readOnly":false,"type":"unspecified"},"services.xserver.windowManager.2bwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/2bwm.nix"],"default":false,"description":"Whether to enable 2bwm.","example":true,"loc":["services","xserver","windowManager","2bwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.afterstep.enable":{"declarations":["nixos/modules/services/x11/window-managers/afterstep.nix"],"default":false,"description":"Whether to enable afterstep.","example":true,"loc":["services","xserver","windowManager","afterstep","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.awesome.enable":{"declarations":["nixos/modules/services/x11/window-managers/awesome.nix"],"default":false,"description":"Whether to enable Awesome window manager.","example":true,"loc":["services","xserver","windowManager","awesome","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.awesome.luaModules":{"declarations":["nixos/modules/services/x11/window-managers/awesome.nix"],"default":[],"description":"List of lua packages available for being used in the Awesome configuration.","example":{"_type":"literalExample","text":"[ luaPackages.oocairo ]"},"loc":["services","xserver","windowManager","awesome","luaModules"],"readOnly":false,"type":"list of packages"},"services.xserver.windowManager.awesome.noArgb":{"declarations":["nixos/modules/services/x11/window-managers/awesome.nix"],"default":false,"description":"Disable client transparency support, which can be greatly detrimental to performance in some setups","loc":["services","xserver","windowManager","awesome","noArgb"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.awesome.package":{"declarations":["nixos/modules/services/x11/window-managers/awesome.nix"],"default":null,"description":"Package to use for running the Awesome WM.","loc":["services","xserver","windowManager","awesome","package"],"readOnly":false,"type":"null or package"},"services.xserver.windowManager.bspwm.configFile":{"declarations":["nixos/modules/services/x11/window-managers/bspwm.nix"],"default":null,"description":"Path to the bspwm configuration file.\nIf null, $HOME/.config/bspwm/bspwmrc will be used.\n","example":"${pkgs.bspwm}/share/doc/bspwm/examples/bspwmrc","loc":["services","xserver","windowManager","bspwm","configFile"],"readOnly":false,"type":"null or path"},"services.xserver.windowManager.bspwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/bspwm.nix"],"default":false,"description":"Whether to enable bspwm.","example":true,"loc":["services","xserver","windowManager","bspwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.bspwm.package":{"declarations":["nixos/modules/services/x11/window-managers/bspwm.nix"],"default":"pkgs.bspwm","description":"bspwm package to use.\n","example":"pkgs.bspwm-unstable","loc":["services","xserver","windowManager","bspwm","package"],"readOnly":false,"type":"package"},"services.xserver.windowManager.bspwm.sxhkd.configFile":{"declarations":["nixos/modules/services/x11/window-managers/bspwm.nix"],"default":null,"description":"Path to the sxhkd configuration file.\nIf null, $HOME/.config/sxhkd/sxhkdrc will be used.\n","example":"${pkgs.bspwm}/share/doc/bspwm/examples/sxhkdrc","loc":["services","xserver","windowManager","bspwm","sxhkd","configFile"],"readOnly":false,"type":"null or path"},"services.xserver.windowManager.bspwm.sxhkd.package":{"declarations":["nixos/modules/services/x11/window-managers/bspwm.nix"],"default":"pkgs.sxhkd","description":"sxhkd package to use.\n","example":"pkgs.sxhkd-unstable","loc":["services","xserver","windowManager","bspwm","sxhkd","package"],"readOnly":false,"type":"package"},"services.xserver.windowManager.default":{"declarations":["nixos/modules/services/x11/window-managers/default.nix"],"default":"none","description":"Default window manager loaded if none have been chosen.","example":"wmii","loc":["services","xserver","windowManager","default"],"readOnly":false,"type":"string"},"services.xserver.windowManager.dwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/dwm.nix"],"default":false,"description":"Whether to enable dwm.","example":true,"loc":["services","xserver","windowManager","dwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.evilwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/evilwm.nix"],"default":false,"description":"Whether to enable evilwm.","example":true,"loc":["services","xserver","windowManager","evilwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.exwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/exwm.nix"],"default":false,"description":"Whether to enable exwm.","example":true,"loc":["services","xserver","windowManager","exwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.exwm.enableDefaultConfig":{"declarations":["nixos/modules/services/x11/window-managers/exwm.nix"],"default":true,"description":"Enable an uncustomised exwm configuration.","loc":["services","xserver","windowManager","exwm","enableDefaultConfig"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.exwm.extraPackages":{"declarations":["nixos/modules/services/x11/window-managers/exwm.nix"],"default":"<function>","description":"Extra packages available to Emacs. The value must be a\nfunction which receives the attrset defined in\n<varname>emacsPackages</varname> as the sole argument.\n","example":{"_type":"literalExample","text":"epkgs: [\n  epkgs.emms\n  epkgs.magit\n  epkgs.proofgeneral\n]\n"},"loc":["services","xserver","windowManager","exwm","extraPackages"],"readOnly":false,"type":"unspecified"},"services.xserver.windowManager.fluxbox.enable":{"declarations":["nixos/modules/services/x11/window-managers/fluxbox.nix"],"default":false,"description":"Whether to enable fluxbox.","example":true,"loc":["services","xserver","windowManager","fluxbox","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.fvwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/fvwm.nix"],"default":false,"description":"Whether to enable Fvwm window manager.","example":true,"loc":["services","xserver","windowManager","fvwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.fvwm.gestures":{"declarations":["nixos/modules/services/x11/window-managers/fvwm.nix"],"default":false,"description":"Whether or not to enable libstroke for gesture support","loc":["services","xserver","windowManager","fvwm","gestures"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.herbstluftwm.configFile":{"declarations":["nixos/modules/services/x11/window-managers/herbstluftwm.nix"],"default":null,"description":"Path to the herbstluftwm configuration file.  If left at the\ndefault value, $XDG_CONFIG_HOME/herbstluftwm/autostart will\nbe used.\n","loc":["services","xserver","windowManager","herbstluftwm","configFile"],"readOnly":false,"type":"null or path"},"services.xserver.windowManager.herbstluftwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/herbstluftwm.nix"],"default":false,"description":"Whether to enable herbstluftwm.","example":true,"loc":["services","xserver","windowManager","herbstluftwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.i3.configFile":{"declarations":["nixos/modules/services/x11/window-managers/i3.nix"],"default":null,"description":"Path to the i3 configuration file.\nIf left at the default value, $HOME/.i3/config will be used.\n","loc":["services","xserver","windowManager","i3","configFile"],"readOnly":false,"type":"null or path"},"services.xserver.windowManager.i3.enable":{"declarations":["nixos/modules/services/x11/window-managers/i3.nix"],"default":false,"description":"Whether to enable i3 window manager.","example":true,"loc":["services","xserver","windowManager","i3","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.i3.extraPackages":{"declarations":["nixos/modules/services/x11/window-managers/i3.nix"],"default":["dmenu-4.8","i3status-2.12","i3lock-2.10"],"description":"Extra packages to be installed system wide.\n","example":{"_type":"literalExample","text":"with pkgs; [\n  dmenu\n  i3status\n  i3lock\n]\n"},"loc":["services","xserver","windowManager","i3","extraPackages"],"readOnly":false,"type":"list of packages"},"services.xserver.windowManager.i3.extraSessionCommands":{"declarations":["nixos/modules/services/x11/window-managers/i3.nix"],"default":"","description":"Shell commands executed just before i3 is started.\n","loc":["services","xserver","windowManager","i3","extraSessionCommands"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.windowManager.i3.package":{"declarations":["nixos/modules/services/x11/window-managers/i3.nix"],"default":"pkgs.i3","description":"i3 package to use.\n","example":"pkgs.i3-gaps","loc":["services","xserver","windowManager","i3","package"],"readOnly":false,"type":"package"},"services.xserver.windowManager.icewm.enable":{"declarations":["nixos/modules/services/x11/window-managers/icewm.nix"],"default":false,"description":"Whether to enable icewm.","example":true,"loc":["services","xserver","windowManager","icewm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.jwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/jwm.nix"],"default":false,"description":"Whether to enable jwm.","example":true,"loc":["services","xserver","windowManager","jwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.metacity.enable":{"declarations":["nixos/modules/services/x11/window-managers/metacity.nix"],"default":false,"description":"Whether to enable metacity.","example":true,"loc":["services","xserver","windowManager","metacity","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.mwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/mwm.nix"],"default":false,"description":"Whether to enable mwm.","example":true,"loc":["services","xserver","windowManager","mwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.notion.enable":{"declarations":["nixos/modules/services/x11/window-managers/notion.nix"],"default":false,"description":"Whether to enable notion.","example":true,"loc":["services","xserver","windowManager","notion","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.openbox.enable":{"declarations":["nixos/modules/services/x11/window-managers/openbox.nix"],"default":false,"description":"Whether to enable openbox.","example":true,"loc":["services","xserver","windowManager","openbox","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.pekwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/pekwm.nix"],"default":false,"description":"Whether to enable pekwm.","example":true,"loc":["services","xserver","windowManager","pekwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.qtile.enable":{"declarations":["nixos/modules/services/x11/window-managers/qtile.nix"],"default":false,"description":"Whether to enable qtile.","example":true,"loc":["services","xserver","windowManager","qtile","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.ratpoison.enable":{"declarations":["nixos/modules/services/x11/window-managers/ratpoison.nix"],"default":false,"description":"Whether to enable ratpoison.","example":true,"loc":["services","xserver","windowManager","ratpoison","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.sawfish.enable":{"declarations":["nixos/modules/services/x11/window-managers/sawfish.nix"],"default":false,"description":"Whether to enable sawfish.","example":true,"loc":["services","xserver","windowManager","sawfish","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.spectrwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/spectrwm.nix"],"default":false,"description":"Whether to enable spectrwm.","example":true,"loc":["services","xserver","windowManager","spectrwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.stumpwm.enable":{"declarations":["nixos/modules/services/x11/window-managers/stumpwm.nix"],"default":false,"description":"Whether to enable stumpwm.","example":true,"loc":["services","xserver","windowManager","stumpwm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.twm.enable":{"declarations":["nixos/modules/services/x11/window-managers/twm.nix"],"default":false,"description":"Whether to enable twm.","example":true,"loc":["services","xserver","windowManager","twm","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.windowlab.enable":{"declarations":["nixos/modules/services/x11/window-managers/windowlab.nix"],"default":false,"description":"Whether to enable windowlab.","example":true,"loc":["services","xserver","windowManager","windowlab","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.windowmaker.enable":{"declarations":["nixos/modules/services/x11/window-managers/windowmaker.nix"],"default":false,"description":"Whether to enable windowmaker.","example":true,"loc":["services","xserver","windowManager","windowmaker","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.wmii.enable":{"declarations":["nixos/modules/services/x11/window-managers/wmii.nix"],"default":false,"description":"Whether to enable wmii.","example":true,"loc":["services","xserver","windowManager","wmii","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.xmonad.enable":{"declarations":["nixos/modules/services/x11/window-managers/xmonad.nix"],"default":false,"description":"Whether to enable xmonad.","example":true,"loc":["services","xserver","windowManager","xmonad","enable"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.xmonad.enableContribAndExtras":{"declarations":["nixos/modules/services/x11/window-managers/xmonad.nix"],"default":false,"description":"Enable xmonad-{contrib,extras} in Xmonad.","loc":["services","xserver","windowManager","xmonad","enableContribAndExtras"],"readOnly":false,"type":"boolean"},"services.xserver.windowManager.xmonad.extraPackages":{"declarations":["nixos/modules/services/x11/window-managers/xmonad.nix"],"default":"self: []","description":"Extra packages available to ghc when rebuilding Xmonad. The\nvalue must be a function which receives the attrset defined\nin <varname>haskellPackages</varname> as the sole argument.\n","example":{"_type":"literalExample","text":"haskellPackages: [\n  haskellPackages.xmonad-contrib\n  haskellPackages.monad-logger\n]\n"},"loc":["services","xserver","windowManager","xmonad","extraPackages"],"readOnly":false,"type":"unspecified"},"services.xserver.windowManager.xmonad.haskellPackages":{"declarations":["nixos/modules/services/x11/window-managers/xmonad.nix"],"default":"pkgs.haskellPackages","description":"haskellPackages used to build Xmonad and other packages.\nThis can be used to change the GHC version used to build\nXmonad and the packages listed in\n<varname>extraPackages</varname>.\n","example":{"_type":"literalExample","text":"pkgs.haskell.packages.ghc784"},"loc":["services","xserver","windowManager","xmonad","haskellPackages"],"readOnly":false,"type":"unspecified"},"services.xserver.xautolock.enable":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":false,"description":"Whether to enable xautolock.","example":true,"loc":["services","xserver","xautolock","enable"],"readOnly":false,"type":"boolean"},"services.xserver.xautolock.enableNotifier":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":false,"description":"Whether to enable the notifier feature of xautolock.\nThis publishes a notification before the autolock.\n","example":true,"loc":["services","xserver","xautolock","enableNotifier"],"readOnly":false,"type":"boolean"},"services.xserver.xautolock.extraOptions":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":[],"description":"Additional command-line arguments to pass to\n<command>xautolock</command>.\n","example":["-detectsleep"],"loc":["services","xserver","xautolock","extraOptions"],"readOnly":false,"type":"list of strings"},"services.xserver.xautolock.killer":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":null,"description":"The script to use when nothing has happend for as long as <option>killtime</option>\n","example":"${pkgs.systemd}/bin/systemctl suspend","loc":["services","xserver","xautolock","killer"],"readOnly":false,"type":"null or string"},"services.xserver.xautolock.killtime":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":20,"description":"Minutes xautolock waits until it executes the script specified in <option>killer</option>\n(Has to be at least 10 minutes)\n","loc":["services","xserver","xautolock","killtime"],"readOnly":false,"type":"signed integer"},"services.xserver.xautolock.locker":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":"${pkgs.xlockmore}/bin/xlock","description":"The script to use when automatically locking the computer.\n","example":"${pkgs.i3lock}/bin/i3lock -i /path/to/img","loc":["services","xserver","xautolock","locker"],"readOnly":false,"type":"string"},"services.xserver.xautolock.notifier":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":null,"description":"Notification script to be used to warn about the pending autolock.\n","example":"${pkgs.libnotify}/bin/notify-send \"Locking in 10 seconds\"","loc":["services","xserver","xautolock","notifier"],"readOnly":false,"type":"null or string"},"services.xserver.xautolock.notify":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":10,"description":"Time (in seconds) before the actual lock when the notification about the pending lock should be published.\n","loc":["services","xserver","xautolock","notify"],"readOnly":false,"type":"signed integer"},"services.xserver.xautolock.nowlocker":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":null,"description":"The script to use when manually locking the computer with <command>xautolock -locknow</command>.\n","example":"${pkgs.i3lock}/bin/i3lock -i /path/to/img","loc":["services","xserver","xautolock","nowlocker"],"readOnly":false,"type":"null or string"},"services.xserver.xautolock.time":{"declarations":["nixos/modules/services/x11/xautolock.nix"],"default":15,"description":"Idle time to wait until xautolock locks the computer.\n","loc":["services","xserver","xautolock","time"],"readOnly":false,"type":"signed integer"},"services.xserver.xkbDir":{"declarations":["nixos/modules/services/x11/xserver.nix"],"description":"Path used for -xkbdir xserver parameter.\n","loc":["services","xserver","xkbDir"],"readOnly":false,"type":"path"},"services.xserver.xkbModel":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"pc104","description":"Keyboard model.\n","example":"presario","loc":["services","xserver","xkbModel"],"readOnly":false,"type":"string"},"services.xserver.xkbOptions":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"terminate:ctrl_alt_bksp","description":"X keyboard options; layout switching goes here.\n","example":"grp:caps_toggle, grp_led:scroll","loc":["services","xserver","xkbOptions"],"readOnly":false,"type":"string"},"services.xserver.xkbVariant":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"X keyboard variant.\n","example":"colemak","loc":["services","xserver","xkbVariant"],"readOnly":false,"type":"string"},"services.xserver.xrandrHeads":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":[],"description":"Multiple monitor configuration, just specify a list of XRandR\noutputs. The individual elements should be either simple strings or\nan attribute set of output options.\n\nIf the element is a string, it is denoting the physical output for a\nmonitor, if it's an attribute set, you must at least provide the\n<option>output</option> option.\n\nThe monitors will be mapped from left to right in the order of the\nlist.\n\nBy default, the first monitor will be set as the primary monitor if\nnone of the elements contain an option that has set\n<option>primary</option> to <literal>true</literal>.\n\n<note><para>Only one monitor is allowed to be primary.</para></note>\n\nBe careful using this option with multiple graphic adapters or with\ndrivers that have poor support for XRandR, unexpected things might\nhappen with those.\n","example":["HDMI-0",{"output":"DVI-0","primary":true},{"monitorConfig":"Option \"Rotate\" \"left\"","output":"DVI-1"}],"loc":["services","xserver","xrandrHeads"],"readOnly":false,"type":"list of submodule or string convertible to its"},"services.xserver.xrandrHeads.*.monitorConfig":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":"","description":"Extra lines to append to the <literal>Monitor</literal> section\nverbatim.\n","example":"DisplaySize 408 306\nOption \"DPMS\" \"false\"\n","loc":["services","xserver","xrandrHeads","*","monitorConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xserver.xrandrHeads.*.output":{"declarations":["nixos/modules/services/x11/xserver.nix"],"description":"The output name of the monitor, as shown by <citerefentry>\n  <refentrytitle>xrandr</refentrytitle>\n  <manvolnum>1</manvolnum>\n</citerefentry> invoked without arguments.\n","example":"DVI-0","loc":["services","xserver","xrandrHeads","*","output"],"readOnly":false,"type":"string"},"services.xserver.xrandrHeads.*.primary":{"declarations":["nixos/modules/services/x11/xserver.nix"],"default":false,"description":"Whether this head is treated as the primary monitor,\n","loc":["services","xserver","xrandrHeads","*","primary"],"readOnly":false,"type":"boolean"},"services.xtreemfs.dir.address":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":"","description":"If specified, it defines the interface to listen on. If not\nspecified, the service will listen on all interfaces (any).\n","example":"127.0.0.1","loc":["services","xtreemfs","dir","address"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.dir.enable":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":true,"description":"Whether to enable XtreemFS DIR service.\n","loc":["services","xtreemfs","dir","enable"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.dir.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":"","description":"Configuration of XtreemFS DIR service.\nWARNING: configuration is saved as plaintext inside nix store.\nFor more options: http://www.xtreemfs.org/xtfs-guide-1.5.1/index.html\n","example":"# specify whether SSL is required\nssl.enabled = true\nssl.service_creds.pw = passphrase\nssl.service_creds.container = pkcs12\nssl.service_creds = /etc/xos/xtreemfs/truststore/certs/dir.p12\nssl.trusted_certs = /etc/xos/xtreemfs/truststore/certs/trusted.jks\nssl.trusted_certs.pw = jks_passphrase\nssl.trusted_certs.container = jks\n","loc":["services","xtreemfs","dir","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xtreemfs.dir.httpPort":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":30638,"description":"Specifies the listen port for the HTTP service that returns the\nstatus page.\n","loc":["services","xtreemfs","dir","httpPort"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.dir.port":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":32638,"description":"The port to listen on for incoming connections (TCP).\n","loc":["services","xtreemfs","dir","port"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.dir.replication.enable":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":false,"description":"Whether to enable XtreemFS DIR replication plugin.","example":true,"loc":["services","xtreemfs","dir","replication","enable"],"readOnly":false,"type":"boolean"},"services.xtreemfs.dir.replication.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"description":"Configuration of XtreemFS DIR replication plugin.\nWARNING: configuration is saved as plaintext inside nix store.\nFor more options: http://www.xtreemfs.org/xtfs-guide-1.5.1/index.html\n","example":"# participants of the replication including this replica\nbabudb.repl.participant.0 = 192.168.0.10\nbabudb.repl.participant.0.port = 35676\nbabudb.repl.participant.1 = 192.168.0.11\nbabudb.repl.participant.1.port = 35676\nbabudb.repl.participant.2 = 192.168.0.12\nbabudb.repl.participant.2.port = 35676\n\n# number of servers that at least have to be up to date\n# To have a fault-tolerant system, this value has to be set to the\n# majority of nodes i.e., if you have three replicas, set this to 2\n# Please note that a setup with two nodes provides no fault-tolerance.\nbabudb.repl.sync.n = 2\n\n# specify whether SSL is required\nbabudb.ssl.enabled = true\n\nbabudb.ssl.protocol = tlsv12\n\n# server credentials for SSL handshakes\nbabudb.ssl.service_creds = /etc/xos/xtreemfs/truststore/certs/osd.p12\nbabudb.ssl.service_creds.pw = passphrase\nbabudb.ssl.service_creds.container = pkcs12\n\n# trusted certificates for SSL handshakes\nbabudb.ssl.trusted_certs = /etc/xos/xtreemfs/truststore/certs/trusted.jks\nbabudb.ssl.trusted_certs.pw = jks_passphrase\nbabudb.ssl.trusted_certs.container = jks\n\nbabudb.ssl.authenticationWithoutEncryption = false\n","loc":["services","xtreemfs","dir","replication","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xtreemfs.dir.syncMode":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":"FSYNC","description":"The sync mode influences how operations are committed to the disk\nlog before the operation is acknowledged to the caller.\n\n-ASYNC mode the writes to the disk log are buffered in memory by the operating system. This is the fastest mode but will lead to data loss in case of a crash, kernel panic or power failure.\n-SYNC_WRITE_METADATA opens the file with O_SYNC, the system will not buffer any writes. The operation will be acknowledged when data has been safely written to disk. This mode is slow but offers maximum data safety. However, BabuDB cannot influence the disk drive caches, this depends on the OS and hard disk model.\n-SYNC_WRITE similar to SYNC_WRITE_METADATA but opens file with O_DSYNC which means that only the data is commit to disk. This can lead to some data loss depending on the implementation of the underlying file system. Linux does not implement this mode.\n-FDATASYNC is similar to SYNC_WRITE but opens the file in asynchronous mode and calls fdatasync() after writing the data to disk.\n-FSYNC is similar to SYNC_WRITE_METADATA but opens the file in asynchronous mode and calls fsync() after writing the data to disk.\n\nFor best throughput use ASYNC, for maximum data safety use FSYNC.\n\n(If xtreemfs.dir.replication.enable is true then FDATASYNC is forced)\n","example":"FDATASYNC","loc":["services","xtreemfs","dir","syncMode"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.dir.uuid":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"description":"Must be set to a unique identifier, preferably a UUID according to\nRFC 4122. UUIDs can be generated with `uuidgen` command, found in\nthe `utillinux` package.\n","example":"eacb6bab-f444-4ebf-a06a-3f72d7465e40","loc":["services","xtreemfs","dir","uuid"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.enable":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":false,"description":"Whether to enable XtreemFS.","example":true,"loc":["services","xtreemfs","enable"],"readOnly":false,"type":"boolean"},"services.xtreemfs.homeDir":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":"/var/lib/xtreemfs","description":"XtreemFS home dir for the xtreemfs user.\n","loc":["services","xtreemfs","homeDir"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.mrc.address":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":"","description":"If specified, it defines the interface to listen on. If not\nspecified, the service will listen on all interfaces (any).\n","example":"127.0.0.1","loc":["services","xtreemfs","mrc","address"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.mrc.enable":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":true,"description":"Whether to enable XtreemFS MRC service.\n","loc":["services","xtreemfs","mrc","enable"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.mrc.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"description":"Configuration of XtreemFS MRC service.\nWARNING: configuration is saved as plaintext inside nix store.\nFor more options: http://www.xtreemfs.org/xtfs-guide-1.5.1/index.html\n","example":"osd_check_interval = 300\nno_atime = true\nlocal_clock_renewal = 0\nremote_time_sync = 30000\nauthentication_provider = org.xtreemfs.common.auth.NullAuthProvider\n\n# shared secret between the MRC and all OSDs\ncapability_secret = iNG8UuQJrJ6XVDTe\n\ndir_service.host = 192.168.0.10\ndir_service.port = 32638\n\n# if replication is enabled\ndir_service.1.host = 192.168.0.11\ndir_service.1.port = 32638\ndir_service.2.host = 192.168.0.12\ndir_service.2.port = 32638\n\n# specify whether SSL is required\nssl.enabled = true\nssl.protocol = tlsv12\nssl.service_creds.pw = passphrase\nssl.service_creds.container = pkcs12\nssl.service_creds = /etc/xos/xtreemfs/truststore/certs/mrc.p12\nssl.trusted_certs = /etc/xos/xtreemfs/truststore/certs/trusted.jks\nssl.trusted_certs.pw = jks_passphrase\nssl.trusted_certs.container = jks\n","loc":["services","xtreemfs","mrc","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xtreemfs.mrc.httpPort":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":30636,"description":"Specifies the listen port for the HTTP service that returns the\nstatus page.\n","loc":["services","xtreemfs","mrc","httpPort"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.mrc.port":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":32636,"description":"The port to listen on for incoming connections (TCP).\n","loc":["services","xtreemfs","mrc","port"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.mrc.replication.enable":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":false,"description":"Whether to enable XtreemFS MRC replication plugin.","example":true,"loc":["services","xtreemfs","mrc","replication","enable"],"readOnly":false,"type":"boolean"},"services.xtreemfs.mrc.replication.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"description":"Configuration of XtreemFS MRC replication plugin.\nWARNING: configuration is saved as plaintext inside nix store.\nFor more options: http://www.xtreemfs.org/xtfs-guide-1.5.1/index.html\n","example":"# participants of the replication including this replica\nbabudb.repl.participant.0 = 192.168.0.10\nbabudb.repl.participant.0.port = 35678\nbabudb.repl.participant.1 = 192.168.0.11\nbabudb.repl.participant.1.port = 35678\nbabudb.repl.participant.2 = 192.168.0.12\nbabudb.repl.participant.2.port = 35678\n\n# number of servers that at least have to be up to date\n# To have a fault-tolerant system, this value has to be set to the\n# majority of nodes i.e., if you have three replicas, set this to 2\n# Please note that a setup with two nodes provides no fault-tolerance.\nbabudb.repl.sync.n = 2\n\n# specify whether SSL is required\nbabudb.ssl.enabled = true\n\nbabudb.ssl.protocol = tlsv12\n\n# server credentials for SSL handshakes\nbabudb.ssl.service_creds = /etc/xos/xtreemfs/truststore/certs/osd.p12\nbabudb.ssl.service_creds.pw = passphrase\nbabudb.ssl.service_creds.container = pkcs12\n\n# trusted certificates for SSL handshakes\nbabudb.ssl.trusted_certs = /etc/xos/xtreemfs/truststore/certs/trusted.jks\nbabudb.ssl.trusted_certs.pw = jks_passphrase\nbabudb.ssl.trusted_certs.container = jks\n\nbabudb.ssl.authenticationWithoutEncryption = false\n","loc":["services","xtreemfs","mrc","replication","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xtreemfs.mrc.syncMode":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":"FSYNC","description":"The sync mode influences how operations are committed to the disk\nlog before the operation is acknowledged to the caller.\n\n-ASYNC mode the writes to the disk log are buffered in memory by the operating system. This is the fastest mode but will lead to data loss in case of a crash, kernel panic or power failure.\n-SYNC_WRITE_METADATA opens the file with O_SYNC, the system will not buffer any writes. The operation will be acknowledged when data has been safely written to disk. This mode is slow but offers maximum data safety. However, BabuDB cannot influence the disk drive caches, this depends on the OS and hard disk model.\n-SYNC_WRITE similar to SYNC_WRITE_METADATA but opens file with O_DSYNC which means that only the data is commit to disk. This can lead to some data loss depending on the implementation of the underlying file system. Linux does not implement this mode.\n-FDATASYNC is similar to SYNC_WRITE but opens the file in asynchronous mode and calls fdatasync() after writing the data to disk.\n-FSYNC is similar to SYNC_WRITE_METADATA but opens the file in asynchronous mode and calls fsync() after writing the data to disk.\n\nFor best throughput use ASYNC, for maximum data safety use FSYNC.\n\n(If xtreemfs.mrc.replication.enable is true then FDATASYNC is forced)\n","example":"FDATASYNC","loc":["services","xtreemfs","mrc","syncMode"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.mrc.uuid":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"description":"Must be set to a unique identifier, preferably a UUID according to\nRFC 4122. UUIDs can be generated with `uuidgen` command, found in\nthe `utillinux` package.\n","example":"eacb6bab-f444-4ebf-a06a-3f72d7465e41","loc":["services","xtreemfs","mrc","uuid"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.osd.address":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":"","description":"If specified, it defines the interface to listen on. If not\nspecified, the service will listen on all interfaces (any).\n","example":"127.0.0.1","loc":["services","xtreemfs","osd","address"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.osd.enable":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":true,"description":"Whether to enable XtreemFS OSD service.\n","loc":["services","xtreemfs","osd","enable"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.osd.extraConfig":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"description":"Configuration of XtreemFS OSD service.\nWARNING: configuration is saved as plaintext inside nix store.\nFor more options: http://www.xtreemfs.org/xtfs-guide-1.5.1/index.html\n","example":"local_clock_renewal = 0\nremote_time_sync = 30000\nreport_free_space = true\ncapability_secret = iNG8UuQJrJ6XVDTe\n\ndir_service.host = 192.168.0.10\ndir_service.port = 32638\n\n# if replication is used\ndir_service.1.host = 192.168.0.11\ndir_service.1.port = 32638\ndir_service.2.host = 192.168.0.12\ndir_service.2.port = 32638\n\n# specify whether SSL is required\nssl.enabled = true\nssl.service_creds.pw = passphrase\nssl.service_creds.container = pkcs12\nssl.service_creds = /etc/xos/xtreemfs/truststore/certs/osd.p12\nssl.trusted_certs = /etc/xos/xtreemfs/truststore/certs/trusted.jks\nssl.trusted_certs.pw = jks_passphrase\nssl.trusted_certs.container = jks\n","loc":["services","xtreemfs","osd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.xtreemfs.osd.httpPort":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":30640,"description":"Specifies the listen port for the HTTP service that returns the\nstatus page.\n","loc":["services","xtreemfs","osd","httpPort"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.osd.port":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"default":32640,"description":"The port to listen on for incoming connections (TCP and UDP).\n","loc":["services","xtreemfs","osd","port"],"readOnly":false,"type":"unspecified"},"services.xtreemfs.osd.uuid":{"declarations":["nixos/modules/services/network-filesystems/xtreemfs.nix"],"description":"Must be set to a unique identifier, preferably a UUID according to\nRFC 4122. UUIDs can be generated with `uuidgen` command, found in\nthe `utillinux` package.\n","example":"eacb6bab-f444-4ebf-a06a-3f72d7465e42","loc":["services","xtreemfs","osd","uuid"],"readOnly":false,"type":"unspecified"},"services.yandex-disk.directory":{"declarations":["nixos/modules/services/network-filesystems/yandex-disk.nix"],"default":"/home/Yandex.Disk","description":"The directory to use for Yandex.Disk storage","loc":["services","yandex-disk","directory"],"readOnly":false,"type":"unspecified"},"services.yandex-disk.enable":{"declarations":["nixos/modules/services/network-filesystems/yandex-disk.nix"],"default":false,"description":"\n          Whether to enable Yandex-disk client. See https://disk.yandex.ru/\n        ","loc":["services","yandex-disk","enable"],"readOnly":false,"type":"unspecified"},"services.yandex-disk.excludes":{"declarations":["nixos/modules/services/network-filesystems/yandex-disk.nix"],"default":"","description":"Comma-separated list of directories which are excluded from synchronization.\n","example":"data,backup","loc":["services","yandex-disk","excludes"],"readOnly":false,"type":"Concatenated string"},"services.yandex-disk.password":{"declarations":["nixos/modules/services/network-filesystems/yandex-disk.nix"],"default":"","description":"Your yandex.com password. Warning: it will be world-readable in /nix/store.\n","loc":["services","yandex-disk","password"],"readOnly":false,"type":"Concatenated string"},"services.yandex-disk.user":{"declarations":["nixos/modules/services/network-filesystems/yandex-disk.nix"],"default":null,"description":"The user the yandex-disk daemon should run as.\n","loc":["services","yandex-disk","user"],"readOnly":false,"type":"unspecified"},"services.yandex-disk.username":{"declarations":["nixos/modules/services/network-filesystems/yandex-disk.nix"],"default":"","description":"Your yandex.com login name.\n","loc":["services","yandex-disk","username"],"readOnly":false,"type":"Concatenated string"},"services.ympd.enable":{"declarations":["nixos/modules/services/audio/ympd.nix"],"default":false,"description":"Whether to enable ympd, the MPD Web GUI.","example":true,"loc":["services","ympd","enable"],"readOnly":false,"type":"boolean"},"services.ympd.mpd.host":{"declarations":["nixos/modules/services/audio/ympd.nix"],"default":"localhost","description":"The host where MPD is listening.","example":"localhost","loc":["services","ympd","mpd","host"],"readOnly":false,"type":"Concatenated string"},"services.ympd.mpd.port":{"declarations":["nixos/modules/services/audio/ympd.nix"],"default":6600,"description":"The port where MPD is listening.","example":6600,"loc":["services","ympd","mpd","port"],"readOnly":false,"type":"signed integer"},"services.ympd.webPort":{"declarations":["nixos/modules/services/audio/ympd.nix"],"default":"8080","description":"The port where ympd's web interface will be available.","example":"ssl://8080:/path/to/ssl-private-key.pem","loc":["services","ympd","webPort"],"readOnly":false,"type":"Concatenated string"},"services.youtrack.address":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":"127.0.0.1","description":"The interface youtrack will listen on.\n","loc":["services","youtrack","address"],"readOnly":false,"type":"Concatenated string"},"services.youtrack.baseUrl":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":null,"description":"Base URL for youtrack. Will be auto-detected and stored in database.\n","loc":["services","youtrack","baseUrl"],"readOnly":false,"type":"null or Concatenated string"},"services.youtrack.enable":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":false,"description":"Whether to enable YouTrack service.","example":true,"loc":["services","youtrack","enable"],"readOnly":false,"type":"boolean"},"services.youtrack.extraParams":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":{},"description":"Extra parameters to pass to youtrack. See \nhttps://www.jetbrains.com/help/youtrack/standalone/YouTrack-Java-Start-Parameters.html\nfor more information.\n","example":{"jetbrains.youtrack.overrideRootPassword":"tortuga"},"loc":["services","youtrack","extraParams"],"readOnly":false,"type":"attribute set of Concatenated strings"},"services.youtrack.jvmOpts":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":"","description":"Extra options to pass to the JVM.\nSee https://www.jetbrains.com/help/youtrack/standalone/Configure-JVM-Options.html\nfor more information.\n","example":"-XX:MetaspaceSize=250m","loc":["services","youtrack","jvmOpts"],"readOnly":false,"type":"Concatenated string"},"services.youtrack.maxMemory":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":"1g","description":"Maximum Java heap size\n","loc":["services","youtrack","maxMemory"],"readOnly":false,"type":"Concatenated string"},"services.youtrack.maxMetaspaceSize":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":"350m","description":"Maximum java Metaspace memory.\n","loc":["services","youtrack","maxMetaspaceSize"],"readOnly":false,"type":"Concatenated string"},"services.youtrack.package":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":"pkgs.youtrack","description":"Package to use.\n","loc":["services","youtrack","package"],"readOnly":false,"type":"package"},"services.youtrack.port":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":8080,"description":"The port youtrack will listen on.\n","loc":["services","youtrack","port"],"readOnly":false,"type":"signed integer"},"services.youtrack.statePath":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":"/var/lib/youtrack","description":"Where to keep the youtrack database.\n","loc":["services","youtrack","statePath"],"readOnly":false,"type":"Concatenated string"},"services.youtrack.virtualHost":{"declarations":["nixos/modules/services/web-apps/youtrack.nix"],"default":null,"description":"Name of the nginx virtual host to use and setup.\nIf null, do not setup anything.\n","loc":["services","youtrack","virtualHost"],"readOnly":false,"type":"null or Concatenated string"},"services.zabbixAgent.enable":{"declarations":["nixos/modules/services/monitoring/zabbix-agent.nix"],"default":false,"description":"Whether to run the Zabbix monitoring agent on this machine.\nIt will send monitoring data to a Zabbix server.\n","loc":["services","zabbixAgent","enable"],"readOnly":false,"type":"unspecified"},"services.zabbixAgent.extraConfig":{"declarations":["nixos/modules/services/monitoring/zabbix-agent.nix"],"default":"","description":"Configuration that is injected verbatim into the configuration file.\n","loc":["services","zabbixAgent","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.zabbixAgent.package":{"declarations":["nixos/modules/services/monitoring/zabbix-agent.nix"],"default":"pkgs.zabbix","description":"The Zabbix package to use.\n","example":{"_type":"literalExample","text":"pkgs.zabbix34"},"loc":["services","zabbixAgent","package"],"readOnly":false,"type":"attribute set"},"services.zabbixAgent.server":{"declarations":["nixos/modules/services/monitoring/zabbix-agent.nix"],"default":"127.0.0.1","description":"The IP address or hostname of the Zabbix server to connect to.\n","loc":["services","zabbixAgent","server"],"readOnly":false,"type":"unspecified"},"services.zabbixServer.dbPassword":{"declarations":["nixos/modules/services/monitoring/zabbix-server.nix"],"default":"","description":"Password used to connect to the database server.","loc":["services","zabbixServer","dbPassword"],"readOnly":false,"type":"string"},"services.zabbixServer.dbServer":{"declarations":["nixos/modules/services/monitoring/zabbix-server.nix"],"default":"localhost","description":"Hostname or IP address of the database server.\nUse an empty string (\"\") to use peer authentication.\n","loc":["services","zabbixServer","dbServer"],"readOnly":false,"type":"string"},"services.zabbixServer.enable":{"declarations":["nixos/modules/services/monitoring/zabbix-server.nix"],"default":false,"description":"Whether to run the Zabbix server on this machine.\n","loc":["services","zabbixServer","enable"],"readOnly":false,"type":"boolean"},"services.zabbixServer.extraConfig":{"declarations":["nixos/modules/services/monitoring/zabbix-server.nix"],"default":"","description":"Configuration that is injected verbatim into the configuration file.\n","loc":["services","zabbixServer","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.zeitgeist.enable":{"declarations":["nixos/modules/services/desktops/zeitgeist.nix"],"default":false,"description":"Whether to enable zeitgeist.","example":true,"loc":["services","zeitgeist","enable"],"readOnly":false,"type":"boolean"},"services.zerobin.dataDir":{"declarations":["nixos/modules/services/networking/zerobin.nix"],"default":"/var/lib/zerobin","description":"Path to the 0bin data directory\n","loc":["services","zerobin","dataDir"],"readOnly":false,"type":"string"},"services.zerobin.enable":{"declarations":["nixos/modules/services/networking/zerobin.nix"],"default":false,"description":"Whether to enable 0bin.","example":true,"loc":["services","zerobin","enable"],"readOnly":false,"type":"boolean"},"services.zerobin.extraConfig":{"declarations":["nixos/modules/services/networking/zerobin.nix"],"default":"","description":"Extra configuration to be appended to the 0bin config file\n(see https://0bin.readthedocs.org/en/latest/en/options.html)\n","example":"MENU = (\n('Home', '/'),\n)\nCOMPRESSED_STATIC_FILE = True\n","loc":["services","zerobin","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.zerobin.group":{"declarations":["nixos/modules/services/networking/zerobin.nix"],"default":"zerobin","description":"The group 0bin should run as\n","loc":["services","zerobin","group"],"readOnly":false,"type":"string"},"services.zerobin.listenAddress":{"declarations":["nixos/modules/services/networking/zerobin.nix"],"default":"localhost","description":"The address zerobin should listen to\n","example":"127.0.0.1","loc":["services","zerobin","listenAddress"],"readOnly":false,"type":"string"},"services.zerobin.listenPort":{"declarations":["nixos/modules/services/networking/zerobin.nix"],"default":8000,"description":"The port zerobin should listen on\n","example":1357,"loc":["services","zerobin","listenPort"],"readOnly":false,"type":"signed integer"},"services.zerobin.user":{"declarations":["nixos/modules/services/networking/zerobin.nix"],"default":"zerobin","description":"The user 0bin should run as\n","loc":["services","zerobin","user"],"readOnly":false,"type":"string"},"services.zeronet.dataDir":{"declarations":["nixos/modules/services/networking/zeronet.nix"],"default":"/var/lib/zeronet","description":"Path to the zeronet data directory.","example":"/home/okina/zeronet","loc":["services","zeronet","dataDir"],"readOnly":false,"type":"path"},"services.zeronet.enable":{"declarations":["nixos/modules/services/networking/zeronet.nix"],"default":false,"description":"Whether to enable zeronet.","example":true,"loc":["services","zeronet","enable"],"readOnly":false,"type":"boolean"},"services.zeronet.extraConfig":{"declarations":["nixos/modules/services/networking/zeronet.nix"],"default":"","description":"Extra configuration. Contents will be added verbatim to the\nconfiguration file at the end.\n","loc":["services","zeronet","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.zeronet.logDir":{"declarations":["nixos/modules/services/networking/zeronet.nix"],"default":"/var/log/zeronet","description":"Path to the zeronet log directory.","example":"/home/okina/zeronet/log","loc":["services","zeronet","logDir"],"readOnly":false,"type":"path"},"services.zeronet.port":{"declarations":["nixos/modules/services/networking/zeronet.nix"],"default":null,"description":"Optional zeronet web UI port.","example":43110,"loc":["services","zeronet","port"],"readOnly":false,"type":"null or signed integer"},"services.zeronet.tor":{"declarations":["nixos/modules/services/networking/zeronet.nix"],"default":false,"description":"Use TOR for zeronet traffic where possible.","loc":["services","zeronet","tor"],"readOnly":false,"type":"boolean"},"services.zeronet.torAlways":{"declarations":["nixos/modules/services/networking/zeronet.nix"],"default":false,"description":"Use TOR for all zeronet traffic.","loc":["services","zeronet","torAlways"],"readOnly":false,"type":"boolean"},"services.zerotierone.enable":{"declarations":["nixos/modules/services/networking/zerotierone.nix"],"default":false,"description":"Whether to enable ZeroTierOne.","example":true,"loc":["services","zerotierone","enable"],"readOnly":false,"type":"boolean"},"services.zerotierone.joinNetworks":{"declarations":["nixos/modules/services/networking/zerotierone.nix"],"default":[],"description":"List of ZeroTier Network IDs to join on startup\n","example":["a8a2c3c10c1a68de"],"loc":["services","zerotierone","joinNetworks"],"readOnly":false,"type":"list of strings"},"services.zerotierone.package":{"declarations":["nixos/modules/services/networking/zerotierone.nix"],"default":"pkgs.zerotierone","description":"ZeroTier One package to use.\n","loc":["services","zerotierone","package"],"readOnly":false,"type":"package"},"services.zerotierone.port":{"declarations":["nixos/modules/services/networking/zerotierone.nix"],"default":9993,"description":"Network port used by ZeroTier.\n","example":9993,"loc":["services","zerotierone","port"],"readOnly":false,"type":"signed integer"},"services.zfs.autoScrub.enable":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":false,"description":"Enables periodic scrubbing of ZFS pools.\n","loc":["services","zfs","autoScrub","enable"],"readOnly":false,"type":"boolean"},"services.zfs.autoScrub.interval":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":"Sun, 02:00","description":"Systemd calendar expression when to scrub ZFS pools. See\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n","example":"daily","loc":["services","zfs","autoScrub","interval"],"readOnly":false,"type":"string"},"services.zfs.autoScrub.pools":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":[],"description":"List of ZFS pools to periodically scrub. If empty, all pools\nwill be scrubbed.\n","example":["tank"],"loc":["services","zfs","autoScrub","pools"],"readOnly":false,"type":"list of strings"},"services.zfs.autoSnapshot.daily":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":7,"description":"Number of daily auto-snapshots that you wish to keep.\n","loc":["services","zfs","autoSnapshot","daily"],"readOnly":false,"type":"signed integer"},"services.zfs.autoSnapshot.enable":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":false,"description":"Enable the (OpenSolaris-compatible) ZFS auto-snapshotting service.\nNote that you must set the <literal>com.sun:auto-snapshot</literal>\nproperty to <literal>true</literal> on all datasets which you wish\nto auto-snapshot.\n\nYou can override a child dataset to use, or not use auto-snapshotting\nby setting its flag with the given interval:\n<literal>zfs set com.sun:auto-snapshot:weekly=false DATASET</literal>\n","loc":["services","zfs","autoSnapshot","enable"],"readOnly":false,"type":"boolean"},"services.zfs.autoSnapshot.flags":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":"-k -p","description":"Flags to pass to the zfs-auto-snapshot command.\n\nRun <literal>zfs-auto-snapshot</literal> (without any arguments) to\nsee available flags.\n\nIf it's not too inconvenient for snapshots to have timestamps in UTC,\nit is suggested that you append <literal>--utc</literal> to the list\nof default options (see example).\n\nOtherwise, snapshot names can cause name conflicts or apparent time\nreversals due to daylight savings, timezone or other date/time changes.\n","example":"-k -p --utc","loc":["services","zfs","autoSnapshot","flags"],"readOnly":false,"type":"string"},"services.zfs.autoSnapshot.frequent":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":4,"description":"Number of frequent (15-minute) auto-snapshots that you wish to keep.\n","loc":["services","zfs","autoSnapshot","frequent"],"readOnly":false,"type":"signed integer"},"services.zfs.autoSnapshot.hourly":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":24,"description":"Number of hourly auto-snapshots that you wish to keep.\n","loc":["services","zfs","autoSnapshot","hourly"],"readOnly":false,"type":"signed integer"},"services.zfs.autoSnapshot.monthly":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":12,"description":"Number of monthly auto-snapshots that you wish to keep.\n","loc":["services","zfs","autoSnapshot","monthly"],"readOnly":false,"type":"signed integer"},"services.zfs.autoSnapshot.weekly":{"declarations":["nixos/modules/tasks/filesystems/zfs.nix"],"default":4,"description":"Number of weekly auto-snapshots that you wish to keep.\n","loc":["services","zfs","autoSnapshot","weekly"],"readOnly":false,"type":"signed integer"},"services.znapzend.autoCreation":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":false,"description":"Automatically create the destination dataset if it does not exists.","loc":["services","znapzend","autoCreation"],"readOnly":false,"type":"boolean"},"services.znapzend.enable":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":false,"description":"Whether to enable ZnapZend ZFS backup daemon.","example":true,"loc":["services","znapzend","enable"],"readOnly":false,"type":"boolean"},"services.znapzend.logLevel":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":"debug","description":"The log level when logging to file. Any of debug, info, warning, err,\nalert. Default in daemonized form is debug.\n","example":"warning","loc":["services","znapzend","logLevel"],"readOnly":false,"type":"one of \"debug\", \"info\", \"warning\", \"err\", \"alert\""},"services.znapzend.logTo":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":"syslog::daemon","description":"Where to log to (syslog::&lt;facility&gt; or &lt;filepath&gt;).\n","example":"/var/log/znapzend.log","loc":["services","znapzend","logTo"],"readOnly":false,"type":"string"},"services.znapzend.noDestroy":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":false,"description":"Does all changes to the filesystem except destroy.","loc":["services","znapzend","noDestroy"],"readOnly":false,"type":"boolean"},"services.znapzend.pure":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":false,"description":"Do not persist any stateful znapzend setups. If this option is\nenabled, your previously set znapzend setups will be cleared and only\nthe ones defined with this module will be applied.\n","loc":["services","znapzend","pure"],"readOnly":false,"type":"boolean"},"services.znapzend.zetup":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":{},"description":"Znapzend configuration.","example":{"_type":"literalExample","text":"{\n  \"tank/home\" = {\n    # Make snapshots of tank/home every hour, keep those for 1 day,\n    # keep every days snapshot for 1 month, etc.\n    plan = \"1d=>1h,1m=>1d,1y=>1m\";\n    recursive = true;\n    # Send all those snapshots to john@example.com:rtank/john as well\n    destinations.remote = {\n      host = \"john@example.com\";\n      dataset = \"rtank/john\";\n    };\n  };\n};\n"},"loc":["services","znapzend","zetup"],"readOnly":false,"type":"list or attribute set of submodules"},"services.znapzend.zetup.<name?>.dataset":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"description":"The dataset to use for this source.","example":"tank/home","loc":["services","znapzend","zetup","<name?>","dataset"],"readOnly":false,"type":"string"},"services.znapzend.zetup.<name?>.destinations":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":{},"description":"Additional destinations.","example":{"_type":"literalExample","text":"{\n  local = {\n    dataset = \"btank/backup\";\n    presend = \"zpool import -N btank\";\n    postsend = \"zpool export btank\";\n  };\n  remote = {\n    host = \"john@example.com\";\n    dataset = \"tank/john\";\n  };\n};\n"},"loc":["services","znapzend","zetup","<name?>","destinations"],"readOnly":false,"type":"list or attribute set of submodules"},"services.znapzend.zetup.<name?>.destinations.<name?>.dataset":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"description":"Dataset name to send snapshots to.","example":"tank/main","loc":["services","znapzend","zetup","<name?>","destinations","<name?>","dataset"],"readOnly":false,"type":"string"},"services.znapzend.zetup.<name?>.destinations.<name?>.host":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":null,"description":"Host to use for the destination dataset. Can be prefixed with\n<literal>user@</literal> to specify the ssh user.\n","example":"john@example.com","loc":["services","znapzend","zetup","<name?>","destinations","<name?>","host"],"readOnly":false,"type":"null or string"},"services.znapzend.zetup.<name?>.destinations.<name?>.label":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"description":"Label for this destination. Defaults to the attribute name.","loc":["services","znapzend","zetup","<name?>","destinations","<name?>","label"],"readOnly":false,"type":"string"},"services.znapzend.zetup.<name?>.destinations.<name?>.plan":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"description":"  The znapzend backup plan to use for the source.\n</para>\n<para>\n  The plan specifies how often to backup and for how long to keep the\n  backups. It consists of a series of retention periodes to interval\n  associations:\n</para>\n<para>\n  <literal>\n    retA=>intA,retB=>intB,...\n  </literal>\n</para>\n<para>\nBoth intervals and retention periods are expressed in standard units\nof time or multiples of them. You can use both the full name or a\nshortcut according to the following listing:\n</para>\n<para>\n  <literal>\n    second|sec|s, minute|min, hour|h, day|d, week|w, month|mon|m, year|y\n  </literal>\n</para>\n<para>\n  See <citerefentry><refentrytitle>znapzendzetup</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more info.\n","example":"1h=>10min,1d=>1h,1w=>1d,1m=>1w,1y=>1m","loc":["services","znapzend","zetup","<name?>","destinations","<name?>","plan"],"readOnly":false,"type":"string"},"services.znapzend.zetup.<name?>.destinations.<name?>.postsend":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":null,"description":"Command to run after sending the snapshot to the destination.\nIntended to run a remote script via <command>ssh</command> on the\ndestination, e.g. to bring up a backup disk or server or to put a\nzpool online/offline. See also <option>presend</option>.\n","example":"ssh root@bserv zpool export tank","loc":["services","znapzend","zetup","<name?>","destinations","<name?>","postsend"],"readOnly":false,"type":"null or string"},"services.znapzend.zetup.<name?>.destinations.<name?>.presend":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":null,"description":"Command to run before sending the snapshot to the destination.\nIntended to run a remote script via <command>ssh</command> on the\ndestination, e.g. to bring up a backup disk or server or to put a\nzpool online/offline. See also <option>postsend</option>.\n","example":"ssh root@bserv zpool import -Nf tank","loc":["services","znapzend","zetup","<name?>","destinations","<name?>","presend"],"readOnly":false,"type":"null or string"},"services.znapzend.zetup.<name?>.enable":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":true,"description":"Whether to enable this source.","loc":["services","znapzend","zetup","<name?>","enable"],"readOnly":false,"type":"boolean"},"services.znapzend.zetup.<name?>.mbuffer.enable":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":false,"description":"Whether to use <command>mbuffer</command>.","loc":["services","znapzend","zetup","<name?>","mbuffer","enable"],"readOnly":false,"type":"boolean"},"services.znapzend.zetup.<name?>.mbuffer.port":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":null,"description":"  Port to use for <command>mbuffer</command>.\n</para>\n<para>\n  If this is null, it will run <command>mbuffer</command> through\n  ssh.\n</para>\n<para>\n  If this is not null, it will run <command>mbuffer</command>\n  directly through TCP, which is not encrypted but faster. In that\n  case the given port needs to be open on the destination host.\n","loc":["services","znapzend","zetup","<name?>","mbuffer","port"],"readOnly":false,"type":"null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)"},"services.znapzend.zetup.<name?>.mbuffer.size":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":"1G","description":"The size for <command>mbuffer</command>.\nSupports the units b, k, M, G.\n","example":"128M","loc":["services","znapzend","zetup","<name?>","mbuffer","size"],"readOnly":false,"type":"string of the form number{b|k|M|G}"},"services.znapzend.zetup.<name?>.plan":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"description":"  The znapzend backup plan to use for the source.\n</para>\n<para>\n  The plan specifies how often to backup and for how long to keep the\n  backups. It consists of a series of retention periodes to interval\n  associations:\n</para>\n<para>\n  <literal>\n    retA=>intA,retB=>intB,...\n  </literal>\n</para>\n<para>\nBoth intervals and retention periods are expressed in standard units\nof time or multiples of them. You can use both the full name or a\nshortcut according to the following listing:\n</para>\n<para>\n  <literal>\n    second|sec|s, minute|min, hour|h, day|d, week|w, month|mon|m, year|y\n  </literal>\n</para>\n<para>\n  See <citerefentry><refentrytitle>znapzendzetup</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more info.\n","example":"1h=>10min,1d=>1h,1w=>1d,1m=>1w,1y=>1m","loc":["services","znapzend","zetup","<name?>","plan"],"readOnly":false,"type":"string"},"services.znapzend.zetup.<name?>.postsnap":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":null,"description":"Command to run after snapshots are taken on the source dataset,\ne.g. for database unlocking. See also <option>presnap</option>.\n","example":{"_type":"literalExample","text":"${pkgs.coreutils}/bin/kill `${pkgs.coreutils}/bin/cat /tmp/mariadblock.pid`;${pkgs.coreutils}/bin/rm /tmp/mariadblock.pid\n"},"loc":["services","znapzend","zetup","<name?>","postsnap"],"readOnly":false,"type":"null or string"},"services.znapzend.zetup.<name?>.presnap":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":null,"description":"Command to run before snapshots are taken on the source dataset,\ne.g. for database locking/flushing. See also\n<option>postsnap</option>.\n","example":{"_type":"literalExample","text":"${pkgs.mariadb}/bin/mysql -e \"set autocommit=0;flush tables with read lock;\\\\! ${pkgs.coreutils}/bin/sleep 600\" &  ${pkgs.coreutils}/bin/echo $! > /tmp/mariadblock.pid ; sleep 10\n"},"loc":["services","znapzend","zetup","<name?>","presnap"],"readOnly":false,"type":"null or string"},"services.znapzend.zetup.<name?>.recursive":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":false,"description":"Whether to do recursive snapshots.","loc":["services","znapzend","zetup","<name?>","recursive"],"readOnly":false,"type":"boolean"},"services.znapzend.zetup.<name?>.sendDelay":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":0,"description":"Specify delay (in seconds) before sending snaps to the destination.\nMay be useful if you want to control sending time.\n","example":60,"loc":["services","znapzend","zetup","<name?>","sendDelay"],"readOnly":false,"type":"signed integer"},"services.znapzend.zetup.<name?>.timestampFormat":{"declarations":["nixos/modules/services/backup/znapzend.nix"],"default":"%Y-%m-%d-%H%M%S","description":"The timestamp format to use for constructing snapshot names.\nThe syntax is <literal>strftime</literal>-like. The string must\nconsist of the mandatory <literal>%Y %m %d %H %M %S</literal>.\nOptionally  <literal>- _ . :</literal>  characters as well as any\nalphanumeric character are allowed. If suffixed by a\n<literal>Z</literal>, times will be in UTC.\n","example":"znapzend-%m.%d.%Y-%H%M%SZ","loc":["services","znapzend","zetup","<name?>","timestampFormat"],"readOnly":false,"type":"string containing all of the characters %Y, %m, %d, %H, %M, %S"},"services.znc.confOptions.extraZncConf":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"","description":"Extra config to `znc.conf` file.\n","loc":["services","znc","confOptions","extraZncConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.znc.confOptions.modules":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":["webadmin","adminlog"],"description":"A list of modules to include in the `znc.conf` file.\n","example":["partyline","webadmin","adminlog","log"],"loc":["services","znc","confOptions","modules"],"readOnly":false,"type":"list of strings"},"services.znc.confOptions.networks":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":{},"description":"IRC networks to connect the user to.\n","example":{"freenode":{"modules":["simple_away"],"port":6697,"server":"chat.freenode.net","useSSL":true}},"loc":["services","znc","confOptions","networks"],"readOnly":false,"type":"attribute set of submodules"},"services.znc.confOptions.networks.<name>.channels":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":[],"description":"IRC channels to join.\n","example":["nixos"],"loc":["services","znc","confOptions","networks","<name>","channels"],"readOnly":false,"type":"list of strings"},"services.znc.confOptions.networks.<name>.extraConf":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"","description":"Extra config for the network.\n","example":"Encoding = ^UTF-8\nFloodBurst = 4\nFloodRate = 1.00\nIRCConnectEnabled = true\nIdent = johntron\nJoinDelay = 0\nNick = johntron\n","loc":["services","znc","confOptions","networks","<name>","extraConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.znc.confOptions.networks.<name>.hasBitlbeeControlChannel":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":false,"description":"Whether to add the special Bitlbee operations channel.\n","loc":["services","znc","confOptions","networks","<name>","hasBitlbeeControlChannel"],"readOnly":false,"type":"boolean"},"services.znc.confOptions.networks.<name>.modulePackages":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":[],"description":"External ZNC modules to build.\n","example":["pkgs.zncModules.push","pkgs.zncModules.fish"],"loc":["services","znc","confOptions","networks","<name>","modulePackages"],"readOnly":false,"type":"list of packages"},"services.znc.confOptions.networks.<name>.modules":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":["simple_away"],"description":"ZNC modules to load.\n","example":{"_type":"literalExample","text":"[ simple_away sasl ]"},"loc":["services","znc","confOptions","networks","<name>","modules"],"readOnly":false,"type":"list of strings"},"services.znc.confOptions.networks.<name>.password":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"","description":"IRC server password, such as for a Slack gateway.\n","loc":["services","znc","confOptions","networks","<name>","password"],"readOnly":false,"type":"string"},"services.znc.confOptions.networks.<name>.port":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":6697,"description":"IRC server port.\n","example":6697,"loc":["services","znc","confOptions","networks","<name>","port"],"readOnly":false,"type":"signed integer"},"services.znc.confOptions.networks.<name>.server":{"declarations":["nixos/modules/services/networking/znc.nix"],"description":"IRC server address.\n","example":"chat.freenode.net","loc":["services","znc","confOptions","networks","<name>","server"],"readOnly":false,"type":"string"},"services.znc.confOptions.networks.<name>.useSSL":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":true,"description":"Whether to use SSL to connect to the IRC server.\n","loc":["services","znc","confOptions","networks","<name>","useSSL"],"readOnly":false,"type":"boolean"},"services.znc.confOptions.networks.<name>.userName":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"","description":"A nick identity specific to the IRC server.\n","example":"johntron","loc":["services","znc","confOptions","networks","<name>","userName"],"readOnly":false,"type":"Concatenated string"},"services.znc.confOptions.nick":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"znc-user","description":"The IRC nick.\n","example":"john","loc":["services","znc","confOptions","nick"],"readOnly":false,"type":"Concatenated string"},"services.znc.confOptions.passBlock":{"declarations":["nixos/modules/services/networking/znc.nix"],"description":"Generate with `nix-shell -p znc --command \"znc --makepass\"`.\nThis is the password used to log in to the ZNC web admin interface.\n","example":"\n        <Pass password>\n                Method = sha256\n                Hash = e2ce303c7ea75c571d80d8540a8699b46535be6a085be3414947d638e48d9e93\n                Salt = l5Xryew4g*!oa(ECfX2o\n        </Pass>\n  ","loc":["services","znc","confOptions","passBlock"],"readOnly":false,"type":"Concatenated string"},"services.znc.confOptions.port":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":5000,"description":"Specifies the port on which to listen.\n","example":5000,"loc":["services","znc","confOptions","port"],"readOnly":false,"type":"signed integer"},"services.znc.confOptions.uriPrefix":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":null,"description":"An optional URI prefix for the ZNC web interface. Can be\nused to make ZNC available behind a reverse proxy.\n","example":"/znc/","loc":["services","znc","confOptions","uriPrefix"],"readOnly":false,"type":"null or string"},"services.znc.confOptions.useSSL":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":true,"description":"Indicates whether the ZNC server should use SSL when listening on the specified port. A self-signed certificate will be generated.\n","loc":["services","znc","confOptions","useSSL"],"readOnly":false,"type":"boolean"},"services.znc.confOptions.userModules":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":["chansaver","controlpanel"],"description":"A list of user modules to include in the `znc.conf` file.\n","example":["chansaver","controlpanel","fish","push"],"loc":["services","znc","confOptions","userModules"],"readOnly":false,"type":"list of strings"},"services.znc.confOptions.userName":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"znc","description":"The user name used to log in to the ZNC web admin interface.\n","example":"johntron","loc":["services","znc","confOptions","userName"],"readOnly":false,"type":"Concatenated string"},"services.znc.dataDir":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"/var/lib/znc/","description":"The data directory. Used for configuration files and modules.\n","example":"/home/john/.znc/","loc":["services","znc","dataDir"],"readOnly":false,"type":"path"},"services.znc.enable":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":false,"description":"Enable a ZNC service for a user.\n","loc":["services","znc","enable"],"readOnly":false,"type":"boolean"},"services.znc.extraFlags":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":[],"description":"Extra flags to use when executing znc command.\n","example":["--debug"],"loc":["services","znc","extraFlags"],"readOnly":false,"type":"list of strings"},"services.znc.group":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"","description":"Group to own the ZNCserver process.\n","example":"users","loc":["services","znc","group"],"readOnly":false,"type":"Concatenated string"},"services.znc.modulePackages":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":[],"description":"A list of global znc module packages to add to znc.\n","example":{"_type":"literalExample","text":"[ pkgs.zncModules.fish pkgs.zncModules.push ]"},"loc":["services","znc","modulePackages"],"readOnly":false,"type":"list of packages"},"services.znc.mutable":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":true,"description":"Indicates whether to allow the contents of the `dataDir` directory to be changed\nby the user at run-time.\nIf true, modifications to the ZNC configuration after its initial creation are not\n  overwritten by a NixOS system rebuild.\nIf false, the ZNC configuration is rebuilt by every system rebuild.\nIf the user wants to manage the ZNC service using the web admin interface, this value\n  should be set to true.\n","loc":["services","znc","mutable"],"readOnly":false,"type":"boolean"},"services.znc.openFirewall":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":false,"description":"Whether to open ports in the firewall for ZNC.\n","loc":["services","znc","openFirewall"],"readOnly":false,"type":"boolean"},"services.znc.user":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"znc","description":"The name of an existing user account to use to own the ZNC server process.\nIf not specified, a default user will be created to own the process.\n","example":"john","loc":["services","znc","user"],"readOnly":false,"type":"Concatenated string"},"services.znc.zncConf":{"declarations":["nixos/modules/services/networking/znc.nix"],"default":"","description":"Config file as generated with `znc --makeconf` to use for the whole ZNC configuration.\nIf specified, `confOptions` will be ignored, and this value, as-is, will be used.\nIf left empty, a conf file with default values will be used.\n","example":"See: http://wiki.znc.in/Configuration","loc":["services","znc","zncConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.zookeeper.dataDir":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":"/var/lib/zookeeper","description":"Data directory for Zookeeper\n","loc":["services","zookeeper","dataDir"],"readOnly":false,"type":"path"},"services.zookeeper.enable":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":false,"description":"Whether to enable Zookeeper.","loc":["services","zookeeper","enable"],"readOnly":false,"type":"boolean"},"services.zookeeper.extraCmdLineOptions":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":["-Dcom.sun.management.jmxremote","-Dcom.sun.management.jmxremote.local.only=true"],"description":"Extra command line options for the Zookeeper launcher.","example":["-Djava.net.preferIPv4Stack=true","-Dcom.sun.management.jmxremote","-Dcom.sun.management.jmxremote.local.only=true"],"loc":["services","zookeeper","extraCmdLineOptions"],"readOnly":false,"type":"list of strings"},"services.zookeeper.extraConf":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":"initLimit=5\nsyncLimit=2\ntickTime=2000\n","description":"Extra configuration for Zookeeper.","loc":["services","zookeeper","extraConf"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.zookeeper.id":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":0,"description":"Zookeeper ID.","loc":["services","zookeeper","id"],"readOnly":false,"type":"signed integer"},"services.zookeeper.logging":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":"zookeeper.root.logger=INFO, CONSOLE\nlog4j.rootLogger=INFO, CONSOLE\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=[myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n\n","description":"Zookeeper logging configuration.","loc":["services","zookeeper","logging"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.zookeeper.package":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":"pkgs.zookeeper","description":"The zookeeper package to use","loc":["services","zookeeper","package"],"readOnly":false,"type":"package"},"services.zookeeper.port":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":2181,"description":"Zookeeper Client port.","loc":["services","zookeeper","port"],"readOnly":false,"type":"signed integer"},"services.zookeeper.preferIPv4":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":true,"description":"Add the -Djava.net.preferIPv4Stack=true flag to the Zookeeper server.\n","loc":["services","zookeeper","preferIPv4"],"readOnly":false,"type":"boolean"},"services.zookeeper.purgeInterval":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":1,"description":"The time interval in hours for which the purge task has to be triggered. Set to a positive integer (1 and above) to enable the auto purging.\n","loc":["services","zookeeper","purgeInterval"],"readOnly":false,"type":"signed integer"},"services.zookeeper.servers":{"declarations":["nixos/modules/services/misc/zookeeper.nix"],"default":"","description":"All Zookeeper Servers.","example":"server.0=host0:2888:3888\nserver.1=host1:2888:3888\nserver.2=host2:2888:3888\n","loc":["services","zookeeper","servers"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"services.zope2.instances":{"declarations":["nixos/modules/services/web-servers/zope2.nix"],"default":{},"description":"zope2 instances to be created automaticaly by the system.","example":{"_type":"literalExample","text":"{\n  plone01 = {\n    http_address = \"127.0.0.1:8080\";\n    extra =\n      ''\n      <zodb_db main>\n        mount-point /\n        cache-size 30000\n        <blobstorage>\n            blob-dir /var/lib/zope2/plone01/blobstorage\n            <filestorage>\n            path /var/lib/zope2/plone01/filestorage/Data.fs\n            </filestorage>\n        </blobstorage>\n      </zodb_db>\n      '';\n  };\n}\n"},"loc":["services","zope2","instances"],"readOnly":false,"type":"attribute set of submodules"},"services.zope2.instances.<name>.clientHome":{"declarations":["nixos/modules/services/web-servers/zope2.nix"],"default":"/var/lib/zope2/‹name›","description":"Home directory of zope2 instance.","loc":["services","zope2","instances","<name>","clientHome"],"readOnly":false,"type":"Concatenated string"},"services.zope2.instances.<name>.extra":{"declarations":["nixos/modules/services/web-servers/zope2.nix"],"default":"<zodb_db main>\n  mount-point /\n  cache-size 30000\n  <blobstorage>\n      blob-dir /var/lib/zope2/‹name›/blobstorage\n      <filestorage>\n      path /var/lib/zope2/‹name›/filestorage/Data.fs\n      </filestorage>\n  </blobstorage>\n</zodb_db>\n","description":"Extra zope.conf","loc":["services","zope2","instances","<name>","extra"],"readOnly":false,"type":"Concatenated string"},"services.zope2.instances.<name>.http_address":{"declarations":["nixos/modules/services/web-servers/zope2.nix"],"default":"localhost:8080","description":"Give a port and address for the HTTP server.","loc":["services","zope2","instances","<name>","http_address"],"readOnly":false,"type":"Concatenated string"},"services.zope2.instances.<name>.name":{"declarations":["nixos/modules/services/web-servers/zope2.nix"],"default":"‹name›","description":"The name of the zope2 instance. If undefined, the name of the attribute set will be used.","loc":["services","zope2","instances","<name>","name"],"readOnly":false,"type":"Concatenated string"},"services.zope2.instances.<name>.packages":{"declarations":["nixos/modules/services/web-servers/zope2.nix"],"description":"The list of packages you want to make available to the zope2 instance.","loc":["services","zope2","instances","<name>","packages"],"readOnly":false,"type":"list of packages"},"services.zope2.instances.<name>.threads":{"declarations":["nixos/modules/services/web-servers/zope2.nix"],"default":2,"description":"Specify the number of threads that Zope's ZServer web server will use to service requests. ","loc":["services","zope2","instances","<name>","threads"],"readOnly":false,"type":"signed integer"},"services.zope2.instances.<name>.user":{"declarations":["nixos/modules/services/web-servers/zope2.nix"],"default":"zope2","description":"The name of the effective user for the Zope process.","loc":["services","zope2","instances","<name>","user"],"readOnly":false,"type":"Concatenated string"},"sound.enable":{"declarations":["nixos/modules/services/audio/alsa.nix"],"default":false,"description":"Whether to enable ALSA sound.\n","loc":["sound","enable"],"readOnly":false,"type":"boolean"},"sound.enableOSSEmulation":{"declarations":["nixos/modules/services/audio/alsa.nix"],"default":true,"description":"Whether to enable ALSA OSS emulation (with certain cards sound mixing may not work!).\n","loc":["sound","enableOSSEmulation"],"readOnly":false,"type":"boolean"},"sound.extraConfig":{"declarations":["nixos/modules/services/audio/alsa.nix"],"default":"","description":"Set addition configuration for system-wide alsa.\n","example":"defaults.pcm.!card 3\n","loc":["sound","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"sound.mediaKeys.enable":{"declarations":["nixos/modules/services/audio/alsa.nix"],"default":false,"description":"Whether to enable volume and capture control with keyboard media keys.\n\nYou want to leave this disabled if you run a desktop environment\nlike KDE, Gnome, Xfce, etc, as those handle such things themselves.\nYou might want to enable this if you run a minimalistic desktop\nenvironment or work from bare linux ttys/framebuffers.\n\nEnabling this will turn on <option>services.actkbd</option>.\n","loc":["sound","mediaKeys","enable"],"readOnly":false,"type":"boolean"},"sound.mediaKeys.volumeStep":{"declarations":["nixos/modules/services/audio/alsa.nix"],"default":"1","description":"The value by which to increment/decrement volume on media keys.\n\nSee amixer(1) for allowed values.\n","example":"1%","loc":["sound","mediaKeys","volumeStep"],"readOnly":false,"type":"Concatenated string"},"swapDevices":{"declarations":["nixos/modules/tasks/encrypted-devices.nix","nixos/modules/config/swap.nix"],"default":[],"description":"The swap devices and swap files.  These must have been\ninitialised using <command>mkswap</command>.  Each element\nshould be an attribute set specifying either the path of the\nswap device or file (<literal>device</literal>) or the label\nof the swap device (<literal>label</literal>, see\n<command>mkswap -L</command>).  Using a label is\nrecommended.\n","example":[{"device":"/dev/hda7"},{"device":"/var/swapfile"},{"label":"bigswap"}],"loc":["swapDevices"],"readOnly":false,"type":"list of submodules"},"swapDevices.*.device":{"declarations":["nixos/modules/config/swap.nix"],"description":"Path of the device.","example":"/dev/sda3","loc":["swapDevices","*","device"],"readOnly":false,"type":"string"},"swapDevices.*.encrypted.blkDev":{"declarations":["nixos/modules/tasks/encrypted-devices.nix"],"default":null,"description":"Location of the backing encrypted device.","example":"/dev/sda1","loc":["swapDevices","*","encrypted","blkDev"],"readOnly":false,"type":"null or string"},"swapDevices.*.encrypted.enable":{"declarations":["nixos/modules/tasks/encrypted-devices.nix"],"default":false,"description":"The block device is backed by an encrypted one, adds this device as a initrd luks entry.","loc":["swapDevices","*","encrypted","enable"],"readOnly":false,"type":"boolean"},"swapDevices.*.encrypted.keyFile":{"declarations":["nixos/modules/tasks/encrypted-devices.nix"],"default":null,"description":"File system location of keyfile. This unlocks the drive after the root has been mounted to <literal>/mnt-root</literal>.","example":"/mnt-root/root/.swapkey","loc":["swapDevices","*","encrypted","keyFile"],"readOnly":false,"type":"null or string"},"swapDevices.*.encrypted.label":{"declarations":["nixos/modules/tasks/encrypted-devices.nix"],"default":null,"description":"Label of the unlocked encrypted device. Set <literal>fileSystems.&lt;name?&gt;.device</literal> to <literal>/dev/mapper/&lt;label&gt;</literal> to mount the unlocked device.","example":"rootfs","loc":["swapDevices","*","encrypted","label"],"readOnly":false,"type":"null or string"},"swapDevices.*.label":{"declarations":["nixos/modules/config/swap.nix"],"description":"Label of the device.  Can be used instead of <varname>device</varname>.\n","example":"swap","loc":["swapDevices","*","label"],"readOnly":false,"type":"string"},"swapDevices.*.priority":{"declarations":["nixos/modules/config/swap.nix"],"default":null,"description":"Specify the priority of the swap device. Priority is a value between 0 and 32767.\nHigher numbers indicate higher priority.\nnull lets the kernel choose a priority, which will show up as a negative value.\n","example":2048,"loc":["swapDevices","*","priority"],"readOnly":false,"type":"null or signed integer"},"swapDevices.*.randomEncryption":{"declarations":["nixos/modules/config/swap.nix"],"default":false,"description":"Encrypt swap device with a random key. This way you won't have a persistent swap device.\n\nHINT: run \"cryptsetup benchmark\" to test cipher performance on your machine.\n\nWARNING: Don't try to hibernate when you have at least one swap partition with\nthis option enabled! We have no way to set the partition into which hibernation image\nis saved, so if your image ends up on an encrypted one you would lose it!\n\nWARNING #2: Do not use /dev/disk/by-uuid/… or /dev/disk/by-label/… as your swap device\nwhen using randomEncryption as the UUIDs and labels will get erased on every boot when\nthe partition is encrypted. Best to use /dev/disk/by-partuuid/…\n","example":{"cipher":"serpent-xts-plain64","enable":true,"source":"/dev/random"},"loc":["swapDevices","*","randomEncryption"],"readOnly":false,"type":"submodule or boolean convertible to it"},"swapDevices.*.randomEncryption.cipher":{"declarations":["nixos/modules/config/swap.nix"],"default":"aes-xts-plain64","description":"Use specified cipher for randomEncryption.\n\nHint: Run \"cryptsetup benchmark\" to see which one is fastest on your machine.\n","example":"serpent-xts-plain64","loc":["swapDevices","*","randomEncryption","cipher"],"readOnly":false,"type":"string"},"swapDevices.*.randomEncryption.enable":{"declarations":["nixos/modules/config/swap.nix"],"default":false,"description":"Encrypt swap device with a random key. This way you won't have a persistent swap device.\n\nWARNING: Don't try to hibernate when you have at least one swap partition with\nthis option enabled! We have no way to set the partition into which hibernation image\nis saved, so if your image ends up on an encrypted one you would lose it!\n\nWARNING #2: Do not use /dev/disk/by-uuid/… or /dev/disk/by-label/… as your swap device\nwhen using randomEncryption as the UUIDs and labels will get erased on every boot when\nthe partition is encrypted. Best to use /dev/disk/by-partuuid/…\n","loc":["swapDevices","*","randomEncryption","enable"],"readOnly":false,"type":"boolean"},"swapDevices.*.randomEncryption.source":{"declarations":["nixos/modules/config/swap.nix"],"default":"/dev/urandom","description":"Define the source of randomness to obtain a random key for encryption.\n","example":"/dev/random","loc":["swapDevices","*","randomEncryption","source"],"readOnly":false,"type":"string"},"swapDevices.*.size":{"declarations":["nixos/modules/config/swap.nix"],"default":null,"description":"If this option is set, ‘device’ is interpreted as the\npath of a swapfile that will be created automatically\nwith the indicated size (in megabytes).\n","example":2048,"loc":["swapDevices","*","size"],"readOnly":false,"type":"null or signed integer"},"system.activationScripts":{"declarations":["nixos/modules/system/activation/activation-script.nix"],"default":{},"description":"A set of shell script fragments that are executed when a NixOS\nsystem configuration is activated.  Examples are updating\n/etc, creating accounts, and so on.  Since these are executed\nevery time you boot the system or run\n<command>nixos-rebuild</command>, it's important that they are\nidempotent and fast.\n","example":{"_type":"literalExample","text":"{ stdio = {\n    text = ''\n      # Needed by some programs.\n      ln -sfn /proc/self/fd /dev/fd\n      ln -sfn /proc/self/fd/0 /dev/stdin\n      ln -sfn /proc/self/fd/1 /dev/stdout\n      ln -sfn /proc/self/fd/2 /dev/stderr\n    '';\n    deps = [];\n  };\n}\n"},"loc":["system","activationScripts"],"readOnly":false,"type":"attribute set of unspecifieds"},"system.autoUpgrade.channel":{"declarations":["nixos/modules/installer/tools/auto-upgrade.nix"],"default":null,"description":"The URI of the NixOS channel to use for automatic\nupgrades. By default, this is the channel set using\n<command>nix-channel</command> (run <literal>nix-channel\n--list</literal> to see the current value).\n","example":"https://nixos.org/channels/nixos-14.12-small","loc":["system","autoUpgrade","channel"],"readOnly":false,"type":"null or string"},"system.autoUpgrade.dates":{"declarations":["nixos/modules/installer/tools/auto-upgrade.nix"],"default":"04:40","description":"Specification (in the format described by\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>) of the time at\nwhich the update will occur.\n","loc":["system","autoUpgrade","dates"],"readOnly":false,"type":"string"},"system.autoUpgrade.enable":{"declarations":["nixos/modules/installer/tools/auto-upgrade.nix"],"default":false,"description":"Whether to periodically upgrade NixOS to the latest\nversion. If enabled, a systemd timer will run\n<literal>nixos-rebuild switch --upgrade</literal> once a\nday.\n","loc":["system","autoUpgrade","enable"],"readOnly":false,"type":"boolean"},"system.autoUpgrade.flags":{"declarations":["nixos/modules/installer/tools/auto-upgrade.nix"],"default":[],"description":"Any additional flags passed to <command>nixos-rebuild</command>.\n","example":["-I","stuff=/home/alice/nixos-stuff","--option","extra-binary-caches","http://my-cache.example.org/"],"loc":["system","autoUpgrade","flags"],"readOnly":false,"type":"list of strings"},"system.copySystemConfiguration":{"declarations":["nixos/modules/system/activation/top-level.nix"],"default":false,"description":"If enabled, copies the NixOS configuration file\n(usually <filename>/etc/nixos/configuration.nix</filename>)\nand links it from the resulting system\n(getting to <filename>/run/current-system/configuration.nix</filename>).\nNote that only this single file is copied, even if it imports others.\n","loc":["system","copySystemConfiguration"],"readOnly":false,"type":"boolean"},"system.extraDependencies":{"declarations":["nixos/modules/system/activation/top-level.nix"],"default":[],"description":"A list of packages that should be included in the system\nclosure but not otherwise made available to users. This is\nprimarily used by the installation tests.\n","loc":["system","extraDependencies"],"readOnly":false,"type":"list of packages"},"system.nixos.codeName":{"declarations":["nixos/modules/misc/version.nix"],"description":"The NixOS release code name (e.g. <literal>Emu</literal>).","loc":["system","nixos","codeName"],"readOnly":true,"type":"string"},"system.nixos.label":{"declarations":["nixos/modules/misc/label.nix"],"description":"NixOS version name to be used in the names of generated\noutputs and boot labels.\n\nIf you ever wanted to influence the labels in your GRUB menu,\nthis is the option for you.\n\nThe default is <option>system.nixos.tags</option> separated by\n\"-\" + \"-\" + <envar>NIXOS_LABEL_VERSION</envar> environment\nvariable (defaults to the value of\n<option>system.nixos.version</option>).\n\nCan be overriden by setting <envar>NIXOS_LABEL</envar>.\n\nUseful for not loosing track of configurations built from different\nnixos branches/revisions, e.g.:\n\n<screen>\n#!/bin/sh\ntoday=`date +%Y%m%d`\nbranch=`(cd nixpkgs ; git branch 2>/dev/null | sed -n '/^\\* / { s|^\\* ||; p; }')`\nrevision=`(cd nixpkgs ; git rev-parse HEAD)`\nexport NIXOS_LABEL_VERSION=\"$today.$branch-${revision:0:7}\"\nnixos-rebuild switch</screen>\n","loc":["system","nixos","label"],"readOnly":false,"type":"string"},"system.nixos.release":{"declarations":["nixos/modules/misc/version.nix"],"default":"19.03","description":"The NixOS release (e.g. <literal>16.03</literal>).","loc":["system","nixos","release"],"readOnly":true,"type":"string"},"system.nixos.tags":{"declarations":["nixos/modules/misc/label.nix"],"default":[],"description":"Strings to prefix to the default\n<option>system.nixos.label</option>.\n\nUseful for not loosing track of configurations built with\ndifferent options, e.g.:\n\n<screen>\n{\n  system.nixos.tags = [ \"with-xen\" ];\n  virtualisation.xen.enable = true;\n}\n</screen>\n","example":["with-xen"],"loc":["system","nixos","tags"],"readOnly":false,"type":"list of strings"},"system.replaceRuntimeDependencies":{"declarations":["nixos/modules/system/activation/top-level.nix"],"default":[],"description":"List of packages to override without doing a full rebuild.\nThe original derivation and replacement derivation must have the same\nname length, and ideally should have close-to-identical directory layout.\n","example":{"_type":"literalExample","text":"[ ({ original = pkgs.openssl; replacement = pkgs.callPackage /path/to/openssl { }; }) ]"},"loc":["system","replaceRuntimeDependencies"],"readOnly":false,"type":"list of submodules"},"system.replaceRuntimeDependencies.*.original":{"declarations":["nixos/modules/system/activation/top-level.nix"],"description":"The original package to override.","loc":["system","replaceRuntimeDependencies","*","original"],"readOnly":false,"type":"package"},"system.replaceRuntimeDependencies.*.replacement":{"declarations":["nixos/modules/system/activation/top-level.nix"],"description":"The replacement package.","loc":["system","replaceRuntimeDependencies","*","replacement"],"readOnly":false,"type":"package"},"system.stateVersion":{"declarations":["nixos/modules/misc/version.nix"],"default":"19.03","description":"Every once in a while, a new NixOS release may change\nconfiguration defaults in a way incompatible with stateful\ndata. For instance, if the default version of PostgreSQL\nchanges, the new version will probably be unable to read your\nexisting databases. To prevent such breakage, you can set the\nvalue of this option to the NixOS release with which you want\nto be compatible. The effect is that NixOS will option\ndefaults corresponding to the specified release (such as using\nan older version of PostgreSQL).\n","loc":["system","stateVersion"],"readOnly":false,"type":"string"},"system.userActivationScripts":{"declarations":["nixos/modules/system/activation/activation-script.nix"],"default":{},"description":"A set of shell script fragments that are executed by a systemd user\nservice when a NixOS system configuration is activated. Examples are\nrebuilding the .desktop file cache for showing applications in the menu.\nSince these are executed every time you run\n<command>nixos-rebuild</command>, it's important that they are\nidempotent and fast.\n","example":{"_type":"literalExample","text":"{ plasmaSetup = {\n    text = ''\n      ${pkgs.libsForQt5.kservice}/bin/kbuildsycoca5\"\n    '';\n    deps = [];\n  };\n}\n"},"loc":["system","userActivationScripts"],"readOnly":false,"type":"attribute set of unspecifieds"},"systemd.additionalUpstreamSystemUnits":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Additional units shipped with systemd that shall be enabled.\n","example":["debug-shell.service","systemd-quotacheck.service"],"loc":["systemd","additionalUpstreamSystemUnits"],"readOnly":false,"type":"list of strings"},"systemd.automounts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Definition of systemd automount units.\nThis is a list instead of an attrSet, because systemd mandates the names to be derived from\nthe 'where' attribute.\n","loc":["systemd","automounts"],"readOnly":false,"type":"list of submodules"},"systemd.automounts.*.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","automounts","*","after"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","automounts","*","aliases"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.automountConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Automount]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.automount</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"DirectoryMode":"0775"},"loc":["systemd","automounts","*","automountConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.automounts.*.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","automounts","*","before"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","automounts","*","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","automounts","*","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","automounts","*","description"],"readOnly":false,"type":"string"},"systemd.automounts.*.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","automounts","*","documentation"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","automounts","*","enable"],"readOnly":false,"type":"boolean"},"systemd.automounts.*.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","automounts","*","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","automounts","*","partOf"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","automounts","*","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","automounts","*","requires"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","automounts","*","requisite"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","automounts","*","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.automounts.*.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","automounts","*","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.automounts.*.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","automounts","*","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","automounts","*","wants"],"readOnly":false,"type":"list of strings"},"systemd.automounts.*.where":{"declarations":["nixos/modules/system/boot/systemd.nix"],"description":"Absolute path of a directory of the mount point.\nWill be created if it doesn't exist. (Mandatory)\n","example":"/mnt","loc":["systemd","automounts","*","where"],"readOnly":false,"type":"string"},"systemd.coredump.enable":{"declarations":["nixos/modules/system/boot/coredump.nix"],"default":false,"description":"Enables storing core dumps in systemd.\nNote that this alone is not enough to enable core dumps. The maximum\nfile size for core dumps must be specified in limits.conf as well. See\n<option>security.pam.loginLimits</option> and the limits.conf(5)\nman page (these specify the core dump limits for user login sessions)\nand <option>systemd.extraConfig</option> (where e.g.\n<literal>DefaultLimitCORE=1000000</literal> can be specified to set\nthe core dump limit for systemd system-level services).\n","loc":["systemd","coredump","enable"],"readOnly":false,"type":"boolean"},"systemd.coredump.extraConfig":{"declarations":["nixos/modules/system/boot/coredump.nix"],"default":"","description":"Extra config options for systemd-coredump. See coredump.conf(5) man page\nfor available options.\n","example":"Storage=journal","loc":["systemd","coredump","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.ctrlAltDelUnit":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"reboot.target","description":"Target that should be started when Ctrl-Alt-Delete is pressed.\n","example":"poweroff.target","loc":["systemd","ctrlAltDelUnit"],"readOnly":false,"type":"string"},"systemd.defaultUnit":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"multi-user.target","description":"Default unit started when the system boots.","loc":["systemd","defaultUnit"],"readOnly":false,"type":"string"},"systemd.enableCgroupAccounting":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":false,"description":"Whether to enable cgroup accounting.\n","loc":["systemd","enableCgroupAccounting"],"readOnly":false,"type":"boolean"},"systemd.enableEmergencyMode":{"declarations":["nixos/modules/system/boot/emergency-mode.nix"],"default":true,"description":"Whether to enable emergency mode, which is an\n<command>sulogin</command> shell started on the console if\nmounting a filesystem fails.  Since some machines (like EC2\ninstances) have no console of any kind, emergency mode doesn't\nmake sense, and it's better to continue with the boot insofar\nas possible.\n","loc":["systemd","enableEmergencyMode"],"readOnly":false,"type":"boolean"},"systemd.extraConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Extra config options for systemd. See man systemd-system.conf for\navailable options.\n","example":"DefaultLimitCORE=infinity","loc":["systemd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.generator-packages":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Packages providing systemd generators.","example":{"_type":"literalExample","text":"[ pkgs.systemd-cryptsetup-generator ]"},"loc":["systemd","generator-packages"],"readOnly":false,"type":"list of packages"},"systemd.generators":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd generators.\nFor each <literal>NAME = VALUE</literal> pair of the attrSet, a link is generated from\n<literal>/etc/systemd/system-generators/NAME</literal> to <literal>VALUE</literal>.\n","example":{"systemd-gpt-auto-generator":"/dev/null"},"loc":["systemd","generators"],"readOnly":false,"type":"attribute set of paths"},"systemd.globalEnvironment":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Environment variables passed to <emphasis>all</emphasis> systemd units.\n","example":{"TZ":"CET"},"loc":["systemd","globalEnvironment"],"readOnly":false,"type":"attribute set of null or string or path or packages"},"systemd.mounts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Definition of systemd mount units.\nThis is a list instead of an attrSet, because systemd mandates the names to be derived from\nthe 'where' attribute.\n","loc":["systemd","mounts"],"readOnly":false,"type":"list of submodules"},"systemd.mounts.*.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","mounts","*","after"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","mounts","*","aliases"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","mounts","*","before"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","mounts","*","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","mounts","*","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","mounts","*","description"],"readOnly":false,"type":"string"},"systemd.mounts.*.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","mounts","*","documentation"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","mounts","*","enable"],"readOnly":false,"type":"boolean"},"systemd.mounts.*.mountConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Mount]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.mount</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"DirectoryMode":"0775"},"loc":["systemd","mounts","*","mountConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.mounts.*.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","mounts","*","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.options":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Options used to mount the file system.","example":"noatime","loc":["systemd","mounts","*","options"],"readOnly":false,"type":"strings concatenated with \",\""},"systemd.mounts.*.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","mounts","*","partOf"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","mounts","*","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","mounts","*","requires"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","mounts","*","requisite"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","mounts","*","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.mounts.*.type":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"File system type.","example":"ext4","loc":["systemd","mounts","*","type"],"readOnly":false,"type":"string"},"systemd.mounts.*.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","mounts","*","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.mounts.*.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","mounts","*","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","mounts","*","wants"],"readOnly":false,"type":"list of strings"},"systemd.mounts.*.what":{"declarations":["nixos/modules/system/boot/systemd.nix"],"description":"Absolute path of device node, file or other resource. (Mandatory)","example":"/dev/sda1","loc":["systemd","mounts","*","what"],"readOnly":false,"type":"string"},"systemd.mounts.*.where":{"declarations":["nixos/modules/system/boot/systemd.nix"],"description":"Absolute path of a directory of the mount point.\nWill be created if it doesn't exist. (Mandatory)\n","example":"/mnt","loc":["systemd","mounts","*","where"],"readOnly":false,"type":"string"},"systemd.network.enable":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":false,"description":"Whether to enable networkd or not.\n","loc":["systemd","network","enable"],"readOnly":false,"type":"boolean"},"systemd.network.links":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Definition of systemd network links.","loc":["systemd","network","links"],"readOnly":false,"type":"attribute set of submodules"},"systemd.network.links.<name>.enable":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":true,"description":"Whether to manage network configuration using <command>systemd-network</command>.\n","loc":["systemd","network","links","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.network.links.<name>.extraConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":"","description":"Extra configuration append to unit","loc":["systemd","network","links","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.network.links.<name>.linkConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Link]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.link</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"MACAddress":"00:ff:ee:aa:cc:dd"},"loc":["systemd","network","links","<name>","linkConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.links.<name>.matchConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Match]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.link</refentrytitle><manvolnum>5</manvolnum></citerefentry>\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle><manvolnum>5</manvolnum></citerefentry>\n<citerefentry><refentrytitle>systemd.network</refentrytitle><manvolnum>5</manvolnum></citerefentry>\nfor details.\n","example":{"Name":"eth0"},"loc":["systemd","network","links","<name>","matchConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Definition of systemd network devices.","loc":["systemd","network","netdevs"],"readOnly":false,"type":"attribute set of submodules"},"systemd.network.netdevs.<name>.bondConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Bond]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Mode":"802.3ad"},"loc":["systemd","network","netdevs","<name>","bondConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.enable":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":true,"description":"Whether to manage network configuration using <command>systemd-network</command>.\n","loc":["systemd","network","netdevs","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.network.netdevs.<name>.extraConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":"","description":"Extra configuration append to unit","loc":["systemd","network","netdevs","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.network.netdevs.<name>.macvlanConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[MACVLAN]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Mode":"private"},"loc":["systemd","network","netdevs","<name>","macvlanConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.matchConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Match]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.link</refentrytitle><manvolnum>5</manvolnum></citerefentry>\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle><manvolnum>5</manvolnum></citerefentry>\n<citerefentry><refentrytitle>systemd.network</refentrytitle><manvolnum>5</manvolnum></citerefentry>\nfor details.\n","example":{"Name":"eth0"},"loc":["systemd","network","netdevs","<name>","matchConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.netdevConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Netdev]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Kind":"bridge","Name":"mybridge"},"loc":["systemd","network","netdevs","<name>","netdevConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.peerConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Peer]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Name":"veth2"},"loc":["systemd","network","netdevs","<name>","peerConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.tapConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Tap]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"User":"openvpn"},"loc":["systemd","network","netdevs","<name>","tapConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.tunConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Tun]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"User":"openvpn"},"loc":["systemd","network","netdevs","<name>","tunConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.tunnelConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Tunnel]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Remote":"192.168.1.1"},"loc":["systemd","network","netdevs","<name>","tunnelConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.vlanConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[VLAN]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Id":"4"},"loc":["systemd","network","netdevs","<name>","vlanConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.netdevs.<name>.vxlanConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[VXLAN]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Id":"4"},"loc":["systemd","network","netdevs","<name>","vxlanConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.networks":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Definition of systemd networks.","loc":["systemd","network","networks"],"readOnly":false,"type":"attribute set of submodules"},"systemd.network.networks.<name>.DHCP":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":null,"description":"Whether to enable DHCP on the interfaces matched.\n","loc":["systemd","network","networks","<name>","DHCP"],"readOnly":false,"type":"null or string"},"systemd.network.networks.<name>.address":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of addresses to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","address"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.addresses":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of address sections to be added to the unit.  See\n<citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","addresses"],"readOnly":false,"type":"list of submodules"},"systemd.network.networks.<name>.addresses.*.addressConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Address]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Address":"192.168.0.100/24"},"loc":["systemd","network","networks","<name>","addresses","*","addressConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.networks.<name>.bond":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of bond interfaces to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","bond"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.bridge":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of bridge interfaces to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","bridge"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.dhcpConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[DHCP]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"UseDNS":true,"UseRoutes":true},"loc":["systemd","network","networks","<name>","dhcpConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.networks.<name>.dhcpServerConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[DHCPServer]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"EmitDNS":false,"PoolOffset":50},"loc":["systemd","network","networks","<name>","dhcpServerConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.networks.<name>.dns":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of dns servers to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","dns"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.domains":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":null,"description":"A list of domains to pass to the network config.\n","loc":["systemd","network","networks","<name>","domains"],"readOnly":false,"type":"null or list of strings"},"systemd.network.networks.<name>.enable":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":true,"description":"Whether to manage network configuration using <command>systemd-network</command>.\n","loc":["systemd","network","networks","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.network.networks.<name>.extraConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":"","description":"Extra configuration append to unit","loc":["systemd","network","networks","<name>","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.network.networks.<name>.gateway":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of gateways to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","gateway"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.linkConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Link]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Unmanaged":true},"loc":["systemd","network","networks","<name>","linkConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.networks.<name>.macvlan":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of macvlan interfaces to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","macvlan"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.matchConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Match]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.link</refentrytitle><manvolnum>5</manvolnum></citerefentry>\n<citerefentry><refentrytitle>systemd.netdev</refentrytitle><manvolnum>5</manvolnum></citerefentry>\n<citerefentry><refentrytitle>systemd.network</refentrytitle><manvolnum>5</manvolnum></citerefentry>\nfor details.\n","example":{"Name":"eth0"},"loc":["systemd","network","networks","<name>","matchConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.networks.<name>.name":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":null,"description":"The name of the network interface to match against.\n","loc":["systemd","network","networks","<name>","name"],"readOnly":false,"type":"null or string"},"systemd.network.networks.<name>.networkConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Network]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Description":"My Network"},"loc":["systemd","network","networks","<name>","networkConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.networks.<name>.ntp":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of ntp servers to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","ntp"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.routes":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of route sections to be added to the unit.  See\n<citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","routes"],"readOnly":false,"type":"list of submodules"},"systemd.network.networks.<name>.routes.*.routeConfig":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Route]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Gateway":"192.168.0.1"},"loc":["systemd","network","networks","<name>","routes","*","routeConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.network.networks.<name>.tunnel":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of tunnel interfaces to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","tunnel"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.vlan":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of vlan interfaces to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","vlan"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.vrf":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of vrf interfaces to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","vrf"],"readOnly":false,"type":"list of strings"},"systemd.network.networks.<name>.vxlan":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"A list of vxlan interfaces to be added to the network section of the\nunit.  See <citerefentry><refentrytitle>systemd.network</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","loc":["systemd","network","networks","<name>","vxlan"],"readOnly":false,"type":"list of strings"},"systemd.network.units":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":{},"description":"Definition of networkd units.","loc":["systemd","network","units"],"readOnly":false,"type":"attribute set of submodules"},"systemd.network.units.<name>.aliases":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","network","units","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.network.units.<name>.enable":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","network","units","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.network.units.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","network","units","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.network.units.<name>.text":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":null,"description":"Text of this systemd unit.","loc":["systemd","network","units","<name>","text"],"readOnly":false,"type":"null or string"},"systemd.network.units.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/networkd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","network","units","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.nspawn":{"declarations":["nixos/modules/system/boot/systemd-nspawn.nix"],"default":{},"description":"Definition of systemd-nspawn configurations.","loc":["systemd","nspawn"],"readOnly":false,"type":"attribute set of submodules"},"systemd.nspawn.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd-nspawn.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","nspawn","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.nspawn.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd-nspawn.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","nspawn","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.nspawn.<name>.execConfig":{"declarations":["nixos/modules/system/boot/systemd-nspawn.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Exec]</literal> section of this unit. See\n<citerefentry><refentrytitle>systemd.nspawn</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Parameters":"/bin/sh"},"loc":["systemd","nspawn","<name>","execConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.nspawn.<name>.filesConfig":{"declarations":["nixos/modules/system/boot/systemd-nspawn.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Files]</literal> section of this unit. See\n<citerefentry><refentrytitle>systemd.nspawn</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Bind":["/home/alice"]},"loc":["systemd","nspawn","<name>","filesConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.nspawn.<name>.networkConfig":{"declarations":["nixos/modules/system/boot/systemd-nspawn.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Network]</literal> section of this unit. See\n<citerefentry><refentrytitle>systemd.nspawn</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"Private":false},"loc":["systemd","nspawn","<name>","networkConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.nspawn.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd-nspawn.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","nspawn","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.nspawn.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd-nspawn.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","nspawn","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.package":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"pkgs.systemd","description":"The systemd package.","loc":["systemd","package"],"readOnly":false,"type":"package"},"systemd.packages":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Packages providing systemd units.","loc":["systemd","packages"],"readOnly":false,"type":"list of packages"},"systemd.paths":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd path units.","loc":["systemd","paths"],"readOnly":false,"type":"attribute set of submodules"},"systemd.paths.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","paths","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","paths","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","paths","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","paths","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","paths","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","paths","<name>","description"],"readOnly":false,"type":"string"},"systemd.paths.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","paths","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","paths","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.paths.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","paths","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","paths","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.pathConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Path]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.path</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"PathChanged":"/some/path","Unit":"changedpath.service"},"loc":["systemd","paths","<name>","pathConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.paths.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","paths","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","paths","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","paths","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","paths","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.paths.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","paths","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.paths.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","paths","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.paths.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","paths","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.services":{"declarations":["nixos/modules/testing/service-runner.nix","nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd service units.","loc":["systemd","services"],"readOnly":false,"type":"attribute set of submodules"},"systemd.services.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","services","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","services","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","services","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","services","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","services","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","services","<name>","description"],"readOnly":false,"type":"string"},"systemd.services.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","services","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","services","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.services.<name>.environment":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Environment variables passed to the service's processes.","example":{"LANG":"nl_NL.UTF-8","PATH":"/foo/bar/bin"},"loc":["systemd","services","<name>","environment"],"readOnly":false,"type":"attribute set of null or string or path or packages"},"systemd.services.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","services","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","services","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.path":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Packages added to the service's <envar>PATH</envar>\nenvironment variable.  Both the <filename>bin</filename>\nand <filename>sbin</filename> subdirectories of each\npackage are added.\n","loc":["systemd","services","<name>","path"],"readOnly":false,"type":"unspecified"},"systemd.services.<name>.postStart":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed after the service's main process\nis started.\n","loc":["systemd","services","<name>","postStart"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.services.<name>.postStop":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed after the service's main process\nhas exited.\n","loc":["systemd","services","<name>","postStop"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.services.<name>.preStart":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed before the service's main process\nis started.\n","loc":["systemd","services","<name>","preStart"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.services.<name>.preStop":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed to stop the service.\n","loc":["systemd","services","<name>","preStop"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.services.<name>.reload":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed when the service's main process\nis reloaded.\n","loc":["systemd","services","<name>","reload"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.services.<name>.reloadIfChanged":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":false,"description":"Whether the service should be reloaded during a NixOS\nconfiguration switch if its definition has changed.  If\nenabled, the value of <option>restartIfChanged</option> is\nignored.\n","loc":["systemd","services","<name>","reloadIfChanged"],"readOnly":false,"type":"boolean"},"systemd.services.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","services","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","services","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","services","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.restartIfChanged":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"Whether the service should be restarted during a NixOS\nconfiguration switch if its definition has changed.\n","loc":["systemd","services","<name>","restartIfChanged"],"readOnly":false,"type":"boolean"},"systemd.services.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","services","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.services.<name>.script":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed as the service's main process.","loc":["systemd","services","<name>","script"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.services.<name>.scriptArgs":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Arguments passed to the main process script.","loc":["systemd","services","<name>","scriptArgs"],"readOnly":false,"type":"string"},"systemd.services.<name>.serviceConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Service]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.service</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RestartSec":5,"StartLimitInterval":10},"loc":["systemd","services","<name>","serviceConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.services.<name>.startAt":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Automatically start this unit at the given date/time, which\nmust be in the format described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.  This is equivalent\nto adding a corresponding timer unit with\n<option>OnCalendar</option> set to the value given here.\n","example":"Sun 14:00:00","loc":["systemd","services","<name>","startAt"],"readOnly":false,"type":"string or list of strings"},"systemd.services.<name>.stopIfChanged":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set, a changed unit is restarted by calling\n<command>systemctl stop</command> in the old configuration,\nthen <command>systemctl start</command> in the new one.\nOtherwise, it is restarted in a single step using\n<command>systemctl restart</command> in the new configuration.\nThe latter is less correct because it runs the\n<literal>ExecStop</literal> commands from the new\nconfiguration.\n","loc":["systemd","services","<name>","stopIfChanged"],"readOnly":false,"type":"boolean"},"systemd.services.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","services","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.services.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","services","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.services.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","services","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.slices":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of slice configurations.","loc":["systemd","slices"],"readOnly":false,"type":"attribute set of submodules"},"systemd.slices.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","slices","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","slices","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","slices","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","slices","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","slices","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","slices","<name>","description"],"readOnly":false,"type":"string"},"systemd.slices.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","slices","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","slices","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.slices.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","slices","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","slices","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","slices","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","slices","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","slices","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","slices","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.slices.<name>.sliceConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Slice]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.slice</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"MemoryMax":"2G"},"loc":["systemd","slices","<name>","sliceConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.slices.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","slices","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.slices.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","slices","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.slices.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","slices","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.sockets":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd socket units.","loc":["systemd","sockets"],"readOnly":false,"type":"attribute set of submodules"},"systemd.sockets.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","sockets","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","sockets","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","sockets","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","sockets","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","sockets","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","sockets","<name>","description"],"readOnly":false,"type":"string"},"systemd.sockets.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","sockets","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","sockets","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.sockets.<name>.listenStreams":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"For each item in this list, a <literal>ListenStream</literal>\noption in the <literal>[Socket]</literal> section will be created.\n","example":["0.0.0.0:993","/run/my-socket"],"loc":["systemd","sockets","<name>","listenStreams"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","sockets","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","sockets","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","sockets","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","sockets","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","sockets","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","sockets","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.sockets.<name>.socketConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Socket]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.socket</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"ListenStream":"/run/my-socket"},"loc":["systemd","sockets","<name>","socketConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.sockets.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","sockets","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.sockets.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","sockets","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.sockets.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","sockets","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.targets":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd target units.","loc":["systemd","targets"],"readOnly":false,"type":"attribute set of submodules"},"systemd.targets.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","targets","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","targets","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","targets","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","targets","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","targets","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","targets","<name>","description"],"readOnly":false,"type":"string"},"systemd.targets.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","targets","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","targets","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.targets.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","targets","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","targets","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","targets","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","targets","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","targets","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","targets","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.targets.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","targets","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.targets.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","targets","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.targets.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","targets","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.timers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd timer units.","loc":["systemd","timers"],"readOnly":false,"type":"attribute set of submodules"},"systemd.timers.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","timers","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","timers","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","timers","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","timers","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","timers","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","timers","<name>","description"],"readOnly":false,"type":"string"},"systemd.timers.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","timers","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","timers","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.timers.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","timers","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","timers","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","timers","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","timers","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","timers","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","timers","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.timers.<name>.timerConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Timer]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.timer</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> and\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry> for details.\n","example":{"OnCalendar":"Sun 14:00:00","Unit":"foo.service"},"loc":["systemd","timers","<name>","timerConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.timers.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","timers","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.timers.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","timers","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.timers.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","timers","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.tmpfiles.rules":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Rules for creating and cleaning up temporary files\nautomatically. See\n<citerefentry><refentrytitle>tmpfiles.d</refentrytitle><manvolnum>5</manvolnum></citerefentry>\nfor the exact format.\n","example":["d /tmp 1777 root root 10d"],"loc":["systemd","tmpfiles","rules"],"readOnly":false,"type":"list of strings"},"systemd.units":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd units.","loc":["systemd","units"],"readOnly":false,"type":"attribute set of submodules"},"systemd.units.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","units","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.units.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","units","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.units.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","units","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.units.<name>.text":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":null,"description":"Text of this systemd unit.","loc":["systemd","units","<name>","text"],"readOnly":false,"type":"null or string"},"systemd.units.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","units","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.user.extraConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Extra config options for systemd user instances. See man systemd-user.conf for\navailable options.\n","example":"DefaultCPUAccounting=yes","loc":["systemd","user","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.user.paths":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd per-user path units.","loc":["systemd","user","paths"],"readOnly":false,"type":"attribute set of submodules"},"systemd.user.paths.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","user","paths","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","user","paths","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","user","paths","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","user","paths","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","user","paths","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","user","paths","<name>","description"],"readOnly":false,"type":"string"},"systemd.user.paths.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","user","paths","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","user","paths","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.user.paths.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","user","paths","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","user","paths","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.pathConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Path]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.path</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"PathChanged":"/some/path","Unit":"changedpath.service"},"loc":["systemd","user","paths","<name>","pathConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.paths.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","user","paths","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","user","paths","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","user","paths","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","user","paths","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.user.paths.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","user","paths","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.paths.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","user","paths","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.user.paths.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","user","paths","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.user.services":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd per-user service units.","loc":["systemd","user","services"],"readOnly":false,"type":"attribute set of submodules"},"systemd.user.services.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","user","services","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","user","services","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","user","services","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","user","services","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","user","services","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","user","services","<name>","description"],"readOnly":false,"type":"string"},"systemd.user.services.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","user","services","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","user","services","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.user.services.<name>.environment":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Environment variables passed to the service's processes.","example":{"LANG":"nl_NL.UTF-8","PATH":"/foo/bar/bin"},"loc":["systemd","user","services","<name>","environment"],"readOnly":false,"type":"attribute set of null or string or path or packages"},"systemd.user.services.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","user","services","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","user","services","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.path":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Packages added to the service's <envar>PATH</envar>\nenvironment variable.  Both the <filename>bin</filename>\nand <filename>sbin</filename> subdirectories of each\npackage are added.\n","loc":["systemd","user","services","<name>","path"],"readOnly":false,"type":"unspecified"},"systemd.user.services.<name>.postStart":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed after the service's main process\nis started.\n","loc":["systemd","user","services","<name>","postStart"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.user.services.<name>.postStop":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed after the service's main process\nhas exited.\n","loc":["systemd","user","services","<name>","postStop"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.user.services.<name>.preStart":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed before the service's main process\nis started.\n","loc":["systemd","user","services","<name>","preStart"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.user.services.<name>.preStop":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed to stop the service.\n","loc":["systemd","user","services","<name>","preStop"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.user.services.<name>.reload":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed when the service's main process\nis reloaded.\n","loc":["systemd","user","services","<name>","reload"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.user.services.<name>.reloadIfChanged":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":false,"description":"Whether the service should be reloaded during a NixOS\nconfiguration switch if its definition has changed.  If\nenabled, the value of <option>restartIfChanged</option> is\nignored.\n","loc":["systemd","user","services","<name>","reloadIfChanged"],"readOnly":false,"type":"boolean"},"systemd.user.services.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","user","services","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","user","services","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","user","services","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.restartIfChanged":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"Whether the service should be restarted during a NixOS\nconfiguration switch if its definition has changed.\n","loc":["systemd","user","services","<name>","restartIfChanged"],"readOnly":false,"type":"boolean"},"systemd.user.services.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","user","services","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.user.services.<name>.script":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Shell commands executed as the service's main process.","loc":["systemd","user","services","<name>","script"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"systemd.user.services.<name>.scriptArgs":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Arguments passed to the main process script.","loc":["systemd","user","services","<name>","scriptArgs"],"readOnly":false,"type":"string"},"systemd.user.services.<name>.serviceConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Service]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.service</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RestartSec":5,"StartLimitInterval":10},"loc":["systemd","user","services","<name>","serviceConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.services.<name>.startAt":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Automatically start this unit at the given date/time, which\nmust be in the format described in\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.  This is equivalent\nto adding a corresponding timer unit with\n<option>OnCalendar</option> set to the value given here.\n","example":"Sun 14:00:00","loc":["systemd","user","services","<name>","startAt"],"readOnly":false,"type":"string or list of strings"},"systemd.user.services.<name>.stopIfChanged":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set, a changed unit is restarted by calling\n<command>systemctl stop</command> in the old configuration,\nthen <command>systemctl start</command> in the new one.\nOtherwise, it is restarted in a single step using\n<command>systemctl restart</command> in the new configuration.\nThe latter is less correct because it runs the\n<literal>ExecStop</literal> commands from the new\nconfiguration.\n","loc":["systemd","user","services","<name>","stopIfChanged"],"readOnly":false,"type":"boolean"},"systemd.user.services.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","user","services","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.services.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","user","services","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.user.services.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","user","services","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.user.slices":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd per-user slice units.","loc":["systemd","user","slices"],"readOnly":false,"type":"attribute set of submodules"},"systemd.user.slices.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","user","slices","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","user","slices","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","user","slices","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","user","slices","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","user","slices","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","user","slices","<name>","description"],"readOnly":false,"type":"string"},"systemd.user.slices.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","user","slices","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","user","slices","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.user.slices.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","user","slices","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","user","slices","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","user","slices","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","user","slices","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","user","slices","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","user","slices","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.user.slices.<name>.sliceConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Slice]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.slice</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"MemoryMax":"2G"},"loc":["systemd","user","slices","<name>","sliceConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.slices.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","user","slices","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.slices.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","user","slices","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.user.slices.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","user","slices","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd per-user socket units.","loc":["systemd","user","sockets"],"readOnly":false,"type":"attribute set of submodules"},"systemd.user.sockets.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","user","sockets","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","user","sockets","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","user","sockets","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","user","sockets","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","user","sockets","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","user","sockets","<name>","description"],"readOnly":false,"type":"string"},"systemd.user.sockets.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","user","sockets","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","user","sockets","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.user.sockets.<name>.listenStreams":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"For each item in this list, a <literal>ListenStream</literal>\noption in the <literal>[Socket]</literal> section will be created.\n","example":["0.0.0.0:993","/run/my-socket"],"loc":["systemd","user","sockets","<name>","listenStreams"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","user","sockets","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","user","sockets","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","user","sockets","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","user","sockets","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","user","sockets","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","user","sockets","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.user.sockets.<name>.socketConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Socket]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.socket</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"ListenStream":"/run/my-socket"},"loc":["systemd","user","sockets","<name>","socketConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.sockets.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","user","sockets","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.sockets.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","user","sockets","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.user.sockets.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","user","sockets","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.user.targets":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd per-user target units.","loc":["systemd","user","targets"],"readOnly":false,"type":"attribute set of submodules"},"systemd.user.targets.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","user","targets","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","user","targets","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","user","targets","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","user","targets","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","user","targets","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","user","targets","<name>","description"],"readOnly":false,"type":"string"},"systemd.user.targets.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","user","targets","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","user","targets","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.user.targets.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","user","targets","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","user","targets","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","user","targets","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","user","targets","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","user","targets","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","user","targets","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.user.targets.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","user","targets","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.targets.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","user","targets","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.user.targets.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","user","targets","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.user.timers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd per-user timer units.","loc":["systemd","user","timers"],"readOnly":false,"type":"attribute set of submodules"},"systemd.user.timers.<name>.after":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay this unit until they have started.\n","loc":["systemd","user","timers","<name>","after"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","user","timers","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.before":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started at the same time as\nthis unit, delay them until this unit has started.\n","loc":["systemd","user","timers","<name>","before"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.bindsTo":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Like ‘requires’, but in addition, if the specified units\nunexpectedly disappear, this unit will be stopped as well.\n","loc":["systemd","user","timers","<name>","bindsTo"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.conflicts":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are started, then this unit is stopped\nand vice versa.\n","loc":["systemd","user","timers","<name>","conflicts"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.description":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":"","description":"Description of this unit used in systemd messages and progress indicators.","loc":["systemd","user","timers","<name>","description"],"readOnly":false,"type":"string"},"systemd.user.timers.<name>.documentation":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of URIs referencing documentation for this unit or its configuration.","loc":["systemd","user","timers","<name>","documentation"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","user","timers","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.user.timers.<name>.onFailure":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"A list of one or more units that are activated when\nthis unit enters the \"failed\" state.\n","loc":["systemd","user","timers","<name>","onFailure"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.partOf":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"If the specified units are stopped or restarted, then this\nunit is stopped or restarted as well.\n","loc":["systemd","user","timers","<name>","partOf"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","user","timers","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.requires":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started, and stop\nthis unit when the specified units are stopped or fail.\n","loc":["systemd","user","timers","<name>","requires"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.requisite":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Similar to requires. However if the units listed are not started,\nthey will not be started and the transaction will fail.\n","loc":["systemd","user","timers","<name>","requisite"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.restartTriggers":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"An arbitrary list of items such as derivations.  If any item\nin the list changes between reconfigurations, the service will\nbe restarted.\n","loc":["systemd","user","timers","<name>","restartTriggers"],"readOnly":false,"type":"list of unspecifieds"},"systemd.user.timers.<name>.timerConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Timer]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.timer</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> and\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry> for details.\n","example":{"OnCalendar":"Sun 14:00:00","Unit":"foo.service"},"loc":["systemd","user","timers","<name>","timerConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.timers.<name>.unitConfig":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Each attribute in this set specifies an option in the\n<literal>[Unit]</literal> section of the unit.  See\n<citerefentry><refentrytitle>systemd.unit</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry> for details.\n","example":{"RequiresMountsFor":"/data"},"loc":["systemd","user","timers","<name>","unitConfig"],"readOnly":false,"type":"attribute set of systemd options"},"systemd.user.timers.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","user","timers","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"systemd.user.timers.<name>.wants":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Start the specified units when this unit is started.\n","loc":["systemd","user","timers","<name>","wants"],"readOnly":false,"type":"list of strings"},"systemd.user.units":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":{},"description":"Definition of systemd per-user units.","loc":["systemd","user","units"],"readOnly":false,"type":"attribute set of submodules"},"systemd.user.units.<name>.aliases":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Aliases of that unit.","loc":["systemd","user","units","<name>","aliases"],"readOnly":false,"type":"list of strings"},"systemd.user.units.<name>.enable":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":true,"description":"If set to false, this unit will be a symlink to\n/dev/null. This is primarily useful to prevent specific\ntemplate instances\n(e.g. <literal>serial-getty@ttyS0</literal>) from being\nstarted. Note that <literal>enable=true</literal> does not\nmake a unit start by default at boot; if you want that, see\n<literal>wantedBy</literal>.\n","loc":["systemd","user","units","<name>","enable"],"readOnly":false,"type":"boolean"},"systemd.user.units.<name>.requiredBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that require (i.e. depend on and need to go down with)\nthis unit. The discussion under <literal>wantedBy</literal>\napplies here as well: inverse <literal>.requires</literal>\nsymlinks are established.\n","loc":["systemd","user","units","<name>","requiredBy"],"readOnly":false,"type":"list of strings"},"systemd.user.units.<name>.text":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":null,"description":"Text of this systemd unit.","loc":["systemd","user","units","<name>","text"],"readOnly":false,"type":"null or string"},"systemd.user.units.<name>.wantedBy":{"declarations":["nixos/modules/system/boot/systemd.nix"],"default":[],"description":"Units that want (i.e. depend on) this unit. The standard way\nto make a unit start by default at boot is to set this option\nto <literal>[ \"multi-user.target\" ]</literal>. That's despite\nthe fact that the systemd.unit(5) manpage says this option\ngoes in the <literal>[Install]</literal> section that controls\nthe behaviour of <literal>systemctl enable</literal>. Since\nsuch a process is stateful and thus contrary to the design of\nNixOS, setting this option instead causes the equivalent\ninverse <literal>.wants</literal> symlink to be present,\nestablishing the same desired relationship in a stateless way.\n","loc":["systemd","user","units","<name>","wantedBy"],"readOnly":false,"type":"list of strings"},"time.hardwareClockInLocalTime":{"declarations":["nixos/modules/config/timezone.nix"],"default":false,"description":"If set, keep the hardware clock in local time instead of UTC.","loc":["time","hardwareClockInLocalTime"],"readOnly":false,"type":"boolean"},"time.timeZone":{"declarations":["nixos/modules/config/timezone.nix"],"default":null,"description":"The time zone used when displaying times and dates. See <link\nxlink:href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\"/>\nfor a comprehensive list of possible values for this setting.\n\nIf null, the timezone will default to UTC and can be set imperatively\nusing timedatectl.\n","example":"America/New_York","loc":["time","timeZone"],"readOnly":false,"type":"null or string without spaces"},"users.defaultUserShell":{"declarations":["nixos/modules/programs/shadow.nix"],"description":"This option defines the default shell assigned to user\naccounts. This can be either a full system path or a shell package.\n\nThis must not be a store path, since the path is\nused outside the store (in particular in /etc/passwd).\n","example":{"_type":"literalExample","text":"pkgs.zsh"},"loc":["users","defaultUserShell"],"readOnly":false,"type":"path or package"},"users.enforceIdUniqueness":{"declarations":["nixos/modules/config/users-groups.nix"],"default":true,"description":"Whether to require that no two users/groups share the same uid/gid.\n","loc":["users","enforceIdUniqueness"],"readOnly":false,"type":"boolean"},"users.extraGroups":{"declarations":["nixos/modules/rename.nix"],"description":"Alias of <option>users.groups</option>.","loc":["users","extraGroups"],"readOnly":false,"type":"unspecified"},"users.extraUsers":{"declarations":["nixos/modules/rename.nix"],"description":"Alias of <option>users.users</option>.","loc":["users","extraUsers"],"readOnly":false,"type":"unspecified"},"users.groups":{"declarations":["nixos/modules/config/users-groups.nix"],"default":{},"description":"Additional groups to be created automatically by the system.\n","example":{"hackers":{},"students":{"gid":1001}},"loc":["users","groups"],"readOnly":false,"type":"list or attribute set of submodules"},"users.groups.<name?>.gid":{"declarations":["nixos/modules/config/users-groups.nix"],"default":null,"description":"The group GID. If the GID is null, a free GID is picked on\nactivation.\n","loc":["users","groups","<name?>","gid"],"readOnly":false,"type":"null or signed integer"},"users.groups.<name?>.members":{"declarations":["nixos/modules/config/users-groups.nix"],"default":[],"description":"The user names of the group members, added to the\n<literal>/etc/group</literal> file.\n","loc":["users","groups","<name?>","members"],"readOnly":false,"type":"list of Concatenated strings"},"users.groups.<name?>.name":{"declarations":["nixos/modules/config/users-groups.nix"],"description":"The name of the group. If undefined, the name of the attribute set\nwill be used.\n","loc":["users","groups","<name?>","name"],"readOnly":false,"type":"string"},"users.ldap.base":{"declarations":["nixos/modules/config/ldap.nix"],"description":"The distinguished name of the search base.","example":"dc=example,dc=org","loc":["users","ldap","base"],"readOnly":false,"type":"unspecified"},"users.ldap.bind.distinguishedName":{"declarations":["nixos/modules/config/ldap.nix"],"default":"","description":"The distinguished name to bind to the LDAP server with. If this\nis not specified, an anonymous bind will be done.\n","example":"cn=admin,dc=example,dc=com","loc":["users","ldap","bind","distinguishedName"],"readOnly":false,"type":"string"},"users.ldap.bind.password":{"declarations":["nixos/modules/config/ldap.nix"],"default":"/etc/ldap/bind.password","description":"The path to a file containing the credentials to use when binding\nto the LDAP server (if not binding anonymously).\n","loc":["users","ldap","bind","password"],"readOnly":false,"type":"string"},"users.ldap.bind.policy":{"declarations":["nixos/modules/config/ldap.nix"],"default":"hard_open","description":"Specifies the policy to use for reconnecting to an unavailable\nLDAP server. The default is <literal>hard_open</literal>, which\nreconnects if opening the connection to the directory server\nfailed. By contrast, <literal>hard_init</literal> reconnects if\ninitializing the connection failed. Initializing may not\nactually contact the directory server, and it is possible that\na malformed configuration file will trigger reconnection. If\n<literal>soft</literal> is specified, then\n<literal>nss_ldap</literal> will return immediately on server\nfailure. All hard reconnect policies block with exponential\nbackoff before retrying.\n","loc":["users","ldap","bind","policy"],"readOnly":false,"type":"one of \"hard_open\", \"hard_init\", \"soft\""},"users.ldap.bind.timeLimit":{"declarations":["nixos/modules/config/ldap.nix"],"default":30,"description":"Specifies the time limit (in seconds) to use when connecting\nto the directory server. This is distinct from the time limit\nspecified in <literal>users.ldap.timeLimit</literal> and affects\nthe initial server connection only.\n","loc":["users","ldap","bind","timeLimit"],"readOnly":false,"type":"signed integer"},"users.ldap.daemon.enable":{"declarations":["nixos/modules/config/ldap.nix"],"default":false,"description":"Whether to let the nslcd daemon (nss-pam-ldapd) handle the\nLDAP lookups for NSS and PAM. This can improve performance,\nand if you need to bind to the LDAP server with a password,\nit increases security, since only the nslcd user needs to\nhave access to the bindpw file, not everyone that uses NSS\nand/or PAM. If this option is enabled, a local nscd user is\ncreated automatically, and the nslcd service is started\nautomatically when the network get up.\n","loc":["users","ldap","daemon","enable"],"readOnly":false,"type":"unspecified"},"users.ldap.daemon.extraConfig":{"declarations":["nixos/modules/config/ldap.nix"],"default":"","description":"Extra configuration options that will be added verbatim at\nthe end of the nslcd configuration file (nslcd.conf).\n","loc":["users","ldap","daemon","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"users.ldap.enable":{"declarations":["nixos/modules/config/ldap.nix"],"default":false,"description":"Whether to enable authentication against an LDAP server.","loc":["users","ldap","enable"],"readOnly":false,"type":"boolean"},"users.ldap.extraConfig":{"declarations":["nixos/modules/config/ldap.nix"],"default":"","description":"Extra configuration options that will be added verbatim at\nthe end of the ldap configuration file (ldap.conf).\nIf <literal>users.ldap.daemon</literal> is enabled, this\nconfiguration will not be used. In that case, use\n<literal>users.ldap.daemon.extraConfig</literal> instead.\n","loc":["users","ldap","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"users.ldap.loginPam":{"declarations":["nixos/modules/config/ldap.nix"],"default":true,"description":"Whether to include authentication against LDAP in login PAM","loc":["users","ldap","loginPam"],"readOnly":false,"type":"boolean"},"users.ldap.nsswitch":{"declarations":["nixos/modules/config/ldap.nix"],"default":true,"description":"Whether to include lookup against LDAP in NSS","loc":["users","ldap","nsswitch"],"readOnly":false,"type":"boolean"},"users.ldap.server":{"declarations":["nixos/modules/config/ldap.nix"],"description":"The URL of the LDAP server.","example":"ldap://ldap.example.org/","loc":["users","ldap","server"],"readOnly":false,"type":"unspecified"},"users.ldap.timeLimit":{"declarations":["nixos/modules/config/ldap.nix"],"default":0,"description":"Specifies the time limit (in seconds) to use when performing\nsearches. A value of zero (0), which is the default, is to\nwait indefinitely for searches to be completed.\n","loc":["users","ldap","timeLimit"],"readOnly":false,"type":"signed integer"},"users.ldap.useTLS":{"declarations":["nixos/modules/config/ldap.nix"],"default":false,"description":"If enabled, use TLS (encryption) over an LDAP (port 389)\nconnection.  The alternative is to specify an LDAPS server (port\n636) in <option>users.ldap.server</option> or to forego\nsecurity.\n","loc":["users","ldap","useTLS"],"readOnly":false,"type":"unspecified"},"users.motd":{"declarations":["nixos/modules/security/pam.nix"],"default":null,"description":"Message of the day shown to users when they log in.","example":"Today is Sweetmorn, the 4th day of The Aftermath in the YOLD 3178.","loc":["users","motd"],"readOnly":false,"type":"null or strings concatenated with \"\\n\""},"users.mutableUsers":{"declarations":["nixos/modules/config/users-groups.nix"],"default":true,"description":"If set to <literal>true</literal>, you are free to add new users and groups to the system\nwith the ordinary <literal>useradd</literal> and\n<literal>groupadd</literal> commands. On system activation, the\nexisting contents of the <literal>/etc/passwd</literal> and\n<literal>/etc/group</literal> files will be merged with the\ncontents generated from the <literal>users.users</literal> and\n<literal>users.groups</literal> options.\nThe initial password for a user will be set\naccording to <literal>users.users</literal>, but existing passwords\nwill not be changed.\n\n<warning><para>\nIf set to <literal>false</literal>, the contents of the user and\ngroup files will simply be replaced on system activation. This also\nholds for the user passwords; all changed\npasswords will be reset according to the\n<literal>users.users</literal> configuration on activation.\n</para></warning>\n","loc":["users","mutableUsers"],"readOnly":false,"type":"boolean"},"users.users":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix","nixos/modules/config/users-groups.nix"],"default":{},"description":"Additional user accounts to be created automatically by the system.\nThis can also be used to set options for root.\n","example":{"alice":{"createHome":true,"description":"Alice Q. User","extraGroups":["wheel"],"group":"users","home":"/home/alice","shell":"/bin/sh","uid":1234}},"loc":["users","users"],"readOnly":false,"type":"list or attribute set of submodules"},"users.users.<name?>.createHome":{"declarations":["nixos/modules/config/users-groups.nix"],"default":false,"description":"If true, the home directory will be created automatically. If this\noption is true and the home directory already exists but is not\nowned by the user, directory owner and group will be changed to\nmatch the user.\n","loc":["users","users","<name?>","createHome"],"readOnly":false,"type":"boolean"},"users.users.<name?>.cryptHomeLuks":{"declarations":["nixos/modules/config/users-groups.nix"],"default":null,"description":"Path to encrypted luks device that contains\nthe user's home directory.\n","loc":["users","users","<name?>","cryptHomeLuks"],"readOnly":false,"type":"null or string"},"users.users.<name?>.description":{"declarations":["nixos/modules/config/users-groups.nix"],"default":"","description":"A short description of the user account, typically the\nuser's full name.  This is actually the “GECOS” or “comment”\nfield in <filename>/etc/passwd</filename>.\n","example":"Alice Q. User","loc":["users","users","<name?>","description"],"readOnly":false,"type":"string"},"users.users.<name?>.extraGroups":{"declarations":["nixos/modules/config/users-groups.nix"],"default":[],"description":"The user's auxiliary groups.","loc":["users","users","<name?>","extraGroups"],"readOnly":false,"type":"list of strings"},"users.users.<name?>.group":{"declarations":["nixos/modules/config/users-groups.nix"],"default":"nogroup","description":"The user's primary group.","loc":["users","users","<name?>","group"],"readOnly":false,"type":"string"},"users.users.<name?>.hashedPassword":{"declarations":["nixos/modules/config/users-groups.nix"],"default":null,"description":"Specifies the hashed password for the user.\nThe options <option>hashedPassword</option>,\n<option>password</option> and <option>passwordFile</option>\ncontrols what password is set for the user.\n<option>hashedPassword</option> overrides both\n<option>password</option> and <option>passwordFile</option>.\n<option>password</option> overrides <option>passwordFile</option>.\nIf none of these three options are set, no password is assigned to\nthe user, and the user will not be able to do password logins.\nIf the option <option>users.mutableUsers</option> is true, the\npassword defined in one of the three options will only be set when\nthe user is created for the first time. After that, you are free to\nchange the password with the ordinary user management commands. If\n<option>users.mutableUsers</option> is false, you cannot change\nuser passwords, they will always be set according to the password\noptions.\n\nTo generate hashed password install <literal>mkpasswd</literal>\npackage and run <literal>mkpasswd -m sha-512</literal>.\n\n","loc":["users","users","<name?>","hashedPassword"],"readOnly":false,"type":"null or string"},"users.users.<name?>.home":{"declarations":["nixos/modules/config/users-groups.nix"],"default":"/var/empty","description":"The user's home directory.","loc":["users","users","<name?>","home"],"readOnly":false,"type":"path"},"users.users.<name?>.initialHashedPassword":{"declarations":["nixos/modules/config/users-groups.nix"],"default":null,"description":"Specifies the initial hashed password for the user, i.e. the\nhashed password assigned if the user does not already\nexist. If <option>users.mutableUsers</option> is true, the\npassword can be changed subsequently using the\n<command>passwd</command> command. Otherwise, it's\nequivalent to setting the <option>hashedPassword</option> option.\n\nTo generate hashed password install <literal>mkpasswd</literal>\npackage and run <literal>mkpasswd -m sha-512</literal>.\n\n","loc":["users","users","<name?>","initialHashedPassword"],"readOnly":false,"type":"null or string"},"users.users.<name?>.initialPassword":{"declarations":["nixos/modules/config/users-groups.nix"],"default":null,"description":"Specifies the initial password for the user, i.e. the\npassword assigned if the user does not already exist. If\n<option>users.mutableUsers</option> is true, the password\ncan be changed subsequently using the\n<command>passwd</command> command. Otherwise, it's\nequivalent to setting the <option>password</option>\noption. The same caveat applies: the password specified here\nis world-readable in the Nix store, so it should only be\nused for guest accounts or passwords that will be changed\npromptly.\n","loc":["users","users","<name?>","initialPassword"],"readOnly":false,"type":"null or string"},"users.users.<name?>.isNormalUser":{"declarations":["nixos/modules/config/users-groups.nix"],"default":false,"description":"Indicates whether this is an account for a “real” user. This\nautomatically sets <option>group</option> to\n<literal>users</literal>, <option>createHome</option> to\n<literal>true</literal>, <option>home</option> to\n<filename>/home/<replaceable>username</replaceable></filename>,\n<option>useDefaultShell</option> to <literal>true</literal>,\nand <option>isSystemUser</option> to\n<literal>false</literal>.\n","loc":["users","users","<name?>","isNormalUser"],"readOnly":false,"type":"boolean"},"users.users.<name?>.isSystemUser":{"declarations":["nixos/modules/config/users-groups.nix"],"default":false,"description":"Indicates if the user is a system user or not. This option\nonly has an effect if <option>uid</option> is\n<option>null</option>, in which case it determines whether\nthe user's UID is allocated in the range for system users\n(below 500) or in the range for normal users (starting at\n1000).\n","loc":["users","users","<name?>","isSystemUser"],"readOnly":false,"type":"boolean"},"users.users.<name?>.name":{"declarations":["nixos/modules/config/users-groups.nix"],"description":"The name of the user account. If undefined, the name of the\nattribute set will be used.\n","loc":["users","users","<name?>","name"],"readOnly":false,"type":"string"},"users.users.<name?>.openssh.authorizedKeys.keyFiles":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":[],"description":"A list of files each containing one OpenSSH public key that should be\nadded to the user's authorized keys. The contents of the files are\nread at build time and added to a file that the SSH daemon reads in\naddition to the the user's authorized_keys file. You can combine the\n<literal>keyFiles</literal> and <literal>keys</literal> options.\n","loc":["users","users","<name?>","openssh","authorizedKeys","keyFiles"],"readOnly":false,"type":"list of paths"},"users.users.<name?>.openssh.authorizedKeys.keys":{"declarations":["nixos/modules/services/networking/ssh/sshd.nix"],"default":[],"description":"A list of verbatim OpenSSH public keys that should be added to the\nuser's authorized keys. The keys are added to a file that the SSH\ndaemon reads in addition to the the user's authorized_keys file.\nYou can combine the <literal>keys</literal> and\n<literal>keyFiles</literal> options.\nWarning: If you are using <literal>NixOps</literal> then don't use this\noption since it will replace the key required for deployment via ssh.\n","loc":["users","users","<name?>","openssh","authorizedKeys","keys"],"readOnly":false,"type":"list of strings"},"users.users.<name?>.packages":{"declarations":["nixos/modules/config/users-groups.nix"],"default":[],"description":"The set of packages that should be made availabe to the user.\nThis is in contrast to <option>environment.systemPackages</option>,\nwhich adds packages to all users.\n","example":{"_type":"literalExample","text":"[ pkgs.firefox pkgs.thunderbird ]"},"loc":["users","users","<name?>","packages"],"readOnly":false,"type":"list of packages"},"users.users.<name?>.password":{"declarations":["nixos/modules/config/users-groups.nix"],"default":null,"description":"Specifies the (clear text) password for the user.\nWarning: do not set confidential information here\nbecause it is world-readable in the Nix store. This option\nshould only be used for public accounts.\nThe options <option>hashedPassword</option>,\n<option>password</option> and <option>passwordFile</option>\ncontrols what password is set for the user.\n<option>hashedPassword</option> overrides both\n<option>password</option> and <option>passwordFile</option>.\n<option>password</option> overrides <option>passwordFile</option>.\nIf none of these three options are set, no password is assigned to\nthe user, and the user will not be able to do password logins.\nIf the option <option>users.mutableUsers</option> is true, the\npassword defined in one of the three options will only be set when\nthe user is created for the first time. After that, you are free to\nchange the password with the ordinary user management commands. If\n<option>users.mutableUsers</option> is false, you cannot change\nuser passwords, they will always be set according to the password\noptions.\n\n","loc":["users","users","<name?>","password"],"readOnly":false,"type":"null or string"},"users.users.<name?>.passwordFile":{"declarations":["nixos/modules/config/users-groups.nix"],"default":null,"description":"The full path to a file that contains the user's password. The password\nfile is read on each system activation. The file should contain\nexactly one line, which should be the password in an encrypted form\nthat is suitable for the <literal>chpasswd -e</literal> command.\nThe options <option>hashedPassword</option>,\n<option>password</option> and <option>passwordFile</option>\ncontrols what password is set for the user.\n<option>hashedPassword</option> overrides both\n<option>password</option> and <option>passwordFile</option>.\n<option>password</option> overrides <option>passwordFile</option>.\nIf none of these three options are set, no password is assigned to\nthe user, and the user will not be able to do password logins.\nIf the option <option>users.mutableUsers</option> is true, the\npassword defined in one of the three options will only be set when\nthe user is created for the first time. After that, you are free to\nchange the password with the ordinary user management commands. If\n<option>users.mutableUsers</option> is false, you cannot change\nuser passwords, they will always be set according to the password\noptions.\n\n","loc":["users","users","<name?>","passwordFile"],"readOnly":false,"type":"null or Concatenated string"},"users.users.<name?>.shell":{"declarations":["nixos/modules/config/users-groups.nix"],"default":"pkgs.shadow","description":"The path to the user's shell. Can use shell derivations,\nlike <literal>pkgs.bashInteractive</literal>. Don’t\nforget to enable your shell in\n<literal>programs</literal> if necessary,\nlike <code>programs.zsh.enable = true;</code>.\n","example":{"_type":"literalExample","text":"pkgs.bashInteractive"},"loc":["users","users","<name?>","shell"],"readOnly":false,"type":"package or path"},"users.users.<name?>.subGidRanges":{"declarations":["nixos/modules/config/users-groups.nix"],"default":[],"description":"Subordinate group ids that user is allowed to use.\nThey are set into <filename>/etc/subgid</filename> and are used\nby <literal>newgidmap</literal> for user namespaces.\n","example":[{"count":1,"startGid":100},{"count":999,"startGid":1001}],"loc":["users","users","<name?>","subGidRanges"],"readOnly":false,"type":"list of submodules"},"users.users.<name?>.subGidRanges.*.count":{"declarations":["nixos/modules/config/users-groups.nix"],"default":1,"description":"Count of subordinate group ids","loc":["users","users","<name?>","subGidRanges","*","count"],"readOnly":false,"type":"signed integer"},"users.users.<name?>.subGidRanges.*.startGid":{"declarations":["nixos/modules/config/users-groups.nix"],"description":"Start of the range of subordinate group ids that user is\nallowed to use.\n","loc":["users","users","<name?>","subGidRanges","*","startGid"],"readOnly":false,"type":"signed integer"},"users.users.<name?>.subUidRanges":{"declarations":["nixos/modules/config/users-groups.nix"],"default":[],"description":"Subordinate user ids that user is allowed to use.\nThey are set into <filename>/etc/subuid</filename> and are used\nby <literal>newuidmap</literal> for user namespaces.\n","example":[{"count":1,"startUid":1000},{"count":65534,"startUid":100001}],"loc":["users","users","<name?>","subUidRanges"],"readOnly":false,"type":"list of submodules"},"users.users.<name?>.subUidRanges.*.count":{"declarations":["nixos/modules/config/users-groups.nix"],"default":1,"description":"Count of subordinate user ids","loc":["users","users","<name?>","subUidRanges","*","count"],"readOnly":false,"type":"signed integer"},"users.users.<name?>.subUidRanges.*.startUid":{"declarations":["nixos/modules/config/users-groups.nix"],"description":"Start of the range of subordinate user ids that user is\nallowed to use.\n","loc":["users","users","<name?>","subUidRanges","*","startUid"],"readOnly":false,"type":"signed integer"},"users.users.<name?>.uid":{"declarations":["nixos/modules/config/users-groups.nix"],"default":null,"description":"The account UID. If the UID is null, a free UID is picked on\nactivation.\n","loc":["users","users","<name?>","uid"],"readOnly":false,"type":"null or signed integer"},"users.users.<name?>.useDefaultShell":{"declarations":["nixos/modules/config/users-groups.nix"],"default":false,"description":"If true, the user's shell will be set to\n<option>users.defaultUserShell</option>.\n","loc":["users","users","<name?>","useDefaultShell"],"readOnly":false,"type":"boolean"},"virtualisation.docker.autoPrune.dates":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":"weekly","description":"Specification (in the format described by\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>) of the time at\nwhich the prune will occur.\n","loc":["virtualisation","docker","autoPrune","dates"],"readOnly":false,"type":"string"},"virtualisation.docker.autoPrune.enable":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":false,"description":"Whether to periodically prune Docker resources. If enabled, a\nsystemd timer will run <literal>docker system prune -f</literal>\nas specified by the <literal>dates</literal> option.\n","loc":["virtualisation","docker","autoPrune","enable"],"readOnly":false,"type":"boolean"},"virtualisation.docker.autoPrune.flags":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":[],"description":"Any additional flags passed to <command>docker system prune</command>.\n","example":["--all"],"loc":["virtualisation","docker","autoPrune","flags"],"readOnly":false,"type":"list of strings"},"virtualisation.docker.enable":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":false,"description":"This option enables docker, a daemon that manages\nlinux containers. Users in the \"docker\" group can interact with\nthe daemon (e.g. to start or stop containers) using the\n<command>docker</command> command line tool.\n","loc":["virtualisation","docker","enable"],"readOnly":false,"type":"boolean"},"virtualisation.docker.enableOnBoot":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":true,"description":"When enabled dockerd is started on boot. This is required for\ncontainer, which are created with the\n<literal>--restart=always</literal> flag, to work. If this option is\ndisabled, docker might be started on demand by socket activation.\n","loc":["virtualisation","docker","enableOnBoot"],"readOnly":false,"type":"boolean"},"virtualisation.docker.extraOptions":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":"","description":"The extra command-line options to pass to\n<command>docker</command> daemon.\n","loc":["virtualisation","docker","extraOptions"],"readOnly":false,"type":"strings concatenated with \" \""},"virtualisation.docker.listenOptions":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":["/var/run/docker.sock"],"description":"A list of unix and tcp docker should listen to. The format follows\nListenStream as described in systemd.socket(5).\n","loc":["virtualisation","docker","listenOptions"],"readOnly":false,"type":"list of strings"},"virtualisation.docker.liveRestore":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":true,"description":"Allow dockerd to be restarted without affecting running container.\nThis option is incompatible with docker swarm.\n","loc":["virtualisation","docker","liveRestore"],"readOnly":false,"type":"boolean"},"virtualisation.docker.logDriver":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":"journald","description":"This option determines which Docker log driver to use.\n","loc":["virtualisation","docker","logDriver"],"readOnly":false,"type":"one of \"none\", \"json-file\", \"syslog\", \"journald\", \"gelf\", \"fluentd\", \"awslogs\", \"splunk\", \"etwlogs\", \"gcplogs\""},"virtualisation.docker.package":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":"docker-18.06.1-ce","description":"Docker package to be used in the module.\n","example":"docker-18.06.1-ce","loc":["virtualisation","docker","package"],"readOnly":false,"type":"package"},"virtualisation.docker.storageDriver":{"declarations":["nixos/modules/virtualisation/docker.nix"],"default":null,"description":"This option determines which Docker storage driver to use. By default\nit let's docker automatically choose preferred storage driver.\n","loc":["virtualisation","docker","storageDriver"],"readOnly":false,"type":"null or one of \"aufs\", \"btrfs\", \"devicemapper\", \"overlay\", \"overlay2\", \"zfs\""},"virtualisation.hypervGuest.enable":{"declarations":["nixos/modules/virtualisation/hyperv-guest.nix"],"default":false,"description":"Whether to enable Hyper-V Guest Support.","example":true,"loc":["virtualisation","hypervGuest","enable"],"readOnly":false,"type":"boolean"},"virtualisation.hypervGuest.videoMode":{"declarations":["nixos/modules/virtualisation/hyperv-guest.nix"],"default":"1152x864","description":"Resolution at which to initialize the video adapter.\n\nSupports screen resolution up to Full HD 1920x1080 with 32 bit color\non Windows Server 2012, and 1600x1200 with 16 bit color on Windows\nServer 2008 R2 or earlier.\n","example":"1024x768","loc":["virtualisation","hypervGuest","videoMode"],"readOnly":false,"type":"string"},"virtualisation.kvmgt.device":{"declarations":["nixos/modules/virtualisation/kvmgt.nix"],"default":"0000:00:02.0","description":"PCI ID of graphics card. You can figure it with <command>ls /sys/class/mdev_bus</command>.","loc":["virtualisation","kvmgt","device"],"readOnly":false,"type":"Concatenated string"},"virtualisation.kvmgt.enable":{"declarations":["nixos/modules/virtualisation/kvmgt.nix"],"default":false,"description":"Whether to enable KVMGT (iGVT-g) VGPU support. Allows Qemu/KVM guests to share host's Intel integrated graphics card.\nCurrently only one graphical device can be shared\n.","example":true,"loc":["virtualisation","kvmgt","enable"],"readOnly":false,"type":"boolean"},"virtualisation.kvmgt.vgpus":{"declarations":["nixos/modules/virtualisation/kvmgt.nix"],"default":{},"description":"Virtual GPUs to be used in Qemu. You can find devices via <command>ls /sys/bus/pci/devices/*/mdev_supported_types</command>\nand find info about device via <command>cat /sys/bus/pci/devices/*/mdev_supported_types/i915-GVTg_V5_4/description</command>\n","example":{"i915-GVTg_V5_8":{"uuid":"a297db4a-f4c2-11e6-90f6-d3b88d6c9525"}},"loc":["virtualisation","kvmgt","vgpus"],"readOnly":false,"type":"attribute set of submodules"},"virtualisation.kvmgt.vgpus.<name>.uuid":{"declarations":["nixos/modules/virtualisation/kvmgt.nix"],"description":"UUID of VGPU device. You can generate one with <package>libossp_uuid</package>.","loc":["virtualisation","kvmgt","vgpus","<name>","uuid"],"readOnly":false,"type":"Concatenated string"},"virtualisation.libvirtd.enable":{"declarations":["nixos/modules/virtualisation/libvirtd.nix"],"default":false,"description":"This option enables libvirtd, a daemon that manages\nvirtual machines. Users in the \"libvirtd\" group can interact with\nthe daemon (e.g. to start or stop VMs) using the\n<command>virsh</command> command line tool, among others.\n","loc":["virtualisation","libvirtd","enable"],"readOnly":false,"type":"boolean"},"virtualisation.libvirtd.extraConfig":{"declarations":["nixos/modules/virtualisation/libvirtd.nix"],"default":"","description":"Extra contents appended to the libvirtd configuration file,\nlibvirtd.conf.\n","loc":["virtualisation","libvirtd","extraConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"virtualisation.libvirtd.extraOptions":{"declarations":["nixos/modules/virtualisation/libvirtd.nix"],"default":[],"description":"Extra command line arguments passed to libvirtd on startup.\n","example":["--verbose"],"loc":["virtualisation","libvirtd","extraOptions"],"readOnly":false,"type":"list of strings"},"virtualisation.libvirtd.onShutdown":{"declarations":["nixos/modules/virtualisation/libvirtd.nix"],"default":"suspend","description":"When shutting down / restarting the host what method should\nbe used to gracefully halt the guests. Setting to \"shutdown\"\nwill cause an ACPI shutdown of each guest. \"suspend\" will\nattempt to save the state of the guests ready to restore on boot.\n","loc":["virtualisation","libvirtd","onShutdown"],"readOnly":false,"type":"one of \"shutdown\", \"suspend\""},"virtualisation.libvirtd.qemuOvmf":{"declarations":["nixos/modules/virtualisation/libvirtd.nix"],"default":true,"description":"Allows libvirtd to take advantage of OVMF when creating new\nQEMU VMs with UEFI boot.\n","loc":["virtualisation","libvirtd","qemuOvmf"],"readOnly":false,"type":"boolean"},"virtualisation.libvirtd.qemuPackage":{"declarations":["nixos/modules/virtualisation/libvirtd.nix"],"default":"qemu-3.0.0","description":"Qemu package to use with libvirt.\n`pkgs.qemu` can emulate alien architectures (e.g. aarch64 on x86)\n`pkgs.qemu_kvm` saves disk space allowing to emulate only host architectures.\n","loc":["virtualisation","libvirtd","qemuPackage"],"readOnly":false,"type":"package"},"virtualisation.libvirtd.qemuRunAsRoot":{"declarations":["nixos/modules/virtualisation/libvirtd.nix"],"default":true,"description":"If true,  libvirtd runs qemu as root.\nIf false, libvirtd runs qemu as unprivileged user qemu-libvirtd.\nChanging this option to false may cause file permission issues\nfor existing guests. To fix these, manually change ownership\nof affected files in /var/lib/libvirt/qemu to qemu-libvirtd.\n","loc":["virtualisation","libvirtd","qemuRunAsRoot"],"readOnly":false,"type":"boolean"},"virtualisation.libvirtd.qemuVerbatimConfig":{"declarations":["nixos/modules/virtualisation/libvirtd.nix"],"default":"namespaces = []\n","description":"Contents written to the qemu configuration file, qemu.conf.\nMake sure to include a proper namespace configuration when\nsupplying custom configuration.\n","loc":["virtualisation","libvirtd","qemuVerbatimConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"virtualisation.lxc.defaultConfig":{"declarations":["nixos/modules/virtualisation/lxc.nix"],"default":"","description":"Default config (default.conf) for new containers, i.e. for\nnetwork config. See <citerefentry><refentrytitle>lxc.container.conf\n</refentrytitle><manvolnum>5</manvolnum></citerefentry>.\n","loc":["virtualisation","lxc","defaultConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"virtualisation.lxc.enable":{"declarations":["nixos/modules/virtualisation/lxc.nix"],"default":false,"description":"This enables Linux Containers (LXC), which provides tools\nfor creating and managing system or application containers\non Linux.\n","loc":["virtualisation","lxc","enable"],"readOnly":false,"type":"boolean"},"virtualisation.lxc.lxcfs.enable":{"declarations":["nixos/modules/virtualisation/lxcfs.nix"],"default":false,"description":"This enables LXCFS, a FUSE filesystem for LXC.\nTo use lxcfs in include the following configuration in your\ncontainer configuration:\n<code>\n  virtualisation.lxc.defaultConfig = \"lxc.include = ${pkgs.lxcfs}/share/lxc/config/common.conf.d/00-lxcfs.conf\";\n</code>\n","loc":["virtualisation","lxc","lxcfs","enable"],"readOnly":false,"type":"boolean"},"virtualisation.lxc.systemConfig":{"declarations":["nixos/modules/virtualisation/lxc.nix"],"default":"","description":"This is the system-wide LXC config. See\n<citerefentry><refentrytitle>lxc.system.conf</refentrytitle>\n<manvolnum>5</manvolnum></citerefentry>.\n","loc":["virtualisation","lxc","systemConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"virtualisation.lxc.usernetConfig":{"declarations":["nixos/modules/virtualisation/lxc.nix"],"default":"","description":"This is the config file for managing unprivileged user network\nadministration access in LXC. See <citerefentry>\n<refentrytitle>lxc-user-net</refentrytitle><manvolnum>5</manvolnum>\n</citerefentry>.\n","loc":["virtualisation","lxc","usernetConfig"],"readOnly":false,"type":"strings concatenated with \"\\n\""},"virtualisation.lxd.enable":{"declarations":["nixos/modules/virtualisation/lxd.nix"],"default":false,"description":"This option enables lxd, a daemon that manages\ncontainers. Users in the \"lxd\" group can interact with\nthe daemon (e.g. to start or stop containers) using the\n<command>lxc</command> command line tool, among others.\n","loc":["virtualisation","lxd","enable"],"readOnly":false,"type":"boolean"},"virtualisation.lxd.zfsSupport":{"declarations":["nixos/modules/virtualisation/lxd.nix"],"default":false,"description":"enables lxd to use zfs as a storage for containers.\nThis option is enabled by default if a zfs pool is configured\nwith nixos.\n","loc":["virtualisation","lxd","zfsSupport"],"readOnly":false,"type":"boolean"},"virtualisation.rkt.enable":{"declarations":["nixos/modules/virtualisation/rkt.nix"],"default":false,"description":"Whether to enable rkt metadata service.","example":true,"loc":["virtualisation","rkt","enable"],"readOnly":false,"type":"boolean"},"virtualisation.rkt.gc.automatic":{"declarations":["nixos/modules/virtualisation/rkt.nix"],"default":true,"description":"Automatically run the garbage collector at a specific time.","loc":["virtualisation","rkt","gc","automatic"],"readOnly":false,"type":"boolean"},"virtualisation.rkt.gc.dates":{"declarations":["nixos/modules/virtualisation/rkt.nix"],"default":"03:15","description":"Specification (in the format described by\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>) of the time at\nwhich the garbage collector will run.\n","loc":["virtualisation","rkt","gc","dates"],"readOnly":false,"type":"string"},"virtualisation.rkt.gc.options":{"declarations":["nixos/modules/virtualisation/rkt.nix"],"default":"--grace-period=24h","description":"Options given to <filename>rkt gc</filename> when the\ngarbage collector is run automatically.\n","loc":["virtualisation","rkt","gc","options"],"readOnly":false,"type":"string"},"virtualisation.virtualbox.guest.enable":{"declarations":["nixos/modules/virtualisation/virtualbox-guest.nix"],"default":false,"description":"Whether to enable the VirtualBox service and other guest additions.","loc":["virtualisation","virtualbox","guest","enable"],"readOnly":false,"type":"boolean"},"virtualisation.virtualbox.guest.x11":{"declarations":["nixos/modules/virtualisation/virtualbox-guest.nix"],"default":true,"description":"Whether to enable x11 graphics","loc":["virtualisation","virtualbox","guest","x11"],"readOnly":false,"type":"boolean"},"virtualisation.virtualbox.host.addNetworkInterface":{"declarations":["nixos/modules/virtualisation/virtualbox-host.nix"],"default":true,"description":"Automatically set up a vboxnet0 host-only network interface.\n","loc":["virtualisation","virtualbox","host","addNetworkInterface"],"readOnly":false,"type":"boolean"},"virtualisation.virtualbox.host.enable":{"declarations":["nixos/modules/virtualisation/virtualbox-host.nix"],"default":false,"description":"Whether to enable VirtualBox.\n\n<note><para>\n  In order to pass USB devices from the host to the guests, the user\n  needs to be in the <literal>vboxusers</literal> group.\n</para></note>\n","example":true,"loc":["virtualisation","virtualbox","host","enable"],"readOnly":false,"type":"boolean"},"virtualisation.virtualbox.host.enableExtensionPack":{"declarations":["nixos/modules/virtualisation/virtualbox-host.nix"],"default":false,"description":"Whether to install the Oracle Extension Pack for VirtualBox.\n\n<important><para>\n  You must set <literal>nixpkgs.config.allowUnfree = true</literal> in\n  order to use this.  This requires you accept the VirtualBox PUEL.\n</para></important>\n","example":true,"loc":["virtualisation","virtualbox","host","enableExtensionPack"],"readOnly":false,"type":"boolean"},"virtualisation.virtualbox.host.enableHardening":{"declarations":["nixos/modules/virtualisation/virtualbox-host.nix"],"default":true,"description":"Enable hardened VirtualBox, which ensures that only the binaries in the\nsystem path get access to the devices exposed by the kernel modules\ninstead of all users in the vboxusers group.\n\n<important><para>\n  Disabling this can put your system's security at risk, as local users\n  in the vboxusers group can tamper with the VirtualBox device files.\n</para></important>\n","loc":["virtualisation","virtualbox","host","enableHardening"],"readOnly":false,"type":"boolean"},"virtualisation.virtualbox.host.headless":{"declarations":["nixos/modules/virtualisation/virtualbox-host.nix"],"default":false,"description":"Use VirtualBox installation without GUI and Qt dependency. Useful to enable on servers\nand when virtual machines are controlled only via SSH.\n","loc":["virtualisation","virtualbox","host","headless"],"readOnly":false,"type":"boolean"},"virtualisation.virtualbox.host.package":{"declarations":["nixos/modules/virtualisation/virtualbox-host.nix"],"default":"pkgs.virtualbox","description":"Which VirtualBox package to use.\n","loc":["virtualisation","virtualbox","host","package"],"readOnly":false,"type":"package"},"virtualisation.vswitch.enable":{"declarations":["nixos/modules/virtualisation/openvswitch.nix"],"default":false,"description":"Whether to enable Open vSwitch. A configuration daemon (ovs-server)\nwill be started.\n","loc":["virtualisation","vswitch","enable"],"readOnly":false,"type":"boolean"},"virtualisation.vswitch.ipsec":{"declarations":["nixos/modules/virtualisation/openvswitch.nix"],"default":false,"description":"Whether to start racoon service for openvswitch.\n","loc":["virtualisation","vswitch","ipsec"],"readOnly":false,"type":"boolean"},"virtualisation.vswitch.package":{"declarations":["nixos/modules/virtualisation/openvswitch.nix"],"default":"pkgs.openvswitch","description":"Open vSwitch package to use.\n","loc":["virtualisation","vswitch","package"],"readOnly":false,"type":"package"},"virtualisation.vswitch.resetOnStart":{"declarations":["nixos/modules/virtualisation/openvswitch.nix"],"default":false,"description":"Whether to reset the Open vSwitch configuration database to a default\nconfiguration on every start of the systemd <literal>ovsdb.service</literal>.\n","loc":["virtualisation","vswitch","resetOnStart"],"readOnly":false,"type":"boolean"},"virtualisation.xen.bootParams":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":"","description":"Parameters passed to the Xen hypervisor at boot time.\n","loc":["virtualisation","xen","bootParams"],"readOnly":false,"type":"unspecified"},"virtualisation.xen.bridge.address":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":"172.16.0.1","description":"IPv4 address of the bridge.\n","loc":["virtualisation","xen","bridge","address"],"readOnly":false,"type":"string"},"virtualisation.xen.bridge.forwardDns":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":false,"description":"If set to <literal>true</literal>, the DNS queries from the\nhosts connected to the bridge will be forwarded to the DNS\nservers specified in /etc/resolv.conf .\n","loc":["virtualisation","xen","bridge","forwardDns"],"readOnly":false,"type":"unspecified"},"virtualisation.xen.bridge.name":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":"xenbr0","description":"Name of bridge the Xen domUs connect to.\n","loc":["virtualisation","xen","bridge","name"],"readOnly":false,"type":"unspecified"},"virtualisation.xen.bridge.prefixLength":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":16,"description":"Subnet mask of the bridge interface, specified as the number of\nbits in the prefix (<literal>24</literal>).\nA DHCP server will provide IP addresses for the whole, remaining\nsubnet.\n","loc":["virtualisation","xen","bridge","prefixLength"],"readOnly":false,"type":"signed integer"},"virtualisation.xen.domain0MemorySize":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":0,"description":"Amount of memory (in MiB) allocated to Domain 0 on boot.\nIf set to 0, all memory is assigned to Domain 0.\n","example":512,"loc":["virtualisation","xen","domain0MemorySize"],"readOnly":false,"type":"unspecified"},"virtualisation.xen.domains.extraConfig":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":"","description":"Options defined here will override the defaults for xendomains.\nThe default options can be seen in the file included from\n/etc/default/xendomains.\n","loc":["virtualisation","xen","domains","extraConfig"],"readOnly":false,"type":"Concatenated string"},"virtualisation.xen.enable":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":false,"description":"Setting this option enables the Xen hypervisor, a\nvirtualisation technology that allows multiple virtual\nmachines, known as <emphasis>domains</emphasis>, to run\nconcurrently on the physical machine.  NixOS runs as the\nprivileged <emphasis>Domain 0</emphasis>.  This option\nrequires a reboot to take effect.\n","loc":["virtualisation","xen","enable"],"readOnly":false,"type":"boolean"},"virtualisation.xen.package":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":"pkgs.xen","description":"The package used for Xen binary.\n","example":{"_type":"literalExample","text":"pkgs.xen-light"},"loc":["virtualisation","xen","package"],"readOnly":false,"relatedPackages":"<itemizedlist><listitem><para><literal>pkgs.xen (xen-4.8.3)</literal>: Xen hypervisor and related components (vanilla).</para>\n<programlisting>Vanilla version of Xen. Uses forks of Qemu and Seabios bundled\nwith Xen. This gives vanilla experince, but wastes space and\nbuild time: typical NixOS setup that runs lots of VMs will\nbuild three different versions of Qemu when using this (two\nforks and upstream).\n\nIncludes:\n* firmware/etherboot/ipxe.git: Xen's fork of iPXE.\n* firmware/seabios-dir-remote: Xen's fork of Seabios.\n* qemu-xen: Xen's fork of upstream Qemu.\n* qemu-xen-traditional: Xen's fork of upstream Qemu that uses old device model.\n* xen-libhvm-dir-remote: Helper library for reading ACPI and SMBIOS firmware values\nfrom the host system for use with the HVM guest firmware\npass-through feature in Xen.</programlisting></listitem>\n<listitem><para><literal>pkgs.xen-light (xen-4.8.3)</literal>: Xen hypervisor and related components (light).</para>\n<programlisting>Slimmed-down version of Xen without `qemu-traditional` (you\ndon't need it if you don't know what it is). Use with\n`qemu_xen-light` from nixpkgs.\n\nIncludes:\n* firmware/etherboot/ipxe.git: Xen's fork of iPXE.\n* xen-libhvm-dir-remote: Helper library for reading ACPI and SMBIOS firmware values\nfrom the host system for use with the HVM guest firmware\npass-through feature in Xen.</programlisting></listitem></itemizedlist>","type":"package"},"virtualisation.xen.package-qemu":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":"pkgs.xen","description":"The package with qemu binaries for dom0 qemu and xendomains.\n","example":{"_type":"literalExample","text":"pkgs.qemu_xen-light"},"loc":["virtualisation","xen","package-qemu"],"readOnly":false,"relatedPackages":"<itemizedlist><listitem><para><literal>pkgs.xen (xen-4.8.3)</literal>: Xen hypervisor and related components (vanilla).</para>\n<programlisting>Vanilla version of Xen. Uses forks of Qemu and Seabios bundled\nwith Xen. This gives vanilla experince, but wastes space and\nbuild time: typical NixOS setup that runs lots of VMs will\nbuild three different versions of Qemu when using this (two\nforks and upstream).\n\nIncludes:\n* firmware/etherboot/ipxe.git: Xen's fork of iPXE.\n* firmware/seabios-dir-remote: Xen's fork of Seabios.\n* qemu-xen: Xen's fork of upstream Qemu.\n* qemu-xen-traditional: Xen's fork of upstream Qemu that uses old device model.\n* xen-libhvm-dir-remote: Helper library for reading ACPI and SMBIOS firmware values\nfrom the host system for use with the HVM guest firmware\npass-through feature in Xen.</programlisting></listitem>\n<listitem><para><literal>pkgs.qemu_xen-light (qemu-xen-host-cpu-only-3.0.0)</literal>: A generic and open source machine emulator and virtualizer.</para>\n<para>For use with pkgs.xen-light.</para></listitem></itemizedlist>","type":"package"},"virtualisation.xen.stored":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"description":"Xen Store daemon to use. Defaults to oxenstored of the xen package.\n","loc":["virtualisation","xen","stored"],"readOnly":false,"type":"path"},"virtualisation.xen.trace":{"declarations":["nixos/modules/virtualisation/xen-dom0.nix"],"default":false,"description":"Enable Xen tracing.\n","loc":["virtualisation","xen","trace"],"readOnly":false,"type":"unspecified"},"xdg.autostart.enable":{"declarations":["nixos/modules/config/xdg/autostart.nix"],"default":true,"description":"Whether to install files to support the \n<link xlink:href=\"https://specifications.freedesktop.org/autostart-spec/autostart-spec-latest.html\">XDG Autostart specification</link>.\n","loc":["xdg","autostart","enable"],"readOnly":false,"type":"boolean"},"xdg.icons.enable":{"declarations":["nixos/modules/config/xdg/icons.nix"],"default":true,"description":"Whether to install files to support the \n<link xlink:href=\"https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html\">XDG Icon Theme specification</link>.\n","loc":["xdg","icons","enable"],"readOnly":false,"type":"boolean"},"xdg.menus.enable":{"declarations":["nixos/modules/config/xdg/menus.nix"],"default":true,"description":"Whether to install files to support the \n<link xlink:href=\"https://specifications.freedesktop.org/menu-spec/menu-spec-latest.html\">XDG Desktop Menu specification</link>.\n","loc":["xdg","menus","enable"],"readOnly":false,"type":"boolean"},"xdg.mime.enable":{"declarations":["nixos/modules/config/xdg/mime.nix"],"default":true,"description":"Whether to install files to support the\n<link xlink:href=\"https://specifications.freedesktop.org/shared-mime-info-spec/shared-mime-info-spec-latest.html\">XDG Shared MIME-info specification</link> and the\n<link xlink:href=\"https://specifications.freedesktop.org/mime-apps-spec/mime-apps-spec-latest.html\">XDG MIME Applications specification</link>.\n","loc":["xdg","mime","enable"],"readOnly":false,"type":"boolean"},"zramSwap.enable":{"declarations":["nixos/modules/config/zram.nix"],"default":false,"description":"Enable in-memory compressed swap space provided by the zram kernel\nmodule.\nSee https://www.kernel.org/doc/Documentation/blockdev/zram.txt\n","loc":["zramSwap","enable"],"readOnly":false,"type":"boolean"},"zramSwap.memoryPercent":{"declarations":["nixos/modules/config/zram.nix"],"default":50,"description":"Maximum amount of memory that can be used by the zram swap devices\n(as a percentage of your total memory). Defaults to 1/2 of your total\nRAM.\n","loc":["zramSwap","memoryPercent"],"readOnly":false,"type":"signed integer"},"zramSwap.numDevices":{"declarations":["nixos/modules/config/zram.nix"],"default":1,"description":"Number of zram swap devices to create.\n","loc":["zramSwap","numDevices"],"readOnly":false,"type":"signed integer"},"zramSwap.priority":{"declarations":["nixos/modules/config/zram.nix"],"default":5,"description":"Priority of the zram swap devices. It should be a number higher than\nthe priority of your disk-based swap devices (so that the system will\nfill the zram swap devices before falling back to disk swap).\n","loc":["zramSwap","priority"],"readOnly":false,"type":"signed integer"}}